
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c74  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006e60  08006e60  00016e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb8  08006fb8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08006fc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000110  080070cc  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080070cc  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd54  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d5  00000000  00000000  0002de89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00030560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00031058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fcb6  00000000  00000000  00031a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e44a  00000000  00000000  000516f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b059e  00000000  00000000  0005fb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001100de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003728  00000000  00000000  00110134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000110 	.word	0x20000110
 8000204:	00000000 	.word	0x00000000
 8000208:	08006e44 	.word	0x08006e44

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000114 	.word	0x20000114
 8000224:	08006e44 	.word	0x08006e44

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_uldivmod>:
 800100c:	b953      	cbnz	r3, 8001024 <__aeabi_uldivmod+0x18>
 800100e:	b94a      	cbnz	r2, 8001024 <__aeabi_uldivmod+0x18>
 8001010:	2900      	cmp	r1, #0
 8001012:	bf08      	it	eq
 8001014:	2800      	cmpeq	r0, #0
 8001016:	bf1c      	itt	ne
 8001018:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800101c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 b98c 	b.w	800133c <__aeabi_idiv0>
 8001024:	f1ad 0c08 	sub.w	ip, sp, #8
 8001028:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800102c:	f000 f824 	bl	8001078 <__udivmoddi4>
 8001030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr

0800103c <__aeabi_d2ulz>:
 800103c:	b5d0      	push	{r4, r6, r7, lr}
 800103e:	2200      	movs	r2, #0
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__aeabi_d2ulz+0x34>)
 8001042:	4606      	mov	r6, r0
 8001044:	460f      	mov	r7, r1
 8001046:	f7ff faab 	bl	80005a0 <__aeabi_dmul>
 800104a:	f000 f979 	bl	8001340 <__aeabi_d2uiz>
 800104e:	4604      	mov	r4, r0
 8001050:	f7ff fa2c 	bl	80004ac <__aeabi_ui2d>
 8001054:	2200      	movs	r2, #0
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <__aeabi_d2ulz+0x38>)
 8001058:	f7ff faa2 	bl	80005a0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4630      	mov	r0, r6
 8001062:	4639      	mov	r1, r7
 8001064:	f7ff f8e4 	bl	8000230 <__aeabi_dsub>
 8001068:	f000 f96a 	bl	8001340 <__aeabi_d2uiz>
 800106c:	4621      	mov	r1, r4
 800106e:	bdd0      	pop	{r4, r6, r7, pc}
 8001070:	3df00000 	.word	0x3df00000
 8001074:	41f00000 	.word	0x41f00000

08001078 <__udivmoddi4>:
 8001078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	9e08      	ldr	r6, [sp, #32]
 800107e:	460d      	mov	r5, r1
 8001080:	4604      	mov	r4, r0
 8001082:	468e      	mov	lr, r1
 8001084:	2b00      	cmp	r3, #0
 8001086:	f040 8083 	bne.w	8001190 <__udivmoddi4+0x118>
 800108a:	428a      	cmp	r2, r1
 800108c:	4617      	mov	r7, r2
 800108e:	d947      	bls.n	8001120 <__udivmoddi4+0xa8>
 8001090:	fab2 f382 	clz	r3, r2
 8001094:	b14b      	cbz	r3, 80010aa <__udivmoddi4+0x32>
 8001096:	f1c3 0120 	rsb	r1, r3, #32
 800109a:	fa05 fe03 	lsl.w	lr, r5, r3
 800109e:	fa20 f101 	lsr.w	r1, r0, r1
 80010a2:	409f      	lsls	r7, r3
 80010a4:	ea41 0e0e 	orr.w	lr, r1, lr
 80010a8:	409c      	lsls	r4, r3
 80010aa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010ae:	fbbe fcf8 	udiv	ip, lr, r8
 80010b2:	fa1f f987 	uxth.w	r9, r7
 80010b6:	fb08 e21c 	mls	r2, r8, ip, lr
 80010ba:	fb0c f009 	mul.w	r0, ip, r9
 80010be:	0c21      	lsrs	r1, r4, #16
 80010c0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80010c4:	4290      	cmp	r0, r2
 80010c6:	d90a      	bls.n	80010de <__udivmoddi4+0x66>
 80010c8:	18ba      	adds	r2, r7, r2
 80010ca:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80010ce:	f080 8118 	bcs.w	8001302 <__udivmoddi4+0x28a>
 80010d2:	4290      	cmp	r0, r2
 80010d4:	f240 8115 	bls.w	8001302 <__udivmoddi4+0x28a>
 80010d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010dc:	443a      	add	r2, r7
 80010de:	1a12      	subs	r2, r2, r0
 80010e0:	fbb2 f0f8 	udiv	r0, r2, r8
 80010e4:	fb08 2210 	mls	r2, r8, r0, r2
 80010e8:	fb00 f109 	mul.w	r1, r0, r9
 80010ec:	b2a4      	uxth	r4, r4
 80010ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010f2:	42a1      	cmp	r1, r4
 80010f4:	d909      	bls.n	800110a <__udivmoddi4+0x92>
 80010f6:	193c      	adds	r4, r7, r4
 80010f8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010fc:	f080 8103 	bcs.w	8001306 <__udivmoddi4+0x28e>
 8001100:	42a1      	cmp	r1, r4
 8001102:	f240 8100 	bls.w	8001306 <__udivmoddi4+0x28e>
 8001106:	3802      	subs	r0, #2
 8001108:	443c      	add	r4, r7
 800110a:	1a64      	subs	r4, r4, r1
 800110c:	2100      	movs	r1, #0
 800110e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001112:	b11e      	cbz	r6, 800111c <__udivmoddi4+0xa4>
 8001114:	2200      	movs	r2, #0
 8001116:	40dc      	lsrs	r4, r3
 8001118:	e9c6 4200 	strd	r4, r2, [r6]
 800111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001120:	b902      	cbnz	r2, 8001124 <__udivmoddi4+0xac>
 8001122:	deff      	udf	#255	; 0xff
 8001124:	fab2 f382 	clz	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d14f      	bne.n	80011cc <__udivmoddi4+0x154>
 800112c:	1a8d      	subs	r5, r1, r2
 800112e:	2101      	movs	r1, #1
 8001130:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001134:	fa1f f882 	uxth.w	r8, r2
 8001138:	fbb5 fcfe 	udiv	ip, r5, lr
 800113c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001140:	fb08 f00c 	mul.w	r0, r8, ip
 8001144:	0c22      	lsrs	r2, r4, #16
 8001146:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800114a:	42a8      	cmp	r0, r5
 800114c:	d907      	bls.n	800115e <__udivmoddi4+0xe6>
 800114e:	197d      	adds	r5, r7, r5
 8001150:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001154:	d202      	bcs.n	800115c <__udivmoddi4+0xe4>
 8001156:	42a8      	cmp	r0, r5
 8001158:	f200 80e9 	bhi.w	800132e <__udivmoddi4+0x2b6>
 800115c:	4694      	mov	ip, r2
 800115e:	1a2d      	subs	r5, r5, r0
 8001160:	fbb5 f0fe 	udiv	r0, r5, lr
 8001164:	fb0e 5510 	mls	r5, lr, r0, r5
 8001168:	fb08 f800 	mul.w	r8, r8, r0
 800116c:	b2a4      	uxth	r4, r4
 800116e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001172:	45a0      	cmp	r8, r4
 8001174:	d907      	bls.n	8001186 <__udivmoddi4+0x10e>
 8001176:	193c      	adds	r4, r7, r4
 8001178:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800117c:	d202      	bcs.n	8001184 <__udivmoddi4+0x10c>
 800117e:	45a0      	cmp	r8, r4
 8001180:	f200 80d9 	bhi.w	8001336 <__udivmoddi4+0x2be>
 8001184:	4610      	mov	r0, r2
 8001186:	eba4 0408 	sub.w	r4, r4, r8
 800118a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800118e:	e7c0      	b.n	8001112 <__udivmoddi4+0x9a>
 8001190:	428b      	cmp	r3, r1
 8001192:	d908      	bls.n	80011a6 <__udivmoddi4+0x12e>
 8001194:	2e00      	cmp	r6, #0
 8001196:	f000 80b1 	beq.w	80012fc <__udivmoddi4+0x284>
 800119a:	2100      	movs	r1, #0
 800119c:	e9c6 0500 	strd	r0, r5, [r6]
 80011a0:	4608      	mov	r0, r1
 80011a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a6:	fab3 f183 	clz	r1, r3
 80011aa:	2900      	cmp	r1, #0
 80011ac:	d14b      	bne.n	8001246 <__udivmoddi4+0x1ce>
 80011ae:	42ab      	cmp	r3, r5
 80011b0:	d302      	bcc.n	80011b8 <__udivmoddi4+0x140>
 80011b2:	4282      	cmp	r2, r0
 80011b4:	f200 80b9 	bhi.w	800132a <__udivmoddi4+0x2b2>
 80011b8:	1a84      	subs	r4, r0, r2
 80011ba:	eb65 0303 	sbc.w	r3, r5, r3
 80011be:	2001      	movs	r0, #1
 80011c0:	469e      	mov	lr, r3
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d0aa      	beq.n	800111c <__udivmoddi4+0xa4>
 80011c6:	e9c6 4e00 	strd	r4, lr, [r6]
 80011ca:	e7a7      	b.n	800111c <__udivmoddi4+0xa4>
 80011cc:	409f      	lsls	r7, r3
 80011ce:	f1c3 0220 	rsb	r2, r3, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80011dc:	fa1f f887 	uxth.w	r8, r7
 80011e0:	fb0e 1110 	mls	r1, lr, r0, r1
 80011e4:	fa24 f202 	lsr.w	r2, r4, r2
 80011e8:	409d      	lsls	r5, r3
 80011ea:	fb00 fc08 	mul.w	ip, r0, r8
 80011ee:	432a      	orrs	r2, r5
 80011f0:	0c15      	lsrs	r5, r2, #16
 80011f2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011f6:	45ac      	cmp	ip, r5
 80011f8:	fa04 f403 	lsl.w	r4, r4, r3
 80011fc:	d909      	bls.n	8001212 <__udivmoddi4+0x19a>
 80011fe:	197d      	adds	r5, r7, r5
 8001200:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001204:	f080 808f 	bcs.w	8001326 <__udivmoddi4+0x2ae>
 8001208:	45ac      	cmp	ip, r5
 800120a:	f240 808c 	bls.w	8001326 <__udivmoddi4+0x2ae>
 800120e:	3802      	subs	r0, #2
 8001210:	443d      	add	r5, r7
 8001212:	eba5 050c 	sub.w	r5, r5, ip
 8001216:	fbb5 f1fe 	udiv	r1, r5, lr
 800121a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800121e:	fb01 f908 	mul.w	r9, r1, r8
 8001222:	b295      	uxth	r5, r2
 8001224:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001228:	45a9      	cmp	r9, r5
 800122a:	d907      	bls.n	800123c <__udivmoddi4+0x1c4>
 800122c:	197d      	adds	r5, r7, r5
 800122e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8001232:	d274      	bcs.n	800131e <__udivmoddi4+0x2a6>
 8001234:	45a9      	cmp	r9, r5
 8001236:	d972      	bls.n	800131e <__udivmoddi4+0x2a6>
 8001238:	3902      	subs	r1, #2
 800123a:	443d      	add	r5, r7
 800123c:	eba5 0509 	sub.w	r5, r5, r9
 8001240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001244:	e778      	b.n	8001138 <__udivmoddi4+0xc0>
 8001246:	f1c1 0720 	rsb	r7, r1, #32
 800124a:	408b      	lsls	r3, r1
 800124c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001250:	ea4c 0c03 	orr.w	ip, ip, r3
 8001254:	fa25 f407 	lsr.w	r4, r5, r7
 8001258:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800125c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001260:	fa1f f88c 	uxth.w	r8, ip
 8001264:	fb0e 4419 	mls	r4, lr, r9, r4
 8001268:	fa20 f307 	lsr.w	r3, r0, r7
 800126c:	fb09 fa08 	mul.w	sl, r9, r8
 8001270:	408d      	lsls	r5, r1
 8001272:	431d      	orrs	r5, r3
 8001274:	0c2b      	lsrs	r3, r5, #16
 8001276:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800127a:	45a2      	cmp	sl, r4
 800127c:	fa02 f201 	lsl.w	r2, r2, r1
 8001280:	fa00 f301 	lsl.w	r3, r0, r1
 8001284:	d909      	bls.n	800129a <__udivmoddi4+0x222>
 8001286:	eb1c 0404 	adds.w	r4, ip, r4
 800128a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800128e:	d248      	bcs.n	8001322 <__udivmoddi4+0x2aa>
 8001290:	45a2      	cmp	sl, r4
 8001292:	d946      	bls.n	8001322 <__udivmoddi4+0x2aa>
 8001294:	f1a9 0902 	sub.w	r9, r9, #2
 8001298:	4464      	add	r4, ip
 800129a:	eba4 040a 	sub.w	r4, r4, sl
 800129e:	fbb4 f0fe 	udiv	r0, r4, lr
 80012a2:	fb0e 4410 	mls	r4, lr, r0, r4
 80012a6:	fb00 fa08 	mul.w	sl, r0, r8
 80012aa:	b2ad      	uxth	r5, r5
 80012ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012b0:	45a2      	cmp	sl, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x24e>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012bc:	d22d      	bcs.n	800131a <__udivmoddi4+0x2a2>
 80012be:	45a2      	cmp	sl, r4
 80012c0:	d92b      	bls.n	800131a <__udivmoddi4+0x2a2>
 80012c2:	3802      	subs	r0, #2
 80012c4:	4464      	add	r4, ip
 80012c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012ca:	fba0 8902 	umull	r8, r9, r0, r2
 80012ce:	eba4 040a 	sub.w	r4, r4, sl
 80012d2:	454c      	cmp	r4, r9
 80012d4:	46c6      	mov	lr, r8
 80012d6:	464d      	mov	r5, r9
 80012d8:	d319      	bcc.n	800130e <__udivmoddi4+0x296>
 80012da:	d016      	beq.n	800130a <__udivmoddi4+0x292>
 80012dc:	b15e      	cbz	r6, 80012f6 <__udivmoddi4+0x27e>
 80012de:	ebb3 020e 	subs.w	r2, r3, lr
 80012e2:	eb64 0405 	sbc.w	r4, r4, r5
 80012e6:	fa04 f707 	lsl.w	r7, r4, r7
 80012ea:	fa22 f301 	lsr.w	r3, r2, r1
 80012ee:	431f      	orrs	r7, r3
 80012f0:	40cc      	lsrs	r4, r1
 80012f2:	e9c6 7400 	strd	r7, r4, [r6]
 80012f6:	2100      	movs	r1, #0
 80012f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fc:	4631      	mov	r1, r6
 80012fe:	4630      	mov	r0, r6
 8001300:	e70c      	b.n	800111c <__udivmoddi4+0xa4>
 8001302:	468c      	mov	ip, r1
 8001304:	e6eb      	b.n	80010de <__udivmoddi4+0x66>
 8001306:	4610      	mov	r0, r2
 8001308:	e6ff      	b.n	800110a <__udivmoddi4+0x92>
 800130a:	4543      	cmp	r3, r8
 800130c:	d2e6      	bcs.n	80012dc <__udivmoddi4+0x264>
 800130e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001312:	eb69 050c 	sbc.w	r5, r9, ip
 8001316:	3801      	subs	r0, #1
 8001318:	e7e0      	b.n	80012dc <__udivmoddi4+0x264>
 800131a:	4628      	mov	r0, r5
 800131c:	e7d3      	b.n	80012c6 <__udivmoddi4+0x24e>
 800131e:	4611      	mov	r1, r2
 8001320:	e78c      	b.n	800123c <__udivmoddi4+0x1c4>
 8001322:	4681      	mov	r9, r0
 8001324:	e7b9      	b.n	800129a <__udivmoddi4+0x222>
 8001326:	4608      	mov	r0, r1
 8001328:	e773      	b.n	8001212 <__udivmoddi4+0x19a>
 800132a:	4608      	mov	r0, r1
 800132c:	e749      	b.n	80011c2 <__udivmoddi4+0x14a>
 800132e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001332:	443d      	add	r5, r7
 8001334:	e713      	b.n	800115e <__udivmoddi4+0xe6>
 8001336:	3802      	subs	r0, #2
 8001338:	443c      	add	r4, r7
 800133a:	e724      	b.n	8001186 <__udivmoddi4+0x10e>

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <__aeabi_d2uiz>:
 8001340:	004a      	lsls	r2, r1, #1
 8001342:	d211      	bcs.n	8001368 <__aeabi_d2uiz+0x28>
 8001344:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001348:	d211      	bcs.n	800136e <__aeabi_d2uiz+0x2e>
 800134a:	d50d      	bpl.n	8001368 <__aeabi_d2uiz+0x28>
 800134c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001350:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001354:	d40e      	bmi.n	8001374 <__aeabi_d2uiz+0x34>
 8001356:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800135a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800135e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001362:	fa23 f002 	lsr.w	r0, r3, r2
 8001366:	4770      	bx	lr
 8001368:	f04f 0000 	mov.w	r0, #0
 800136c:	4770      	bx	lr
 800136e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001372:	d102      	bne.n	800137a <__aeabi_d2uiz+0x3a>
 8001374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001378:	4770      	bx	lr
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	4770      	bx	lr

08001380 <BUTTON_STATE>:
#include "stm32f1xx_hal_gpio.h"
#include "button.h"

enum BUTTON num;

uint8_t BUTTON_STATE(uint8_t num) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d112      	bne.n	80013b6 <BUTTON_STATE+0x36>

	case CALIBRATE_MPU_BUTTON:

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001390:	2101      	movs	r1, #1
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <BUTTON_STATE+0x40>)
 8001394:	f002 fd78 	bl	8003e88 <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <BUTTON_STATE+0x22>
			return 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	e009      	b.n	80013b6 <BUTTON_STATE+0x36>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80013a2:	2101      	movs	r1, #1
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <BUTTON_STATE+0x40>)
 80013a6:	f002 fd6f 	bl	8003e88 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <BUTTON_STATE+0x34>
			return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e000      	b.n	80013b6 <BUTTON_STATE+0x36>
		}
		break;
 80013b4:	bf00      	nop
	}
};
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40011000 	.word	0x40011000

080013c4 <MX_CAN1_Init>:

CAN_FilterTypeDef sFilterConfig;


/* CAN1 init function */
void MX_CAN1_Init(void) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013ca:	4a3f      	ldr	r2, [pc, #252]	; (80014c8 <MX_CAN1_Init+0x104>)
 80013cc:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 1;
 80013ce:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013d4:	4b3b      	ldr	r3, [pc, #236]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013da:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013e6:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013ea:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80013ee:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <MX_CAN1_Init+0x100>)
 80013fe:	2200      	movs	r2, #0
 8001400:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <MX_CAN1_Init+0x100>)
 8001404:	2200      	movs	r2, #0
 8001406:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <MX_CAN1_Init+0x100>)
 800140a:	2200      	movs	r2, #0
 800140c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <MX_CAN1_Init+0x100>)
 8001410:	2201      	movs	r2, #1
 8001412:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001414:	482b      	ldr	r0, [pc, #172]	; (80014c4 <MX_CAN1_Init+0x100>)
 8001416:	f001 fa51 	bl	80028bc <HAL_CAN_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_CAN1_Init+0x60>
		Error_Handler();
 8001420:	f000 fd0a 	bl	8001e38 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	sFilterConfig.FilterBank = 0;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_CAN1_Init+0x108>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_CAN1_Init+0x108>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_CAN1_Init+0x108>)
 8001432:	2201      	movs	r2, #1
 8001434:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_CAN1_Init+0x108>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <MX_CAN1_Init+0x108>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <MX_CAN1_Init+0x108>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_CAN1_Init+0x108>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800144e:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <MX_CAN1_Init+0x108>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_CAN1_Init+0x108>)
 8001456:	2201      	movs	r2, #1
 8001458:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_CAN1_Init+0x108>)
 800145c:	220e      	movs	r2, #14
 800145e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001460:	491a      	ldr	r1, [pc, #104]	; (80014cc <MX_CAN1_Init+0x108>)
 8001462:	4818      	ldr	r0, [pc, #96]	; (80014c4 <MX_CAN1_Init+0x100>)
 8001464:	f001 fb26 	bl	8002ab4 <HAL_CAN_ConfigFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_CAN1_Init+0xae>
		Error_Handler();
 800146e:	f000 fce3 	bl	8001e38 <Error_Handler>
	}

	sFilterConfig.FilterBank = 14;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <MX_CAN1_Init+0x108>)
 8001474:	220e      	movs	r2, #14
 8001476:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_CAN1_Init+0x108>)
 800147a:	2201      	movs	r2, #1
 800147c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <MX_CAN1_Init+0x108>)
 8001480:	2201      	movs	r2, #1
 8001482:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_CAN1_Init+0x108>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x000;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_CAN1_Init+0x108>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_CAN1_Init+0x108>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_CAN1_Init+0x108>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_CAN1_Init+0x108>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <MX_CAN1_Init+0x108>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_CAN1_Init+0x108>)
 80014aa:	220e      	movs	r2, #14
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80014ae:	4907      	ldr	r1, [pc, #28]	; (80014cc <MX_CAN1_Init+0x108>)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_CAN1_Init+0x100>)
 80014b2:	f001 faff 	bl	8002ab4 <HAL_CAN_ConfigFilter>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_CAN1_Init+0xfc>
		Error_Handler();
 80014bc:	f000 fcbc 	bl	8001e38 <Error_Handler>
	}
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000018c 	.word	0x2000018c
 80014c8:	40006400 	.word	0x40006400
 80014cc:	2000013c 	.word	0x2000013c

080014d0 <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
/* USER CODE END CAN2_Init 0 */

/* USER CODE BEGIN CAN2_Init 1 */

/* USER CODE END CAN2_Init 1 */
hcan2.Instance = CAN2;
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <MX_CAN2_Init+0x64>)
 80014d6:	4a18      	ldr	r2, [pc, #96]	; (8001538 <MX_CAN2_Init+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
hcan2.Init.Prescaler = 32;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_CAN2_Init+0x64>)
 80014dc:	2220      	movs	r2, #32
 80014de:	605a      	str	r2, [r3, #4]
hcan2.Init.Mode = CAN_MODE_NORMAL;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_CAN2_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_CAN2_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_CAN2_Init+0x64>)
 80014ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80014f2:	611a      	str	r2, [r3, #16]
hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_CAN2_Init+0x64>)
 80014f6:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80014fa:	615a      	str	r2, [r3, #20]
hcan2.Init.TimeTriggeredMode = DISABLE;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_CAN2_Init+0x64>)
 80014fe:	2200      	movs	r2, #0
 8001500:	761a      	strb	r2, [r3, #24]
hcan2.Init.AutoBusOff = ENABLE;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_CAN2_Init+0x64>)
 8001504:	2201      	movs	r2, #1
 8001506:	765a      	strb	r2, [r3, #25]
hcan2.Init.AutoWakeUp = DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_CAN2_Init+0x64>)
 800150a:	2200      	movs	r2, #0
 800150c:	769a      	strb	r2, [r3, #26]
hcan2.Init.AutoRetransmission = DISABLE;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_CAN2_Init+0x64>)
 8001510:	2200      	movs	r2, #0
 8001512:	76da      	strb	r2, [r3, #27]
hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_CAN2_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	771a      	strb	r2, [r3, #28]
hcan2.Init.TransmitFifoPriority = ENABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_CAN2_Init+0x64>)
 800151c:	2201      	movs	r2, #1
 800151e:	775a      	strb	r2, [r3, #29]
if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_CAN2_Init+0x64>)
 8001522:	f001 f9cb 	bl	80028bc <HAL_CAN_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_CAN2_Init+0x60>
	Error_Handler();
 800152c:	f000 fc84 	bl	8001e38 <Error_Handler>
}
/* USER CODE BEGIN CAN2_Init 2 */

/* USER CODE END CAN2_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000164 	.word	0x20000164
 8001538:	40006800 	.word	0x40006800

0800153c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
if (canHandle->Instance == CAN1) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a5d      	ldr	r2, [pc, #372]	; (80016cc <HAL_CAN_MspInit+0x190>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d15b      	bne.n	8001614 <HAL_CAN_MspInit+0xd8>
	/* USER CODE BEGIN CAN1_MspInit 0 */

	/* USER CODE END CAN1_MspInit 0 */
	/* CAN1 clock enable */
	HAL_RCC_CAN1_CLK_ENABLED++;
 800155c:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_CAN_MspInit+0x194>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <HAL_CAN_MspInit+0x194>)
 8001564:	6013      	str	r3, [r2, #0]
	if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8001566:	4b5a      	ldr	r3, [pc, #360]	; (80016d0 <HAL_CAN_MspInit+0x194>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d10b      	bne.n	8001586 <HAL_CAN_MspInit+0x4a>
		__HAL_RCC_CAN1_CLK_ENABLE();
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
	}

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6193      	str	r3, [r2, #24]
 8001592:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
	/**CAN1 GPIO Configuration
	 PA11     ------> CAN1_RX
	 PA12     ------> CAN1_TX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800159e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4849      	ldr	r0, [pc, #292]	; (80016d8 <HAL_CAN_MspInit+0x19c>)
 80015b4:	f002 fae4 	bl	8003b80 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4842      	ldr	r0, [pc, #264]	; (80016d8 <HAL_CAN_MspInit+0x19c>)
 80015ce:	f002 fad7 	bl	8003b80 <HAL_GPIO_Init>

	/* CAN1 interrupt Init */
	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2013      	movs	r0, #19
 80015d8:	f002 f89b 	bl	8003712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80015dc:	2013      	movs	r0, #19
 80015de:	f002 f8b4 	bl	800374a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2014      	movs	r0, #20
 80015e8:	f002 f893 	bl	8003712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015ec:	2014      	movs	r0, #20
 80015ee:	f002 f8ac 	bl	800374a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2015      	movs	r0, #21
 80015f8:	f002 f88b 	bl	8003712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80015fc:	2015      	movs	r0, #21
 80015fe:	f002 f8a4 	bl	800374a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2016      	movs	r0, #22
 8001608:	f002 f883 	bl	8003712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800160c:	2016      	movs	r0, #22
 800160e:	f002 f89c 	bl	800374a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN CAN2_MspInit 1 */

	/* USER CODE END CAN2_MspInit 1 */
}
}
 8001612:	e057      	b.n	80016c4 <HAL_CAN_MspInit+0x188>
} else if (canHandle->Instance == CAN2) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a30      	ldr	r2, [pc, #192]	; (80016dc <HAL_CAN_MspInit+0x1a0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d152      	bne.n	80016c4 <HAL_CAN_MspInit+0x188>
	__HAL_RCC_CAN2_CLK_ENABLE();
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001624:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
	HAL_RCC_CAN1_CLK_ENABLED++;
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_CAN_MspInit+0x194>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4a24      	ldr	r2, [pc, #144]	; (80016d0 <HAL_CAN_MspInit+0x194>)
 800163e:	6013      	str	r3, [r2, #0]
	if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_CAN_MspInit+0x194>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d10b      	bne.n	8001660 <HAL_CAN_MspInit+0x124>
		__HAL_RCC_CAN1_CLK_ENABLE();
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 800164e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001652:	61d3      	str	r3, [r2, #28]
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_CAN_MspInit+0x198>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001678:	2320      	movs	r3, #32
 800167a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4815      	ldr	r0, [pc, #84]	; (80016e0 <HAL_CAN_MspInit+0x1a4>)
 800168c:	f002 fa78 	bl	8003b80 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001690:	2340      	movs	r3, #64	; 0x40
 8001692:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	480f      	ldr	r0, [pc, #60]	; (80016e0 <HAL_CAN_MspInit+0x1a4>)
 80016a4:	f002 fa6c 	bl	8003b80 <HAL_GPIO_Init>
	__HAL_AFIO_REMAP_CAN2_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_CAN_MspInit+0x1a8>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_CAN_MspInit+0x1a8>)
 80016c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c2:	6053      	str	r3, [r2, #4]
}
 80016c4:	bf00      	nop
 80016c6:	3730      	adds	r7, #48	; 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40006400 	.word	0x40006400
 80016d0:	2000012c 	.word	0x2000012c
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010800 	.word	0x40010800
 80016dc:	40006800 	.word	0x40006800
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40010000 	.word	0x40010000

080016e8 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_GPIO_Init+0x80>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <MX_GPIO_Init+0x80>)
 8001702:	f043 0320 	orr.w	r3, r3, #32
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <MX_GPIO_Init+0x80>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_GPIO_Init+0x80>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_GPIO_Init+0x80>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_GPIO_Init+0x80>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_GPIO_Init+0x80>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <MX_GPIO_Init+0x80>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_GPIO_Init+0x80>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001748:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_GPIO_Init+0x84>)
 800175a:	f002 fa11 	bl	8003b80 <HAL_GPIO_Init>

}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40010800 	.word	0x40010800

08001770 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001776:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <MX_I2C1_Init+0x54>)
 8001778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_I2C1_Init+0x50>)
 800177c:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_I2C1_Init+0x58>)
 800177e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_I2C1_Init+0x50>)
 800178e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_I2C1_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_I2C1_Init+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_I2C1_Init+0x50>)
 80017ae:	f002 fb83 	bl	8003eb8 <HAL_I2C_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017b8:	f000 fb3e 	bl	8001e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200001b4 	.word	0x200001b4
 80017c4:	40005400 	.word	0x40005400
 80017c8:	00061a80 	.word	0x00061a80

080017cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_I2C_MspInit+0x90>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d132      	bne.n	8001852 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_I2C_MspInit+0x94>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <HAL_I2C_MspInit+0x94>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_I2C_MspInit+0x94>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001804:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180a:	2312      	movs	r3, #18
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4812      	ldr	r0, [pc, #72]	; (8001864 <HAL_I2C_MspInit+0x98>)
 800181a:	f002 f9b1 	bl	8003b80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_I2C_MspInit+0x9c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <HAL_I2C_MspInit+0x9c>)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_I2C_MspInit+0x94>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_I2C_MspInit+0x94>)
 8001840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001844:	61d3      	str	r3, [r2, #28]
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_I2C_MspInit+0x94>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40005400 	.word	0x40005400
 8001860:	40021000 	.word	0x40021000
 8001864:	40010c00 	.word	0x40010c00
 8001868:	40010000 	.word	0x40010000

0800186c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001874:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001878:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	d013      	beq.n	80018ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001884:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001888:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800188c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001894:	e000      	b.n	8001898 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001896:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001898:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f9      	beq.n	8001896 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80018a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <saveXToFlash>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint32_t address);
void writeFlash(uint32_t address, double data);

void saveXToFlash(double x) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	e9c7 0100 	strd	r0, r1, [r7]
	writeFlash(xAddress, x);
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <saveXToFlash+0x20>)
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ca:	4608      	mov	r0, r1
 80018cc:	f000 f834 	bl	8001938 <writeFlash>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000000 	.word	0x20000000

080018dc <saveYToFlash>:

void saveYToFlash(double y) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	e9c7 0100 	strd	r0, r1, [r7]
	writeFlash(yAddress, y);
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <saveYToFlash+0x20>)
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018ee:	4608      	mov	r0, r1
 80018f0:	f000 f822 	bl	8001938 <writeFlash>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000004 	.word	0x20000004

08001900 <readXFromFlash>:

double readXFromFlash() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	return readFlash(xAddress);
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <readXFromFlash+0x18>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f835 	bl	8001978 <readFlash>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
}
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000

0800191c <readYFromFlash>:

double readYFromFlash() {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	return readFlash(yAddress);
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <readYFromFlash+0x18>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f827 	bl	8001978 <readFlash>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
}
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000004 	.word	0x20000004

08001938 <writeFlash>:

void writeFlash(uint32_t address, double data) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_Unlock();
 8001944:	f001 ff8c 	bl	8003860 <HAL_FLASH_Unlock>

	uint32_t pageError = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
	HAL_FLASHEx_Erase(address, pageError);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f002 f86c 	bl	8003a30 <HAL_FLASHEx_Erase>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800195c:	f7ff fb6e 	bl	800103c <__aeabi_d2ulz>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	2003      	movs	r0, #3
 8001968:	f001 ff0a 	bl	8003780 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 800196c:	f001 ff9e 	bl	80038ac <HAL_FLASH_Lock>
}
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <readFlash>:

double readFlash(uint32_t address) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	return *(__IO uint32_t*) address;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fd91 	bl	80004ac <__aeabi_ui2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
}
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_write>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e009      	b.n	80019c2 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	60ba      	str	r2, [r7, #8]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff58 	bl	800186c <ITM_SendChar>
	for (i = 0; i < len; i++)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dbf1      	blt.n	80019ae <_write+0x16>
	return len;
 80019ca:	687b      	ldr	r3, [r7, #4]

}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <main>:

int main(void) {
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0

	HAL_Init();
 80019da:	f000 fee9 	bl	80027b0 <HAL_Init>

	SystemClock_Config();
 80019de:	f000 f8d7 	bl	8001b90 <SystemClock_Config>

	MX_GPIO_Init();
 80019e2:	f7ff fe81 	bl	80016e8 <MX_GPIO_Init>
	MX_CAN1_Init();
 80019e6:	f7ff fced 	bl	80013c4 <MX_CAN1_Init>
	MX_CAN2_Init();
 80019ea:	f7ff fd71 	bl	80014d0 <MX_CAN2_Init>
	MX_I2C1_Init();
 80019ee:	f7ff febf 	bl	8001770 <MX_I2C1_Init>

	printf("okokokokoo");
 80019f2:	485d      	ldr	r0, [pc, #372]	; (8001b68 <main+0x194>)
 80019f4:	f003 ff8a 	bl	800590c <iprintf>

	//MPU initialize
	while (MPU6050_Init(&hi2c1) == 1)
 80019f8:	bf00      	nop
 80019fa:	485c      	ldr	r0, [pc, #368]	; (8001b6c <main+0x198>)
 80019fc:	f000 fa21 	bl	8001e42 <MPU6050_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d0f9      	beq.n	80019fa <main+0x26>
		;

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001a06:	485a      	ldr	r0, [pc, #360]	; (8001b70 <main+0x19c>)
 8001a08:	f001 f934 	bl	8002c74 <HAL_CAN_Start>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <main+0x42>
		Error_Handler();
 8001a12:	f000 fa11 	bl	8001e38 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 8001a16:	2103      	movs	r1, #3
 8001a18:	4855      	ldr	r0, [pc, #340]	; (8001b70 <main+0x19c>)
 8001a1a:	f001 fb5a 	bl	80030d2 <HAL_CAN_ActivateNotification>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <main+0x54>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8001a24:	f000 fa08 	bl	8001e38 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001a28:	4852      	ldr	r0, [pc, #328]	; (8001b74 <main+0x1a0>)
 8001a2a:	f001 f923 	bl	8002c74 <HAL_CAN_Start>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <main+0x64>
		Error_Handler();
 8001a34:	f000 fa00 	bl	8001e38 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 8001a38:	2103      	movs	r1, #3
 8001a3a:	484e      	ldr	r0, [pc, #312]	; (8001b74 <main+0x1a0>)
 8001a3c:	f001 fb49 	bl	80030d2 <HAL_CAN_ActivateNotification>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <main+0x76>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8001a46:	f000 f9f7 	bl	8001e38 <Error_Handler>
	}

	//loop
	while (1) {
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001a4a:	494b      	ldr	r1, [pc, #300]	; (8001b78 <main+0x1a4>)
 8001a4c:	4847      	ldr	r0, [pc, #284]	; (8001b6c <main+0x198>)
 8001a4e:	f000 fa4f 	bl	8001ef0 <MPU6050_Read_All>
		HAL_Delay(100);
 8001a52:	2064      	movs	r0, #100	; 0x64
 8001a54:	f000 ff0e 	bl	8002874 <HAL_Delay>

		double pitch = readXFromFlash() - MPU6050.KalmanAngleX;
 8001a58:	f7ff ff52 	bl	8001900 <readXFromFlash>
 8001a5c:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <main+0x1a4>)
 8001a5e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001a62:	f7fe fbe5 	bl	8000230 <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double roll = readYFromFlash() - MPU6050.KalmanAngleY;
 8001a6e:	f7ff ff55 	bl	800191c <readYFromFlash>
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <main+0x1a4>)
 8001a74:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a78:	f7fe fbda 	bl	8000230 <__aeabi_dsub>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	e9c7 2300 	strd	r2, r3, [r7]

		if (pitch > 40) {
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <main+0x1a8>)
 8001a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a8e:	f7ff f817 	bl	8000ac0 <__aeabi_dcmpgt>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <main+0xce>
			pitch = 40;
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <main+0x1a8>)
 8001a9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		if (pitch < -40) {
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <main+0x1ac>)
 8001aa8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aac:	f7fe ffea 	bl	8000a84 <__aeabi_dcmplt>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <main+0xec>
			pitch = -40;
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b31      	ldr	r3, [pc, #196]	; (8001b80 <main+0x1ac>)
 8001abc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		if (roll > 60) {
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <main+0x1b0>)
 8001ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aca:	f7fe fff9 	bl	8000ac0 <__aeabi_dcmpgt>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <main+0x10a>
			roll = 60;
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <main+0x1b0>)
 8001ada:	e9c7 2300 	strd	r2, r3, [r7]
		}
		if (roll < -60) {
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <main+0x1b4>)
 8001ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae8:	f7fe ffcc 	bl	8000a84 <__aeabi_dcmplt>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <main+0x128>
			roll = -60;
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <main+0x1b4>)
 8001af8:	e9c7 2300 	strd	r2, r3, [r7]
		}

		//20 & -20 degree max
		pitch += 0x78;
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <main+0x1b8>)
 8001b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b06:	f7fe fb95 	bl	8000234 <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		//29 & -29 degree max
		roll += 0x78;
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <main+0x1b8>)
 8001b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b1c:	f7fe fb8a 	bl	8000234 <__adddf3>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	e9c7 2300 	strd	r2, r3, [r7]

		sendGyroData(pitch, roll);
 8001b28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b2c:	f7fe ffe8 	bl	8000b00 <__aeabi_d2iz>
 8001b30:	4604      	mov	r4, r0
 8001b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b36:	f7fe ffe3 	bl	8000b00 <__aeabi_d2iz>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f000 f940 	bl	8001dc4 <sendGyroData>

		if (BUTTON_STATE(CALIBRATE_MPU_BUTTON) == 1) {
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff fc1b 	bl	8001380 <BUTTON_STATE>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d107      	bne.n	8001b60 <main+0x18c>
			saveXToFlash(pitch);
 8001b50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b54:	f7ff feb0 	bl	80018b8 <saveXToFlash>
			saveYToFlash(roll);
 8001b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b5c:	f7ff febe 	bl	80018dc <saveYToFlash>
		}

		HAL_Delay(200);
 8001b60:	20c8      	movs	r0, #200	; 0xc8
 8001b62:	f000 fe87 	bl	8002874 <HAL_Delay>
	while (1) {
 8001b66:	e770      	b.n	8001a4a <main+0x76>
 8001b68:	08006e60 	.word	0x08006e60
 8001b6c:	200001b4 	.word	0x200001b4
 8001b70:	2000018c 	.word	0x2000018c
 8001b74:	20000164 	.word	0x20000164
 8001b78:	20000210 	.word	0x20000210
 8001b7c:	40440000 	.word	0x40440000
 8001b80:	c0440000 	.word	0xc0440000
 8001b84:	404e0000 	.word	0x404e0000
 8001b88:	c04e0000 	.word	0xc04e0000
 8001b8c:	405e0000 	.word	0x405e0000

08001b90 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	; 0x50
 8001b94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	2238      	movs	r2, #56	; 0x38
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 feac 	bl	80058fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 25;
 8001bba:	2319      	movs	r3, #25
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001bc6:	f107 0318 	add.w	r3, r7, #24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 f974 	bl	8004eb8 <HAL_RCC_OscConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <SystemClock_Config+0x4a>
		Error_Handler();
 8001bd6:	f000 f92f 	bl	8001e38 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001bda:	230f      	movs	r3, #15
 8001bdc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fc76 	bl	80054e4 <HAL_RCC_ClockConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0x72>
		Error_Handler();
 8001bfe:	f000 f91b 	bl	8001e38 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <SystemClock_Config+0x80>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	3750      	adds	r7, #80	; 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	42420070 	.word	0x42420070

08001c14 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001c1e:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001c20:	2100      	movs	r1, #0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 f944 	bl	8002eb0 <HAL_CAN_GetRxMessage>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d129      	bne.n	8001c82 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>

		switch ((uint32_t) hcan->Instance) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d122      	bne.n	8001c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN2:
			CAN1_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001c46:	6912      	ldr	r2, [r2, #16]
 8001c48:	b2d1      	uxtb	r1, r2
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f825 	bl	8001c9c <CAN1_Transmit_manual>
			break;
 8001c52:	e017      	b.n	8001c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN1:
			if (RxHeader.StdId == 0x350 && RxData[0] == 0xc7) {
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8001c5c:	d106      	bne.n	8001c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2bc7      	cmp	r3, #199	; 0xc7
 8001c64:	d102      	bne.n	8001c6c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
				RxData[0] = 0xc6;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001c68:	22c6      	movs	r2, #198	; 0xc6
 8001c6a:	701a      	strb	r2, [r3, #0]
			}

			CAN2_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001c74:	6912      	ldr	r2, [r2, #16]
 8001c76:	b2d1      	uxtb	r1, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f858 	bl	8001d30 <CAN2_Transmit_manual>
			break;
 8001c80:	e000      	b.n	8001c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		}

	}
 8001c82:	bf00      	nop

}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000028c 	.word	0x2000028c
 8001c90:	200002ac 	.word	0x200002ac
 8001c94:	40006400 	.word	0x40006400
 8001c98:	40006800 	.word	0x40006800

08001c9c <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	603a      	str	r2, [r7, #0]
 8001ca6:	80fb      	strh	r3, [r7, #6]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <CAN1_Transmit_manual+0x80>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <CAN1_Transmit_manual+0x84>)
 8001cb2:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <CAN1_Transmit_manual+0x80>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <CAN1_Transmit_manual+0x84>)
 8001cba:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001cc2:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	785a      	ldrb	r2, [r3, #1]
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001cca:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	789a      	ldrb	r2, [r3, #2]
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001cd2:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	78da      	ldrb	r2, [r3, #3]
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001cda:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	791a      	ldrb	r2, [r3, #4]
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001ce2:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	795a      	ldrb	r2, [r3, #5]
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001cea:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	799a      	ldrb	r2, [r3, #6]
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001cf2:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	79da      	ldrb	r2, [r3, #7]
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001cfa:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <CAN1_Transmit_manual+0x8c>)
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <CAN1_Transmit_manual+0x88>)
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <CAN1_Transmit_manual+0x84>)
 8001d02:	480a      	ldr	r0, [pc, #40]	; (8001d2c <CAN1_Transmit_manual+0x90>)
 8001d04:	f000 fffa 	bl	8002cfc <HAL_CAN_AddTxMessage>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <CAN1_Transmit_manual+0x76>
		Error_Handler();
 8001d0e:	f000 f893 	bl	8001e38 <Error_Handler>
	}
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200002ac 	.word	0x200002ac
 8001d20:	20000294 	.word	0x20000294
 8001d24:	20000280 	.word	0x20000280
 8001d28:	20000288 	.word	0x20000288
 8001d2c:	2000018c 	.word	0x2000018c

08001d30 <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	603a      	str	r2, [r7, #0]
 8001d3a:	80fb      	strh	r3, [r7, #6]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <CAN2_Transmit_manual+0x80>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1b      	ldr	r2, [pc, #108]	; (8001db4 <CAN2_Transmit_manual+0x84>)
 8001d46:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <CAN2_Transmit_manual+0x80>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <CAN2_Transmit_manual+0x84>)
 8001d4e:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d56:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d5e:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	789a      	ldrb	r2, [r3, #2]
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d66:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	78da      	ldrb	r2, [r3, #3]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d6e:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	791a      	ldrb	r2, [r3, #4]
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d76:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	795a      	ldrb	r2, [r3, #5]
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d7e:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	799a      	ldrb	r2, [r3, #6]
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d86:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	79da      	ldrb	r2, [r3, #7]
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d8e:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <CAN2_Transmit_manual+0x8c>)
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <CAN2_Transmit_manual+0x88>)
 8001d94:	4907      	ldr	r1, [pc, #28]	; (8001db4 <CAN2_Transmit_manual+0x84>)
 8001d96:	480a      	ldr	r0, [pc, #40]	; (8001dc0 <CAN2_Transmit_manual+0x90>)
 8001d98:	f000 ffb0 	bl	8002cfc <HAL_CAN_AddTxMessage>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <CAN2_Transmit_manual+0x76>
		Error_Handler();
 8001da2:	f000 f849 	bl	8001e38 <Error_Handler>
	}
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200002ac 	.word	0x200002ac
 8001db4:	20000294 	.word	0x20000294
 8001db8:	20000280 	.word	0x20000280
 8001dbc:	20000288 	.word	0x20000288
 8001dc0:	20000164 	.word	0x20000164

08001dc4 <sendGyroData>:
void sendGyroData(int x, int y) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	gyroHeader.StdId = 0x685;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <sendGyroData+0x64>)
 8001dd0:	f240 6285 	movw	r2, #1669	; 0x685
 8001dd4:	601a      	str	r2, [r3, #0]
	gyroHeader.DLC = 2;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <sendGyroData+0x64>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	611a      	str	r2, [r3, #16]
	gyroData[0] = y;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <sendGyroData+0x68>)
 8001de2:	701a      	strb	r2, [r3, #0]
	gyroData[1] = x;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <sendGyroData+0x68>)
 8001dea:	705a      	strb	r2, [r3, #1]
	gyroData[3] = 0x00;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <sendGyroData+0x68>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	70da      	strb	r2, [r3, #3]
	gyroData[4] = 0x00;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <sendGyroData+0x68>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	711a      	strb	r2, [r3, #4]
	gyroData[5] = 0x00;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <sendGyroData+0x68>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	715a      	strb	r2, [r3, #5]
	gyroData[6] = 0x00;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <sendGyroData+0x68>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	719a      	strb	r2, [r3, #6]
	gyroData[7] = 0x00;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <sendGyroData+0x68>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&hcan1, &gyroHeader, gyroData, &TxMailbox)
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <sendGyroData+0x6c>)
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <sendGyroData+0x68>)
 8001e0e:	4906      	ldr	r1, [pc, #24]	; (8001e28 <sendGyroData+0x64>)
 8001e10:	4808      	ldr	r0, [pc, #32]	; (8001e34 <sendGyroData+0x70>)
 8001e12:	f000 ff73 	bl	8002cfc <HAL_CAN_AddTxMessage>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <sendGyroData+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001e1c:	f000 f80c 	bl	8001e38 <Error_Handler>
	}
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000268 	.word	0x20000268
 8001e2c:	20000208 	.word	0x20000208
 8001e30:	20000288 	.word	0x20000288
 8001e34:	2000018c 	.word	0x2000018c

08001e38 <Error_Handler>:

void Error_Handler(void) {
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3c:	b672      	cpsid	i
}
 8001e3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e40:	e7fe      	b.n	8001e40 <Error_Handler+0x8>

08001e42 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b088      	sub	sp, #32
 8001e46:	af04      	add	r7, sp, #16
 8001e48:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 8001e4a:	2364      	movs	r3, #100	; 0x64
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f107 030f 	add.w	r3, r7, #15
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	2275      	movs	r2, #117	; 0x75
 8001e5c:	21d0      	movs	r1, #208	; 0xd0
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f002 fa68 	bl	8004334 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b68      	cmp	r3, #104	; 0x68
 8001e68:	d13d      	bne.n	8001ee6 <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 8001e6e:	2364      	movs	r3, #100	; 0x64
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	2301      	movs	r3, #1
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	f107 030e 	add.w	r3, r7, #14
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	226b      	movs	r2, #107	; 0x6b
 8001e80:	21d0      	movs	r1, #208	; 0xd0
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f002 f95c 	bl	8004140 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001e88:	2307      	movs	r3, #7
 8001e8a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 8001e8c:	2364      	movs	r3, #100	; 0x64
 8001e8e:	9302      	str	r3, [sp, #8]
 8001e90:	2301      	movs	r3, #1
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	f107 030e 	add.w	r3, r7, #14
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	2219      	movs	r2, #25
 8001e9e:	21d0      	movs	r1, #208	; 0xd0
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f002 f94d 	bl	8004140 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 8001eaa:	2364      	movs	r3, #100	; 0x64
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	f107 030e 	add.w	r3, r7, #14
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	221c      	movs	r2, #28
 8001ebc:	21d0      	movs	r1, #208	; 0xd0
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f002 f93e 	bl	8004140 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 8001ec8:	2364      	movs	r3, #100	; 0x64
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	f107 030e 	add.w	r3, r7, #14
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	221b      	movs	r2, #27
 8001eda:	21d0      	movs	r1, #208	; 0xd0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f002 f92f 	bl	8004140 <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <MPU6050_Init+0xa6>
	}
	return 1;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <MPU6050_Read_All>:
	temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
			+ (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef4:	b094      	sub	sp, #80	; 0x50
 8001ef6:	af04      	add	r7, sp, #16
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14,
 8001efc:	2364      	movs	r3, #100	; 0x64
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	230e      	movs	r3, #14
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	223b      	movs	r2, #59	; 0x3b
 8001f0e:	21d0      	movs	r1, #208	; 0xd0
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f002 fa0f 	bl	8004334 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001f16:	7a3b      	ldrb	r3, [r7, #8]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	7a7b      	ldrb	r3, [r7, #9]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001f28:	7abb      	ldrb	r3, [r7, #10]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001f3a:	7b3b      	ldrb	r3, [r7, #12]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	7b7b      	ldrb	r3, [r7, #13]
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	809a      	strh	r2, [r3, #4]
	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	86fb      	strh	r3, [r7, #54]	; 0x36
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001f5a:	7c3b      	ldrb	r3, [r7, #16]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	7c7b      	ldrb	r3, [r7, #17]
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b21a      	sxth	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001f6c:	7cbb      	ldrb	r3, [r7, #18]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	7cfb      	ldrb	r3, [r7, #19]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001f7e:	7d3b      	ldrb	r3, [r7, #20]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	7d7b      	ldrb	r3, [r7, #21]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa98 	bl	80004cc <__aeabi_i2d>
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4bb7      	ldr	r3, [pc, #732]	; (8002280 <MPU6050_Read_All+0x390>)
 8001fa2:	f7fe fc27 	bl	80007f4 <__aeabi_ddiv>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	6839      	ldr	r1, [r7, #0]
 8001fac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fa88 	bl	80004cc <__aeabi_i2d>
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4baf      	ldr	r3, [pc, #700]	; (8002280 <MPU6050_Read_All+0x390>)
 8001fc2:	f7fe fc17 	bl	80007f4 <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	6839      	ldr	r1, [r7, #0]
 8001fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa78 	bl	80004cc <__aeabi_i2d>
 8001fdc:	a3a2      	add	r3, pc, #648	; (adr r3, 8002268 <MPU6050_Read_All+0x378>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fc07 	bl	80007f4 <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
 8001ff0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fe65 	bl	8000cc4 <__aeabi_i2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	49a1      	ldr	r1, [pc, #644]	; (8002284 <MPU6050_Read_All+0x394>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe ff68 	bl	8000ed4 <__aeabi_fdiv>
 8002004:	4603      	mov	r3, r0
 8002006:	49a0      	ldr	r1, [pc, #640]	; (8002288 <MPU6050_Read_All+0x398>)
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fda7 	bl	8000b5c <__addsf3>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	641a      	str	r2, [r3, #64]	; 0x40
			+ (float) 36.53);
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa55 	bl	80004cc <__aeabi_i2d>
 8002022:	a393      	add	r3, pc, #588	; (adr r3, 8002270 <MPU6050_Read_All+0x380>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fbe4 	bl	80007f4 <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa45 	bl	80004cc <__aeabi_i2d>
 8002042:	a38b      	add	r3, pc, #556	; (adr r3, 8002270 <MPU6050_Read_All+0x380>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fbd4 	bl	80007f4 <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa35 	bl	80004cc <__aeabi_i2d>
 8002062:	a383      	add	r3, pc, #524	; (adr r3, 8002270 <MPU6050_Read_All+0x380>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f7fe fbc4 	bl	80007f4 <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002076:	f000 fbf3 	bl	8002860 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	4b83      	ldr	r3, [pc, #524]	; (800228c <MPU6050_Read_All+0x39c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa12 	bl	80004ac <__aeabi_ui2d>
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b80      	ldr	r3, [pc, #512]	; (8002290 <MPU6050_Read_All+0x3a0>)
 800208e:	f7fe fbb1 	bl	80007f4 <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 800209a:	f000 fbe1 	bl	8002860 <HAL_GetTick>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a7a      	ldr	r2, [pc, #488]	; (800228c <MPU6050_Read_All+0x39c>)
 80020a2:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020aa:	461a      	mov	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b2:	fb03 f202 	mul.w	r2, r3, r2
					+ DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020bc:	4619      	mov	r1, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020c4:	fb03 f301 	mul.w	r3, r3, r1
 80020c8:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f9fe 	bl	80004cc <__aeabi_i2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f004 fd0a 	bl	8006af0 <sqrt>
 80020dc:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if (roll_sqrt != 0.0) {
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020ec:	f7fe fcc0 	bl	8000a70 <__aeabi_dcmpeq>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d119      	bne.n	800212a <MPU6050_Read_All+0x23a>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f9e5 	bl	80004cc <__aeabi_i2d>
 8002102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002106:	f7fe fb75 	bl	80007f4 <__aeabi_ddiv>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f004 fb5d 	bl	80067d0 <atan>
 8002116:	a358      	add	r3, pc, #352	; (adr r3, 8002278 <MPU6050_Read_All+0x388>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe fa40 	bl	80005a0 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002128:	e005      	b.n	8002136 <MPU6050_Read_All+0x246>
	} else {
		roll = 0.0;
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213c:	425b      	negs	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f9c4 	bl	80004cc <__aeabi_i2d>
 8002144:	4682      	mov	sl, r0
 8002146:	468b      	mov	fp, r1
			DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f9bc 	bl	80004cc <__aeabi_i2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4650      	mov	r0, sl
 800215a:	4659      	mov	r1, fp
 800215c:	f004 fcc5 	bl	8006aea <atan2>
 8002160:	a345      	add	r3, pc, #276	; (adr r3, 8002278 <MPU6050_Read_All+0x388>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe fa1b 	bl	80005a0 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <MPU6050_Read_All+0x3a4>)
 8002178:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800217c:	f7fe fc82 	bl	8000a84 <__aeabi_dcmplt>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <MPU6050_Read_All+0x2ac>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <MPU6050_Read_All+0x3a8>)
 8002192:	f7fe fc95 	bl	8000ac0 <__aeabi_dcmpgt>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d114      	bne.n	80021c6 <MPU6050_Read_All+0x2d6>
			|| (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <MPU6050_Read_All+0x3a8>)
 80021a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a6:	f7fe fc8b 	bl	8000ac0 <__aeabi_dcmpgt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <MPU6050_Read_All+0x2ec>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <MPU6050_Read_All+0x3a4>)
 80021bc:	f7fe fc62 	bl	8000a84 <__aeabi_dcmplt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <MPU6050_Read_All+0x2ec>
		KalmanY.angle = pitch;
 80021c6:	4935      	ldr	r1, [pc, #212]	; (800229c <MPU6050_Read_All+0x3ac>)
 80021c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80021da:	e012      	b.n	8002202 <MPU6050_Read_All+0x312>
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80021ea:	e9cd 2300 	strd	r2, r3, [sp]
 80021ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f2:	482a      	ldr	r0, [pc, #168]	; (800229c <MPU6050_Read_All+0x3ac>)
 80021f4:	f000 f856 	bl	80022a4 <Kalman_getAngle>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				DataStruct->Gy, dt);
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002208:	4690      	mov	r8, r2
 800220a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <MPU6050_Read_All+0x3a8>)
 8002214:	4640      	mov	r0, r8
 8002216:	4649      	mov	r1, r9
 8002218:	f7fe fc52 	bl	8000ac0 <__aeabi_dcmpgt>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <MPU6050_Read_All+0x344>
		DataStruct->Gx = -DataStruct->Gx;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002228:	4614      	mov	r4, r2
 800222a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800223a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800223e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002242:	e9cd 2300 	strd	r2, r3, [sp]
 8002246:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800224a:	4815      	ldr	r0, [pc, #84]	; (80022a0 <MPU6050_Read_All+0x3b0>)
 800224c:	f000 f82a 	bl	80022a4 <Kalman_getAngle>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			dt);
}
 800225a:	bf00      	nop
 800225c:	3740      	adds	r7, #64	; 0x40
 800225e:	46bd      	mov	sp, r7
 8002260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002264:	f3af 8000 	nop.w
 8002268:	00000000 	.word	0x00000000
 800226c:	40cc2900 	.word	0x40cc2900
 8002270:	00000000 	.word	0x00000000
 8002274:	40606000 	.word	0x40606000
 8002278:	1a63c1f8 	.word	0x1a63c1f8
 800227c:	404ca5dc 	.word	0x404ca5dc
 8002280:	40d00000 	.word	0x40d00000
 8002284:	43aa0000 	.word	0x43aa0000
 8002288:	42121eb8 	.word	0x42121eb8
 800228c:	200002c8 	.word	0x200002c8
 8002290:	408f4000 	.word	0x408f4000
 8002294:	c0568000 	.word	0xc0568000
 8002298:	40568000 	.word	0x40568000
 800229c:	20000050 	.word	0x20000050
 80022a0:	20000008 	.word	0x20000008

080022a4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b092      	sub	sp, #72	; 0x48
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80022b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80022ba:	f7fd ffb9 	bl	8000230 <__aeabi_dsub>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80022cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022d4:	f7fe f964 	bl	80005a0 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4620      	mov	r0, r4
 80022de:	4629      	mov	r1, r5
 80022e0:	f7fd ffa8 	bl	8000234 <__adddf3>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80022fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80022fe:	f7fe f94f 	bl	80005a0 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002310:	f7fd ff8e 	bl	8000230 <__aeabi_dsub>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002322:	f7fd ff85 	bl	8000230 <__aeabi_dsub>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fd ff7e 	bl	8000234 <__adddf3>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002340:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002344:	f7fe f92c 	bl	80005a0 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ff70 	bl	8000234 <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800236a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800236e:	f7fe f917 	bl	80005a0 <__aeabi_dmul>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4620      	mov	r0, r4
 8002378:	4629      	mov	r1, r5
 800237a:	f7fd ff59 	bl	8000230 <__aeabi_dsub>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	68f9      	ldr	r1, [r7, #12]
 8002384:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002394:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002398:	f7fe f902 	bl	80005a0 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fd ff44 	bl	8000230 <__aeabi_dsub>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80023c2:	f7fe f8ed 	bl	80005a0 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f7fd ff31 	bl	8000234 <__adddf3>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e8:	f7fd ff24 	bl	8000234 <__adddf3>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80023fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023fe:	f7fe f9f9 	bl	80007f4 <__aeabi_ddiv>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002414:	f7fe f9ee 	bl	80007f4 <__aeabi_ddiv>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002426:	e9d7 0100 	ldrd	r0, r1, [r7]
 800242a:	f7fd ff01 	bl	8000230 <__aeabi_dsub>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800243c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002440:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002444:	f7fe f8ac 	bl	80005a0 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4620      	mov	r0, r4
 800244e:	4629      	mov	r1, r5
 8002450:	f7fd fef0 	bl	8000234 <__adddf3>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002464:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002468:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800246c:	f7fe f898 	bl	80005a0 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fd fedc 	bl	8000234 <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800248c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002496:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024a8:	f7fe f87a 	bl	80005a0 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fd febc 	bl	8000230 <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	68f9      	ldr	r1, [r7, #12]
 80024be:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024d0:	f7fe f866 	bl	80005a0 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4620      	mov	r0, r4
 80024da:	4629      	mov	r1, r5
 80024dc:	f7fd fea8 	bl	8000230 <__aeabi_dsub>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80024f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024f8:	f7fe f852 	bl	80005a0 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4620      	mov	r0, r4
 8002502:	4629      	mov	r1, r5
 8002504:	f7fd fe94 	bl	8000230 <__aeabi_dsub>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	68f9      	ldr	r1, [r7, #12]
 800250e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002518:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800251c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002520:	f7fe f83e 	bl	80005a0 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4620      	mov	r0, r4
 800252a:	4629      	mov	r1, r5
 800252c:	f7fd fe80 	bl	8000230 <__aeabi_dsub>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	3748      	adds	r7, #72	; 0x48
 8002546:	46bd      	mov	sp, r7
 8002548:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800254c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_MspInit+0x5c>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <HAL_MspInit+0x5c>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6193      	str	r3, [r2, #24]
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_MspInit+0x5c>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_MspInit+0x5c>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_MspInit+0x5c>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	61d3      	str	r3, [r2, #28]
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_MspInit+0x5c>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <HAL_MspInit+0x60>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_MspInit+0x60>)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <NMI_Handler+0x4>

080025b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <MemManage_Handler+0x4>

080025c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <BusFault_Handler+0x4>

080025c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <UsageFault_Handler+0x4>

080025ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f000 f921 	bl	800283c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <CAN1_TX_IRQHandler+0x10>)
 8002606:	f000 fd89 	bl	800311c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000018c 	.word	0x2000018c

08002614 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <CAN1_RX0_IRQHandler+0x10>)
 800261a:	f000 fd7f 	bl	800311c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000018c 	.word	0x2000018c

08002628 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <CAN1_RX1_IRQHandler+0x10>)
 800262e:	f000 fd75 	bl	800311c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000018c 	.word	0x2000018c

0800263c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <CAN1_SCE_IRQHandler+0x10>)
 8002642:	f000 fd6b 	bl	800311c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000018c 	.word	0x2000018c

08002650 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e00a      	b.n	8002678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002662:	f3af 8000 	nop.w
 8002666:	4601      	mov	r1, r0
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	60ba      	str	r2, [r7, #8]
 800266e:	b2ca      	uxtb	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf0      	blt.n	8002662 <_read+0x12>
	}

return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_close>:
	}
	return len;
}

int _close(int file)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
	return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b0:	605a      	str	r2, [r3, #4]
	return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <_isatty>:

int _isatty(int file)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	return 1;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
	return 0;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <_sbrk+0x5c>)
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <_sbrk+0x60>)
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <_sbrk+0x64>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <_sbrk+0x68>)
 800270c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d207      	bcs.n	800272c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800271c:	f003 f8c4 	bl	80058a8 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	220c      	movs	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800272a:	e009      	b.n	8002740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <_sbrk+0x64>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <_sbrk+0x64>)
 800273c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273e:	68fb      	ldr	r3, [r7, #12]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20010000 	.word	0x20010000
 800274c:	00000400 	.word	0x00000400
 8002750:	20000130 	.word	0x20000130
 8002754:	20000300 	.word	0x20000300

08002758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002766:	490d      	ldr	r1, [pc, #52]	; (800279c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800277c:	4c0a      	ldr	r4, [pc, #40]	; (80027a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800278a:	f7ff ffe5 	bl	8002758 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800278e:	f003 f891 	bl	80058b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002792:	f7ff f91f 	bl	80019d4 <main>
  bx lr
 8002796:	4770      	bx	lr
  ldr r0, =_sdata
 8002798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800279c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80027a0:	08006fc0 	.word	0x08006fc0
  ldr r2, =_sbss
 80027a4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80027a8:	20000300 	.word	0x20000300

080027ac <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC1_2_IRQHandler>
	...

080027b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_Init+0x28>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_Init+0x28>)
 80027ba:	f043 0310 	orr.w	r3, r3, #16
 80027be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c0:	2003      	movs	r0, #3
 80027c2:	f000 ff9b 	bl	80036fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c6:	200f      	movs	r0, #15
 80027c8:	f000 f808 	bl	80027dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027cc:	f7ff febe 	bl	800254c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40022000 	.word	0x40022000

080027dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_InitTick+0x54>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_InitTick+0x58>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 ffb3 	bl	8003766 <HAL_SYSTICK_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e00e      	b.n	8002828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d80a      	bhi.n	8002826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002810:	2200      	movs	r2, #0
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002818:	f000 ff7b 	bl	8003712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800281c:	4a06      	ldr	r2, [pc, #24]	; (8002838 <HAL_InitTick+0x5c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000098 	.word	0x20000098
 8002834:	200000a0 	.word	0x200000a0
 8002838:	2000009c 	.word	0x2000009c

0800283c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_IncTick+0x1c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_IncTick+0x20>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4413      	add	r3, r2
 800284c:	4a03      	ldr	r2, [pc, #12]	; (800285c <HAL_IncTick+0x20>)
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	200000a0 	.word	0x200000a0
 800285c:	200002cc 	.word	0x200002cc

08002860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return uwTick;
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <HAL_GetTick+0x10>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	200002cc 	.word	0x200002cc

08002874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff fff0 	bl	8002860 <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288c:	d005      	beq.n	800289a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_Delay+0x44>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800289a:	bf00      	nop
 800289c:	f7ff ffe0 	bl	8002860 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d8f7      	bhi.n	800289c <HAL_Delay+0x28>
  {
  }
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	200000a0 	.word	0x200000a0

080028bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0ed      	b.n	8002aaa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fe2e 	bl	800153c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f0:	f7ff ffb6 	bl	8002860 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028f6:	e012      	b.n	800291e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028f8:	f7ff ffb2 	bl	8002860 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b0a      	cmp	r3, #10
 8002904:	d90b      	bls.n	800291e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2205      	movs	r2, #5
 8002916:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0c5      	b.n	8002aaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0e5      	beq.n	80028f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0202 	bic.w	r2, r2, #2
 800293a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800293c:	f7ff ff90 	bl	8002860 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002942:	e012      	b.n	800296a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002944:	f7ff ff8c 	bl	8002860 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b0a      	cmp	r3, #10
 8002950:	d90b      	bls.n	800296a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2205      	movs	r2, #5
 8002962:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e09f      	b.n	8002aaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e5      	bne.n	8002944 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7e1b      	ldrb	r3, [r3, #24]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d108      	bne.n	8002992 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e007      	b.n	80029a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7e5b      	ldrb	r3, [r3, #25]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d108      	bne.n	80029bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e007      	b.n	80029cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e9b      	ldrb	r3, [r3, #26]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d108      	bne.n	80029e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0220 	orr.w	r2, r2, #32
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e007      	b.n	80029f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0220 	bic.w	r2, r2, #32
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7edb      	ldrb	r3, [r3, #27]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0210 	bic.w	r2, r2, #16
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e007      	b.n	8002a20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0210 	orr.w	r2, r2, #16
 8002a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7f1b      	ldrb	r3, [r3, #28]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0208 	orr.w	r2, r2, #8
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e007      	b.n	8002a4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0208 	bic.w	r2, r2, #8
 8002a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7f5b      	ldrb	r3, [r3, #29]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d108      	bne.n	8002a64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0204 	orr.w	r2, r2, #4
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e007      	b.n	8002a74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	ea42 0103 	orr.w	r1, r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	1e5a      	subs	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d003      	beq.n	8002ada <HAL_CAN_ConfigFilter+0x26>
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	f040 80be 	bne.w	8002c56 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ada:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <HAL_CAN_ConfigFilter+0x1bc>)
 8002adc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002af4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d123      	bne.n	8002b84 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3248      	adds	r2, #72	; 0x48
 8002b64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b7a:	6979      	ldr	r1, [r7, #20]
 8002b7c:	3348      	adds	r3, #72	; 0x48
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d122      	bne.n	8002bd2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3248      	adds	r2, #72	; 0x48
 8002bb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	3348      	adds	r3, #72	; 0x48
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	401a      	ands	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002bec:	e007      	b.n	8002bfe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	401a      	ands	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002c18:	e007      	b.n	8002c2a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c48:	f023 0201 	bic.w	r2, r3, #1
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e006      	b.n	8002c64 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
  }
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40006400 	.word	0x40006400

08002c74 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d12e      	bne.n	8002ce6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ca0:	f7ff fdde 	bl	8002860 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ca6:	e012      	b.n	8002cce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ca8:	f7ff fdda 	bl	8002860 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b0a      	cmp	r3, #10
 8002cb4:	d90b      	bls.n	8002cce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e012      	b.n	8002cf4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e5      	bne.n	8002ca8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e006      	b.n	8002cf4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d10:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d003      	beq.n	8002d28 <HAL_CAN_AddTxMessage+0x2c>
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	f040 80b8 	bne.w	8002e98 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80a0 	beq.w	8002e88 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	0e1b      	lsrs	r3, r3, #24
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d907      	bls.n	8002d68 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e09e      	b.n	8002ea6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	6809      	ldr	r1, [r1, #0]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	440b      	add	r3, r1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e00f      	b.n	8002db6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002da0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002daa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3318      	adds	r3, #24
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	440b      	add	r3, r1
 8002db4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	7d1b      	ldrb	r3, [r3, #20]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d111      	bne.n	8002df6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3318      	adds	r3, #24
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6811      	ldr	r1, [r2, #0]
 8002de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3318      	adds	r3, #24
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	440b      	add	r3, r1
 8002df2:	3304      	adds	r3, #4
 8002df4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3307      	adds	r3, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	061a      	lsls	r2, r3, #24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3306      	adds	r3, #6
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3305      	adds	r3, #5
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	3204      	adds	r2, #4
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	4610      	mov	r0, r2
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	ea43 0200 	orr.w	r2, r3, r0
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3303      	adds	r3, #3
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	061a      	lsls	r2, r3, #24
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3301      	adds	r3, #1
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	4610      	mov	r0, r2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	6811      	ldr	r1, [r2, #0]
 8002e54:	ea43 0200 	orr.w	r2, r3, r0
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6811      	ldr	r1, [r2, #0]
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	440b      	add	r3, r1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e00e      	b.n	8002ea6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e006      	b.n	8002ea6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d003      	beq.n	8002ed4 <HAL_CAN_GetRxMessage+0x24>
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f040 80f3 	bne.w	80030ba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0e7      	b.n	80030c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0d8      	b.n	80030c8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	331b      	adds	r3, #27
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0204 	and.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10c      	bne.n	8002f4e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	331b      	adds	r3, #27
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0d5b      	lsrs	r3, r3, #21
 8002f44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e00b      	b.n	8002f66 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	331b      	adds	r3, #27
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	331b      	adds	r3, #27
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	4413      	add	r3, r2
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0202 	and.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	331b      	adds	r3, #27
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 020f 	and.w	r2, r3, #15
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	331b      	adds	r3, #27
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	331b      	adds	r3, #27
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0c1b      	lsrs	r3, r3, #16
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0a1a      	lsrs	r2, r3, #8
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0c1a      	lsrs	r2, r3, #16
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	3302      	adds	r3, #2
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0e1a      	lsrs	r2, r3, #24
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3303      	adds	r3, #3
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4413      	add	r3, r2
 8003032:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	3304      	adds	r3, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	4413      	add	r3, r2
 800304a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0a1a      	lsrs	r2, r3, #8
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	3305      	adds	r3, #5
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4413      	add	r3, r2
 8003064:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	0c1a      	lsrs	r2, r3, #16
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	3306      	adds	r3, #6
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	4413      	add	r3, r2
 800307e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e1a      	lsrs	r2, r3, #24
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	3307      	adds	r3, #7
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d108      	bne.n	80030a6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0220 	orr.w	r2, r2, #32
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	e007      	b.n	80030b6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0220 	orr.w	r2, r2, #32
 80030b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e006      	b.n	80030c8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
  }
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d002      	beq.n	80030f0 <HAL_CAN_ActivateNotification+0x1e>
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d109      	bne.n	8003104 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6959      	ldr	r1, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e006      	b.n	8003112 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d07c      	beq.n	800325c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2201      	movs	r2, #1
 8003172:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f983 	bl	800348a <HAL_CAN_TxMailbox0CompleteCallback>
 8003184:	e016      	b.n	80031b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	e00c      	b.n	80031b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d004      	beq.n	80031ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	e002      	b.n	80031b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f986 	bl	80034c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d024      	beq.n	8003208 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f962 	bl	800349c <HAL_CAN_TxMailbox1CompleteCallback>
 80031d8:	e016      	b.n	8003208 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	e00c      	b.n	8003208 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d004      	beq.n	8003202 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	e002      	b.n	8003208 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f965 	bl	80034d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d024      	beq.n	800325c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800321a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f941 	bl	80034ae <HAL_CAN_TxMailbox2CompleteCallback>
 800322c:	e016      	b.n	800325c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	e00c      	b.n	800325c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	e002      	b.n	800325c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f944 	bl	80034e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003276:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2210      	movs	r2, #16
 800327e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2208      	movs	r2, #8
 800329a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f92a 	bl	80034f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fe fcaa 	bl	8001c14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2210      	movs	r2, #16
 80032e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d006      	beq.n	8003306 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2208      	movs	r2, #8
 80032fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f90a 	bl	800351a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8f2 	bl	8003508 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2210      	movs	r2, #16
 800333e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f8f3 	bl	800352c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d006      	beq.n	8003368 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2208      	movs	r2, #8
 8003360:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8eb 	bl	800353e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d07b      	beq.n	800346a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d072      	beq.n	8003462 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d043      	beq.n	8003462 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d03e      	beq.n	8003462 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ea:	2b60      	cmp	r3, #96	; 0x60
 80033ec:	d02b      	beq.n	8003446 <HAL_CAN_IRQHandler+0x32a>
 80033ee:	2b60      	cmp	r3, #96	; 0x60
 80033f0:	d82e      	bhi.n	8003450 <HAL_CAN_IRQHandler+0x334>
 80033f2:	2b50      	cmp	r3, #80	; 0x50
 80033f4:	d022      	beq.n	800343c <HAL_CAN_IRQHandler+0x320>
 80033f6:	2b50      	cmp	r3, #80	; 0x50
 80033f8:	d82a      	bhi.n	8003450 <HAL_CAN_IRQHandler+0x334>
 80033fa:	2b40      	cmp	r3, #64	; 0x40
 80033fc:	d019      	beq.n	8003432 <HAL_CAN_IRQHandler+0x316>
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d826      	bhi.n	8003450 <HAL_CAN_IRQHandler+0x334>
 8003402:	2b30      	cmp	r3, #48	; 0x30
 8003404:	d010      	beq.n	8003428 <HAL_CAN_IRQHandler+0x30c>
 8003406:	2b30      	cmp	r3, #48	; 0x30
 8003408:	d822      	bhi.n	8003450 <HAL_CAN_IRQHandler+0x334>
 800340a:	2b10      	cmp	r3, #16
 800340c:	d002      	beq.n	8003414 <HAL_CAN_IRQHandler+0x2f8>
 800340e:	2b20      	cmp	r3, #32
 8003410:	d005      	beq.n	800341e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003412:	e01d      	b.n	8003450 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800341c:	e019      	b.n	8003452 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003426:	e014      	b.n	8003452 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f043 0320 	orr.w	r3, r3, #32
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003430:	e00f      	b.n	8003452 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800343a:	e00a      	b.n	8003452 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003444:	e005      	b.n	8003452 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800344e:	e000      	b.n	8003452 <HAL_CAN_IRQHandler+0x336>
            break;
 8003450:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003460:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2204      	movs	r2, #4
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f867 	bl	8003550 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003482:	bf00      	nop
 8003484:	3728      	adds	r7, #40	; 0x28
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
	...

08003564 <__NVIC_SetPriorityGrouping>:
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_EnableIRQ>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db0b      	blt.n	80035f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4906      	ldr	r1, [pc, #24]	; (80035fc <__NVIC_EnableIRQ+0x34>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2001      	movs	r0, #1
 80035ea:	fa00 f202 	lsl.w	r2, r0, r2
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	db0a      	blt.n	800362a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <__NVIC_SetPriority+0x4c>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	440b      	add	r3, r1
 8003624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003628:	e00a      	b.n	8003640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4908      	ldr	r1, [pc, #32]	; (8003650 <__NVIC_SetPriority+0x50>)
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	3b04      	subs	r3, #4
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	440b      	add	r3, r1
 800363e:	761a      	strb	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000e100 	.word	0xe000e100
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <NVIC_EncodePriority>:
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f1c3 0307 	rsb	r3, r3, #7
 800366e:	2b04      	cmp	r3, #4
 8003670:	bf28      	it	cs
 8003672:	2304      	movcs	r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3304      	adds	r3, #4
 800367a:	2b06      	cmp	r3, #6
 800367c:	d902      	bls.n	8003684 <NVIC_EncodePriority+0x30>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3b03      	subs	r3, #3
 8003682:	e000      	b.n	8003686 <NVIC_EncodePriority+0x32>
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	401a      	ands	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800369c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43d9      	mvns	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	4313      	orrs	r3, r2
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <SysTick_Config>:
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d301      	bcc.n	80036ce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00f      	b.n	80036ee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <SysTick_Config+0x40>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d6:	210f      	movs	r1, #15
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036dc:	f7ff ff90 	bl	8003600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SysTick_Config+0x40>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x40>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff2d 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003724:	f7ff ff42 	bl	80035ac <__NVIC_GetPriorityGrouping>
 8003728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7ff ff90 	bl	8003654 <NVIC_EncodePriority>
 8003734:	4602      	mov	r2, r0
 8003736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff5f 	bl	8003600 <__NVIC_SetPriority>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff35 	bl	80035c8 <__NVIC_EnableIRQ>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffa2 	bl	80036b8 <SysTick_Config>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800379a:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_FLASH_Program+0xd8>)
 800379c:	7e1b      	ldrb	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_FLASH_Program+0x26>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e054      	b.n	8003850 <HAL_FLASH_Program+0xd0>
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <HAL_FLASH_Program+0xd8>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037b0:	f000 f8a8 	bl	8003904 <FLASH_WaitForLastOperation>
 80037b4:	4603      	mov	r3, r0
 80037b6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d144      	bne.n	8003848 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d102      	bne.n	80037ca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80037c4:	2301      	movs	r3, #1
 80037c6:	757b      	strb	r3, [r7, #21]
 80037c8:	e007      	b.n	80037da <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d102      	bne.n	80037d6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80037d0:	2302      	movs	r3, #2
 80037d2:	757b      	strb	r3, [r7, #21]
 80037d4:	e001      	b.n	80037da <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80037d6:	2304      	movs	r3, #4
 80037d8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80037da:	2300      	movs	r3, #0
 80037dc:	75bb      	strb	r3, [r7, #22]
 80037de:	e02d      	b.n	800383c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80037e0:	7dbb      	ldrb	r3, [r7, #22]
 80037e2:	005a      	lsls	r2, r3, #1
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	eb02 0c03 	add.w	ip, r2, r3
 80037ea:	7dbb      	ldrb	r3, [r7, #22]
 80037ec:	0119      	lsls	r1, r3, #4
 80037ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f2:	f1c1 0620 	rsb	r6, r1, #32
 80037f6:	f1a1 0020 	sub.w	r0, r1, #32
 80037fa:	fa22 f401 	lsr.w	r4, r2, r1
 80037fe:	fa03 f606 	lsl.w	r6, r3, r6
 8003802:	4334      	orrs	r4, r6
 8003804:	fa23 f000 	lsr.w	r0, r3, r0
 8003808:	4304      	orrs	r4, r0
 800380a:	fa23 f501 	lsr.w	r5, r3, r1
 800380e:	b2a3      	uxth	r3, r4
 8003810:	4619      	mov	r1, r3
 8003812:	4660      	mov	r0, ip
 8003814:	f000 f85a 	bl	80038cc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003818:	f24c 3050 	movw	r0, #50000	; 0xc350
 800381c:	f000 f872 	bl	8003904 <FLASH_WaitForLastOperation>
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003824:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_FLASH_Program+0xdc>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <HAL_FLASH_Program+0xdc>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d107      	bne.n	8003846 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003836:	7dbb      	ldrb	r3, [r7, #22]
 8003838:	3301      	adds	r3, #1
 800383a:	75bb      	strb	r3, [r7, #22]
 800383c:	7dba      	ldrb	r2, [r7, #22]
 800383e:	7d7b      	ldrb	r3, [r7, #21]
 8003840:	429a      	cmp	r2, r3
 8003842:	d3cd      	bcc.n	80037e0 <HAL_FLASH_Program+0x60>
 8003844:	e000      	b.n	8003848 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003846:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <HAL_FLASH_Program+0xd8>)
 800384a:	2200      	movs	r2, #0
 800384c:	761a      	strb	r2, [r3, #24]

  return status;
 800384e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003858:	200002d0 	.word	0x200002d0
 800385c:	40022000 	.word	0x40022000

08003860 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <HAL_FLASH_Unlock+0x40>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_FLASH_Unlock+0x40>)
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_FLASH_Unlock+0x44>)
 800387a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_FLASH_Unlock+0x40>)
 800387e:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <HAL_FLASH_Unlock+0x48>)
 8003880:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_FLASH_Unlock+0x40>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003892:	79fb      	ldrb	r3, [r7, #7]
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000
 80038a4:	45670123 	.word	0x45670123
 80038a8:	cdef89ab 	.word	0xcdef89ab

080038ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_FLASH_Lock+0x1c>)
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_FLASH_Lock+0x1c>)
 80038b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000

080038cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <FLASH_Program_HalfWord+0x30>)
 80038da:	2200      	movs	r2, #0
 80038dc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <FLASH_Program_HalfWord+0x34>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <FLASH_Program_HalfWord+0x34>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	887a      	ldrh	r2, [r7, #2]
 80038ee:	801a      	strh	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	200002d0 	.word	0x200002d0
 8003900:	40022000 	.word	0x40022000

08003904 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800390c:	f7fe ffa8 	bl	8002860 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003912:	e010      	b.n	8003936 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800391a:	d00c      	beq.n	8003936 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <FLASH_WaitForLastOperation+0x2e>
 8003922:	f7fe ff9d 	bl	8002860 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	429a      	cmp	r2, r3
 8003930:	d201      	bcs.n	8003936 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e025      	b.n	8003982 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e8      	bne.n	8003914 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003950:	2220      	movs	r2, #32
 8003952:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10b      	bne.n	8003978 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <FLASH_WaitForLastOperation+0x88>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003978:	f000 f80a 	bl	8003990 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40022000 	.word	0x40022000

08003990 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80039a6:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f043 0310 	orr.w	r3, r3, #16
 80039b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <FLASH_SetErrorCode+0x9c>)
 80039f0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f240 1201 	movw	r2, #257	; 0x101
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d106      	bne.n	8003a16 <FLASH_SetErrorCode+0x86>
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	61d3      	str	r3, [r2, #28]
}  
 8003a14:	e002      	b.n	8003a1c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a16:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <FLASH_SetErrorCode+0x98>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60d3      	str	r3, [r2, #12]
}  
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	200002d0 	.word	0x200002d0

08003a30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a42:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <HAL_FLASHEx_Erase+0xd0>)
 8003a44:	7e1b      	ldrb	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_FLASHEx_Erase+0x1e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e053      	b.n	8003af6 <HAL_FLASHEx_Erase+0xc6>
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_FLASHEx_Erase+0xd0>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d116      	bne.n	8003a8a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003a5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a60:	f7ff ff50 	bl	8003904 <FLASH_WaitForLastOperation>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d141      	bne.n	8003aee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f000 f84c 	bl	8003b08 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a74:	f7ff ff46 	bl	8003904 <FLASH_WaitForLastOperation>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003a82:	f023 0304 	bic.w	r3, r3, #4
 8003a86:	6113      	str	r3, [r2, #16]
 8003a88:	e031      	b.n	8003aee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003a8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a8e:	f7ff ff39 	bl	8003904 <FLASH_WaitForLastOperation>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d12a      	bne.n	8003aee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a9e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	e019      	b.n	8003adc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003aa8:	68b8      	ldr	r0, [r7, #8]
 8003aaa:	f000 f849 	bl	8003b40 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003aae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ab2:	f7ff ff27 	bl	8003904 <FLASH_WaitForLastOperation>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <HAL_FLASHEx_Erase+0xd4>)
 8003ac0:	f023 0302 	bic.w	r3, r3, #2
 8003ac4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	601a      	str	r2, [r3, #0]
            break;
 8003ad2:	e00c      	b.n	8003aee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ada:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	02da      	lsls	r2, r3, #11
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3dc      	bcc.n	8003aa8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_FLASHEx_Erase+0xd0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	761a      	strb	r2, [r3, #24]

  return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200002d0 	.word	0x200002d0
 8003b04:	40022000 	.word	0x40022000

08003b08 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <FLASH_MassErase+0x30>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <FLASH_MassErase+0x34>)
 8003b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr
 8003b38:	200002d0 	.word	0x200002d0
 8003b3c:	40022000 	.word	0x40022000

08003b40 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <FLASH_PageErase+0x38>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b54:	f043 0302 	orr.w	r3, r3, #2
 8003b58:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <FLASH_PageErase+0x3c>)
 8003b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b6a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	200002d0 	.word	0x200002d0
 8003b7c:	40022000 	.word	0x40022000

08003b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b08b      	sub	sp, #44	; 0x2c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b92:	e169      	b.n	8003e68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b94:	2201      	movs	r2, #1
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	f040 8158 	bne.w	8003e62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a9a      	ldr	r2, [pc, #616]	; (8003e20 <HAL_GPIO_Init+0x2a0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d05e      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bbc:	4a98      	ldr	r2, [pc, #608]	; (8003e20 <HAL_GPIO_Init+0x2a0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d875      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bc2:	4a98      	ldr	r2, [pc, #608]	; (8003e24 <HAL_GPIO_Init+0x2a4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d058      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bc8:	4a96      	ldr	r2, [pc, #600]	; (8003e24 <HAL_GPIO_Init+0x2a4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d86f      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bce:	4a96      	ldr	r2, [pc, #600]	; (8003e28 <HAL_GPIO_Init+0x2a8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d052      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bd4:	4a94      	ldr	r2, [pc, #592]	; (8003e28 <HAL_GPIO_Init+0x2a8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d869      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bda:	4a94      	ldr	r2, [pc, #592]	; (8003e2c <HAL_GPIO_Init+0x2ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04c      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003be0:	4a92      	ldr	r2, [pc, #584]	; (8003e2c <HAL_GPIO_Init+0x2ac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d863      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003be6:	4a92      	ldr	r2, [pc, #584]	; (8003e30 <HAL_GPIO_Init+0x2b0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d046      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
 8003bec:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_GPIO_Init+0x2b0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d85d      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bf2:	2b12      	cmp	r3, #18
 8003bf4:	d82a      	bhi.n	8003c4c <HAL_GPIO_Init+0xcc>
 8003bf6:	2b12      	cmp	r3, #18
 8003bf8:	d859      	bhi.n	8003cae <HAL_GPIO_Init+0x12e>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_GPIO_Init+0x80>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c7b 	.word	0x08003c7b
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003c67 	.word	0x08003c67
 8003c0c:	08003ca9 	.word	0x08003ca9
 8003c10:	08003caf 	.word	0x08003caf
 8003c14:	08003caf 	.word	0x08003caf
 8003c18:	08003caf 	.word	0x08003caf
 8003c1c:	08003caf 	.word	0x08003caf
 8003c20:	08003caf 	.word	0x08003caf
 8003c24:	08003caf 	.word	0x08003caf
 8003c28:	08003caf 	.word	0x08003caf
 8003c2c:	08003caf 	.word	0x08003caf
 8003c30:	08003caf 	.word	0x08003caf
 8003c34:	08003caf 	.word	0x08003caf
 8003c38:	08003caf 	.word	0x08003caf
 8003c3c:	08003caf 	.word	0x08003caf
 8003c40:	08003caf 	.word	0x08003caf
 8003c44:	08003c5d 	.word	0x08003c5d
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	4a79      	ldr	r2, [pc, #484]	; (8003e34 <HAL_GPIO_Init+0x2b4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c52:	e02c      	b.n	8003cae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	623b      	str	r3, [r7, #32]
          break;
 8003c5a:	e029      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	3304      	adds	r3, #4
 8003c62:	623b      	str	r3, [r7, #32]
          break;
 8003c64:	e024      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	623b      	str	r3, [r7, #32]
          break;
 8003c6e:	e01f      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	330c      	adds	r3, #12
 8003c76:	623b      	str	r3, [r7, #32]
          break;
 8003c78:	e01a      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c82:	2304      	movs	r3, #4
 8003c84:	623b      	str	r3, [r7, #32]
          break;
 8003c86:	e013      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c90:	2308      	movs	r3, #8
 8003c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	611a      	str	r2, [r3, #16]
          break;
 8003c9a:	e009      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	615a      	str	r2, [r3, #20]
          break;
 8003ca6:	e003      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	623b      	str	r3, [r7, #32]
          break;
 8003cac:	e000      	b.n	8003cb0 <HAL_GPIO_Init+0x130>
          break;
 8003cae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2bff      	cmp	r3, #255	; 0xff
 8003cb4:	d801      	bhi.n	8003cba <HAL_GPIO_Init+0x13a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	e001      	b.n	8003cbe <HAL_GPIO_Init+0x13e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	2bff      	cmp	r3, #255	; 0xff
 8003cc4:	d802      	bhi.n	8003ccc <HAL_GPIO_Init+0x14c>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	e002      	b.n	8003cd2 <HAL_GPIO_Init+0x152>
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	3b08      	subs	r3, #8
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	210f      	movs	r1, #15
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	431a      	orrs	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 80b1 	beq.w	8003e62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d00:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	4a4c      	ldr	r2, [pc, #304]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6193      	str	r3, [r2, #24]
 8003d0c:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_GPIO_Init+0x2b8>)
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d18:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <HAL_GPIO_Init+0x2bc>)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	3302      	adds	r3, #2
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a40      	ldr	r2, [pc, #256]	; (8003e40 <HAL_GPIO_Init+0x2c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_GPIO_Init+0x1ec>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a3f      	ldr	r2, [pc, #252]	; (8003e44 <HAL_GPIO_Init+0x2c4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00d      	beq.n	8003d68 <HAL_GPIO_Init+0x1e8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a3e      	ldr	r2, [pc, #248]	; (8003e48 <HAL_GPIO_Init+0x2c8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0x1e4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_GPIO_Init+0x2cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_GPIO_Init+0x1e0>
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e006      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d60:	2304      	movs	r3, #4
 8003d62:	e004      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e002      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_GPIO_Init+0x1ee>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	f002 0203 	and.w	r2, r2, #3
 8003d74:	0092      	lsls	r2, r2, #2
 8003d76:	4093      	lsls	r3, r2
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d7e:	492f      	ldr	r1, [pc, #188]	; (8003e3c <HAL_GPIO_Init+0x2bc>)
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	3302      	adds	r3, #2
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d006      	beq.n	8003da6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	492c      	ldr	r1, [pc, #176]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	4928      	ldr	r1, [pc, #160]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4922      	ldr	r1, [pc, #136]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	491e      	ldr	r1, [pc, #120]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d006      	beq.n	8003df6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	4918      	ldr	r1, [pc, #96]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
 8003df4:	e006      	b.n	8003e04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	4914      	ldr	r1, [pc, #80]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d021      	beq.n	8003e54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	490e      	ldr	r1, [pc, #56]	; (8003e50 <HAL_GPIO_Init+0x2d0>)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
 8003e1c:	e021      	b.n	8003e62 <HAL_GPIO_Init+0x2e2>
 8003e1e:	bf00      	nop
 8003e20:	10320000 	.word	0x10320000
 8003e24:	10310000 	.word	0x10310000
 8003e28:	10220000 	.word	0x10220000
 8003e2c:	10210000 	.word	0x10210000
 8003e30:	10120000 	.word	0x10120000
 8003e34:	10110000 	.word	0x10110000
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010800 	.word	0x40010800
 8003e44:	40010c00 	.word	0x40010c00
 8003e48:	40011000 	.word	0x40011000
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_GPIO_Init+0x304>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	4909      	ldr	r1, [pc, #36]	; (8003e84 <HAL_GPIO_Init+0x304>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	3301      	adds	r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f ae8e 	bne.w	8003b94 <HAL_GPIO_Init+0x14>
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	372c      	adds	r7, #44	; 0x2c
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	40010400 	.word	0x40010400

08003e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e001      	b.n	8003eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e12b      	b.n	8004122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fc74 	bl	80017cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f001 fc92 	bl	8005844 <HAL_RCC_GetPCLK1Freq>
 8003f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a81      	ldr	r2, [pc, #516]	; (800412c <HAL_I2C_Init+0x274>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d807      	bhi.n	8003f3c <HAL_I2C_Init+0x84>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_I2C_Init+0x278>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e006      	b.n	8003f4a <HAL_I2C_Init+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a7d      	ldr	r2, [pc, #500]	; (8004134 <HAL_I2C_Init+0x27c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0e7      	b.n	8004122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4a78      	ldr	r2, [pc, #480]	; (8004138 <HAL_I2C_Init+0x280>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0c9b      	lsrs	r3, r3, #18
 8003f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a6a      	ldr	r2, [pc, #424]	; (800412c <HAL_I2C_Init+0x274>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d802      	bhi.n	8003f8c <HAL_I2C_Init+0xd4>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	e009      	b.n	8003fa0 <HAL_I2C_Init+0xe8>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	4a69      	ldr	r2, [pc, #420]	; (800413c <HAL_I2C_Init+0x284>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	495c      	ldr	r1, [pc, #368]	; (800412c <HAL_I2C_Init+0x274>)
 8003fbc:	428b      	cmp	r3, r1
 8003fbe:	d819      	bhi.n	8003ff4 <HAL_I2C_Init+0x13c>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e59      	subs	r1, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fce:	1c59      	adds	r1, r3, #1
 8003fd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fd4:	400b      	ands	r3, r1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_I2C_Init+0x138>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e59      	subs	r1, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fee:	e051      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	e04f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d111      	bne.n	8004020 <HAL_I2C_Init+0x168>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1e58      	subs	r0, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	440b      	add	r3, r1
 800400a:	fbb0 f3f3 	udiv	r3, r0, r3
 800400e:	3301      	adds	r3, #1
 8004010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e012      	b.n	8004046 <HAL_I2C_Init+0x18e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1e58      	subs	r0, r3, #1
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	0099      	lsls	r1, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	fbb0 f3f3 	udiv	r3, r0, r3
 8004036:	3301      	adds	r3, #1
 8004038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Init+0x196>
 800404a:	2301      	movs	r3, #1
 800404c:	e022      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10e      	bne.n	8004074 <HAL_I2C_Init+0x1bc>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e58      	subs	r0, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	440b      	add	r3, r1
 8004064:	fbb0 f3f3 	udiv	r3, r0, r3
 8004068:	3301      	adds	r3, #1
 800406a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004072:	e00f      	b.n	8004094 <HAL_I2C_Init+0x1dc>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1e58      	subs	r0, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	0099      	lsls	r1, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	fbb0 f3f3 	udiv	r3, r0, r3
 800408a:	3301      	adds	r3, #1
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	6809      	ldr	r1, [r1, #0]
 8004098:	4313      	orrs	r3, r2
 800409a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6911      	ldr	r1, [r2, #16]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68d2      	ldr	r2, [r2, #12]
 80040ce:	4311      	orrs	r1, r2
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	000186a0 	.word	0x000186a0
 8004130:	001e847f 	.word	0x001e847f
 8004134:	003d08ff 	.word	0x003d08ff
 8004138:	431bde83 	.word	0x431bde83
 800413c:	10624dd3 	.word	0x10624dd3

08004140 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800415a:	f7fe fb81 	bl	8002860 <HAL_GetTick>
 800415e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	f040 80d9 	bne.w	8004320 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2319      	movs	r3, #25
 8004174:	2201      	movs	r2, #1
 8004176:	496d      	ldr	r1, [pc, #436]	; (800432c <HAL_I2C_Mem_Write+0x1ec>)
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fcc1 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004184:	2302      	movs	r3, #2
 8004186:	e0cc      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_I2C_Mem_Write+0x56>
 8004192:	2302      	movs	r3, #2
 8004194:	e0c5      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d007      	beq.n	80041bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2221      	movs	r2, #33	; 0x21
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2240      	movs	r2, #64	; 0x40
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a4d      	ldr	r2, [pc, #308]	; (8004330 <HAL_I2C_Mem_Write+0x1f0>)
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041fe:	88f8      	ldrh	r0, [r7, #6]
 8004200:	893a      	ldrh	r2, [r7, #8]
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4603      	mov	r3, r0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 faf8 	bl	8004804 <I2C_RequestMemoryWrite>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d052      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e081      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fd42 	bl	8004cac <I2C_WaitOnTXEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b04      	cmp	r3, #4
 8004234:	d107      	bne.n	8004246 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e06b      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d11b      	bne.n	80042c0 <HAL_I2C_Mem_Write+0x180>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d017      	beq.n	80042c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1aa      	bne.n	800421e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fd2e 	bl	8004d2e <I2C_WaitOnBTFFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d107      	bne.n	80042f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e016      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	00100002 	.word	0x00100002
 8004330:	ffff0000 	.word	0xffff0000

08004334 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004352:	f7fe fa85 	bl	8002860 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b20      	cmp	r3, #32
 8004362:	f040 8244 	bne.w	80047ee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2319      	movs	r3, #25
 800436c:	2201      	movs	r2, #1
 800436e:	4982      	ldr	r1, [pc, #520]	; (8004578 <HAL_I2C_Mem_Read+0x244>)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fbc5 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
 800437e:	e237      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2C_Mem_Read+0x5a>
 800438a:	2302      	movs	r3, #2
 800438c:	e230      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d007      	beq.n	80043b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2222      	movs	r2, #34	; 0x22
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2240      	movs	r2, #64	; 0x40
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a62      	ldr	r2, [pc, #392]	; (800457c <HAL_I2C_Mem_Read+0x248>)
 80043f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043f6:	88f8      	ldrh	r0, [r7, #6]
 80043f8:	893a      	ldrh	r2, [r7, #8]
 80043fa:	8979      	ldrh	r1, [r7, #10]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4603      	mov	r3, r0
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fa92 	bl	8004930 <I2C_RequestMemoryRead>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1ec      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	2b00      	cmp	r3, #0
 800441c:	d113      	bne.n	8004446 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e1c0      	b.n	80047c8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	2b01      	cmp	r3, #1
 800444c:	d11e      	bne.n	800448c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800445e:	b672      	cpsid	i
}
 8004460:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004488:	b662      	cpsie	i
}
 800448a:	e035      	b.n	80044f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	2b02      	cmp	r3, #2
 8004492:	d11e      	bne.n	80044d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044a4:	b672      	cpsid	i
}
 80044a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044ce:	b662      	cpsie	i
}
 80044d0:	e012      	b.n	80044f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80044f8:	e166      	b.n	80047c8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	2b03      	cmp	r3, #3
 8004500:	f200 811f 	bhi.w	8004742 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	2b01      	cmp	r3, #1
 800450a:	d123      	bne.n	8004554 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fc4d 	bl	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e167      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004552:	e139      	b.n	80047c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	2b02      	cmp	r3, #2
 800455a:	d152      	bne.n	8004602 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004562:	2200      	movs	r2, #0
 8004564:	4906      	ldr	r1, [pc, #24]	; (8004580 <HAL_I2C_Mem_Read+0x24c>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 faca 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e13c      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
 8004576:	bf00      	nop
 8004578:	00100002 	.word	0x00100002
 800457c:	ffff0000 	.word	0xffff0000
 8004580:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004584:	b672      	cpsid	i
}
 8004586:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045ca:	b662      	cpsie	i
}
 80045cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004600:	e0e2      	b.n	80047c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	2200      	movs	r2, #0
 800460a:	497b      	ldr	r1, [pc, #492]	; (80047f8 <HAL_I2C_Mem_Read+0x4c4>)
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fa77 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0e9      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800462c:	b672      	cpsid	i
}
 800462e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004662:	4b66      	ldr	r3, [pc, #408]	; (80047fc <HAL_I2C_Mem_Read+0x4c8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	08db      	lsrs	r3, r3, #3
 8004668:	4a65      	ldr	r2, [pc, #404]	; (8004800 <HAL_I2C_Mem_Read+0x4cc>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0a1a      	lsrs	r2, r3, #8
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	00da      	lsls	r2, r3, #3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	3b01      	subs	r3, #1
 8004680:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d118      	bne.n	80046ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80046aa:	b662      	cpsie	i
}
 80046ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e09a      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d1d9      	bne.n	800467c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800470a:	b662      	cpsie	i
}
 800470c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004740:	e042      	b.n	80047c8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fb32 	bl	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e04c      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b04      	cmp	r3, #4
 8004794:	d118      	bne.n	80047c8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f ae94 	bne.w	80044fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	e000      	b.n	80047f0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
  }
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3728      	adds	r7, #40	; 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	00010004 	.word	0x00010004
 80047fc:	20000098 	.word	0x20000098
 8004800:	14f8b589 	.word	0x14f8b589

08004804 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	461a      	mov	r2, r3
 8004812:	4603      	mov	r3, r0
 8004814:	817b      	strh	r3, [r7, #10]
 8004816:	460b      	mov	r3, r1
 8004818:	813b      	strh	r3, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2200      	movs	r2, #0
 8004836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f960 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004854:	d103      	bne.n	800485e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e05f      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	492d      	ldr	r1, [pc, #180]	; (800492c <I2C_RequestMemoryWrite+0x128>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f998 	bl	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e04c      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa02 	bl	8004cac <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e02b      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	e021      	b.n	8004920 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f9dc 	bl	8004cac <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e005      	b.n	8004922 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004916:	893b      	ldrh	r3, [r7, #8]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	00010002 	.word	0x00010002

08004930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004958:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	2200      	movs	r2, #0
 8004972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f8c2 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d103      	bne.n	800499a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0aa      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	4952      	ldr	r1, [pc, #328]	; (8004afc <I2C_RequestMemoryRead+0x1cc>)
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f8fa 	bl	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e097      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	6a39      	ldr	r1, [r7, #32]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f964 	bl	8004cac <I2C_WaitOnTXEFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d107      	bne.n	8004a02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e076      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a06:	88fb      	ldrh	r3, [r7, #6]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d105      	bne.n	8004a18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	e021      	b.n	8004a5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a18:	893b      	ldrh	r3, [r7, #8]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	6a39      	ldr	r1, [r7, #32]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f93e 	bl	8004cac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00d      	beq.n	8004a52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d107      	bne.n	8004a4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e050      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a52:	893b      	ldrh	r3, [r7, #8]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	6a39      	ldr	r1, [r7, #32]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f923 	bl	8004cac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d107      	bne.n	8004a84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e035      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f82b 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abe:	d103      	bne.n	8004ac8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e013      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004acc:	897b      	ldrh	r3, [r7, #10]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	4906      	ldr	r1, [pc, #24]	; (8004afc <I2C_RequestMemoryRead+0x1cc>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f863 	bl	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	00010002 	.word	0x00010002

08004b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b10:	e025      	b.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b18:	d021      	beq.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1a:	f7fd fea1 	bl	8002860 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d116      	bne.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e023      	b.n	8004ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10d      	bne.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	e00c      	b.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	43da      	mvns	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bf0c      	ite	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	2300      	movne	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d0b6      	beq.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bbc:	e051      	b.n	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bcc:	d123      	bne.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e046      	b.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1c:	d021      	beq.n	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fd fe1f 	bl	8002860 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d116      	bne.n	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e020      	b.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d10c      	bne.n	8004c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e00b      	b.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	43da      	mvns	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	4013      	ands	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d18d      	bne.n	8004bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb8:	e02d      	b.n	8004d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f8ce 	bl	8004e5c <I2C_IsAcknowledgeFailed>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e02d      	b.n	8004d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd0:	d021      	beq.n	8004d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7fd fdc5 	bl	8002860 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d116      	bne.n	8004d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f043 0220 	orr.w	r2, r3, #32
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e007      	b.n	8004d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d1ca      	bne.n	8004cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d3a:	e02d      	b.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f88d 	bl	8004e5c <I2C_IsAcknowledgeFailed>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e02d      	b.n	8004da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d52:	d021      	beq.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d54:	f7fd fd84 	bl	8002860 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d116      	bne.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e007      	b.n	8004da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d1ca      	bne.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dbc:	e042      	b.n	8004e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d119      	bne.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0210 	mvn.w	r2, #16
 8004dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e029      	b.n	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e00:	f7fd fd2e 	bl	8002860 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d302      	bcc.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e007      	b.n	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	d1b5      	bne.n	8004dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d11b      	bne.n	8004eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f043 0204 	orr.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e304      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8087 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ed8:	4b92      	ldr	r3, [pc, #584]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d00c      	beq.n	8004efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ee4:	4b8f      	ldr	r3, [pc, #572]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d112      	bne.n	8004f16 <HAL_RCC_OscConfig+0x5e>
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d10b      	bne.n	8004f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efe:	4b89      	ldr	r3, [pc, #548]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d06c      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x12c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d168      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e2de      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCC_OscConfig+0x76>
 8004f20:	4b80      	ldr	r3, [pc, #512]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7f      	ldr	r2, [pc, #508]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e02e      	b.n	8004f8c <HAL_RCC_OscConfig+0xd4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x98>
 8004f36:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a7a      	ldr	r2, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b78      	ldr	r3, [pc, #480]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e01d      	b.n	8004f8c <HAL_RCC_OscConfig+0xd4>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f58:	d10c      	bne.n	8004f74 <HAL_RCC_OscConfig+0xbc>
 8004f5a:	4b72      	ldr	r3, [pc, #456]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a71      	ldr	r2, [pc, #452]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f64:	6013      	str	r3, [r2, #0]
 8004f66:	4b6f      	ldr	r3, [pc, #444]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6e      	ldr	r2, [pc, #440]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0xd4>
 8004f74:	4b6b      	ldr	r3, [pc, #428]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a6a      	ldr	r2, [pc, #424]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b68      	ldr	r3, [pc, #416]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a67      	ldr	r2, [pc, #412]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fd fc64 	bl	8002860 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fd fc60 	bl	8002860 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e292      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fae:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0xe4>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fc50 	bl	8002860 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fd fc4c 	bl	8002860 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e27e      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd6:	4b53      	ldr	r3, [pc, #332]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x10c>
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d063      	beq.n	80050ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ff2:	4b4c      	ldr	r3, [pc, #304]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ffe:	4b49      	ldr	r3, [pc, #292]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b08      	cmp	r3, #8
 8005008:	d11c      	bne.n	8005044 <HAL_RCC_OscConfig+0x18c>
 800500a:	4b46      	ldr	r3, [pc, #280]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d116      	bne.n	8005044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005016:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_RCC_OscConfig+0x176>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e252      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4939      	ldr	r1, [pc, #228]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005042:	e03a      	b.n	80050ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <HAL_RCC_OscConfig+0x270>)
 800504e:	2201      	movs	r2, #1
 8005050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005052:	f7fd fc05 	bl	8002860 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505a:	f7fd fc01 	bl	8002860 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e233      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506c:	4b2d      	ldr	r3, [pc, #180]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4927      	ldr	r1, [pc, #156]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 8005088:	4313      	orrs	r3, r2
 800508a:	600b      	str	r3, [r1, #0]
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508e:	4b26      	ldr	r3, [pc, #152]	; (8005128 <HAL_RCC_OscConfig+0x270>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fd fbe4 	bl	8002860 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800509c:	f7fd fbe0 	bl	8002860 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e212      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ae:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d03a      	beq.n	800513c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d019      	beq.n	8005102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <HAL_RCC_OscConfig+0x274>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d4:	f7fd fbc4 	bl	8002860 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050dc:	f7fd fbc0 	bl	8002860 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e1f2      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCC_OscConfig+0x26c>)
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f000 fbb6 	bl	800586c <RCC_Delay>
 8005100:	e01c      	b.n	800513c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_RCC_OscConfig+0x274>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005108:	f7fd fbaa 	bl	8002860 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510e:	e00f      	b.n	8005130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005110:	f7fd fba6 	bl	8002860 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d908      	bls.n	8005130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e1d8      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000
 8005128:	42420000 	.word	0x42420000
 800512c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005130:	4b9b      	ldr	r3, [pc, #620]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e9      	bne.n	8005110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80a6 	beq.w	8005296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514e:	4b94      	ldr	r3, [pc, #592]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10d      	bne.n	8005176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515a:	4b91      	ldr	r3, [pc, #580]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4a90      	ldr	r2, [pc, #576]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005164:	61d3      	str	r3, [r2, #28]
 8005166:	4b8e      	ldr	r3, [pc, #568]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b8b      	ldr	r3, [pc, #556]	; (80053a4 <HAL_RCC_OscConfig+0x4ec>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d118      	bne.n	80051b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005182:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x4ec>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a87      	ldr	r2, [pc, #540]	; (80053a4 <HAL_RCC_OscConfig+0x4ec>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518e:	f7fd fb67 	bl	8002860 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fd fb63 	bl	8002860 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b64      	cmp	r3, #100	; 0x64
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e195      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a8:	4b7e      	ldr	r3, [pc, #504]	; (80053a4 <HAL_RCC_OscConfig+0x4ec>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x312>
 80051bc:	4b78      	ldr	r3, [pc, #480]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	4a77      	ldr	r2, [pc, #476]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6213      	str	r3, [r2, #32]
 80051c8:	e02d      	b.n	8005226 <HAL_RCC_OscConfig+0x36e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0x334>
 80051d2:	4b73      	ldr	r3, [pc, #460]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4a72      	ldr	r2, [pc, #456]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	6213      	str	r3, [r2, #32]
 80051de:	4b70      	ldr	r3, [pc, #448]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	4a6f      	ldr	r2, [pc, #444]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051e4:	f023 0304 	bic.w	r3, r3, #4
 80051e8:	6213      	str	r3, [r2, #32]
 80051ea:	e01c      	b.n	8005226 <HAL_RCC_OscConfig+0x36e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	d10c      	bne.n	800520e <HAL_RCC_OscConfig+0x356>
 80051f4:	4b6a      	ldr	r3, [pc, #424]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	4a69      	ldr	r2, [pc, #420]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80051fa:	f043 0304 	orr.w	r3, r3, #4
 80051fe:	6213      	str	r3, [r2, #32]
 8005200:	4b67      	ldr	r3, [pc, #412]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	4a66      	ldr	r2, [pc, #408]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6213      	str	r3, [r2, #32]
 800520c:	e00b      	b.n	8005226 <HAL_RCC_OscConfig+0x36e>
 800520e:	4b64      	ldr	r3, [pc, #400]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	4a63      	ldr	r2, [pc, #396]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	6213      	str	r3, [r2, #32]
 800521a:	4b61      	ldr	r3, [pc, #388]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	4a60      	ldr	r2, [pc, #384]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005220:	f023 0304 	bic.w	r3, r3, #4
 8005224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d015      	beq.n	800525a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522e:	f7fd fb17 	bl	8002860 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005234:	e00a      	b.n	800524c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005236:	f7fd fb13 	bl	8002860 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f241 3288 	movw	r2, #5000	; 0x1388
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e143      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	4b54      	ldr	r3, [pc, #336]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0ee      	beq.n	8005236 <HAL_RCC_OscConfig+0x37e>
 8005258:	e014      	b.n	8005284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525a:	f7fd fb01 	bl	8002860 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005260:	e00a      	b.n	8005278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005262:	f7fd fafd 	bl	8002860 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e12d      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005278:	4b49      	ldr	r3, [pc, #292]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ee      	bne.n	8005262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005284:	7dfb      	ldrb	r3, [r7, #23]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528a:	4b45      	ldr	r3, [pc, #276]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4a44      	ldr	r2, [pc, #272]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005294:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 808c 	beq.w	80053b8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80052a0:	4b3f      	ldr	r3, [pc, #252]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ac:	d10e      	bne.n	80052cc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80052ae:	4b3c      	ldr	r3, [pc, #240]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d108      	bne.n	80052cc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80052c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e103      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d14e      	bne.n	8005372 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80052d4:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80052e0:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0ef      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80052f4:	4b2c      	ldr	r3, [pc, #176]	; (80053a8 <HAL_RCC_OscConfig+0x4f0>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fa:	f7fd fab1 	bl	8002860 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005302:	f7fd faad 	bl	8002860 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b64      	cmp	r3, #100	; 0x64
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e0df      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005314:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f0      	bne.n	8005302 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005320:	4b1f      	ldr	r3, [pc, #124]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	491c      	ldr	r1, [pc, #112]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 800532e:	4313      	orrs	r3, r2
 8005330:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4918      	ldr	r1, [pc, #96]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005340:	4313      	orrs	r3, r2
 8005342:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <HAL_RCC_OscConfig+0x4f0>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fd fa89 	bl	8002860 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005352:	f7fd fa85 	bl	8002860 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b64      	cmp	r3, #100	; 0x64
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0b7      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005364:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x49a>
 8005370:	e022      	b.n	80053b8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_RCC_OscConfig+0x4e8>)
 8005378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800537c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <HAL_RCC_OscConfig+0x4f0>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fd fa6c 	bl	8002860 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800538a:	e00f      	b.n	80053ac <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800538c:	f7fd fa68 	bl	8002860 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	; 0x64
 8005398:	d908      	bls.n	80053ac <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e09a      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40007000 	.word	0x40007000
 80053a8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80053ac:	4b4b      	ldr	r3, [pc, #300]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e9      	bne.n	800538c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8088 	beq.w	80054d2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053c2:	4b46      	ldr	r3, [pc, #280]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d068      	beq.n	80054a0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d14d      	bne.n	8005472 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d6:	4b42      	ldr	r3, [pc, #264]	; (80054e0 <HAL_RCC_OscConfig+0x628>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fd fa40 	bl	8002860 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fd fa3c 	bl	8002860 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e06e      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f6:	4b39      	ldr	r3, [pc, #228]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d10f      	bne.n	800542c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800540c:	4b33      	ldr	r3, [pc, #204]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4931      	ldr	r1, [pc, #196]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 8005416:	4313      	orrs	r3, r2
 8005418:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800541a:	4b30      	ldr	r3, [pc, #192]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	f023 020f 	bic.w	r2, r3, #15
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	492d      	ldr	r1, [pc, #180]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 8005428:	4313      	orrs	r3, r2
 800542a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800542c:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	430b      	orrs	r3, r1
 800543e:	4927      	ldr	r1, [pc, #156]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005444:	4b26      	ldr	r3, [pc, #152]	; (80054e0 <HAL_RCC_OscConfig+0x628>)
 8005446:	2201      	movs	r2, #1
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fd fa09 	bl	8002860 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005452:	f7fd fa05 	bl	8002860 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e037      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005464:	4b1d      	ldr	r3, [pc, #116]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x59a>
 8005470:	e02f      	b.n	80054d2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005472:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <HAL_RCC_OscConfig+0x628>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fd f9f2 	bl	8002860 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005480:	f7fd f9ee 	bl	8002860 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e020      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x5c8>
 800549e:	e018      	b.n	80054d2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e013      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_OscConfig+0x624>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	429a      	cmp	r2, r3
 80054be:	d106      	bne.n	80054ce <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40021000 	.word	0x40021000
 80054e0:	42420060 	.word	0x42420060

080054e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e0d0      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054f8:	4b6a      	ldr	r3, [pc, #424]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d910      	bls.n	8005528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005506:	4b67      	ldr	r3, [pc, #412]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 0207 	bic.w	r2, r3, #7
 800550e:	4965      	ldr	r1, [pc, #404]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b63      	ldr	r3, [pc, #396]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0b8      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005540:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a58      	ldr	r2, [pc, #352]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800554a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005558:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800555e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	494d      	ldr	r1, [pc, #308]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d040      	beq.n	8005604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d115      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e07f      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055a2:	4b41      	ldr	r3, [pc, #260]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e073      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b2:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e06b      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055c2:	4b39      	ldr	r3, [pc, #228]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f023 0203 	bic.w	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4936      	ldr	r1, [pc, #216]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055d4:	f7fd f944 	bl	8002860 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055da:	e00a      	b.n	80055f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055dc:	f7fd f940 	bl	8002860 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e053      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f003 020c 	and.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	429a      	cmp	r2, r3
 8005602:	d1eb      	bne.n	80055dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005604:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d210      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 0207 	bic.w	r2, r3, #7
 800561a:	4922      	ldr	r1, [pc, #136]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	4313      	orrs	r3, r2
 8005620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e032      	b.n	800569a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4916      	ldr	r1, [pc, #88]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800564e:	4313      	orrs	r3, r2
 8005650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	490e      	ldr	r1, [pc, #56]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005672:	f000 f821 	bl	80056b8 <HAL_RCC_GetSysClockFreq>
 8005676:	4602      	mov	r2, r0
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_ClockConfig+0x1c4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	490a      	ldr	r1, [pc, #40]	; (80056ac <HAL_RCC_ClockConfig+0x1c8>)
 8005684:	5ccb      	ldrb	r3, [r1, r3]
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <HAL_RCC_ClockConfig+0x1cc>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd f8a2 	bl	80027dc <HAL_InitTick>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40022000 	.word	0x40022000
 80056a8:	40021000 	.word	0x40021000
 80056ac:	08006e8c 	.word	0x08006e8c
 80056b0:	20000098 	.word	0x20000098
 80056b4:	2000009c 	.word	0x2000009c

080056b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	b091      	sub	sp, #68	; 0x44
 80056bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80056be:	4b56      	ldr	r3, [pc, #344]	; (8005818 <HAL_RCC_GetSysClockFreq+0x160>)
 80056c0:	f107 0414 	add.w	r4, r7, #20
 80056c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056c6:	c407      	stmia	r4!, {r0, r1, r2}
 80056c8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80056ca:	4b54      	ldr	r3, [pc, #336]	; (800581c <HAL_RCC_GetSysClockFreq+0x164>)
 80056cc:	1d3c      	adds	r4, r7, #4
 80056ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
 80056d8:	2300      	movs	r3, #0
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	2300      	movs	r3, #0
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ec:	2300      	movs	r3, #0
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056f0:	4b4b      	ldr	r3, [pc, #300]	; (8005820 <HAL_RCC_GetSysClockFreq+0x168>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f8:	f003 030c 	and.w	r3, r3, #12
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d002      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x4e>
 8005700:	2b08      	cmp	r3, #8
 8005702:	d003      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x54>
 8005704:	e080      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005706:	4b47      	ldr	r3, [pc, #284]	; (8005824 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005708:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800570a:	e080      	b.n	800580e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	0c9b      	lsrs	r3, r3, #18
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005718:	4413      	add	r3, r2
 800571a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d066      	beq.n	80057f8 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800572a:	4b3d      	ldr	r3, [pc, #244]	; (8005820 <HAL_RCC_GetSysClockFreq+0x168>)
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005736:	4413      	add	r3, r2
 8005738:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800573c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800573e:	4b38      	ldr	r3, [pc, #224]	; (8005820 <HAL_RCC_GetSysClockFreq+0x168>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d044      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800574a:	4b35      	ldr	r3, [pc, #212]	; (8005820 <HAL_RCC_GetSysClockFreq+0x168>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	3301      	adds	r3, #1
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <HAL_RCC_GetSysClockFreq+0x168>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	3302      	adds	r3, #2
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	4618      	mov	r0, r3
 800576a:	f04f 0100 	mov.w	r1, #0
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	461a      	mov	r2, r3
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	fb02 f501 	mul.w	r5, r2, r1
 800577a:	fb00 f403 	mul.w	r4, r0, r3
 800577e:	442c      	add	r4, r5
 8005780:	fba0 2302 	umull	r2, r3, r0, r2
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	460b      	mov	r3, r1
 8005788:	4926      	ldr	r1, [pc, #152]	; (8005824 <HAL_RCC_GetSysClockFreq+0x16c>)
 800578a:	fb01 f003 	mul.w	r0, r1, r3
 800578e:	2100      	movs	r1, #0
 8005790:	fb01 f102 	mul.w	r1, r1, r2
 8005794:	4401      	add	r1, r0
 8005796:	4823      	ldr	r0, [pc, #140]	; (8005824 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005798:	fba2 4500 	umull	r4, r5, r2, r0
 800579c:	194b      	adds	r3, r1, r5
 800579e:	461d      	mov	r5, r3
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	4618      	mov	r0, r3
 80057a4:	f04f 0100 	mov.w	r1, #0
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	461a      	mov	r2, r3
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	fb02 fc01 	mul.w	ip, r2, r1
 80057b4:	fb00 f603 	mul.w	r6, r0, r3
 80057b8:	4466      	add	r6, ip
 80057ba:	fba0 2302 	umull	r2, r3, r0, r2
 80057be:	18f1      	adds	r1, r6, r3
 80057c0:	460b      	mov	r3, r1
 80057c2:	4620      	mov	r0, r4
 80057c4:	4629      	mov	r1, r5
 80057c6:	f7fb fc21 	bl	800100c <__aeabi_uldivmod>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4613      	mov	r3, r2
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d2:	e007      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	4a13      	ldr	r2, [pc, #76]	; (8005824 <HAL_RCC_GetSysClockFreq+0x16c>)
 80057d8:	fb02 f203 	mul.w	r2, r2, r3
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80057e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80057e8:	461a      	mov	r2, r3
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d108      	bne.n	8005802 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f6:	e004      	b.n	8005802 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	4a0b      	ldr	r2, [pc, #44]	; (8005828 <HAL_RCC_GetSysClockFreq+0x170>)
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8005802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005806:	e002      	b.n	800580e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005808:	4b08      	ldr	r3, [pc, #32]	; (800582c <HAL_RCC_GetSysClockFreq+0x174>)
 800580a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800580c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005810:	4618      	mov	r0, r3
 8005812:	3744      	adds	r7, #68	; 0x44
 8005814:	46bd      	mov	sp, r7
 8005816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005818:	08006e6c 	.word	0x08006e6c
 800581c:	08006e7c 	.word	0x08006e7c
 8005820:	40021000 	.word	0x40021000
 8005824:	017d7840 	.word	0x017d7840
 8005828:	003d0900 	.word	0x003d0900
 800582c:	007a1200 	.word	0x007a1200

08005830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005834:	4b02      	ldr	r3, [pc, #8]	; (8005840 <HAL_RCC_GetHCLKFreq+0x10>)
 8005836:	681b      	ldr	r3, [r3, #0]
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr
 8005840:	20000098 	.word	0x20000098

08005844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005848:	f7ff fff2 	bl	8005830 <HAL_RCC_GetHCLKFreq>
 800584c:	4602      	mov	r2, r0
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	4903      	ldr	r1, [pc, #12]	; (8005868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800585a:	5ccb      	ldrb	r3, [r1, r3]
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40021000 	.word	0x40021000
 8005868:	08006e9c 	.word	0x08006e9c

0800586c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <RCC_Delay+0x34>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <RCC_Delay+0x38>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	0a5b      	lsrs	r3, r3, #9
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005888:	bf00      	nop
  }
  while (Delay --);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1e5a      	subs	r2, r3, #1
 800588e:	60fa      	str	r2, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f9      	bne.n	8005888 <RCC_Delay+0x1c>
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr
 80058a0:	20000098 	.word	0x20000098
 80058a4:	10624dd3 	.word	0x10624dd3

080058a8 <__errno>:
 80058a8:	4b01      	ldr	r3, [pc, #4]	; (80058b0 <__errno+0x8>)
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	200000a4 	.word	0x200000a4

080058b4 <__libc_init_array>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	2600      	movs	r6, #0
 80058b8:	4d0c      	ldr	r5, [pc, #48]	; (80058ec <__libc_init_array+0x38>)
 80058ba:	4c0d      	ldr	r4, [pc, #52]	; (80058f0 <__libc_init_array+0x3c>)
 80058bc:	1b64      	subs	r4, r4, r5
 80058be:	10a4      	asrs	r4, r4, #2
 80058c0:	42a6      	cmp	r6, r4
 80058c2:	d109      	bne.n	80058d8 <__libc_init_array+0x24>
 80058c4:	f001 fabe 	bl	8006e44 <_init>
 80058c8:	2600      	movs	r6, #0
 80058ca:	4d0a      	ldr	r5, [pc, #40]	; (80058f4 <__libc_init_array+0x40>)
 80058cc:	4c0a      	ldr	r4, [pc, #40]	; (80058f8 <__libc_init_array+0x44>)
 80058ce:	1b64      	subs	r4, r4, r5
 80058d0:	10a4      	asrs	r4, r4, #2
 80058d2:	42a6      	cmp	r6, r4
 80058d4:	d105      	bne.n	80058e2 <__libc_init_array+0x2e>
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058dc:	4798      	blx	r3
 80058de:	3601      	adds	r6, #1
 80058e0:	e7ee      	b.n	80058c0 <__libc_init_array+0xc>
 80058e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e6:	4798      	blx	r3
 80058e8:	3601      	adds	r6, #1
 80058ea:	e7f2      	b.n	80058d2 <__libc_init_array+0x1e>
 80058ec:	08006fb8 	.word	0x08006fb8
 80058f0:	08006fb8 	.word	0x08006fb8
 80058f4:	08006fb8 	.word	0x08006fb8
 80058f8:	08006fbc 	.word	0x08006fbc

080058fc <memset>:
 80058fc:	4603      	mov	r3, r0
 80058fe:	4402      	add	r2, r0
 8005900:	4293      	cmp	r3, r2
 8005902:	d100      	bne.n	8005906 <memset+0xa>
 8005904:	4770      	bx	lr
 8005906:	f803 1b01 	strb.w	r1, [r3], #1
 800590a:	e7f9      	b.n	8005900 <memset+0x4>

0800590c <iprintf>:
 800590c:	b40f      	push	{r0, r1, r2, r3}
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <iprintf+0x2c>)
 8005910:	b513      	push	{r0, r1, r4, lr}
 8005912:	681c      	ldr	r4, [r3, #0]
 8005914:	b124      	cbz	r4, 8005920 <iprintf+0x14>
 8005916:	69a3      	ldr	r3, [r4, #24]
 8005918:	b913      	cbnz	r3, 8005920 <iprintf+0x14>
 800591a:	4620      	mov	r0, r4
 800591c:	f000 f866 	bl	80059ec <__sinit>
 8005920:	ab05      	add	r3, sp, #20
 8005922:	4620      	mov	r0, r4
 8005924:	9a04      	ldr	r2, [sp, #16]
 8005926:	68a1      	ldr	r1, [r4, #8]
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	f000 f981 	bl	8005c30 <_vfiprintf_r>
 800592e:	b002      	add	sp, #8
 8005930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005934:	b004      	add	sp, #16
 8005936:	4770      	bx	lr
 8005938:	200000a4 	.word	0x200000a4

0800593c <std>:
 800593c:	2300      	movs	r3, #0
 800593e:	b510      	push	{r4, lr}
 8005940:	4604      	mov	r4, r0
 8005942:	e9c0 3300 	strd	r3, r3, [r0]
 8005946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800594a:	6083      	str	r3, [r0, #8]
 800594c:	8181      	strh	r1, [r0, #12]
 800594e:	6643      	str	r3, [r0, #100]	; 0x64
 8005950:	81c2      	strh	r2, [r0, #14]
 8005952:	6183      	str	r3, [r0, #24]
 8005954:	4619      	mov	r1, r3
 8005956:	2208      	movs	r2, #8
 8005958:	305c      	adds	r0, #92	; 0x5c
 800595a:	f7ff ffcf 	bl	80058fc <memset>
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <std+0x38>)
 8005960:	6224      	str	r4, [r4, #32]
 8005962:	6263      	str	r3, [r4, #36]	; 0x24
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <std+0x3c>)
 8005966:	62a3      	str	r3, [r4, #40]	; 0x28
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <std+0x40>)
 800596a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <std+0x44>)
 800596e:	6323      	str	r3, [r4, #48]	; 0x30
 8005970:	bd10      	pop	{r4, pc}
 8005972:	bf00      	nop
 8005974:	080061dd 	.word	0x080061dd
 8005978:	080061ff 	.word	0x080061ff
 800597c:	08006237 	.word	0x08006237
 8005980:	0800625b 	.word	0x0800625b

08005984 <_cleanup_r>:
 8005984:	4901      	ldr	r1, [pc, #4]	; (800598c <_cleanup_r+0x8>)
 8005986:	f000 b8af 	b.w	8005ae8 <_fwalk_reent>
 800598a:	bf00      	nop
 800598c:	08006535 	.word	0x08006535

08005990 <__sfmoreglue>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	2568      	movs	r5, #104	; 0x68
 8005994:	1e4a      	subs	r2, r1, #1
 8005996:	4355      	muls	r5, r2
 8005998:	460e      	mov	r6, r1
 800599a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800599e:	f000 f8c5 	bl	8005b2c <_malloc_r>
 80059a2:	4604      	mov	r4, r0
 80059a4:	b140      	cbz	r0, 80059b8 <__sfmoreglue+0x28>
 80059a6:	2100      	movs	r1, #0
 80059a8:	e9c0 1600 	strd	r1, r6, [r0]
 80059ac:	300c      	adds	r0, #12
 80059ae:	60a0      	str	r0, [r4, #8]
 80059b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059b4:	f7ff ffa2 	bl	80058fc <memset>
 80059b8:	4620      	mov	r0, r4
 80059ba:	bd70      	pop	{r4, r5, r6, pc}

080059bc <__sfp_lock_acquire>:
 80059bc:	4801      	ldr	r0, [pc, #4]	; (80059c4 <__sfp_lock_acquire+0x8>)
 80059be:	f000 b8b3 	b.w	8005b28 <__retarget_lock_acquire_recursive>
 80059c2:	bf00      	nop
 80059c4:	200002f8 	.word	0x200002f8

080059c8 <__sfp_lock_release>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__sfp_lock_release+0x8>)
 80059ca:	f000 b8ae 	b.w	8005b2a <__retarget_lock_release_recursive>
 80059ce:	bf00      	nop
 80059d0:	200002f8 	.word	0x200002f8

080059d4 <__sinit_lock_acquire>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__sinit_lock_acquire+0x8>)
 80059d6:	f000 b8a7 	b.w	8005b28 <__retarget_lock_acquire_recursive>
 80059da:	bf00      	nop
 80059dc:	200002f3 	.word	0x200002f3

080059e0 <__sinit_lock_release>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__sinit_lock_release+0x8>)
 80059e2:	f000 b8a2 	b.w	8005b2a <__retarget_lock_release_recursive>
 80059e6:	bf00      	nop
 80059e8:	200002f3 	.word	0x200002f3

080059ec <__sinit>:
 80059ec:	b510      	push	{r4, lr}
 80059ee:	4604      	mov	r4, r0
 80059f0:	f7ff fff0 	bl	80059d4 <__sinit_lock_acquire>
 80059f4:	69a3      	ldr	r3, [r4, #24]
 80059f6:	b11b      	cbz	r3, 8005a00 <__sinit+0x14>
 80059f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059fc:	f7ff bff0 	b.w	80059e0 <__sinit_lock_release>
 8005a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a04:	6523      	str	r3, [r4, #80]	; 0x50
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <__sinit+0x68>)
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <__sinit+0x6c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a0e:	42a3      	cmp	r3, r4
 8005a10:	bf08      	it	eq
 8005a12:	2301      	moveq	r3, #1
 8005a14:	4620      	mov	r0, r4
 8005a16:	bf08      	it	eq
 8005a18:	61a3      	streq	r3, [r4, #24]
 8005a1a:	f000 f81f 	bl	8005a5c <__sfp>
 8005a1e:	6060      	str	r0, [r4, #4]
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 f81b 	bl	8005a5c <__sfp>
 8005a26:	60a0      	str	r0, [r4, #8]
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 f817 	bl	8005a5c <__sfp>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2104      	movs	r1, #4
 8005a32:	60e0      	str	r0, [r4, #12]
 8005a34:	6860      	ldr	r0, [r4, #4]
 8005a36:	f7ff ff81 	bl	800593c <std>
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	2109      	movs	r1, #9
 8005a3e:	68a0      	ldr	r0, [r4, #8]
 8005a40:	f7ff ff7c 	bl	800593c <std>
 8005a44:	2202      	movs	r2, #2
 8005a46:	2112      	movs	r1, #18
 8005a48:	68e0      	ldr	r0, [r4, #12]
 8005a4a:	f7ff ff77 	bl	800593c <std>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	61a3      	str	r3, [r4, #24]
 8005a52:	e7d1      	b.n	80059f8 <__sinit+0xc>
 8005a54:	08006ea4 	.word	0x08006ea4
 8005a58:	08005985 	.word	0x08005985

08005a5c <__sfp>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	4607      	mov	r7, r0
 8005a60:	f7ff ffac 	bl	80059bc <__sfp_lock_acquire>
 8005a64:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <__sfp+0x84>)
 8005a66:	681e      	ldr	r6, [r3, #0]
 8005a68:	69b3      	ldr	r3, [r6, #24]
 8005a6a:	b913      	cbnz	r3, 8005a72 <__sfp+0x16>
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f7ff ffbd 	bl	80059ec <__sinit>
 8005a72:	3648      	adds	r6, #72	; 0x48
 8005a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	d503      	bpl.n	8005a84 <__sfp+0x28>
 8005a7c:	6833      	ldr	r3, [r6, #0]
 8005a7e:	b30b      	cbz	r3, 8005ac4 <__sfp+0x68>
 8005a80:	6836      	ldr	r6, [r6, #0]
 8005a82:	e7f7      	b.n	8005a74 <__sfp+0x18>
 8005a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a88:	b9d5      	cbnz	r5, 8005ac0 <__sfp+0x64>
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <__sfp+0x88>)
 8005a8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a90:	60e3      	str	r3, [r4, #12]
 8005a92:	6665      	str	r5, [r4, #100]	; 0x64
 8005a94:	f000 f847 	bl	8005b26 <__retarget_lock_init_recursive>
 8005a98:	f7ff ff96 	bl	80059c8 <__sfp_lock_release>
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005aa8:	6025      	str	r5, [r4, #0]
 8005aaa:	61a5      	str	r5, [r4, #24]
 8005aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ab0:	f7ff ff24 	bl	80058fc <memset>
 8005ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005abc:	4620      	mov	r0, r4
 8005abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac0:	3468      	adds	r4, #104	; 0x68
 8005ac2:	e7d9      	b.n	8005a78 <__sfp+0x1c>
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff ff62 	bl	8005990 <__sfmoreglue>
 8005acc:	4604      	mov	r4, r0
 8005ace:	6030      	str	r0, [r6, #0]
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d1d5      	bne.n	8005a80 <__sfp+0x24>
 8005ad4:	f7ff ff78 	bl	80059c8 <__sfp_lock_release>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	e7ee      	b.n	8005abc <__sfp+0x60>
 8005ade:	bf00      	nop
 8005ae0:	08006ea4 	.word	0x08006ea4
 8005ae4:	ffff0001 	.word	0xffff0001

08005ae8 <_fwalk_reent>:
 8005ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	4606      	mov	r6, r0
 8005aee:	4688      	mov	r8, r1
 8005af0:	2700      	movs	r7, #0
 8005af2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005afa:	f1b9 0901 	subs.w	r9, r9, #1
 8005afe:	d505      	bpl.n	8005b0c <_fwalk_reent+0x24>
 8005b00:	6824      	ldr	r4, [r4, #0]
 8005b02:	2c00      	cmp	r4, #0
 8005b04:	d1f7      	bne.n	8005af6 <_fwalk_reent+0xe>
 8005b06:	4638      	mov	r0, r7
 8005b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b0c:	89ab      	ldrh	r3, [r5, #12]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d907      	bls.n	8005b22 <_fwalk_reent+0x3a>
 8005b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b16:	3301      	adds	r3, #1
 8005b18:	d003      	beq.n	8005b22 <_fwalk_reent+0x3a>
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	47c0      	blx	r8
 8005b20:	4307      	orrs	r7, r0
 8005b22:	3568      	adds	r5, #104	; 0x68
 8005b24:	e7e9      	b.n	8005afa <_fwalk_reent+0x12>

08005b26 <__retarget_lock_init_recursive>:
 8005b26:	4770      	bx	lr

08005b28 <__retarget_lock_acquire_recursive>:
 8005b28:	4770      	bx	lr

08005b2a <__retarget_lock_release_recursive>:
 8005b2a:	4770      	bx	lr

08005b2c <_malloc_r>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	1ccd      	adds	r5, r1, #3
 8005b30:	f025 0503 	bic.w	r5, r5, #3
 8005b34:	3508      	adds	r5, #8
 8005b36:	2d0c      	cmp	r5, #12
 8005b38:	bf38      	it	cc
 8005b3a:	250c      	movcc	r5, #12
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	4606      	mov	r6, r0
 8005b40:	db01      	blt.n	8005b46 <_malloc_r+0x1a>
 8005b42:	42a9      	cmp	r1, r5
 8005b44:	d903      	bls.n	8005b4e <_malloc_r+0x22>
 8005b46:	230c      	movs	r3, #12
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b4e:	f000 fdb1 	bl	80066b4 <__malloc_lock>
 8005b52:	4921      	ldr	r1, [pc, #132]	; (8005bd8 <_malloc_r+0xac>)
 8005b54:	680a      	ldr	r2, [r1, #0]
 8005b56:	4614      	mov	r4, r2
 8005b58:	b99c      	cbnz	r4, 8005b82 <_malloc_r+0x56>
 8005b5a:	4f20      	ldr	r7, [pc, #128]	; (8005bdc <_malloc_r+0xb0>)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	b923      	cbnz	r3, 8005b6a <_malloc_r+0x3e>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 fb2a 	bl	80061bc <_sbrk_r>
 8005b68:	6038      	str	r0, [r7, #0]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 fb25 	bl	80061bc <_sbrk_r>
 8005b72:	1c43      	adds	r3, r0, #1
 8005b74:	d123      	bne.n	8005bbe <_malloc_r+0x92>
 8005b76:	230c      	movs	r3, #12
 8005b78:	4630      	mov	r0, r6
 8005b7a:	6033      	str	r3, [r6, #0]
 8005b7c:	f000 fda0 	bl	80066c0 <__malloc_unlock>
 8005b80:	e7e3      	b.n	8005b4a <_malloc_r+0x1e>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	1b5b      	subs	r3, r3, r5
 8005b86:	d417      	bmi.n	8005bb8 <_malloc_r+0x8c>
 8005b88:	2b0b      	cmp	r3, #11
 8005b8a:	d903      	bls.n	8005b94 <_malloc_r+0x68>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	441c      	add	r4, r3
 8005b90:	6025      	str	r5, [r4, #0]
 8005b92:	e004      	b.n	8005b9e <_malloc_r+0x72>
 8005b94:	6863      	ldr	r3, [r4, #4]
 8005b96:	42a2      	cmp	r2, r4
 8005b98:	bf0c      	ite	eq
 8005b9a:	600b      	streq	r3, [r1, #0]
 8005b9c:	6053      	strne	r3, [r2, #4]
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f000 fd8e 	bl	80066c0 <__malloc_unlock>
 8005ba4:	f104 000b 	add.w	r0, r4, #11
 8005ba8:	1d23      	adds	r3, r4, #4
 8005baa:	f020 0007 	bic.w	r0, r0, #7
 8005bae:	1ac2      	subs	r2, r0, r3
 8005bb0:	d0cc      	beq.n	8005b4c <_malloc_r+0x20>
 8005bb2:	1a1b      	subs	r3, r3, r0
 8005bb4:	50a3      	str	r3, [r4, r2]
 8005bb6:	e7c9      	b.n	8005b4c <_malloc_r+0x20>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	6864      	ldr	r4, [r4, #4]
 8005bbc:	e7cc      	b.n	8005b58 <_malloc_r+0x2c>
 8005bbe:	1cc4      	adds	r4, r0, #3
 8005bc0:	f024 0403 	bic.w	r4, r4, #3
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d0e3      	beq.n	8005b90 <_malloc_r+0x64>
 8005bc8:	1a21      	subs	r1, r4, r0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 faf6 	bl	80061bc <_sbrk_r>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d1dd      	bne.n	8005b90 <_malloc_r+0x64>
 8005bd4:	e7cf      	b.n	8005b76 <_malloc_r+0x4a>
 8005bd6:	bf00      	nop
 8005bd8:	20000134 	.word	0x20000134
 8005bdc:	20000138 	.word	0x20000138

08005be0 <__sfputc_r>:
 8005be0:	6893      	ldr	r3, [r2, #8]
 8005be2:	b410      	push	{r4}
 8005be4:	3b01      	subs	r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	6093      	str	r3, [r2, #8]
 8005bea:	da07      	bge.n	8005bfc <__sfputc_r+0x1c>
 8005bec:	6994      	ldr	r4, [r2, #24]
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	db01      	blt.n	8005bf6 <__sfputc_r+0x16>
 8005bf2:	290a      	cmp	r1, #10
 8005bf4:	d102      	bne.n	8005bfc <__sfputc_r+0x1c>
 8005bf6:	bc10      	pop	{r4}
 8005bf8:	f000 bb34 	b.w	8006264 <__swbuf_r>
 8005bfc:	6813      	ldr	r3, [r2, #0]
 8005bfe:	1c58      	adds	r0, r3, #1
 8005c00:	6010      	str	r0, [r2, #0]
 8005c02:	7019      	strb	r1, [r3, #0]
 8005c04:	4608      	mov	r0, r1
 8005c06:	bc10      	pop	{r4}
 8005c08:	4770      	bx	lr

08005c0a <__sfputs_r>:
 8005c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	460f      	mov	r7, r1
 8005c10:	4614      	mov	r4, r2
 8005c12:	18d5      	adds	r5, r2, r3
 8005c14:	42ac      	cmp	r4, r5
 8005c16:	d101      	bne.n	8005c1c <__sfputs_r+0x12>
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e007      	b.n	8005c2c <__sfputs_r+0x22>
 8005c1c:	463a      	mov	r2, r7
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	f7ff ffdc 	bl	8005be0 <__sfputc_r>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d1f3      	bne.n	8005c14 <__sfputs_r+0xa>
 8005c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c30 <_vfiprintf_r>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	460d      	mov	r5, r1
 8005c36:	4614      	mov	r4, r2
 8005c38:	4698      	mov	r8, r3
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	b09d      	sub	sp, #116	; 0x74
 8005c3e:	b118      	cbz	r0, 8005c48 <_vfiprintf_r+0x18>
 8005c40:	6983      	ldr	r3, [r0, #24]
 8005c42:	b90b      	cbnz	r3, 8005c48 <_vfiprintf_r+0x18>
 8005c44:	f7ff fed2 	bl	80059ec <__sinit>
 8005c48:	4b89      	ldr	r3, [pc, #548]	; (8005e70 <_vfiprintf_r+0x240>)
 8005c4a:	429d      	cmp	r5, r3
 8005c4c:	d11b      	bne.n	8005c86 <_vfiprintf_r+0x56>
 8005c4e:	6875      	ldr	r5, [r6, #4]
 8005c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c52:	07d9      	lsls	r1, r3, #31
 8005c54:	d405      	bmi.n	8005c62 <_vfiprintf_r+0x32>
 8005c56:	89ab      	ldrh	r3, [r5, #12]
 8005c58:	059a      	lsls	r2, r3, #22
 8005c5a:	d402      	bmi.n	8005c62 <_vfiprintf_r+0x32>
 8005c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c5e:	f7ff ff63 	bl	8005b28 <__retarget_lock_acquire_recursive>
 8005c62:	89ab      	ldrh	r3, [r5, #12]
 8005c64:	071b      	lsls	r3, r3, #28
 8005c66:	d501      	bpl.n	8005c6c <_vfiprintf_r+0x3c>
 8005c68:	692b      	ldr	r3, [r5, #16]
 8005c6a:	b9eb      	cbnz	r3, 8005ca8 <_vfiprintf_r+0x78>
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f000 fb5c 	bl	800632c <__swsetup_r>
 8005c74:	b1c0      	cbz	r0, 8005ca8 <_vfiprintf_r+0x78>
 8005c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c78:	07dc      	lsls	r4, r3, #31
 8005c7a:	d50e      	bpl.n	8005c9a <_vfiprintf_r+0x6a>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c80:	b01d      	add	sp, #116	; 0x74
 8005c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c86:	4b7b      	ldr	r3, [pc, #492]	; (8005e74 <_vfiprintf_r+0x244>)
 8005c88:	429d      	cmp	r5, r3
 8005c8a:	d101      	bne.n	8005c90 <_vfiprintf_r+0x60>
 8005c8c:	68b5      	ldr	r5, [r6, #8]
 8005c8e:	e7df      	b.n	8005c50 <_vfiprintf_r+0x20>
 8005c90:	4b79      	ldr	r3, [pc, #484]	; (8005e78 <_vfiprintf_r+0x248>)
 8005c92:	429d      	cmp	r5, r3
 8005c94:	bf08      	it	eq
 8005c96:	68f5      	ldreq	r5, [r6, #12]
 8005c98:	e7da      	b.n	8005c50 <_vfiprintf_r+0x20>
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	0598      	lsls	r0, r3, #22
 8005c9e:	d4ed      	bmi.n	8005c7c <_vfiprintf_r+0x4c>
 8005ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ca2:	f7ff ff42 	bl	8005b2a <__retarget_lock_release_recursive>
 8005ca6:	e7e9      	b.n	8005c7c <_vfiprintf_r+0x4c>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cac:	2320      	movs	r3, #32
 8005cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cb2:	2330      	movs	r3, #48	; 0x30
 8005cb4:	f04f 0901 	mov.w	r9, #1
 8005cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005e7c <_vfiprintf_r+0x24c>
 8005cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cc4:	4623      	mov	r3, r4
 8005cc6:	469a      	mov	sl, r3
 8005cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ccc:	b10a      	cbz	r2, 8005cd2 <_vfiprintf_r+0xa2>
 8005cce:	2a25      	cmp	r2, #37	; 0x25
 8005cd0:	d1f9      	bne.n	8005cc6 <_vfiprintf_r+0x96>
 8005cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8005cd6:	d00b      	beq.n	8005cf0 <_vfiprintf_r+0xc0>
 8005cd8:	465b      	mov	r3, fp
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7ff ff93 	bl	8005c0a <__sfputs_r>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f000 80aa 	beq.w	8005e3e <_vfiprintf_r+0x20e>
 8005cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cec:	445a      	add	r2, fp
 8005cee:	9209      	str	r2, [sp, #36]	; 0x24
 8005cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80a2 	beq.w	8005e3e <_vfiprintf_r+0x20e>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d04:	f10a 0a01 	add.w	sl, sl, #1
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	9307      	str	r3, [sp, #28]
 8005d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d10:	931a      	str	r3, [sp, #104]	; 0x68
 8005d12:	4654      	mov	r4, sl
 8005d14:	2205      	movs	r2, #5
 8005d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1a:	4858      	ldr	r0, [pc, #352]	; (8005e7c <_vfiprintf_r+0x24c>)
 8005d1c:	f000 fcbc 	bl	8006698 <memchr>
 8005d20:	9a04      	ldr	r2, [sp, #16]
 8005d22:	b9d8      	cbnz	r0, 8005d5c <_vfiprintf_r+0x12c>
 8005d24:	06d1      	lsls	r1, r2, #27
 8005d26:	bf44      	itt	mi
 8005d28:	2320      	movmi	r3, #32
 8005d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d2e:	0713      	lsls	r3, r2, #28
 8005d30:	bf44      	itt	mi
 8005d32:	232b      	movmi	r3, #43	; 0x2b
 8005d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d38:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d3e:	d015      	beq.n	8005d6c <_vfiprintf_r+0x13c>
 8005d40:	4654      	mov	r4, sl
 8005d42:	2000      	movs	r0, #0
 8005d44:	f04f 0c0a 	mov.w	ip, #10
 8005d48:	9a07      	ldr	r2, [sp, #28]
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d50:	3b30      	subs	r3, #48	; 0x30
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d94e      	bls.n	8005df4 <_vfiprintf_r+0x1c4>
 8005d56:	b1b0      	cbz	r0, 8005d86 <_vfiprintf_r+0x156>
 8005d58:	9207      	str	r2, [sp, #28]
 8005d5a:	e014      	b.n	8005d86 <_vfiprintf_r+0x156>
 8005d5c:	eba0 0308 	sub.w	r3, r0, r8
 8005d60:	fa09 f303 	lsl.w	r3, r9, r3
 8005d64:	4313      	orrs	r3, r2
 8005d66:	46a2      	mov	sl, r4
 8005d68:	9304      	str	r3, [sp, #16]
 8005d6a:	e7d2      	b.n	8005d12 <_vfiprintf_r+0xe2>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	1d19      	adds	r1, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	9103      	str	r1, [sp, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bfbb      	ittet	lt
 8005d78:	425b      	neglt	r3, r3
 8005d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d7e:	9307      	strge	r3, [sp, #28]
 8005d80:	9307      	strlt	r3, [sp, #28]
 8005d82:	bfb8      	it	lt
 8005d84:	9204      	strlt	r2, [sp, #16]
 8005d86:	7823      	ldrb	r3, [r4, #0]
 8005d88:	2b2e      	cmp	r3, #46	; 0x2e
 8005d8a:	d10c      	bne.n	8005da6 <_vfiprintf_r+0x176>
 8005d8c:	7863      	ldrb	r3, [r4, #1]
 8005d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d90:	d135      	bne.n	8005dfe <_vfiprintf_r+0x1ce>
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	3402      	adds	r4, #2
 8005d96:	1d1a      	adds	r2, r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	9203      	str	r2, [sp, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bfb8      	it	lt
 8005da0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005da4:	9305      	str	r3, [sp, #20]
 8005da6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e8c <_vfiprintf_r+0x25c>
 8005daa:	2203      	movs	r2, #3
 8005dac:	4650      	mov	r0, sl
 8005dae:	7821      	ldrb	r1, [r4, #0]
 8005db0:	f000 fc72 	bl	8006698 <memchr>
 8005db4:	b140      	cbz	r0, 8005dc8 <_vfiprintf_r+0x198>
 8005db6:	2340      	movs	r3, #64	; 0x40
 8005db8:	eba0 000a 	sub.w	r0, r0, sl
 8005dbc:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc0:	9b04      	ldr	r3, [sp, #16]
 8005dc2:	3401      	adds	r4, #1
 8005dc4:	4303      	orrs	r3, r0
 8005dc6:	9304      	str	r3, [sp, #16]
 8005dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dcc:	2206      	movs	r2, #6
 8005dce:	482c      	ldr	r0, [pc, #176]	; (8005e80 <_vfiprintf_r+0x250>)
 8005dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dd4:	f000 fc60 	bl	8006698 <memchr>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d03f      	beq.n	8005e5c <_vfiprintf_r+0x22c>
 8005ddc:	4b29      	ldr	r3, [pc, #164]	; (8005e84 <_vfiprintf_r+0x254>)
 8005dde:	bb1b      	cbnz	r3, 8005e28 <_vfiprintf_r+0x1f8>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	3307      	adds	r3, #7
 8005de4:	f023 0307 	bic.w	r3, r3, #7
 8005de8:	3308      	adds	r3, #8
 8005dea:	9303      	str	r3, [sp, #12]
 8005dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dee:	443b      	add	r3, r7
 8005df0:	9309      	str	r3, [sp, #36]	; 0x24
 8005df2:	e767      	b.n	8005cc4 <_vfiprintf_r+0x94>
 8005df4:	460c      	mov	r4, r1
 8005df6:	2001      	movs	r0, #1
 8005df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dfc:	e7a5      	b.n	8005d4a <_vfiprintf_r+0x11a>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f04f 0c0a 	mov.w	ip, #10
 8005e04:	4619      	mov	r1, r3
 8005e06:	3401      	adds	r4, #1
 8005e08:	9305      	str	r3, [sp, #20]
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e10:	3a30      	subs	r2, #48	; 0x30
 8005e12:	2a09      	cmp	r2, #9
 8005e14:	d903      	bls.n	8005e1e <_vfiprintf_r+0x1ee>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0c5      	beq.n	8005da6 <_vfiprintf_r+0x176>
 8005e1a:	9105      	str	r1, [sp, #20]
 8005e1c:	e7c3      	b.n	8005da6 <_vfiprintf_r+0x176>
 8005e1e:	4604      	mov	r4, r0
 8005e20:	2301      	movs	r3, #1
 8005e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e26:	e7f0      	b.n	8005e0a <_vfiprintf_r+0x1da>
 8005e28:	ab03      	add	r3, sp, #12
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	462a      	mov	r2, r5
 8005e2e:	4630      	mov	r0, r6
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <_vfiprintf_r+0x258>)
 8005e32:	a904      	add	r1, sp, #16
 8005e34:	f3af 8000 	nop.w
 8005e38:	4607      	mov	r7, r0
 8005e3a:	1c78      	adds	r0, r7, #1
 8005e3c:	d1d6      	bne.n	8005dec <_vfiprintf_r+0x1bc>
 8005e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e40:	07d9      	lsls	r1, r3, #31
 8005e42:	d405      	bmi.n	8005e50 <_vfiprintf_r+0x220>
 8005e44:	89ab      	ldrh	r3, [r5, #12]
 8005e46:	059a      	lsls	r2, r3, #22
 8005e48:	d402      	bmi.n	8005e50 <_vfiprintf_r+0x220>
 8005e4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e4c:	f7ff fe6d 	bl	8005b2a <__retarget_lock_release_recursive>
 8005e50:	89ab      	ldrh	r3, [r5, #12]
 8005e52:	065b      	lsls	r3, r3, #25
 8005e54:	f53f af12 	bmi.w	8005c7c <_vfiprintf_r+0x4c>
 8005e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e5a:	e711      	b.n	8005c80 <_vfiprintf_r+0x50>
 8005e5c:	ab03      	add	r3, sp, #12
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	462a      	mov	r2, r5
 8005e62:	4630      	mov	r0, r6
 8005e64:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <_vfiprintf_r+0x258>)
 8005e66:	a904      	add	r1, sp, #16
 8005e68:	f000 f882 	bl	8005f70 <_printf_i>
 8005e6c:	e7e4      	b.n	8005e38 <_vfiprintf_r+0x208>
 8005e6e:	bf00      	nop
 8005e70:	08006ec8 	.word	0x08006ec8
 8005e74:	08006ee8 	.word	0x08006ee8
 8005e78:	08006ea8 	.word	0x08006ea8
 8005e7c:	08006f08 	.word	0x08006f08
 8005e80:	08006f12 	.word	0x08006f12
 8005e84:	00000000 	.word	0x00000000
 8005e88:	08005c0b 	.word	0x08005c0b
 8005e8c:	08006f0e 	.word	0x08006f0e

08005e90 <_printf_common>:
 8005e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	4616      	mov	r6, r2
 8005e96:	4699      	mov	r9, r3
 8005e98:	688a      	ldr	r2, [r1, #8]
 8005e9a:	690b      	ldr	r3, [r1, #16]
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfb8      	it	lt
 8005ea2:	4613      	movlt	r3, r2
 8005ea4:	6033      	str	r3, [r6, #0]
 8005ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eb0:	b10a      	cbz	r2, 8005eb6 <_printf_common+0x26>
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	0699      	lsls	r1, r3, #26
 8005eba:	bf42      	ittt	mi
 8005ebc:	6833      	ldrmi	r3, [r6, #0]
 8005ebe:	3302      	addmi	r3, #2
 8005ec0:	6033      	strmi	r3, [r6, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	f015 0506 	ands.w	r5, r5, #6
 8005ec8:	d106      	bne.n	8005ed8 <_printf_common+0x48>
 8005eca:	f104 0a19 	add.w	sl, r4, #25
 8005ece:	68e3      	ldr	r3, [r4, #12]
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	dc28      	bgt.n	8005f2a <_printf_common+0x9a>
 8005ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005edc:	1e13      	subs	r3, r2, #0
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	bf18      	it	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	0692      	lsls	r2, r2, #26
 8005ee6:	d42d      	bmi.n	8005f44 <_printf_common+0xb4>
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4638      	mov	r0, r7
 8005eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d020      	beq.n	8005f38 <_printf_common+0xa8>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	68e5      	ldr	r5, [r4, #12]
 8005efa:	f003 0306 	and.w	r3, r3, #6
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	bf18      	it	ne
 8005f02:	2500      	movne	r5, #0
 8005f04:	6832      	ldr	r2, [r6, #0]
 8005f06:	f04f 0600 	mov.w	r6, #0
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	bf08      	it	eq
 8005f0e:	1aad      	subeq	r5, r5, r2
 8005f10:	6922      	ldr	r2, [r4, #16]
 8005f12:	bf08      	it	eq
 8005f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	bfc4      	itt	gt
 8005f1c:	1a9b      	subgt	r3, r3, r2
 8005f1e:	18ed      	addgt	r5, r5, r3
 8005f20:	341a      	adds	r4, #26
 8005f22:	42b5      	cmp	r5, r6
 8005f24:	d11a      	bne.n	8005f5c <_printf_common+0xcc>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e008      	b.n	8005f3c <_printf_common+0xac>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4638      	mov	r0, r7
 8005f32:	47c0      	blx	r8
 8005f34:	3001      	adds	r0, #1
 8005f36:	d103      	bne.n	8005f40 <_printf_common+0xb0>
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f40:	3501      	adds	r5, #1
 8005f42:	e7c4      	b.n	8005ece <_printf_common+0x3e>
 8005f44:	2030      	movs	r0, #48	; 0x30
 8005f46:	18e1      	adds	r1, r4, r3
 8005f48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f52:	4422      	add	r2, r4
 8005f54:	3302      	adds	r3, #2
 8005f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f5a:	e7c5      	b.n	8005ee8 <_printf_common+0x58>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4622      	mov	r2, r4
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d0e6      	beq.n	8005f38 <_printf_common+0xa8>
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	e7d9      	b.n	8005f22 <_printf_common+0x92>
	...

08005f70 <_printf_i>:
 8005f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	460c      	mov	r4, r1
 8005f76:	7e27      	ldrb	r7, [r4, #24]
 8005f78:	4691      	mov	r9, r2
 8005f7a:	2f78      	cmp	r7, #120	; 0x78
 8005f7c:	4680      	mov	r8, r0
 8005f7e:	469a      	mov	sl, r3
 8005f80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f86:	d807      	bhi.n	8005f98 <_printf_i+0x28>
 8005f88:	2f62      	cmp	r7, #98	; 0x62
 8005f8a:	d80a      	bhi.n	8005fa2 <_printf_i+0x32>
 8005f8c:	2f00      	cmp	r7, #0
 8005f8e:	f000 80d9 	beq.w	8006144 <_printf_i+0x1d4>
 8005f92:	2f58      	cmp	r7, #88	; 0x58
 8005f94:	f000 80a4 	beq.w	80060e0 <_printf_i+0x170>
 8005f98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa0:	e03a      	b.n	8006018 <_printf_i+0xa8>
 8005fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fa6:	2b15      	cmp	r3, #21
 8005fa8:	d8f6      	bhi.n	8005f98 <_printf_i+0x28>
 8005faa:	a001      	add	r0, pc, #4	; (adr r0, 8005fb0 <_printf_i+0x40>)
 8005fac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005fb0:	08006009 	.word	0x08006009
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	08005f99 	.word	0x08005f99
 8005fbc:	08005f99 	.word	0x08005f99
 8005fc0:	08005f99 	.word	0x08005f99
 8005fc4:	08005f99 	.word	0x08005f99
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08005f99 	.word	0x08005f99
 8005fd0:	08005f99 	.word	0x08005f99
 8005fd4:	08005f99 	.word	0x08005f99
 8005fd8:	08005f99 	.word	0x08005f99
 8005fdc:	0800612b 	.word	0x0800612b
 8005fe0:	0800604d 	.word	0x0800604d
 8005fe4:	0800610d 	.word	0x0800610d
 8005fe8:	08005f99 	.word	0x08005f99
 8005fec:	08005f99 	.word	0x08005f99
 8005ff0:	0800614d 	.word	0x0800614d
 8005ff4:	08005f99 	.word	0x08005f99
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	08005f99 	.word	0x08005f99
 8006000:	08005f99 	.word	0x08005f99
 8006004:	08006115 	.word	0x08006115
 8006008:	680b      	ldr	r3, [r1, #0]
 800600a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	600a      	str	r2, [r1, #0]
 8006014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006018:	2301      	movs	r3, #1
 800601a:	e0a4      	b.n	8006166 <_printf_i+0x1f6>
 800601c:	6825      	ldr	r5, [r4, #0]
 800601e:	6808      	ldr	r0, [r1, #0]
 8006020:	062e      	lsls	r6, r5, #24
 8006022:	f100 0304 	add.w	r3, r0, #4
 8006026:	d50a      	bpl.n	800603e <_printf_i+0xce>
 8006028:	6805      	ldr	r5, [r0, #0]
 800602a:	600b      	str	r3, [r1, #0]
 800602c:	2d00      	cmp	r5, #0
 800602e:	da03      	bge.n	8006038 <_printf_i+0xc8>
 8006030:	232d      	movs	r3, #45	; 0x2d
 8006032:	426d      	negs	r5, r5
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006038:	230a      	movs	r3, #10
 800603a:	485e      	ldr	r0, [pc, #376]	; (80061b4 <_printf_i+0x244>)
 800603c:	e019      	b.n	8006072 <_printf_i+0x102>
 800603e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006042:	6805      	ldr	r5, [r0, #0]
 8006044:	600b      	str	r3, [r1, #0]
 8006046:	bf18      	it	ne
 8006048:	b22d      	sxthne	r5, r5
 800604a:	e7ef      	b.n	800602c <_printf_i+0xbc>
 800604c:	680b      	ldr	r3, [r1, #0]
 800604e:	6825      	ldr	r5, [r4, #0]
 8006050:	1d18      	adds	r0, r3, #4
 8006052:	6008      	str	r0, [r1, #0]
 8006054:	0628      	lsls	r0, r5, #24
 8006056:	d501      	bpl.n	800605c <_printf_i+0xec>
 8006058:	681d      	ldr	r5, [r3, #0]
 800605a:	e002      	b.n	8006062 <_printf_i+0xf2>
 800605c:	0669      	lsls	r1, r5, #25
 800605e:	d5fb      	bpl.n	8006058 <_printf_i+0xe8>
 8006060:	881d      	ldrh	r5, [r3, #0]
 8006062:	2f6f      	cmp	r7, #111	; 0x6f
 8006064:	bf0c      	ite	eq
 8006066:	2308      	moveq	r3, #8
 8006068:	230a      	movne	r3, #10
 800606a:	4852      	ldr	r0, [pc, #328]	; (80061b4 <_printf_i+0x244>)
 800606c:	2100      	movs	r1, #0
 800606e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006072:	6866      	ldr	r6, [r4, #4]
 8006074:	2e00      	cmp	r6, #0
 8006076:	bfa8      	it	ge
 8006078:	6821      	ldrge	r1, [r4, #0]
 800607a:	60a6      	str	r6, [r4, #8]
 800607c:	bfa4      	itt	ge
 800607e:	f021 0104 	bicge.w	r1, r1, #4
 8006082:	6021      	strge	r1, [r4, #0]
 8006084:	b90d      	cbnz	r5, 800608a <_printf_i+0x11a>
 8006086:	2e00      	cmp	r6, #0
 8006088:	d04d      	beq.n	8006126 <_printf_i+0x1b6>
 800608a:	4616      	mov	r6, r2
 800608c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006090:	fb03 5711 	mls	r7, r3, r1, r5
 8006094:	5dc7      	ldrb	r7, [r0, r7]
 8006096:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800609a:	462f      	mov	r7, r5
 800609c:	42bb      	cmp	r3, r7
 800609e:	460d      	mov	r5, r1
 80060a0:	d9f4      	bls.n	800608c <_printf_i+0x11c>
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d10b      	bne.n	80060be <_printf_i+0x14e>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	07df      	lsls	r7, r3, #31
 80060aa:	d508      	bpl.n	80060be <_printf_i+0x14e>
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	6861      	ldr	r1, [r4, #4]
 80060b0:	4299      	cmp	r1, r3
 80060b2:	bfde      	ittt	le
 80060b4:	2330      	movle	r3, #48	; 0x30
 80060b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060ba:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80060be:	1b92      	subs	r2, r2, r6
 80060c0:	6122      	str	r2, [r4, #16]
 80060c2:	464b      	mov	r3, r9
 80060c4:	4621      	mov	r1, r4
 80060c6:	4640      	mov	r0, r8
 80060c8:	f8cd a000 	str.w	sl, [sp]
 80060cc:	aa03      	add	r2, sp, #12
 80060ce:	f7ff fedf 	bl	8005e90 <_printf_common>
 80060d2:	3001      	adds	r0, #1
 80060d4:	d14c      	bne.n	8006170 <_printf_i+0x200>
 80060d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060da:	b004      	add	sp, #16
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	4834      	ldr	r0, [pc, #208]	; (80061b4 <_printf_i+0x244>)
 80060e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060e6:	680e      	ldr	r6, [r1, #0]
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80060ee:	061f      	lsls	r7, r3, #24
 80060f0:	600e      	str	r6, [r1, #0]
 80060f2:	d514      	bpl.n	800611e <_printf_i+0x1ae>
 80060f4:	07d9      	lsls	r1, r3, #31
 80060f6:	bf44      	itt	mi
 80060f8:	f043 0320 	orrmi.w	r3, r3, #32
 80060fc:	6023      	strmi	r3, [r4, #0]
 80060fe:	b91d      	cbnz	r5, 8006108 <_printf_i+0x198>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	f023 0320 	bic.w	r3, r3, #32
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	2310      	movs	r3, #16
 800610a:	e7af      	b.n	800606c <_printf_i+0xfc>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	f043 0320 	orr.w	r3, r3, #32
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	2378      	movs	r3, #120	; 0x78
 8006116:	4828      	ldr	r0, [pc, #160]	; (80061b8 <_printf_i+0x248>)
 8006118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800611c:	e7e3      	b.n	80060e6 <_printf_i+0x176>
 800611e:	065e      	lsls	r6, r3, #25
 8006120:	bf48      	it	mi
 8006122:	b2ad      	uxthmi	r5, r5
 8006124:	e7e6      	b.n	80060f4 <_printf_i+0x184>
 8006126:	4616      	mov	r6, r2
 8006128:	e7bb      	b.n	80060a2 <_printf_i+0x132>
 800612a:	680b      	ldr	r3, [r1, #0]
 800612c:	6826      	ldr	r6, [r4, #0]
 800612e:	1d1d      	adds	r5, r3, #4
 8006130:	6960      	ldr	r0, [r4, #20]
 8006132:	600d      	str	r5, [r1, #0]
 8006134:	0635      	lsls	r5, r6, #24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	d501      	bpl.n	800613e <_printf_i+0x1ce>
 800613a:	6018      	str	r0, [r3, #0]
 800613c:	e002      	b.n	8006144 <_printf_i+0x1d4>
 800613e:	0671      	lsls	r1, r6, #25
 8006140:	d5fb      	bpl.n	800613a <_printf_i+0x1ca>
 8006142:	8018      	strh	r0, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	4616      	mov	r6, r2
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	e7ba      	b.n	80060c2 <_printf_i+0x152>
 800614c:	680b      	ldr	r3, [r1, #0]
 800614e:	1d1a      	adds	r2, r3, #4
 8006150:	600a      	str	r2, [r1, #0]
 8006152:	681e      	ldr	r6, [r3, #0]
 8006154:	2100      	movs	r1, #0
 8006156:	4630      	mov	r0, r6
 8006158:	6862      	ldr	r2, [r4, #4]
 800615a:	f000 fa9d 	bl	8006698 <memchr>
 800615e:	b108      	cbz	r0, 8006164 <_printf_i+0x1f4>
 8006160:	1b80      	subs	r0, r0, r6
 8006162:	6060      	str	r0, [r4, #4]
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2300      	movs	r3, #0
 800616a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616e:	e7a8      	b.n	80060c2 <_printf_i+0x152>
 8006170:	4632      	mov	r2, r6
 8006172:	4649      	mov	r1, r9
 8006174:	4640      	mov	r0, r8
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	47d0      	blx	sl
 800617a:	3001      	adds	r0, #1
 800617c:	d0ab      	beq.n	80060d6 <_printf_i+0x166>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	079b      	lsls	r3, r3, #30
 8006182:	d413      	bmi.n	80061ac <_printf_i+0x23c>
 8006184:	68e0      	ldr	r0, [r4, #12]
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	4298      	cmp	r0, r3
 800618a:	bfb8      	it	lt
 800618c:	4618      	movlt	r0, r3
 800618e:	e7a4      	b.n	80060da <_printf_i+0x16a>
 8006190:	2301      	movs	r3, #1
 8006192:	4632      	mov	r2, r6
 8006194:	4649      	mov	r1, r9
 8006196:	4640      	mov	r0, r8
 8006198:	47d0      	blx	sl
 800619a:	3001      	adds	r0, #1
 800619c:	d09b      	beq.n	80060d6 <_printf_i+0x166>
 800619e:	3501      	adds	r5, #1
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	9903      	ldr	r1, [sp, #12]
 80061a4:	1a5b      	subs	r3, r3, r1
 80061a6:	42ab      	cmp	r3, r5
 80061a8:	dcf2      	bgt.n	8006190 <_printf_i+0x220>
 80061aa:	e7eb      	b.n	8006184 <_printf_i+0x214>
 80061ac:	2500      	movs	r5, #0
 80061ae:	f104 0619 	add.w	r6, r4, #25
 80061b2:	e7f5      	b.n	80061a0 <_printf_i+0x230>
 80061b4:	08006f19 	.word	0x08006f19
 80061b8:	08006f2a 	.word	0x08006f2a

080061bc <_sbrk_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	2300      	movs	r3, #0
 80061c0:	4d05      	ldr	r5, [pc, #20]	; (80061d8 <_sbrk_r+0x1c>)
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fc fa90 	bl	80026ec <_sbrk>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_sbrk_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_sbrk_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	200002fc 	.word	0x200002fc

080061dc <__sread>:
 80061dc:	b510      	push	{r4, lr}
 80061de:	460c      	mov	r4, r1
 80061e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e4:	f000 fabe 	bl	8006764 <_read_r>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	bfab      	itete	ge
 80061ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ee:	89a3      	ldrhlt	r3, [r4, #12]
 80061f0:	181b      	addge	r3, r3, r0
 80061f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061f6:	bfac      	ite	ge
 80061f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061fa:	81a3      	strhlt	r3, [r4, #12]
 80061fc:	bd10      	pop	{r4, pc}

080061fe <__swrite>:
 80061fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006202:	461f      	mov	r7, r3
 8006204:	898b      	ldrh	r3, [r1, #12]
 8006206:	4605      	mov	r5, r0
 8006208:	05db      	lsls	r3, r3, #23
 800620a:	460c      	mov	r4, r1
 800620c:	4616      	mov	r6, r2
 800620e:	d505      	bpl.n	800621c <__swrite+0x1e>
 8006210:	2302      	movs	r3, #2
 8006212:	2200      	movs	r2, #0
 8006214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006218:	f000 f9c8 	bl	80065ac <_lseek_r>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	4632      	mov	r2, r6
 8006220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	4628      	mov	r0, r5
 8006228:	463b      	mov	r3, r7
 800622a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800622e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006232:	f000 b869 	b.w	8006308 <_write_r>

08006236 <__sseek>:
 8006236:	b510      	push	{r4, lr}
 8006238:	460c      	mov	r4, r1
 800623a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623e:	f000 f9b5 	bl	80065ac <_lseek_r>
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	bf15      	itete	ne
 8006248:	6560      	strne	r0, [r4, #84]	; 0x54
 800624a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800624e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006252:	81a3      	strheq	r3, [r4, #12]
 8006254:	bf18      	it	ne
 8006256:	81a3      	strhne	r3, [r4, #12]
 8006258:	bd10      	pop	{r4, pc}

0800625a <__sclose>:
 800625a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625e:	f000 b8d3 	b.w	8006408 <_close_r>
	...

08006264 <__swbuf_r>:
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	460e      	mov	r6, r1
 8006268:	4614      	mov	r4, r2
 800626a:	4605      	mov	r5, r0
 800626c:	b118      	cbz	r0, 8006276 <__swbuf_r+0x12>
 800626e:	6983      	ldr	r3, [r0, #24]
 8006270:	b90b      	cbnz	r3, 8006276 <__swbuf_r+0x12>
 8006272:	f7ff fbbb 	bl	80059ec <__sinit>
 8006276:	4b21      	ldr	r3, [pc, #132]	; (80062fc <__swbuf_r+0x98>)
 8006278:	429c      	cmp	r4, r3
 800627a:	d12b      	bne.n	80062d4 <__swbuf_r+0x70>
 800627c:	686c      	ldr	r4, [r5, #4]
 800627e:	69a3      	ldr	r3, [r4, #24]
 8006280:	60a3      	str	r3, [r4, #8]
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	071a      	lsls	r2, r3, #28
 8006286:	d52f      	bpl.n	80062e8 <__swbuf_r+0x84>
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	b36b      	cbz	r3, 80062e8 <__swbuf_r+0x84>
 800628c:	6923      	ldr	r3, [r4, #16]
 800628e:	6820      	ldr	r0, [r4, #0]
 8006290:	b2f6      	uxtb	r6, r6
 8006292:	1ac0      	subs	r0, r0, r3
 8006294:	6963      	ldr	r3, [r4, #20]
 8006296:	4637      	mov	r7, r6
 8006298:	4283      	cmp	r3, r0
 800629a:	dc04      	bgt.n	80062a6 <__swbuf_r+0x42>
 800629c:	4621      	mov	r1, r4
 800629e:	4628      	mov	r0, r5
 80062a0:	f000 f948 	bl	8006534 <_fflush_r>
 80062a4:	bb30      	cbnz	r0, 80062f4 <__swbuf_r+0x90>
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	3001      	adds	r0, #1
 80062aa:	3b01      	subs	r3, #1
 80062ac:	60a3      	str	r3, [r4, #8]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	6022      	str	r2, [r4, #0]
 80062b4:	701e      	strb	r6, [r3, #0]
 80062b6:	6963      	ldr	r3, [r4, #20]
 80062b8:	4283      	cmp	r3, r0
 80062ba:	d004      	beq.n	80062c6 <__swbuf_r+0x62>
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	07db      	lsls	r3, r3, #31
 80062c0:	d506      	bpl.n	80062d0 <__swbuf_r+0x6c>
 80062c2:	2e0a      	cmp	r6, #10
 80062c4:	d104      	bne.n	80062d0 <__swbuf_r+0x6c>
 80062c6:	4621      	mov	r1, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 f933 	bl	8006534 <_fflush_r>
 80062ce:	b988      	cbnz	r0, 80062f4 <__swbuf_r+0x90>
 80062d0:	4638      	mov	r0, r7
 80062d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <__swbuf_r+0x9c>)
 80062d6:	429c      	cmp	r4, r3
 80062d8:	d101      	bne.n	80062de <__swbuf_r+0x7a>
 80062da:	68ac      	ldr	r4, [r5, #8]
 80062dc:	e7cf      	b.n	800627e <__swbuf_r+0x1a>
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <__swbuf_r+0xa0>)
 80062e0:	429c      	cmp	r4, r3
 80062e2:	bf08      	it	eq
 80062e4:	68ec      	ldreq	r4, [r5, #12]
 80062e6:	e7ca      	b.n	800627e <__swbuf_r+0x1a>
 80062e8:	4621      	mov	r1, r4
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 f81e 	bl	800632c <__swsetup_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d0cb      	beq.n	800628c <__swbuf_r+0x28>
 80062f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80062f8:	e7ea      	b.n	80062d0 <__swbuf_r+0x6c>
 80062fa:	bf00      	nop
 80062fc:	08006ec8 	.word	0x08006ec8
 8006300:	08006ee8 	.word	0x08006ee8
 8006304:	08006ea8 	.word	0x08006ea8

08006308 <_write_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	4611      	mov	r1, r2
 8006310:	2200      	movs	r2, #0
 8006312:	4d05      	ldr	r5, [pc, #20]	; (8006328 <_write_r+0x20>)
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fb fb3e 	bl	8001998 <_write>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_write_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_write_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	200002fc 	.word	0x200002fc

0800632c <__swsetup_r>:
 800632c:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <__swsetup_r+0xcc>)
 800632e:	b570      	push	{r4, r5, r6, lr}
 8006330:	681d      	ldr	r5, [r3, #0]
 8006332:	4606      	mov	r6, r0
 8006334:	460c      	mov	r4, r1
 8006336:	b125      	cbz	r5, 8006342 <__swsetup_r+0x16>
 8006338:	69ab      	ldr	r3, [r5, #24]
 800633a:	b913      	cbnz	r3, 8006342 <__swsetup_r+0x16>
 800633c:	4628      	mov	r0, r5
 800633e:	f7ff fb55 	bl	80059ec <__sinit>
 8006342:	4b2e      	ldr	r3, [pc, #184]	; (80063fc <__swsetup_r+0xd0>)
 8006344:	429c      	cmp	r4, r3
 8006346:	d10f      	bne.n	8006368 <__swsetup_r+0x3c>
 8006348:	686c      	ldr	r4, [r5, #4]
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006350:	0719      	lsls	r1, r3, #28
 8006352:	d42c      	bmi.n	80063ae <__swsetup_r+0x82>
 8006354:	06dd      	lsls	r5, r3, #27
 8006356:	d411      	bmi.n	800637c <__swsetup_r+0x50>
 8006358:	2309      	movs	r3, #9
 800635a:	6033      	str	r3, [r6, #0]
 800635c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	e03e      	b.n	80063e6 <__swsetup_r+0xba>
 8006368:	4b25      	ldr	r3, [pc, #148]	; (8006400 <__swsetup_r+0xd4>)
 800636a:	429c      	cmp	r4, r3
 800636c:	d101      	bne.n	8006372 <__swsetup_r+0x46>
 800636e:	68ac      	ldr	r4, [r5, #8]
 8006370:	e7eb      	b.n	800634a <__swsetup_r+0x1e>
 8006372:	4b24      	ldr	r3, [pc, #144]	; (8006404 <__swsetup_r+0xd8>)
 8006374:	429c      	cmp	r4, r3
 8006376:	bf08      	it	eq
 8006378:	68ec      	ldreq	r4, [r5, #12]
 800637a:	e7e6      	b.n	800634a <__swsetup_r+0x1e>
 800637c:	0758      	lsls	r0, r3, #29
 800637e:	d512      	bpl.n	80063a6 <__swsetup_r+0x7a>
 8006380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006382:	b141      	cbz	r1, 8006396 <__swsetup_r+0x6a>
 8006384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006388:	4299      	cmp	r1, r3
 800638a:	d002      	beq.n	8006392 <__swsetup_r+0x66>
 800638c:	4630      	mov	r0, r6
 800638e:	f000 f99d 	bl	80066cc <_free_r>
 8006392:	2300      	movs	r3, #0
 8006394:	6363      	str	r3, [r4, #52]	; 0x34
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	2300      	movs	r3, #0
 80063a0:	6063      	str	r3, [r4, #4]
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f043 0308 	orr.w	r3, r3, #8
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	b94b      	cbnz	r3, 80063c6 <__swsetup_r+0x9a>
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063bc:	d003      	beq.n	80063c6 <__swsetup_r+0x9a>
 80063be:	4621      	mov	r1, r4
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 f929 	bl	8006618 <__smakebuf_r>
 80063c6:	89a0      	ldrh	r0, [r4, #12]
 80063c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063cc:	f010 0301 	ands.w	r3, r0, #1
 80063d0:	d00a      	beq.n	80063e8 <__swsetup_r+0xbc>
 80063d2:	2300      	movs	r3, #0
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	6963      	ldr	r3, [r4, #20]
 80063d8:	425b      	negs	r3, r3
 80063da:	61a3      	str	r3, [r4, #24]
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	b943      	cbnz	r3, 80063f2 <__swsetup_r+0xc6>
 80063e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063e4:	d1ba      	bne.n	800635c <__swsetup_r+0x30>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	0781      	lsls	r1, r0, #30
 80063ea:	bf58      	it	pl
 80063ec:	6963      	ldrpl	r3, [r4, #20]
 80063ee:	60a3      	str	r3, [r4, #8]
 80063f0:	e7f4      	b.n	80063dc <__swsetup_r+0xb0>
 80063f2:	2000      	movs	r0, #0
 80063f4:	e7f7      	b.n	80063e6 <__swsetup_r+0xba>
 80063f6:	bf00      	nop
 80063f8:	200000a4 	.word	0x200000a4
 80063fc:	08006ec8 	.word	0x08006ec8
 8006400:	08006ee8 	.word	0x08006ee8
 8006404:	08006ea8 	.word	0x08006ea8

08006408 <_close_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	2300      	movs	r3, #0
 800640c:	4d05      	ldr	r5, [pc, #20]	; (8006424 <_close_r+0x1c>)
 800640e:	4604      	mov	r4, r0
 8006410:	4608      	mov	r0, r1
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	f7fc f939 	bl	800268a <_close>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_close_r+0x1a>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b103      	cbz	r3, 8006422 <_close_r+0x1a>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200002fc 	.word	0x200002fc

08006428 <__sflush_r>:
 8006428:	898a      	ldrh	r2, [r1, #12]
 800642a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	0710      	lsls	r0, r2, #28
 8006432:	460c      	mov	r4, r1
 8006434:	d458      	bmi.n	80064e8 <__sflush_r+0xc0>
 8006436:	684b      	ldr	r3, [r1, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	dc05      	bgt.n	8006448 <__sflush_r+0x20>
 800643c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	dc02      	bgt.n	8006448 <__sflush_r+0x20>
 8006442:	2000      	movs	r0, #0
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800644a:	2e00      	cmp	r6, #0
 800644c:	d0f9      	beq.n	8006442 <__sflush_r+0x1a>
 800644e:	2300      	movs	r3, #0
 8006450:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006454:	682f      	ldr	r7, [r5, #0]
 8006456:	602b      	str	r3, [r5, #0]
 8006458:	d032      	beq.n	80064c0 <__sflush_r+0x98>
 800645a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	075a      	lsls	r2, r3, #29
 8006460:	d505      	bpl.n	800646e <__sflush_r+0x46>
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	1ac0      	subs	r0, r0, r3
 8006466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006468:	b10b      	cbz	r3, 800646e <__sflush_r+0x46>
 800646a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800646c:	1ac0      	subs	r0, r0, r3
 800646e:	2300      	movs	r3, #0
 8006470:	4602      	mov	r2, r0
 8006472:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006474:	4628      	mov	r0, r5
 8006476:	6a21      	ldr	r1, [r4, #32]
 8006478:	47b0      	blx	r6
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	d106      	bne.n	800648e <__sflush_r+0x66>
 8006480:	6829      	ldr	r1, [r5, #0]
 8006482:	291d      	cmp	r1, #29
 8006484:	d82c      	bhi.n	80064e0 <__sflush_r+0xb8>
 8006486:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <__sflush_r+0x108>)
 8006488:	40ca      	lsrs	r2, r1
 800648a:	07d6      	lsls	r6, r2, #31
 800648c:	d528      	bpl.n	80064e0 <__sflush_r+0xb8>
 800648e:	2200      	movs	r2, #0
 8006490:	6062      	str	r2, [r4, #4]
 8006492:	6922      	ldr	r2, [r4, #16]
 8006494:	04d9      	lsls	r1, r3, #19
 8006496:	6022      	str	r2, [r4, #0]
 8006498:	d504      	bpl.n	80064a4 <__sflush_r+0x7c>
 800649a:	1c42      	adds	r2, r0, #1
 800649c:	d101      	bne.n	80064a2 <__sflush_r+0x7a>
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	b903      	cbnz	r3, 80064a4 <__sflush_r+0x7c>
 80064a2:	6560      	str	r0, [r4, #84]	; 0x54
 80064a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064a6:	602f      	str	r7, [r5, #0]
 80064a8:	2900      	cmp	r1, #0
 80064aa:	d0ca      	beq.n	8006442 <__sflush_r+0x1a>
 80064ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d002      	beq.n	80064ba <__sflush_r+0x92>
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 f909 	bl	80066cc <_free_r>
 80064ba:	2000      	movs	r0, #0
 80064bc:	6360      	str	r0, [r4, #52]	; 0x34
 80064be:	e7c1      	b.n	8006444 <__sflush_r+0x1c>
 80064c0:	6a21      	ldr	r1, [r4, #32]
 80064c2:	2301      	movs	r3, #1
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b0      	blx	r6
 80064c8:	1c41      	adds	r1, r0, #1
 80064ca:	d1c7      	bne.n	800645c <__sflush_r+0x34>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0c4      	beq.n	800645c <__sflush_r+0x34>
 80064d2:	2b1d      	cmp	r3, #29
 80064d4:	d001      	beq.n	80064da <__sflush_r+0xb2>
 80064d6:	2b16      	cmp	r3, #22
 80064d8:	d101      	bne.n	80064de <__sflush_r+0xb6>
 80064da:	602f      	str	r7, [r5, #0]
 80064dc:	e7b1      	b.n	8006442 <__sflush_r+0x1a>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	e7ad      	b.n	8006444 <__sflush_r+0x1c>
 80064e8:	690f      	ldr	r7, [r1, #16]
 80064ea:	2f00      	cmp	r7, #0
 80064ec:	d0a9      	beq.n	8006442 <__sflush_r+0x1a>
 80064ee:	0793      	lsls	r3, r2, #30
 80064f0:	bf18      	it	ne
 80064f2:	2300      	movne	r3, #0
 80064f4:	680e      	ldr	r6, [r1, #0]
 80064f6:	bf08      	it	eq
 80064f8:	694b      	ldreq	r3, [r1, #20]
 80064fa:	eba6 0807 	sub.w	r8, r6, r7
 80064fe:	600f      	str	r7, [r1, #0]
 8006500:	608b      	str	r3, [r1, #8]
 8006502:	f1b8 0f00 	cmp.w	r8, #0
 8006506:	dd9c      	ble.n	8006442 <__sflush_r+0x1a>
 8006508:	4643      	mov	r3, r8
 800650a:	463a      	mov	r2, r7
 800650c:	4628      	mov	r0, r5
 800650e:	6a21      	ldr	r1, [r4, #32]
 8006510:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006512:	47b0      	blx	r6
 8006514:	2800      	cmp	r0, #0
 8006516:	dc06      	bgt.n	8006526 <__sflush_r+0xfe>
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800651e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006522:	81a3      	strh	r3, [r4, #12]
 8006524:	e78e      	b.n	8006444 <__sflush_r+0x1c>
 8006526:	4407      	add	r7, r0
 8006528:	eba8 0800 	sub.w	r8, r8, r0
 800652c:	e7e9      	b.n	8006502 <__sflush_r+0xda>
 800652e:	bf00      	nop
 8006530:	20400001 	.word	0x20400001

08006534 <_fflush_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	690b      	ldr	r3, [r1, #16]
 8006538:	4605      	mov	r5, r0
 800653a:	460c      	mov	r4, r1
 800653c:	b913      	cbnz	r3, 8006544 <_fflush_r+0x10>
 800653e:	2500      	movs	r5, #0
 8006540:	4628      	mov	r0, r5
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	b118      	cbz	r0, 800654e <_fflush_r+0x1a>
 8006546:	6983      	ldr	r3, [r0, #24]
 8006548:	b90b      	cbnz	r3, 800654e <_fflush_r+0x1a>
 800654a:	f7ff fa4f 	bl	80059ec <__sinit>
 800654e:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <_fflush_r+0x6c>)
 8006550:	429c      	cmp	r4, r3
 8006552:	d11b      	bne.n	800658c <_fflush_r+0x58>
 8006554:	686c      	ldr	r4, [r5, #4]
 8006556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ef      	beq.n	800653e <_fflush_r+0xa>
 800655e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006560:	07d0      	lsls	r0, r2, #31
 8006562:	d404      	bmi.n	800656e <_fflush_r+0x3a>
 8006564:	0599      	lsls	r1, r3, #22
 8006566:	d402      	bmi.n	800656e <_fflush_r+0x3a>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f7ff fadd 	bl	8005b28 <__retarget_lock_acquire_recursive>
 800656e:	4628      	mov	r0, r5
 8006570:	4621      	mov	r1, r4
 8006572:	f7ff ff59 	bl	8006428 <__sflush_r>
 8006576:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006578:	4605      	mov	r5, r0
 800657a:	07da      	lsls	r2, r3, #31
 800657c:	d4e0      	bmi.n	8006540 <_fflush_r+0xc>
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	059b      	lsls	r3, r3, #22
 8006582:	d4dd      	bmi.n	8006540 <_fflush_r+0xc>
 8006584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006586:	f7ff fad0 	bl	8005b2a <__retarget_lock_release_recursive>
 800658a:	e7d9      	b.n	8006540 <_fflush_r+0xc>
 800658c:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <_fflush_r+0x70>)
 800658e:	429c      	cmp	r4, r3
 8006590:	d101      	bne.n	8006596 <_fflush_r+0x62>
 8006592:	68ac      	ldr	r4, [r5, #8]
 8006594:	e7df      	b.n	8006556 <_fflush_r+0x22>
 8006596:	4b04      	ldr	r3, [pc, #16]	; (80065a8 <_fflush_r+0x74>)
 8006598:	429c      	cmp	r4, r3
 800659a:	bf08      	it	eq
 800659c:	68ec      	ldreq	r4, [r5, #12]
 800659e:	e7da      	b.n	8006556 <_fflush_r+0x22>
 80065a0:	08006ec8 	.word	0x08006ec8
 80065a4:	08006ee8 	.word	0x08006ee8
 80065a8:	08006ea8 	.word	0x08006ea8

080065ac <_lseek_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	4611      	mov	r1, r2
 80065b4:	2200      	movs	r2, #0
 80065b6:	4d05      	ldr	r5, [pc, #20]	; (80065cc <_lseek_r+0x20>)
 80065b8:	602a      	str	r2, [r5, #0]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f7fc f889 	bl	80026d2 <_lseek>
 80065c0:	1c43      	adds	r3, r0, #1
 80065c2:	d102      	bne.n	80065ca <_lseek_r+0x1e>
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	b103      	cbz	r3, 80065ca <_lseek_r+0x1e>
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	200002fc 	.word	0x200002fc

080065d0 <__swhatbuf_r>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	460e      	mov	r6, r1
 80065d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d8:	4614      	mov	r4, r2
 80065da:	2900      	cmp	r1, #0
 80065dc:	461d      	mov	r5, r3
 80065de:	b096      	sub	sp, #88	; 0x58
 80065e0:	da07      	bge.n	80065f2 <__swhatbuf_r+0x22>
 80065e2:	2300      	movs	r3, #0
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	89b3      	ldrh	r3, [r6, #12]
 80065e8:	061a      	lsls	r2, r3, #24
 80065ea:	d410      	bmi.n	800660e <__swhatbuf_r+0x3e>
 80065ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f0:	e00e      	b.n	8006610 <__swhatbuf_r+0x40>
 80065f2:	466a      	mov	r2, sp
 80065f4:	f000 f8c8 	bl	8006788 <_fstat_r>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	dbf2      	blt.n	80065e2 <__swhatbuf_r+0x12>
 80065fc:	9a01      	ldr	r2, [sp, #4]
 80065fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006602:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006606:	425a      	negs	r2, r3
 8006608:	415a      	adcs	r2, r3
 800660a:	602a      	str	r2, [r5, #0]
 800660c:	e7ee      	b.n	80065ec <__swhatbuf_r+0x1c>
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	2000      	movs	r0, #0
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	b016      	add	sp, #88	; 0x58
 8006616:	bd70      	pop	{r4, r5, r6, pc}

08006618 <__smakebuf_r>:
 8006618:	898b      	ldrh	r3, [r1, #12]
 800661a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800661c:	079d      	lsls	r5, r3, #30
 800661e:	4606      	mov	r6, r0
 8006620:	460c      	mov	r4, r1
 8006622:	d507      	bpl.n	8006634 <__smakebuf_r+0x1c>
 8006624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	6123      	str	r3, [r4, #16]
 800662c:	2301      	movs	r3, #1
 800662e:	6163      	str	r3, [r4, #20]
 8006630:	b002      	add	sp, #8
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	466a      	mov	r2, sp
 8006636:	ab01      	add	r3, sp, #4
 8006638:	f7ff ffca 	bl	80065d0 <__swhatbuf_r>
 800663c:	9900      	ldr	r1, [sp, #0]
 800663e:	4605      	mov	r5, r0
 8006640:	4630      	mov	r0, r6
 8006642:	f7ff fa73 	bl	8005b2c <_malloc_r>
 8006646:	b948      	cbnz	r0, 800665c <__smakebuf_r+0x44>
 8006648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800664c:	059a      	lsls	r2, r3, #22
 800664e:	d4ef      	bmi.n	8006630 <__smakebuf_r+0x18>
 8006650:	f023 0303 	bic.w	r3, r3, #3
 8006654:	f043 0302 	orr.w	r3, r3, #2
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	e7e3      	b.n	8006624 <__smakebuf_r+0xc>
 800665c:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <__smakebuf_r+0x7c>)
 800665e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	6020      	str	r0, [r4, #0]
 8006664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	9b00      	ldr	r3, [sp, #0]
 800666c:	6120      	str	r0, [r4, #16]
 800666e:	6163      	str	r3, [r4, #20]
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	b15b      	cbz	r3, 800668c <__smakebuf_r+0x74>
 8006674:	4630      	mov	r0, r6
 8006676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800667a:	f000 f897 	bl	80067ac <_isatty_r>
 800667e:	b128      	cbz	r0, 800668c <__smakebuf_r+0x74>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	89a0      	ldrh	r0, [r4, #12]
 800668e:	4305      	orrs	r5, r0
 8006690:	81a5      	strh	r5, [r4, #12]
 8006692:	e7cd      	b.n	8006630 <__smakebuf_r+0x18>
 8006694:	08005985 	.word	0x08005985

08006698 <memchr>:
 8006698:	4603      	mov	r3, r0
 800669a:	b510      	push	{r4, lr}
 800669c:	b2c9      	uxtb	r1, r1
 800669e:	4402      	add	r2, r0
 80066a0:	4293      	cmp	r3, r2
 80066a2:	4618      	mov	r0, r3
 80066a4:	d101      	bne.n	80066aa <memchr+0x12>
 80066a6:	2000      	movs	r0, #0
 80066a8:	e003      	b.n	80066b2 <memchr+0x1a>
 80066aa:	7804      	ldrb	r4, [r0, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	428c      	cmp	r4, r1
 80066b0:	d1f6      	bne.n	80066a0 <memchr+0x8>
 80066b2:	bd10      	pop	{r4, pc}

080066b4 <__malloc_lock>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__malloc_lock+0x8>)
 80066b6:	f7ff ba37 	b.w	8005b28 <__retarget_lock_acquire_recursive>
 80066ba:	bf00      	nop
 80066bc:	200002f4 	.word	0x200002f4

080066c0 <__malloc_unlock>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__malloc_unlock+0x8>)
 80066c2:	f7ff ba32 	b.w	8005b2a <__retarget_lock_release_recursive>
 80066c6:	bf00      	nop
 80066c8:	200002f4 	.word	0x200002f4

080066cc <_free_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4605      	mov	r5, r0
 80066d0:	2900      	cmp	r1, #0
 80066d2:	d043      	beq.n	800675c <_free_r+0x90>
 80066d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d8:	1f0c      	subs	r4, r1, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfb8      	it	lt
 80066de:	18e4      	addlt	r4, r4, r3
 80066e0:	f7ff ffe8 	bl	80066b4 <__malloc_lock>
 80066e4:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <_free_r+0x94>)
 80066e6:	6813      	ldr	r3, [r2, #0]
 80066e8:	4610      	mov	r0, r2
 80066ea:	b933      	cbnz	r3, 80066fa <_free_r+0x2e>
 80066ec:	6063      	str	r3, [r4, #4]
 80066ee:	6014      	str	r4, [r2, #0]
 80066f0:	4628      	mov	r0, r5
 80066f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f6:	f7ff bfe3 	b.w	80066c0 <__malloc_unlock>
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	d90a      	bls.n	8006714 <_free_r+0x48>
 80066fe:	6821      	ldr	r1, [r4, #0]
 8006700:	1862      	adds	r2, r4, r1
 8006702:	4293      	cmp	r3, r2
 8006704:	bf01      	itttt	eq
 8006706:	681a      	ldreq	r2, [r3, #0]
 8006708:	685b      	ldreq	r3, [r3, #4]
 800670a:	1852      	addeq	r2, r2, r1
 800670c:	6022      	streq	r2, [r4, #0]
 800670e:	6063      	str	r3, [r4, #4]
 8006710:	6004      	str	r4, [r0, #0]
 8006712:	e7ed      	b.n	80066f0 <_free_r+0x24>
 8006714:	461a      	mov	r2, r3
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	b10b      	cbz	r3, 800671e <_free_r+0x52>
 800671a:	42a3      	cmp	r3, r4
 800671c:	d9fa      	bls.n	8006714 <_free_r+0x48>
 800671e:	6811      	ldr	r1, [r2, #0]
 8006720:	1850      	adds	r0, r2, r1
 8006722:	42a0      	cmp	r0, r4
 8006724:	d10b      	bne.n	800673e <_free_r+0x72>
 8006726:	6820      	ldr	r0, [r4, #0]
 8006728:	4401      	add	r1, r0
 800672a:	1850      	adds	r0, r2, r1
 800672c:	4283      	cmp	r3, r0
 800672e:	6011      	str	r1, [r2, #0]
 8006730:	d1de      	bne.n	80066f0 <_free_r+0x24>
 8006732:	6818      	ldr	r0, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	4401      	add	r1, r0
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	6053      	str	r3, [r2, #4]
 800673c:	e7d8      	b.n	80066f0 <_free_r+0x24>
 800673e:	d902      	bls.n	8006746 <_free_r+0x7a>
 8006740:	230c      	movs	r3, #12
 8006742:	602b      	str	r3, [r5, #0]
 8006744:	e7d4      	b.n	80066f0 <_free_r+0x24>
 8006746:	6820      	ldr	r0, [r4, #0]
 8006748:	1821      	adds	r1, r4, r0
 800674a:	428b      	cmp	r3, r1
 800674c:	bf01      	itttt	eq
 800674e:	6819      	ldreq	r1, [r3, #0]
 8006750:	685b      	ldreq	r3, [r3, #4]
 8006752:	1809      	addeq	r1, r1, r0
 8006754:	6021      	streq	r1, [r4, #0]
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	6054      	str	r4, [r2, #4]
 800675a:	e7c9      	b.n	80066f0 <_free_r+0x24>
 800675c:	bd38      	pop	{r3, r4, r5, pc}
 800675e:	bf00      	nop
 8006760:	20000134 	.word	0x20000134

08006764 <_read_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	4611      	mov	r1, r2
 800676c:	2200      	movs	r2, #0
 800676e:	4d05      	ldr	r5, [pc, #20]	; (8006784 <_read_r+0x20>)
 8006770:	602a      	str	r2, [r5, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	f7fb ff6c 	bl	8002650 <_read>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_read_r+0x1e>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_read_r+0x1e>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	200002fc 	.word	0x200002fc

08006788 <_fstat_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	2300      	movs	r3, #0
 800678c:	4d06      	ldr	r5, [pc, #24]	; (80067a8 <_fstat_r+0x20>)
 800678e:	4604      	mov	r4, r0
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	602b      	str	r3, [r5, #0]
 8006796:	f7fb ff83 	bl	80026a0 <_fstat>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d102      	bne.n	80067a4 <_fstat_r+0x1c>
 800679e:	682b      	ldr	r3, [r5, #0]
 80067a0:	b103      	cbz	r3, 80067a4 <_fstat_r+0x1c>
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	200002fc 	.word	0x200002fc

080067ac <_isatty_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	2300      	movs	r3, #0
 80067b0:	4d05      	ldr	r5, [pc, #20]	; (80067c8 <_isatty_r+0x1c>)
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	602b      	str	r3, [r5, #0]
 80067b8:	f7fb ff81 	bl	80026be <_isatty>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_isatty_r+0x1a>
 80067c0:	682b      	ldr	r3, [r5, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_isatty_r+0x1a>
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	200002fc 	.word	0x200002fc
 80067cc:	00000000 	.word	0x00000000

080067d0 <atan>:
 80067d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	4bb6      	ldr	r3, [pc, #728]	; (8006ab0 <atan+0x2e0>)
 80067d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80067da:	429e      	cmp	r6, r3
 80067dc:	4604      	mov	r4, r0
 80067de:	460d      	mov	r5, r1
 80067e0:	468b      	mov	fp, r1
 80067e2:	dd17      	ble.n	8006814 <atan+0x44>
 80067e4:	4bb3      	ldr	r3, [pc, #716]	; (8006ab4 <atan+0x2e4>)
 80067e6:	429e      	cmp	r6, r3
 80067e8:	dc01      	bgt.n	80067ee <atan+0x1e>
 80067ea:	d109      	bne.n	8006800 <atan+0x30>
 80067ec:	b140      	cbz	r0, 8006800 <atan+0x30>
 80067ee:	4622      	mov	r2, r4
 80067f0:	462b      	mov	r3, r5
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7f9 fd1d 	bl	8000234 <__adddf3>
 80067fa:	4604      	mov	r4, r0
 80067fc:	460d      	mov	r5, r1
 80067fe:	e005      	b.n	800680c <atan+0x3c>
 8006800:	f1bb 0f00 	cmp.w	fp, #0
 8006804:	4cac      	ldr	r4, [pc, #688]	; (8006ab8 <atan+0x2e8>)
 8006806:	f300 8121 	bgt.w	8006a4c <atan+0x27c>
 800680a:	4dac      	ldr	r5, [pc, #688]	; (8006abc <atan+0x2ec>)
 800680c:	4620      	mov	r0, r4
 800680e:	4629      	mov	r1, r5
 8006810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006814:	4baa      	ldr	r3, [pc, #680]	; (8006ac0 <atan+0x2f0>)
 8006816:	429e      	cmp	r6, r3
 8006818:	dc11      	bgt.n	800683e <atan+0x6e>
 800681a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800681e:	429e      	cmp	r6, r3
 8006820:	dc0a      	bgt.n	8006838 <atan+0x68>
 8006822:	a38b      	add	r3, pc, #556	; (adr r3, 8006a50 <atan+0x280>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fd04 	bl	8000234 <__adddf3>
 800682c:	2200      	movs	r2, #0
 800682e:	4ba5      	ldr	r3, [pc, #660]	; (8006ac4 <atan+0x2f4>)
 8006830:	f7fa f946 	bl	8000ac0 <__aeabi_dcmpgt>
 8006834:	2800      	cmp	r0, #0
 8006836:	d1e9      	bne.n	800680c <atan+0x3c>
 8006838:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800683c:	e027      	b.n	800688e <atan+0xbe>
 800683e:	f000 f951 	bl	8006ae4 <fabs>
 8006842:	4ba1      	ldr	r3, [pc, #644]	; (8006ac8 <atan+0x2f8>)
 8006844:	4604      	mov	r4, r0
 8006846:	429e      	cmp	r6, r3
 8006848:	460d      	mov	r5, r1
 800684a:	f300 80b8 	bgt.w	80069be <atan+0x1ee>
 800684e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006852:	429e      	cmp	r6, r3
 8006854:	f300 809c 	bgt.w	8006990 <atan+0x1c0>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	f7f9 fcea 	bl	8000234 <__adddf3>
 8006860:	2200      	movs	r2, #0
 8006862:	4b98      	ldr	r3, [pc, #608]	; (8006ac4 <atan+0x2f4>)
 8006864:	f7f9 fce4 	bl	8000230 <__aeabi_dsub>
 8006868:	2200      	movs	r2, #0
 800686a:	4606      	mov	r6, r0
 800686c:	460f      	mov	r7, r1
 800686e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	f7f9 fcdd 	bl	8000234 <__adddf3>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4630      	mov	r0, r6
 8006880:	4639      	mov	r1, r7
 8006882:	f7f9 ffb7 	bl	80007f4 <__aeabi_ddiv>
 8006886:	f04f 0a00 	mov.w	sl, #0
 800688a:	4604      	mov	r4, r0
 800688c:	460d      	mov	r5, r1
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	4620      	mov	r0, r4
 8006894:	4629      	mov	r1, r5
 8006896:	f7f9 fe83 	bl	80005a0 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4680      	mov	r8, r0
 80068a0:	4689      	mov	r9, r1
 80068a2:	f7f9 fe7d 	bl	80005a0 <__aeabi_dmul>
 80068a6:	a36c      	add	r3, pc, #432	; (adr r3, 8006a58 <atan+0x288>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	4606      	mov	r6, r0
 80068ae:	460f      	mov	r7, r1
 80068b0:	f7f9 fe76 	bl	80005a0 <__aeabi_dmul>
 80068b4:	a36a      	add	r3, pc, #424	; (adr r3, 8006a60 <atan+0x290>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 fcbb 	bl	8000234 <__adddf3>
 80068be:	4632      	mov	r2, r6
 80068c0:	463b      	mov	r3, r7
 80068c2:	f7f9 fe6d 	bl	80005a0 <__aeabi_dmul>
 80068c6:	a368      	add	r3, pc, #416	; (adr r3, 8006a68 <atan+0x298>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7f9 fcb2 	bl	8000234 <__adddf3>
 80068d0:	4632      	mov	r2, r6
 80068d2:	463b      	mov	r3, r7
 80068d4:	f7f9 fe64 	bl	80005a0 <__aeabi_dmul>
 80068d8:	a365      	add	r3, pc, #404	; (adr r3, 8006a70 <atan+0x2a0>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	f7f9 fca9 	bl	8000234 <__adddf3>
 80068e2:	4632      	mov	r2, r6
 80068e4:	463b      	mov	r3, r7
 80068e6:	f7f9 fe5b 	bl	80005a0 <__aeabi_dmul>
 80068ea:	a363      	add	r3, pc, #396	; (adr r3, 8006a78 <atan+0x2a8>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fca0 	bl	8000234 <__adddf3>
 80068f4:	4632      	mov	r2, r6
 80068f6:	463b      	mov	r3, r7
 80068f8:	f7f9 fe52 	bl	80005a0 <__aeabi_dmul>
 80068fc:	a360      	add	r3, pc, #384	; (adr r3, 8006a80 <atan+0x2b0>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	f7f9 fc97 	bl	8000234 <__adddf3>
 8006906:	4642      	mov	r2, r8
 8006908:	464b      	mov	r3, r9
 800690a:	f7f9 fe49 	bl	80005a0 <__aeabi_dmul>
 800690e:	a35e      	add	r3, pc, #376	; (adr r3, 8006a88 <atan+0x2b8>)
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	4680      	mov	r8, r0
 8006916:	4689      	mov	r9, r1
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	f7f9 fe40 	bl	80005a0 <__aeabi_dmul>
 8006920:	a35b      	add	r3, pc, #364	; (adr r3, 8006a90 <atan+0x2c0>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f7f9 fc83 	bl	8000230 <__aeabi_dsub>
 800692a:	4632      	mov	r2, r6
 800692c:	463b      	mov	r3, r7
 800692e:	f7f9 fe37 	bl	80005a0 <__aeabi_dmul>
 8006932:	a359      	add	r3, pc, #356	; (adr r3, 8006a98 <atan+0x2c8>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fc7a 	bl	8000230 <__aeabi_dsub>
 800693c:	4632      	mov	r2, r6
 800693e:	463b      	mov	r3, r7
 8006940:	f7f9 fe2e 	bl	80005a0 <__aeabi_dmul>
 8006944:	a356      	add	r3, pc, #344	; (adr r3, 8006aa0 <atan+0x2d0>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f7f9 fc71 	bl	8000230 <__aeabi_dsub>
 800694e:	4632      	mov	r2, r6
 8006950:	463b      	mov	r3, r7
 8006952:	f7f9 fe25 	bl	80005a0 <__aeabi_dmul>
 8006956:	a354      	add	r3, pc, #336	; (adr r3, 8006aa8 <atan+0x2d8>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f7f9 fc68 	bl	8000230 <__aeabi_dsub>
 8006960:	4632      	mov	r2, r6
 8006962:	463b      	mov	r3, r7
 8006964:	f7f9 fe1c 	bl	80005a0 <__aeabi_dmul>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7f9 fc60 	bl	8000234 <__adddf3>
 8006974:	4622      	mov	r2, r4
 8006976:	462b      	mov	r3, r5
 8006978:	f7f9 fe12 	bl	80005a0 <__aeabi_dmul>
 800697c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	d144      	bne.n	8006a10 <atan+0x240>
 8006986:	4620      	mov	r0, r4
 8006988:	4629      	mov	r1, r5
 800698a:	f7f9 fc51 	bl	8000230 <__aeabi_dsub>
 800698e:	e734      	b.n	80067fa <atan+0x2a>
 8006990:	2200      	movs	r2, #0
 8006992:	4b4c      	ldr	r3, [pc, #304]	; (8006ac4 <atan+0x2f4>)
 8006994:	f7f9 fc4c 	bl	8000230 <__aeabi_dsub>
 8006998:	2200      	movs	r2, #0
 800699a:	4606      	mov	r6, r0
 800699c:	460f      	mov	r7, r1
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	4b48      	ldr	r3, [pc, #288]	; (8006ac4 <atan+0x2f4>)
 80069a4:	f7f9 fc46 	bl	8000234 <__adddf3>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7f9 ff20 	bl	80007f4 <__aeabi_ddiv>
 80069b4:	f04f 0a01 	mov.w	sl, #1
 80069b8:	4604      	mov	r4, r0
 80069ba:	460d      	mov	r5, r1
 80069bc:	e767      	b.n	800688e <atan+0xbe>
 80069be:	4b43      	ldr	r3, [pc, #268]	; (8006acc <atan+0x2fc>)
 80069c0:	429e      	cmp	r6, r3
 80069c2:	da1a      	bge.n	80069fa <atan+0x22a>
 80069c4:	2200      	movs	r2, #0
 80069c6:	4b42      	ldr	r3, [pc, #264]	; (8006ad0 <atan+0x300>)
 80069c8:	f7f9 fc32 	bl	8000230 <__aeabi_dsub>
 80069cc:	2200      	movs	r2, #0
 80069ce:	4606      	mov	r6, r0
 80069d0:	460f      	mov	r7, r1
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	4b3e      	ldr	r3, [pc, #248]	; (8006ad0 <atan+0x300>)
 80069d8:	f7f9 fde2 	bl	80005a0 <__aeabi_dmul>
 80069dc:	2200      	movs	r2, #0
 80069de:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <atan+0x2f4>)
 80069e0:	f7f9 fc28 	bl	8000234 <__adddf3>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4630      	mov	r0, r6
 80069ea:	4639      	mov	r1, r7
 80069ec:	f7f9 ff02 	bl	80007f4 <__aeabi_ddiv>
 80069f0:	f04f 0a02 	mov.w	sl, #2
 80069f4:	4604      	mov	r4, r0
 80069f6:	460d      	mov	r5, r1
 80069f8:	e749      	b.n	800688e <atan+0xbe>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	2000      	movs	r0, #0
 8006a00:	4934      	ldr	r1, [pc, #208]	; (8006ad4 <atan+0x304>)
 8006a02:	f7f9 fef7 	bl	80007f4 <__aeabi_ddiv>
 8006a06:	f04f 0a03 	mov.w	sl, #3
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	e73e      	b.n	800688e <atan+0xbe>
 8006a10:	4b31      	ldr	r3, [pc, #196]	; (8006ad8 <atan+0x308>)
 8006a12:	4e32      	ldr	r6, [pc, #200]	; (8006adc <atan+0x30c>)
 8006a14:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006a18:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006a1c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006a20:	f7f9 fc06 	bl	8000230 <__aeabi_dsub>
 8006a24:	4622      	mov	r2, r4
 8006a26:	462b      	mov	r3, r5
 8006a28:	f7f9 fc02 	bl	8000230 <__aeabi_dsub>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006a34:	f7f9 fbfc 	bl	8000230 <__aeabi_dsub>
 8006a38:	f1bb 0f00 	cmp.w	fp, #0
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	460d      	mov	r5, r1
 8006a40:	f6bf aee4 	bge.w	800680c <atan+0x3c>
 8006a44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a48:	461d      	mov	r5, r3
 8006a4a:	e6df      	b.n	800680c <atan+0x3c>
 8006a4c:	4d24      	ldr	r5, [pc, #144]	; (8006ae0 <atan+0x310>)
 8006a4e:	e6dd      	b.n	800680c <atan+0x3c>
 8006a50:	8800759c 	.word	0x8800759c
 8006a54:	7e37e43c 	.word	0x7e37e43c
 8006a58:	e322da11 	.word	0xe322da11
 8006a5c:	3f90ad3a 	.word	0x3f90ad3a
 8006a60:	24760deb 	.word	0x24760deb
 8006a64:	3fa97b4b 	.word	0x3fa97b4b
 8006a68:	a0d03d51 	.word	0xa0d03d51
 8006a6c:	3fb10d66 	.word	0x3fb10d66
 8006a70:	c54c206e 	.word	0xc54c206e
 8006a74:	3fb745cd 	.word	0x3fb745cd
 8006a78:	920083ff 	.word	0x920083ff
 8006a7c:	3fc24924 	.word	0x3fc24924
 8006a80:	5555550d 	.word	0x5555550d
 8006a84:	3fd55555 	.word	0x3fd55555
 8006a88:	2c6a6c2f 	.word	0x2c6a6c2f
 8006a8c:	bfa2b444 	.word	0xbfa2b444
 8006a90:	52defd9a 	.word	0x52defd9a
 8006a94:	3fadde2d 	.word	0x3fadde2d
 8006a98:	af749a6d 	.word	0xaf749a6d
 8006a9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006aa0:	fe231671 	.word	0xfe231671
 8006aa4:	3fbc71c6 	.word	0x3fbc71c6
 8006aa8:	9998ebc4 	.word	0x9998ebc4
 8006aac:	3fc99999 	.word	0x3fc99999
 8006ab0:	440fffff 	.word	0x440fffff
 8006ab4:	7ff00000 	.word	0x7ff00000
 8006ab8:	54442d18 	.word	0x54442d18
 8006abc:	bff921fb 	.word	0xbff921fb
 8006ac0:	3fdbffff 	.word	0x3fdbffff
 8006ac4:	3ff00000 	.word	0x3ff00000
 8006ac8:	3ff2ffff 	.word	0x3ff2ffff
 8006acc:	40038000 	.word	0x40038000
 8006ad0:	3ff80000 	.word	0x3ff80000
 8006ad4:	bff00000 	.word	0xbff00000
 8006ad8:	08006f60 	.word	0x08006f60
 8006adc:	08006f40 	.word	0x08006f40
 8006ae0:	3ff921fb 	.word	0x3ff921fb

08006ae4 <fabs>:
 8006ae4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006ae8:	4770      	bx	lr

08006aea <atan2>:
 8006aea:	f000 b82d 	b.w	8006b48 <__ieee754_atan2>
	...

08006af0 <sqrt>:
 8006af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	f000 f8f9 	bl	8006cec <__ieee754_sqrt>
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <sqrt+0x54>)
 8006afc:	4604      	mov	r4, r0
 8006afe:	f993 3000 	ldrsb.w	r3, [r3]
 8006b02:	460d      	mov	r5, r1
 8006b04:	3301      	adds	r3, #1
 8006b06:	d019      	beq.n	8006b3c <sqrt+0x4c>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 ffe0 	bl	8000ad4 <__aeabi_dcmpun>
 8006b14:	b990      	cbnz	r0, 8006b3c <sqrt+0x4c>
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	f7f9 ffb1 	bl	8000a84 <__aeabi_dcmplt>
 8006b22:	b158      	cbz	r0, 8006b3c <sqrt+0x4c>
 8006b24:	f7fe fec0 	bl	80058a8 <__errno>
 8006b28:	2321      	movs	r3, #33	; 0x21
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	6003      	str	r3, [r0, #0]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4610      	mov	r0, r2
 8006b32:	4619      	mov	r1, r3
 8006b34:	f7f9 fe5e 	bl	80007f4 <__aeabi_ddiv>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	4629      	mov	r1, r5
 8006b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000108 	.word	0x20000108

08006b48 <__ieee754_atan2>:
 8006b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4c:	4692      	mov	sl, r2
 8006b4e:	4699      	mov	r9, r3
 8006b50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b54:	461f      	mov	r7, r3
 8006b56:	f1ca 0300 	rsb	r3, sl, #0
 8006b5a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8006ce8 <__ieee754_atan2+0x1a0>
 8006b5e:	ea43 030a 	orr.w	r3, r3, sl
 8006b62:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006b66:	4573      	cmp	r3, lr
 8006b68:	4604      	mov	r4, r0
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	d808      	bhi.n	8006b80 <__ieee754_atan2+0x38>
 8006b6e:	4246      	negs	r6, r0
 8006b70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b74:	4306      	orrs	r6, r0
 8006b76:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006b7a:	4576      	cmp	r6, lr
 8006b7c:	468c      	mov	ip, r1
 8006b7e:	d908      	bls.n	8006b92 <__ieee754_atan2+0x4a>
 8006b80:	4652      	mov	r2, sl
 8006b82:	464b      	mov	r3, r9
 8006b84:	4620      	mov	r0, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	f7f9 fb54 	bl	8000234 <__adddf3>
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	e019      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006b92:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006b96:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006b9a:	ea56 060a 	orrs.w	r6, r6, sl
 8006b9e:	d103      	bne.n	8006ba8 <__ieee754_atan2+0x60>
 8006ba0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	f7ff be14 	b.w	80067d0 <atan>
 8006ba8:	17be      	asrs	r6, r7, #30
 8006baa:	f006 0602 	and.w	r6, r6, #2
 8006bae:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006bb2:	ea53 0100 	orrs.w	r1, r3, r0
 8006bb6:	d10a      	bne.n	8006bce <__ieee754_atan2+0x86>
 8006bb8:	2e02      	cmp	r6, #2
 8006bba:	d067      	beq.n	8006c8c <__ieee754_atan2+0x144>
 8006bbc:	2e03      	cmp	r6, #3
 8006bbe:	d102      	bne.n	8006bc6 <__ieee754_atan2+0x7e>
 8006bc0:	a53b      	add	r5, pc, #236	; (adr r5, 8006cb0 <__ieee754_atan2+0x168>)
 8006bc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bce:	ea52 010a 	orrs.w	r1, r2, sl
 8006bd2:	d106      	bne.n	8006be2 <__ieee754_atan2+0x9a>
 8006bd4:	f1bc 0f00 	cmp.w	ip, #0
 8006bd8:	da63      	bge.n	8006ca2 <__ieee754_atan2+0x15a>
 8006bda:	a537      	add	r5, pc, #220	; (adr r5, 8006cb8 <__ieee754_atan2+0x170>)
 8006bdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006be0:	e7f1      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006be2:	4572      	cmp	r2, lr
 8006be4:	d10f      	bne.n	8006c06 <__ieee754_atan2+0xbe>
 8006be6:	4293      	cmp	r3, r2
 8006be8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8006bec:	d107      	bne.n	8006bfe <__ieee754_atan2+0xb6>
 8006bee:	2e02      	cmp	r6, #2
 8006bf0:	d850      	bhi.n	8006c94 <__ieee754_atan2+0x14c>
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <__ieee754_atan2+0x198>)
 8006bf4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006bf8:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006bfc:	e7e3      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006bfe:	2e02      	cmp	r6, #2
 8006c00:	d84c      	bhi.n	8006c9c <__ieee754_atan2+0x154>
 8006c02:	4b38      	ldr	r3, [pc, #224]	; (8006ce4 <__ieee754_atan2+0x19c>)
 8006c04:	e7f6      	b.n	8006bf4 <__ieee754_atan2+0xac>
 8006c06:	4573      	cmp	r3, lr
 8006c08:	d0e4      	beq.n	8006bd4 <__ieee754_atan2+0x8c>
 8006c0a:	1a9b      	subs	r3, r3, r2
 8006c0c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006c10:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c14:	da20      	bge.n	8006c58 <__ieee754_atan2+0x110>
 8006c16:	2f00      	cmp	r7, #0
 8006c18:	da01      	bge.n	8006c1e <__ieee754_atan2+0xd6>
 8006c1a:	323c      	adds	r2, #60	; 0x3c
 8006c1c:	db20      	blt.n	8006c60 <__ieee754_atan2+0x118>
 8006c1e:	4652      	mov	r2, sl
 8006c20:	464b      	mov	r3, r9
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fde5 	bl	80007f4 <__aeabi_ddiv>
 8006c2a:	f7ff ff5b 	bl	8006ae4 <fabs>
 8006c2e:	f7ff fdcf 	bl	80067d0 <atan>
 8006c32:	4604      	mov	r4, r0
 8006c34:	460d      	mov	r5, r1
 8006c36:	2e01      	cmp	r6, #1
 8006c38:	d015      	beq.n	8006c66 <__ieee754_atan2+0x11e>
 8006c3a:	2e02      	cmp	r6, #2
 8006c3c:	d017      	beq.n	8006c6e <__ieee754_atan2+0x126>
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	d0c1      	beq.n	8006bc6 <__ieee754_atan2+0x7e>
 8006c42:	a31f      	add	r3, pc, #124	; (adr r3, 8006cc0 <__ieee754_atan2+0x178>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	4620      	mov	r0, r4
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	f7f9 faf0 	bl	8000230 <__aeabi_dsub>
 8006c50:	a31d      	add	r3, pc, #116	; (adr r3, 8006cc8 <__ieee754_atan2+0x180>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	e016      	b.n	8006c86 <__ieee754_atan2+0x13e>
 8006c58:	a51d      	add	r5, pc, #116	; (adr r5, 8006cd0 <__ieee754_atan2+0x188>)
 8006c5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c5e:	e7ea      	b.n	8006c36 <__ieee754_atan2+0xee>
 8006c60:	2400      	movs	r4, #0
 8006c62:	2500      	movs	r5, #0
 8006c64:	e7e7      	b.n	8006c36 <__ieee754_atan2+0xee>
 8006c66:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c6a:	461d      	mov	r5, r3
 8006c6c:	e7ab      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006c6e:	a314      	add	r3, pc, #80	; (adr r3, 8006cc0 <__ieee754_atan2+0x178>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 fada 	bl	8000230 <__aeabi_dsub>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	a111      	add	r1, pc, #68	; (adr r1, 8006cc8 <__ieee754_atan2+0x180>)
 8006c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c86:	f7f9 fad3 	bl	8000230 <__aeabi_dsub>
 8006c8a:	e77f      	b.n	8006b8c <__ieee754_atan2+0x44>
 8006c8c:	a50e      	add	r5, pc, #56	; (adr r5, 8006cc8 <__ieee754_atan2+0x180>)
 8006c8e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c92:	e798      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006c94:	a510      	add	r5, pc, #64	; (adr r5, 8006cd8 <__ieee754_atan2+0x190>)
 8006c96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c9a:	e794      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006c9c:	2400      	movs	r4, #0
 8006c9e:	2500      	movs	r5, #0
 8006ca0:	e791      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006ca2:	a50b      	add	r5, pc, #44	; (adr r5, 8006cd0 <__ieee754_atan2+0x188>)
 8006ca4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ca8:	e78d      	b.n	8006bc6 <__ieee754_atan2+0x7e>
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w
 8006cb0:	54442d18 	.word	0x54442d18
 8006cb4:	c00921fb 	.word	0xc00921fb
 8006cb8:	54442d18 	.word	0x54442d18
 8006cbc:	bff921fb 	.word	0xbff921fb
 8006cc0:	33145c07 	.word	0x33145c07
 8006cc4:	3ca1a626 	.word	0x3ca1a626
 8006cc8:	54442d18 	.word	0x54442d18
 8006ccc:	400921fb 	.word	0x400921fb
 8006cd0:	54442d18 	.word	0x54442d18
 8006cd4:	3ff921fb 	.word	0x3ff921fb
 8006cd8:	54442d18 	.word	0x54442d18
 8006cdc:	3fe921fb 	.word	0x3fe921fb
 8006ce0:	08006f80 	.word	0x08006f80
 8006ce4:	08006f98 	.word	0x08006f98
 8006ce8:	7ff00000 	.word	0x7ff00000

08006cec <__ieee754_sqrt>:
 8006cec:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006e40 <__ieee754_sqrt+0x154>
 8006cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf4:	ea3c 0c01 	bics.w	ip, ip, r1
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	460a      	mov	r2, r1
 8006d00:	4607      	mov	r7, r0
 8006d02:	4604      	mov	r4, r0
 8006d04:	d10e      	bne.n	8006d24 <__ieee754_sqrt+0x38>
 8006d06:	4602      	mov	r2, r0
 8006d08:	f7f9 fc4a 	bl	80005a0 <__aeabi_dmul>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4630      	mov	r0, r6
 8006d12:	4629      	mov	r1, r5
 8006d14:	f7f9 fa8e 	bl	8000234 <__adddf3>
 8006d18:	4606      	mov	r6, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	4629      	mov	r1, r5
 8006d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d24:	2900      	cmp	r1, #0
 8006d26:	dc0d      	bgt.n	8006d44 <__ieee754_sqrt+0x58>
 8006d28:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006d2c:	ea5c 0707 	orrs.w	r7, ip, r7
 8006d30:	d0f4      	beq.n	8006d1c <__ieee754_sqrt+0x30>
 8006d32:	b139      	cbz	r1, 8006d44 <__ieee754_sqrt+0x58>
 8006d34:	4602      	mov	r2, r0
 8006d36:	f7f9 fa7b 	bl	8000230 <__aeabi_dsub>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	f7f9 fd59 	bl	80007f4 <__aeabi_ddiv>
 8006d42:	e7e9      	b.n	8006d18 <__ieee754_sqrt+0x2c>
 8006d44:	1512      	asrs	r2, r2, #20
 8006d46:	d074      	beq.n	8006e32 <__ieee754_sqrt+0x146>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	07d5      	lsls	r5, r2, #31
 8006d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d50:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8006d54:	bf5e      	ittt	pl
 8006d56:	0fe3      	lsrpl	r3, r4, #31
 8006d58:	0064      	lslpl	r4, r4, #1
 8006d5a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006d5e:	0fe3      	lsrs	r3, r4, #31
 8006d60:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006d64:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8006d68:	2516      	movs	r5, #22
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006d70:	1076      	asrs	r6, r6, #1
 8006d72:	0064      	lsls	r4, r4, #1
 8006d74:	188f      	adds	r7, r1, r2
 8006d76:	429f      	cmp	r7, r3
 8006d78:	bfde      	ittt	le
 8006d7a:	1bdb      	suble	r3, r3, r7
 8006d7c:	18b9      	addle	r1, r7, r2
 8006d7e:	1880      	addle	r0, r0, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	3d01      	subs	r5, #1
 8006d84:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006d88:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006d8c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006d90:	d1f0      	bne.n	8006d74 <__ieee754_sqrt+0x88>
 8006d92:	462a      	mov	r2, r5
 8006d94:	f04f 0e20 	mov.w	lr, #32
 8006d98:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	eb07 0c05 	add.w	ip, r7, r5
 8006da2:	dc02      	bgt.n	8006daa <__ieee754_sqrt+0xbe>
 8006da4:	d113      	bne.n	8006dce <__ieee754_sqrt+0xe2>
 8006da6:	45a4      	cmp	ip, r4
 8006da8:	d811      	bhi.n	8006dce <__ieee754_sqrt+0xe2>
 8006daa:	f1bc 0f00 	cmp.w	ip, #0
 8006dae:	eb0c 0507 	add.w	r5, ip, r7
 8006db2:	da43      	bge.n	8006e3c <__ieee754_sqrt+0x150>
 8006db4:	2d00      	cmp	r5, #0
 8006db6:	db41      	blt.n	8006e3c <__ieee754_sqrt+0x150>
 8006db8:	f101 0801 	add.w	r8, r1, #1
 8006dbc:	1a5b      	subs	r3, r3, r1
 8006dbe:	4641      	mov	r1, r8
 8006dc0:	45a4      	cmp	ip, r4
 8006dc2:	bf88      	it	hi
 8006dc4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8006dc8:	eba4 040c 	sub.w	r4, r4, ip
 8006dcc:	443a      	add	r2, r7
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	f1be 0e01 	subs.w	lr, lr, #1
 8006dd4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006dd8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8006ddc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006de0:	d1dc      	bne.n	8006d9c <__ieee754_sqrt+0xb0>
 8006de2:	4323      	orrs	r3, r4
 8006de4:	d006      	beq.n	8006df4 <__ieee754_sqrt+0x108>
 8006de6:	1c54      	adds	r4, r2, #1
 8006de8:	bf0b      	itete	eq
 8006dea:	4672      	moveq	r2, lr
 8006dec:	3201      	addne	r2, #1
 8006dee:	3001      	addeq	r0, #1
 8006df0:	f022 0201 	bicne.w	r2, r2, #1
 8006df4:	1043      	asrs	r3, r0, #1
 8006df6:	07c1      	lsls	r1, r0, #31
 8006df8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006dfc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006e00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006e04:	bf48      	it	mi
 8006e06:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8006e10:	e782      	b.n	8006d18 <__ieee754_sqrt+0x2c>
 8006e12:	0ae3      	lsrs	r3, r4, #11
 8006e14:	3915      	subs	r1, #21
 8006e16:	0564      	lsls	r4, r4, #21
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0fa      	beq.n	8006e12 <__ieee754_sqrt+0x126>
 8006e1c:	02de      	lsls	r6, r3, #11
 8006e1e:	d50a      	bpl.n	8006e36 <__ieee754_sqrt+0x14a>
 8006e20:	f1c2 0020 	rsb	r0, r2, #32
 8006e24:	fa24 f000 	lsr.w	r0, r4, r0
 8006e28:	1e55      	subs	r5, r2, #1
 8006e2a:	4094      	lsls	r4, r2
 8006e2c:	4303      	orrs	r3, r0
 8006e2e:	1b4a      	subs	r2, r1, r5
 8006e30:	e78a      	b.n	8006d48 <__ieee754_sqrt+0x5c>
 8006e32:	4611      	mov	r1, r2
 8006e34:	e7f0      	b.n	8006e18 <__ieee754_sqrt+0x12c>
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	3201      	adds	r2, #1
 8006e3a:	e7ef      	b.n	8006e1c <__ieee754_sqrt+0x130>
 8006e3c:	4688      	mov	r8, r1
 8006e3e:	e7bd      	b.n	8006dbc <__ieee754_sqrt+0xd0>
 8006e40:	7ff00000 	.word	0x7ff00000

08006e44 <_init>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr

08006e50 <_fini>:
 8006e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e52:	bf00      	nop
 8006e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e56:	bc08      	pop	{r3}
 8006e58:	469e      	mov	lr, r3
 8006e5a:	4770      	bx	lr
