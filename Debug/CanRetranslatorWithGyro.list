
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080082b0  080082b0  000182b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008358  08008358  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008360  08008360  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008360  08008360  00018360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008368  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000110  08008474  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08008474  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d862  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a4  00000000  00000000  0002d997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00030040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207bc  00000000  00000000  00031590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f424  00000000  00000000  00051d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b679b  00000000  00000000  00061170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011790b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000301c  00000000  00000000  00117960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000110 	.word	0x20000110
 8000204:	00000000 	.word	0x00000000
 8000208:	08008294 	.word	0x08008294

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000114 	.word	0x20000114
 8000224:	08008294 	.word	0x08008294

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_uldivmod>:
 800100c:	b953      	cbnz	r3, 8001024 <__aeabi_uldivmod+0x18>
 800100e:	b94a      	cbnz	r2, 8001024 <__aeabi_uldivmod+0x18>
 8001010:	2900      	cmp	r1, #0
 8001012:	bf08      	it	eq
 8001014:	2800      	cmpeq	r0, #0
 8001016:	bf1c      	itt	ne
 8001018:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800101c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 b96e 	b.w	8001300 <__aeabi_idiv0>
 8001024:	f1ad 0c08 	sub.w	ip, sp, #8
 8001028:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800102c:	f000 f806 	bl	800103c <__udivmoddi4>
 8001030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr

0800103c <__udivmoddi4>:
 800103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	9e08      	ldr	r6, [sp, #32]
 8001042:	460d      	mov	r5, r1
 8001044:	4604      	mov	r4, r0
 8001046:	468e      	mov	lr, r1
 8001048:	2b00      	cmp	r3, #0
 800104a:	f040 8083 	bne.w	8001154 <__udivmoddi4+0x118>
 800104e:	428a      	cmp	r2, r1
 8001050:	4617      	mov	r7, r2
 8001052:	d947      	bls.n	80010e4 <__udivmoddi4+0xa8>
 8001054:	fab2 f382 	clz	r3, r2
 8001058:	b14b      	cbz	r3, 800106e <__udivmoddi4+0x32>
 800105a:	f1c3 0120 	rsb	r1, r3, #32
 800105e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001062:	fa20 f101 	lsr.w	r1, r0, r1
 8001066:	409f      	lsls	r7, r3
 8001068:	ea41 0e0e 	orr.w	lr, r1, lr
 800106c:	409c      	lsls	r4, r3
 800106e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001072:	fbbe fcf8 	udiv	ip, lr, r8
 8001076:	fa1f f987 	uxth.w	r9, r7
 800107a:	fb08 e21c 	mls	r2, r8, ip, lr
 800107e:	fb0c f009 	mul.w	r0, ip, r9
 8001082:	0c21      	lsrs	r1, r4, #16
 8001084:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001088:	4290      	cmp	r0, r2
 800108a:	d90a      	bls.n	80010a2 <__udivmoddi4+0x66>
 800108c:	18ba      	adds	r2, r7, r2
 800108e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001092:	f080 8118 	bcs.w	80012c6 <__udivmoddi4+0x28a>
 8001096:	4290      	cmp	r0, r2
 8001098:	f240 8115 	bls.w	80012c6 <__udivmoddi4+0x28a>
 800109c:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a0:	443a      	add	r2, r7
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	fbb2 f0f8 	udiv	r0, r2, r8
 80010a8:	fb08 2210 	mls	r2, r8, r0, r2
 80010ac:	fb00 f109 	mul.w	r1, r0, r9
 80010b0:	b2a4      	uxth	r4, r4
 80010b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010b6:	42a1      	cmp	r1, r4
 80010b8:	d909      	bls.n	80010ce <__udivmoddi4+0x92>
 80010ba:	193c      	adds	r4, r7, r4
 80010bc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010c0:	f080 8103 	bcs.w	80012ca <__udivmoddi4+0x28e>
 80010c4:	42a1      	cmp	r1, r4
 80010c6:	f240 8100 	bls.w	80012ca <__udivmoddi4+0x28e>
 80010ca:	3802      	subs	r0, #2
 80010cc:	443c      	add	r4, r7
 80010ce:	1a64      	subs	r4, r4, r1
 80010d0:	2100      	movs	r1, #0
 80010d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010d6:	b11e      	cbz	r6, 80010e0 <__udivmoddi4+0xa4>
 80010d8:	2200      	movs	r2, #0
 80010da:	40dc      	lsrs	r4, r3
 80010dc:	e9c6 4200 	strd	r4, r2, [r6]
 80010e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e4:	b902      	cbnz	r2, 80010e8 <__udivmoddi4+0xac>
 80010e6:	deff      	udf	#255	; 0xff
 80010e8:	fab2 f382 	clz	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d14f      	bne.n	8001190 <__udivmoddi4+0x154>
 80010f0:	1a8d      	subs	r5, r1, r2
 80010f2:	2101      	movs	r1, #1
 80010f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010f8:	fa1f f882 	uxth.w	r8, r2
 80010fc:	fbb5 fcfe 	udiv	ip, r5, lr
 8001100:	fb0e 551c 	mls	r5, lr, ip, r5
 8001104:	fb08 f00c 	mul.w	r0, r8, ip
 8001108:	0c22      	lsrs	r2, r4, #16
 800110a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800110e:	42a8      	cmp	r0, r5
 8001110:	d907      	bls.n	8001122 <__udivmoddi4+0xe6>
 8001112:	197d      	adds	r5, r7, r5
 8001114:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001118:	d202      	bcs.n	8001120 <__udivmoddi4+0xe4>
 800111a:	42a8      	cmp	r0, r5
 800111c:	f200 80e9 	bhi.w	80012f2 <__udivmoddi4+0x2b6>
 8001120:	4694      	mov	ip, r2
 8001122:	1a2d      	subs	r5, r5, r0
 8001124:	fbb5 f0fe 	udiv	r0, r5, lr
 8001128:	fb0e 5510 	mls	r5, lr, r0, r5
 800112c:	fb08 f800 	mul.w	r8, r8, r0
 8001130:	b2a4      	uxth	r4, r4
 8001132:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001136:	45a0      	cmp	r8, r4
 8001138:	d907      	bls.n	800114a <__udivmoddi4+0x10e>
 800113a:	193c      	adds	r4, r7, r4
 800113c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x10c>
 8001142:	45a0      	cmp	r8, r4
 8001144:	f200 80d9 	bhi.w	80012fa <__udivmoddi4+0x2be>
 8001148:	4610      	mov	r0, r2
 800114a:	eba4 0408 	sub.w	r4, r4, r8
 800114e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001152:	e7c0      	b.n	80010d6 <__udivmoddi4+0x9a>
 8001154:	428b      	cmp	r3, r1
 8001156:	d908      	bls.n	800116a <__udivmoddi4+0x12e>
 8001158:	2e00      	cmp	r6, #0
 800115a:	f000 80b1 	beq.w	80012c0 <__udivmoddi4+0x284>
 800115e:	2100      	movs	r1, #0
 8001160:	e9c6 0500 	strd	r0, r5, [r6]
 8001164:	4608      	mov	r0, r1
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d14b      	bne.n	800120a <__udivmoddi4+0x1ce>
 8001172:	42ab      	cmp	r3, r5
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0x140>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 80b9 	bhi.w	80012ee <__udivmoddi4+0x2b2>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb65 0303 	sbc.w	r3, r5, r3
 8001182:	2001      	movs	r0, #1
 8001184:	469e      	mov	lr, r3
 8001186:	2e00      	cmp	r6, #0
 8001188:	d0aa      	beq.n	80010e0 <__udivmoddi4+0xa4>
 800118a:	e9c6 4e00 	strd	r4, lr, [r6]
 800118e:	e7a7      	b.n	80010e0 <__udivmoddi4+0xa4>
 8001190:	409f      	lsls	r7, r3
 8001192:	f1c3 0220 	rsb	r2, r3, #32
 8001196:	40d1      	lsrs	r1, r2
 8001198:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800119c:	fbb1 f0fe 	udiv	r0, r1, lr
 80011a0:	fa1f f887 	uxth.w	r8, r7
 80011a4:	fb0e 1110 	mls	r1, lr, r0, r1
 80011a8:	fa24 f202 	lsr.w	r2, r4, r2
 80011ac:	409d      	lsls	r5, r3
 80011ae:	fb00 fc08 	mul.w	ip, r0, r8
 80011b2:	432a      	orrs	r2, r5
 80011b4:	0c15      	lsrs	r5, r2, #16
 80011b6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011ba:	45ac      	cmp	ip, r5
 80011bc:	fa04 f403 	lsl.w	r4, r4, r3
 80011c0:	d909      	bls.n	80011d6 <__udivmoddi4+0x19a>
 80011c2:	197d      	adds	r5, r7, r5
 80011c4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80011c8:	f080 808f 	bcs.w	80012ea <__udivmoddi4+0x2ae>
 80011cc:	45ac      	cmp	ip, r5
 80011ce:	f240 808c 	bls.w	80012ea <__udivmoddi4+0x2ae>
 80011d2:	3802      	subs	r0, #2
 80011d4:	443d      	add	r5, r7
 80011d6:	eba5 050c 	sub.w	r5, r5, ip
 80011da:	fbb5 f1fe 	udiv	r1, r5, lr
 80011de:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011e2:	fb01 f908 	mul.w	r9, r1, r8
 80011e6:	b295      	uxth	r5, r2
 80011e8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011ec:	45a9      	cmp	r9, r5
 80011ee:	d907      	bls.n	8001200 <__udivmoddi4+0x1c4>
 80011f0:	197d      	adds	r5, r7, r5
 80011f2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80011f6:	d274      	bcs.n	80012e2 <__udivmoddi4+0x2a6>
 80011f8:	45a9      	cmp	r9, r5
 80011fa:	d972      	bls.n	80012e2 <__udivmoddi4+0x2a6>
 80011fc:	3902      	subs	r1, #2
 80011fe:	443d      	add	r5, r7
 8001200:	eba5 0509 	sub.w	r5, r5, r9
 8001204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001208:	e778      	b.n	80010fc <__udivmoddi4+0xc0>
 800120a:	f1c1 0720 	rsb	r7, r1, #32
 800120e:	408b      	lsls	r3, r1
 8001210:	fa22 fc07 	lsr.w	ip, r2, r7
 8001214:	ea4c 0c03 	orr.w	ip, ip, r3
 8001218:	fa25 f407 	lsr.w	r4, r5, r7
 800121c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001220:	fbb4 f9fe 	udiv	r9, r4, lr
 8001224:	fa1f f88c 	uxth.w	r8, ip
 8001228:	fb0e 4419 	mls	r4, lr, r9, r4
 800122c:	fa20 f307 	lsr.w	r3, r0, r7
 8001230:	fb09 fa08 	mul.w	sl, r9, r8
 8001234:	408d      	lsls	r5, r1
 8001236:	431d      	orrs	r5, r3
 8001238:	0c2b      	lsrs	r3, r5, #16
 800123a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800123e:	45a2      	cmp	sl, r4
 8001240:	fa02 f201 	lsl.w	r2, r2, r1
 8001244:	fa00 f301 	lsl.w	r3, r0, r1
 8001248:	d909      	bls.n	800125e <__udivmoddi4+0x222>
 800124a:	eb1c 0404 	adds.w	r4, ip, r4
 800124e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001252:	d248      	bcs.n	80012e6 <__udivmoddi4+0x2aa>
 8001254:	45a2      	cmp	sl, r4
 8001256:	d946      	bls.n	80012e6 <__udivmoddi4+0x2aa>
 8001258:	f1a9 0902 	sub.w	r9, r9, #2
 800125c:	4464      	add	r4, ip
 800125e:	eba4 040a 	sub.w	r4, r4, sl
 8001262:	fbb4 f0fe 	udiv	r0, r4, lr
 8001266:	fb0e 4410 	mls	r4, lr, r0, r4
 800126a:	fb00 fa08 	mul.w	sl, r0, r8
 800126e:	b2ad      	uxth	r5, r5
 8001270:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001274:	45a2      	cmp	sl, r4
 8001276:	d908      	bls.n	800128a <__udivmoddi4+0x24e>
 8001278:	eb1c 0404 	adds.w	r4, ip, r4
 800127c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001280:	d22d      	bcs.n	80012de <__udivmoddi4+0x2a2>
 8001282:	45a2      	cmp	sl, r4
 8001284:	d92b      	bls.n	80012de <__udivmoddi4+0x2a2>
 8001286:	3802      	subs	r0, #2
 8001288:	4464      	add	r4, ip
 800128a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800128e:	fba0 8902 	umull	r8, r9, r0, r2
 8001292:	eba4 040a 	sub.w	r4, r4, sl
 8001296:	454c      	cmp	r4, r9
 8001298:	46c6      	mov	lr, r8
 800129a:	464d      	mov	r5, r9
 800129c:	d319      	bcc.n	80012d2 <__udivmoddi4+0x296>
 800129e:	d016      	beq.n	80012ce <__udivmoddi4+0x292>
 80012a0:	b15e      	cbz	r6, 80012ba <__udivmoddi4+0x27e>
 80012a2:	ebb3 020e 	subs.w	r2, r3, lr
 80012a6:	eb64 0405 	sbc.w	r4, r4, r5
 80012aa:	fa04 f707 	lsl.w	r7, r4, r7
 80012ae:	fa22 f301 	lsr.w	r3, r2, r1
 80012b2:	431f      	orrs	r7, r3
 80012b4:	40cc      	lsrs	r4, r1
 80012b6:	e9c6 7400 	strd	r7, r4, [r6]
 80012ba:	2100      	movs	r1, #0
 80012bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c0:	4631      	mov	r1, r6
 80012c2:	4630      	mov	r0, r6
 80012c4:	e70c      	b.n	80010e0 <__udivmoddi4+0xa4>
 80012c6:	468c      	mov	ip, r1
 80012c8:	e6eb      	b.n	80010a2 <__udivmoddi4+0x66>
 80012ca:	4610      	mov	r0, r2
 80012cc:	e6ff      	b.n	80010ce <__udivmoddi4+0x92>
 80012ce:	4543      	cmp	r3, r8
 80012d0:	d2e6      	bcs.n	80012a0 <__udivmoddi4+0x264>
 80012d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80012d6:	eb69 050c 	sbc.w	r5, r9, ip
 80012da:	3801      	subs	r0, #1
 80012dc:	e7e0      	b.n	80012a0 <__udivmoddi4+0x264>
 80012de:	4628      	mov	r0, r5
 80012e0:	e7d3      	b.n	800128a <__udivmoddi4+0x24e>
 80012e2:	4611      	mov	r1, r2
 80012e4:	e78c      	b.n	8001200 <__udivmoddi4+0x1c4>
 80012e6:	4681      	mov	r9, r0
 80012e8:	e7b9      	b.n	800125e <__udivmoddi4+0x222>
 80012ea:	4608      	mov	r0, r1
 80012ec:	e773      	b.n	80011d6 <__udivmoddi4+0x19a>
 80012ee:	4608      	mov	r0, r1
 80012f0:	e749      	b.n	8001186 <__udivmoddi4+0x14a>
 80012f2:	f1ac 0c02 	sub.w	ip, ip, #2
 80012f6:	443d      	add	r5, r7
 80012f8:	e713      	b.n	8001122 <__udivmoddi4+0xe6>
 80012fa:	3802      	subs	r0, #2
 80012fc:	443c      	add	r4, r7
 80012fe:	e724      	b.n	800114a <__udivmoddi4+0x10e>

08001300 <__aeabi_idiv0>:
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <BUTTON_STATE>:
#include "stm32f1xx_hal_gpio.h"
#include "button.h"

enum BUTTON num;

uint8_t BUTTON_STATE(uint8_t num) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d114      	bne.n	800133e <BUTTON_STATE+0x3a>

	case CALIBRATE_MPU_BUTTON:

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <BUTTON_STATE+0x44>)
 800131a:	f003 fa6b 	bl	80047f4 <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <BUTTON_STATE+0x24>
			return 0;
 8001324:	2300      	movs	r3, #0
 8001326:	e00a      	b.n	800133e <BUTTON_STATE+0x3a>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <BUTTON_STATE+0x44>)
 800132e:	f003 fa61 	bl	80047f4 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <BUTTON_STATE+0x38>
			return 1;
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <BUTTON_STATE+0x3a>
		}
		break;
 800133c:	bf00      	nop
	}
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40010800 	.word	0x40010800

0800134c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001354:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <MX_CAN1_Init+0xac>)
 8001356:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 4;
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800135a:	2204      	movs	r2, #4
 800135c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800136c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001370:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001374:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001378:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001382:	2201      	movs	r2, #1
 8001384:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001388:	2201      	movs	r2, #1
 800138a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800138e:	2200      	movs	r2, #0
 8001390:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001394:	2200      	movs	r2, #0
 8001396:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800139a:	2201      	movs	r2, #1
 800139c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <MX_CAN1_Init+0xa8>)
 80013a0:	f001 fdf0 	bl	8002f84 <HAL_CAN_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_CAN1_Init+0x62>
		Error_Handler();
 80013aa:	f001 f8ee 	bl	800258a <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80013d2:	230e      	movs	r3, #14
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_CAN1_Init+0xa8>)
 80013dc:	f001 fece 	bl	800317c <HAL_CAN_ConfigFilter>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_CAN1_Init+0x9e>
		Error_Handler();
 80013e6:	f001 f8d0 	bl	800258a <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000174 	.word	0x20000174
 80013f8:	40006400 	.word	0x40006400

080013fc <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_CAN2_Init+0xac>)
 8001406:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 4;
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800140a:	2204      	movs	r2, #4
 800140c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800141c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001420:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001424:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001428:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800142c:	2200      	movs	r2, #0
 800142e:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001432:	2201      	movs	r2, #1
 8001434:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = ENABLE;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001438:	2201      	movs	r2, #1
 800143a:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001444:	2200      	movs	r2, #0
 8001446:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800144a:	2201      	movs	r2, #1
 800144c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001450:	f001 fd98 	bl	8002f84 <HAL_CAN_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_CAN2_Init+0x62>
		Error_Handler();
 800145a:	f001 f896 	bl	800258a <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 14;
 800145e:	230e      	movs	r3, #14
 8001460:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001466:	2301      	movs	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x000;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800147a:	2301      	movs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001482:	230e      	movs	r3, #14
 8001484:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800148c:	f001 fe76 	bl	800317c <HAL_CAN_ConfigFilter>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_CAN2_Init+0x9e>
		Error_Handler();
 8001496:	f001 f878 	bl	800258a <Error_Handler>
	}

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000014c 	.word	0x2000014c
 80014a8:	40006800 	.word	0x40006800

080014ac <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6d      	ldr	r2, [pc, #436]	; (800167c <HAL_CAN_MspInit+0x1d0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d15b      	bne.n	8001584 <HAL_CAN_MspInit+0xd8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80014cc:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a6b      	ldr	r2, [pc, #428]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80014d4:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80014d6:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10b      	bne.n	80014f6 <HAL_CAN_MspInit+0x4a>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80014de:	4b69      	ldr	r3, [pc, #420]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a68      	ldr	r2, [pc, #416]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b66      	ldr	r3, [pc, #408]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a62      	ldr	r2, [pc, #392]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b60      	ldr	r3, [pc, #384]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001512:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4859      	ldr	r0, [pc, #356]	; (8001688 <HAL_CAN_MspInit+0x1dc>)
 8001524:	f002 ffe2 	bl	80044ec <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4852      	ldr	r0, [pc, #328]	; (8001688 <HAL_CAN_MspInit+0x1dc>)
 800153e:	f002 ffd5 	bl	80044ec <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2013      	movs	r0, #19
 8001548:	f002 fc95 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800154c:	2013      	movs	r0, #19
 800154e:	f002 fcae 	bl	8003eae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2014      	movs	r0, #20
 8001558:	f002 fc8d 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800155c:	2014      	movs	r0, #20
 800155e:	f002 fca6 	bl	8003eae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2015      	movs	r0, #21
 8001568:	f002 fc85 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800156c:	2015      	movs	r0, #21
 800156e:	f002 fc9e 	bl	8003eae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2016      	movs	r0, #22
 8001578:	f002 fc7d 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800157c:	2016      	movs	r0, #22
 800157e:	f002 fc96 	bl	8003eae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
	}
}
 8001582:	e077      	b.n	8001674 <HAL_CAN_MspInit+0x1c8>
	} else if (canHandle->Instance == CAN2) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a40      	ldr	r2, [pc, #256]	; (800168c <HAL_CAN_MspInit+0x1e0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d172      	bne.n	8001674 <HAL_CAN_MspInit+0x1c8>
		__HAL_RCC_CAN2_CLK_ENABLE();
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 8001594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a34      	ldr	r2, [pc, #208]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80015ae:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10b      	bne.n	80015d0 <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4a31      	ldr	r2, [pc, #196]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c2:	61d3      	str	r3, [r2, #28]
 80015c4:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e8:	2320      	movs	r3, #32
 80015ea:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4825      	ldr	r0, [pc, #148]	; (8001690 <HAL_CAN_MspInit+0x1e4>)
 80015fc:	f002 ff76 	bl	80044ec <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <HAL_CAN_MspInit+0x1e4>)
 8001614:	f002 ff6a 	bl	80044ec <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_CAN2_ENABLE();
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_CAN_MspInit+0x1e8>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_CAN_MspInit+0x1e8>)
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	6053      	str	r3, [r2, #4]
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	203f      	movs	r0, #63	; 0x3f
 800163a:	f002 fc1c 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800163e:	203f      	movs	r0, #63	; 0x3f
 8001640:	f002 fc35 	bl	8003eae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2040      	movs	r0, #64	; 0x40
 800164a:	f002 fc14 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800164e:	2040      	movs	r0, #64	; 0x40
 8001650:	f002 fc2d 	bl	8003eae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2041      	movs	r0, #65	; 0x41
 800165a:	f002 fc0c 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800165e:	2041      	movs	r0, #65	; 0x41
 8001660:	f002 fc25 	bl	8003eae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2042      	movs	r0, #66	; 0x42
 800166a:	f002 fc04 	bl	8003e76 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800166e:	2042      	movs	r0, #66	; 0x42
 8001670:	f002 fc1d 	bl	8003eae <HAL_NVIC_EnableIRQ>
}
 8001674:	bf00      	nop
 8001676:	3730      	adds	r7, #48	; 0x30
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40006400 	.word	0x40006400
 8001680:	2000012c 	.word	0x2000012c
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800
 800168c:	40006800 	.word	0x40006800
 8001690:	40010c00 	.word	0x40010c00
 8001694:	40010000 	.word	0x40010000

08001698 <EEPROM_Init>:
// - set global variables ValidPage, ReceivingPage and ErasedPage
// - build address index
// - resume page transfer if needed
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_Init() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
	EEPROM_Result result;

	//unlock the flash memory
	HAL_FLASH_Unlock();
 800169e:	f002 fda5 	bl	80041ec <HAL_FLASH_Unlock>

	//read each page status and check if valid
	EEPROM_PageStatus PageStatus0 = *((__IO uint16_t*) EEPROM_PAGE0);
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <EEPROM_Init+0x17c>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	83fb      	strh	r3, [r7, #30]
	EEPROM_PageStatus PageStatus1 = *((__IO uint16_t*) EEPROM_PAGE1);
 80016a8:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <EEPROM_Init+0x180>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	83bb      	strh	r3, [r7, #28]
	uint8_t InvalidState = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 != EEPROM_VALID && PageStatus0 != EEPROM_RECEIVING
 80016b2:	8bfb      	ldrh	r3, [r7, #30]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <EEPROM_Init+0x38>
 80016b8:	8bfb      	ldrh	r3, [r7, #30]
 80016ba:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016be:	4293      	cmp	r3, r2
 80016c0:	d006      	beq.n	80016d0 <EEPROM_Init+0x38>
			&& PageStatus0 != EEPROM_ERASED)
 80016c2:	8bfb      	ldrh	r3, [r7, #30]
 80016c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d001      	beq.n	80016d0 <EEPROM_Init+0x38>
		InvalidState = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	76fb      	strb	r3, [r7, #27]
	if (PageStatus1 != EEPROM_VALID && PageStatus1 != EEPROM_RECEIVING
 80016d0:	8bbb      	ldrh	r3, [r7, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <EEPROM_Init+0x56>
 80016d6:	8bbb      	ldrh	r3, [r7, #28]
 80016d8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016dc:	4293      	cmp	r3, r2
 80016de:	d006      	beq.n	80016ee <EEPROM_Init+0x56>
			&& PageStatus1 != EEPROM_ERASED)
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d001      	beq.n	80016ee <EEPROM_Init+0x56>
		InvalidState = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 == PageStatus1)
 80016ee:	8bfa      	ldrh	r2, [r7, #30]
 80016f0:	8bbb      	ldrh	r3, [r7, #28]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d101      	bne.n	80016fa <EEPROM_Init+0x62>
		InvalidState = 1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	76fb      	strb	r3, [r7, #27]

	// if invalid page status, format EEPROM (erase both pages and set page0 as valid)
	if (InvalidState) {
 80016fa:	7efb      	ldrb	r3, [r7, #27]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d029      	beq.n	8001754 <EEPROM_Init+0xbc>
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8001704:	2301      	movs	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
		EraseDefinitions.PageAddress = EEPROM_PAGE0;
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <EEPROM_Init+0x17c>)
 800170a:	613b      	str	r3, [r7, #16]
		EraseDefinitions.NbPages = 2;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
		uint32_t PageError;

		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fe3f 	bl	800439c <HAL_FLASHEx_Erase>
 800171e:	4603      	mov	r3, r0
 8001720:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 8001722:	7ebb      	ldrb	r3, [r7, #26]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <EEPROM_Init+0x94>
			return result;
 8001728:	7ebb      	ldrb	r3, [r7, #26]
 800172a:	e06e      	b.n	800180a <EEPROM_Init+0x172>

		result = HAL_FLASH_Program(EEPROM_SIZE16, EEPROM_PAGE0, EEPROM_VALID);
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	4937      	ldr	r1, [pc, #220]	; (8001814 <EEPROM_Init+0x17c>)
 8001736:	2001      	movs	r0, #1
 8001738:	f002 fce8 	bl	800410c <HAL_FLASH_Program>
 800173c:	4603      	mov	r3, r0
 800173e:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 8001740:	7ebb      	ldrb	r3, [r7, #26]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <EEPROM_Init+0xb2>
			return result;
 8001746:	7ebb      	ldrb	r3, [r7, #26]
 8001748:	e05f      	b.n	800180a <EEPROM_Init+0x172>

		PageStatus0 = EEPROM_VALID;
 800174a:	2300      	movs	r3, #0
 800174c:	83fb      	strh	r3, [r7, #30]
		PageStatus1 = EEPROM_ERASED;
 800174e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001752:	83bb      	strh	r3, [r7, #28]
	}

	//set global variables ValidPage, ReceivingPage and ErasedPage (one stays EEPROM_PAGE_NONE)
	if (PageStatus0 == EEPROM_VALID)
 8001754:	8bfb      	ldrh	r3, [r7, #30]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <EEPROM_Init+0xc8>
		EEPROM_ValidPage = EEPROM_PAGE0;
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <EEPROM_Init+0x184>)
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <EEPROM_Init+0x17c>)
 800175e:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_VALID)
 8001760:	8bbb      	ldrh	r3, [r7, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <EEPROM_Init+0xd4>
		EEPROM_ValidPage = EEPROM_PAGE1;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <EEPROM_Init+0x184>)
 8001768:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <EEPROM_Init+0x180>)
 800176a:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_RECEIVING)
 800176c:	8bfb      	ldrh	r3, [r7, #30]
 800176e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001772:	4293      	cmp	r3, r2
 8001774:	d102      	bne.n	800177c <EEPROM_Init+0xe4>
		EEPROM_ReceivingPage = EEPROM_PAGE0;
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <EEPROM_Init+0x188>)
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <EEPROM_Init+0x17c>)
 800177a:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_RECEIVING)
 800177c:	8bbb      	ldrh	r3, [r7, #28]
 800177e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <EEPROM_Init+0xf4>
		EEPROM_ReceivingPage = EEPROM_PAGE1;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <EEPROM_Init+0x188>)
 8001788:	4a23      	ldr	r2, [pc, #140]	; (8001818 <EEPROM_Init+0x180>)
 800178a:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_ERASED)
 800178c:	8bfb      	ldrh	r3, [r7, #30]
 800178e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001792:	4293      	cmp	r3, r2
 8001794:	d102      	bne.n	800179c <EEPROM_Init+0x104>
		EEPROM_ErasedPage = EEPROM_PAGE0;
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <EEPROM_Init+0x18c>)
 8001798:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <EEPROM_Init+0x17c>)
 800179a:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_ERASED)
 800179c:	8bbb      	ldrh	r3, [r7, #28]
 800179e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d102      	bne.n	80017ac <EEPROM_Init+0x114>
		EEPROM_ErasedPage = EEPROM_PAGE1;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <EEPROM_Init+0x18c>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <EEPROM_Init+0x180>)
 80017aa:	601a      	str	r2, [r3, #0]

	//build address index (addresses from receiving page are dominant)
	EEPROM_PageToIndex(EEPROM_ValidPage);
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <EEPROM_Init+0x184>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fa93 	bl	8001cdc <EEPROM_PageToIndex>
	EEPROM_PageToIndex(EEPROM_ReceivingPage);
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <EEPROM_Init+0x188>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fa8e 	bl	8001cdc <EEPROM_PageToIndex>

	//if needed, resume page transfer or just mark receiving page as valid
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE) {
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <EEPROM_Init+0x188>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01f      	beq.n	8001808 <EEPROM_Init+0x170>
		if (EEPROM_ValidPage == EEPROM_PAGE_NONE) {
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <EEPROM_Init+0x184>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10c      	bne.n	80017ea <EEPROM_Init+0x152>
			result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <EEPROM_Init+0x188>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f9e4 	bl	8001ba4 <EEPROM_SetPageStatus>
 80017dc:	4603      	mov	r3, r0
 80017de:	76bb      	strb	r3, [r7, #26]
			if (result != EEPROM_SUCCESS)
 80017e0:	7ebb      	ldrb	r3, [r7, #26]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d010      	beq.n	8001808 <EEPROM_Init+0x170>
				return result;
 80017e6:	7ebb      	ldrb	r3, [r7, #26]
 80017e8:	e00f      	b.n	800180a <EEPROM_Init+0x172>
		} else {
			result = EEPROM_PageTransfer(EEPROM_ValidPage,
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <EEPROM_Init+0x184>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <EEPROM_Init+0x188>)
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f96d 	bl	8001ad4 <EEPROM_PageTransfer>
 80017fa:	4603      	mov	r3, r0
 80017fc:	76bb      	strb	r3, [r7, #26]
					EEPROM_ReceivingPage);
			if (result != EEPROM_SUCCESS)
 80017fe:	7ebb      	ldrb	r3, [r7, #26]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <EEPROM_Init+0x170>
				return result;
 8001804:	7ebb      	ldrb	r3, [r7, #26]
 8001806:	e000      	b.n	800180a <EEPROM_Init+0x172>
		}
	}

	return EEPROM_SUCCESS;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800f000 	.word	0x0800f000
 8001818:	0800f800 	.word	0x0800f800
 800181c:	20000138 	.word	0x20000138
 8001820:	2000013c 	.word	0x2000013c
 8001824:	20000140 	.word	0x20000140

08001828 <EEPROM_ReadVariable>:
// - read variable value from physical address with right size
//
// VariableName:	name (number) of the variable to read
// Value:			outputs the variable value
// return:			EEPROM_SUCCESS, EEPROM_INVALID_NAME, EEPROM_NOT_ASSIGNED
EEPROM_Result EEPROM_ReadVariable(uint16_t VariableName, EEPROM_Value *Value) {
 8001828:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	6039      	str	r1, [r7, #0]
 8001834:	80fb      	strh	r3, [r7, #6]
	//check if variable name exists
	if (VariableName >= EEPROM_VARIABLE_COUNT)
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d901      	bls.n	8001840 <EEPROM_ReadVariable+0x18>
		return EEPROM_INVALID_NAME;
 800183c:	2306      	movs	r3, #6
 800183e:	e041      	b.n	80018c4 <EEPROM_ReadVariable+0x9c>

	//check if variable was assigned
	uint32_t Address = EEPROM_START_ADDRESS + EEPROM_Index[VariableName];
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <EEPROM_ReadVariable+0xa8>)
 8001844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001848:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800184c:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8001850:	60fb      	str	r3, [r7, #12]
	if (Address == EEPROM_PAGE0)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <EEPROM_ReadVariable+0xac>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <EEPROM_ReadVariable+0x36>
		return EEPROM_NOT_ASSIGNED;
 800185a:	2305      	movs	r3, #5
 800185c:	e032      	b.n	80018c4 <EEPROM_ReadVariable+0x9c>

	//read variable value from physical address with right size
	switch (EEPROM_SizeTable[VariableName]) {
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <EEPROM_ReadVariable+0xb0>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d011      	beq.n	800188c <EEPROM_ReadVariable+0x64>
 8001868:	2b03      	cmp	r3, #3
 800186a:	dc28      	bgt.n	80018be <EEPROM_ReadVariable+0x96>
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <EEPROM_ReadVariable+0x4e>
 8001870:	2b02      	cmp	r3, #2
 8001872:	d006      	beq.n	8001882 <EEPROM_ReadVariable+0x5a>
 8001874:	e023      	b.n	80018be <EEPROM_ReadVariable+0x96>
	case EEPROM_SIZE16:
		(*Value).uInt16 = *((__IO uint16_t*) Address);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29a      	uxth	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	801a      	strh	r2, [r3, #0]
		break;
 8001880:	e01f      	b.n	80018c2 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE32:
		(*Value).uInt32 = *((__IO uint32_t*) Address);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]
		break;
 800188a:	e01a      	b.n	80018c2 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE64:
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f04f 0100 	mov.w	r1, #0
				| ((uint64_t) *((__IO uint32_t*) (Address + 4)) << 32);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4698      	mov	r8, r3
 800189e:	f04f 0900 	mov.w	r9, #0
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	4643      	mov	r3, r8
 80018ac:	2200      	movs	r2, #0
 80018ae:	ea40 0402 	orr.w	r4, r0, r2
 80018b2:	ea41 0503 	orr.w	r5, r1, r3
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 80018bc:	e001      	b.n	80018c2 <EEPROM_ReadVariable+0x9a>
	default:
		return EEPROM_NOT_ASSIGNED;
 80018be:	2305      	movs	r3, #5
 80018c0:	e000      	b.n	80018c4 <EEPROM_ReadVariable+0x9c>
	}

	return EEPROM_SUCCESS;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80018ce:	4770      	bx	lr
 80018d0:	20000134 	.word	0x20000134
 80018d4:	0800f000 	.word	0x0800f000
 80018d8:	20000130 	.word	0x20000130

080018dc <EEPROM_WriteVariable>:
// VariableName:	name (number) of the variable to write
// Value:			value to be written
// Size:			size of "Value" as EEPROM_Size
// return:			EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_WriteVariable(uint16_t VariableName, EEPROM_Value Value,
		uint8_t Size) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	4601      	mov	r1, r0
 80018e4:	e9c7 2300 	strd	r2, r3, [r7]
 80018e8:	460b      	mov	r3, r1
 80018ea:	81fb      	strh	r3, [r7, #14]
	EEPROM_Result result;

	//get writing page's end address (prefer writing to receiving page)
	EEPROM_Page WritingPage = EEPROM_ValidPage;
 80018ec:	4b73      	ldr	r3, [pc, #460]	; (8001abc <EEPROM_WriteVariable+0x1e0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE)
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <EEPROM_WriteVariable+0x1e4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <EEPROM_WriteVariable+0x24>
		WritingPage = EEPROM_ReceivingPage;
 80018fa:	4b71      	ldr	r3, [pc, #452]	; (8001ac0 <EEPROM_WriteVariable+0x1e4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
	if (WritingPage == EEPROM_PAGE_NONE)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <EEPROM_WriteVariable+0x2e>
		return EEPROM_NO_VALID_PAGE;
 8001906:	2304      	movs	r3, #4
 8001908:	e0d3      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>
	uint32_t PageEndAddress = WritingPage + FLASH_PAGE_SIZE;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001910:	61bb      	str	r3, [r7, #24]

	//calculate memory usage of variable
	uint8_t Bytes = 2 + (1 << Size);
 8001912:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001916:	2201      	movs	r2, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3302      	adds	r3, #2
 8001920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (Size == EEPROM_SIZE_DELETED)
 8001924:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <EEPROM_WriteVariable+0x56>
		Bytes = 2;
 800192c:	2302      	movs	r3, #2
 800192e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//check if enough free space or page full
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8001932:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <EEPROM_WriteVariable+0x6e>
 800193a:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	1ad2      	subs	r2, r2, r3
 8001942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001946:	429a      	cmp	r2, r3
 8001948:	d25d      	bcs.n	8001a06 <EEPROM_WriteVariable+0x12a>
		//check if data is too much to store on one page
		uint16_t RequiredMemory = 2;
 800194a:	2302      	movs	r3, #2
 800194c:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 800194e:	2300      	movs	r3, #0
 8001950:	83fb      	strh	r3, [r7, #30]
 8001952:	e023      	b.n	800199c <EEPROM_WriteVariable+0xc0>
			if (i == VariableName)
 8001954:	8bfa      	ldrh	r2, [r7, #30]
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	429a      	cmp	r2, r3
 800195a:	d10b      	bne.n	8001974 <EEPROM_WriteVariable+0x98>
				RequiredMemory += 2 + (1 << Size);
 800195c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001960:	2201      	movs	r2, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	b29a      	uxth	r2, r3
 8001968:	8c3b      	ldrh	r3, [r7, #32]
 800196a:	4413      	add	r3, r2
 800196c:	b29b      	uxth	r3, r3
 800196e:	3302      	adds	r3, #2
 8001970:	843b      	strh	r3, [r7, #32]
 8001972:	e010      	b.n	8001996 <EEPROM_WriteVariable+0xba>
			else if (EEPROM_SizeTable[i] != EEPROM_SIZE_DELETED)
 8001974:	8bfb      	ldrh	r3, [r7, #30]
 8001976:	4a54      	ldr	r2, [pc, #336]	; (8001ac8 <EEPROM_WriteVariable+0x1ec>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <EEPROM_WriteVariable+0xba>
				RequiredMemory += 2 + (1 << EEPROM_SizeTable[i]);
 800197e:	8bfb      	ldrh	r3, [r7, #30]
 8001980:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <EEPROM_WriteVariable+0x1ec>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	461a      	mov	r2, r3
 8001986:	2301      	movs	r3, #1
 8001988:	4093      	lsls	r3, r2
 800198a:	b29a      	uxth	r2, r3
 800198c:	8c3b      	ldrh	r3, [r7, #32]
 800198e:	4413      	add	r3, r2
 8001990:	b29b      	uxth	r3, r3
 8001992:	3302      	adds	r3, #2
 8001994:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001996:	8bfb      	ldrh	r3, [r7, #30]
 8001998:	3301      	adds	r3, #1
 800199a:	83fb      	strh	r3, [r7, #30]
 800199c:	8bfb      	ldrh	r3, [r7, #30]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d9d8      	bls.n	8001954 <EEPROM_WriteVariable+0x78>
		}
		if (RequiredMemory > FLASH_PAGE_SIZE)
 80019a2:	8c3b      	ldrh	r3, [r7, #32]
 80019a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a8:	d901      	bls.n	80019ae <EEPROM_WriteVariable+0xd2>
			return EEPROM_FULL;
 80019aa:	2307      	movs	r3, #7
 80019ac:	e081      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//mark the empty page as receiving
		result = EEPROM_SetPageStatus(EEPROM_ErasedPage, EEPROM_RECEIVING);
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <EEPROM_WriteVariable+0x1f0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f8f4 	bl	8001ba4 <EEPROM_SetPageStatus>
 80019bc:	4603      	mov	r3, r0
 80019be:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <EEPROM_WriteVariable+0xee>
			return result;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	e073      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//change next index to receiving page
		EEPROM_NextIndex = EEPROM_ReceivingPage + 2;
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <EEPROM_WriteVariable+0x1e4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3302      	adds	r3, #2
 80019d0:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 80019d2:	6013      	str	r3, [r2, #0]

		//write the variable to receiving page (by calling this function again)
		result = EEPROM_WriteVariable(VariableName, Value, Size);
 80019d4:	89f9      	ldrh	r1, [r7, #14]
 80019d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019e0:	4608      	mov	r0, r1
 80019e2:	f7ff ff7b 	bl	80018dc <EEPROM_WriteVariable>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <EEPROM_WriteVariable+0x118>
			return result;
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	e05e      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//do page transfer
		result = EEPROM_PageTransfer();
 80019f4:	f000 f86e 	bl	8001ad4 <EEPROM_PageTransfer>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d055      	beq.n	8001aae <EEPROM_WriteVariable+0x1d2>
			return result;
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	e055      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>
	}

	//else (if enough space)
	else {
		//write variable value
		if (Size != EEPROM_SIZE_DELETED) {
 8001a06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00f      	beq.n	8001a2e <EEPROM_WriteVariable+0x152>
			result = HAL_FLASH_Program(Size, EEPROM_NextIndex + 2,
 8001a0e:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1c99      	adds	r1, r3, #2
 8001a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1c:	f002 fb76 	bl	800410c <HAL_FLASH_Program>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
					Value.uInt64);
			if (result != EEPROM_SUCCESS)
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <EEPROM_WriteVariable+0x152>
				return result;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	e041      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>
		}

		//create and write variable header (size and name)
		uint16_t VariableHeader = VariableName + (Size << 14);
 8001a2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	039b      	lsls	r3, r3, #14
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	82bb      	strh	r3, [r7, #20]
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, EEPROM_NextIndex,
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	8aba      	ldrh	r2, [r7, #20]
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f002 fb5f 	bl	800410c <HAL_FLASH_Program>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]
				VariableHeader);
		if (result != EEPROM_SUCCESS)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <EEPROM_WriteVariable+0x180>
			return result;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	e02a      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//update index & size table
		EEPROM_Index[VariableName] =
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
		EEPROM_Index[VariableName] =
 8001a62:	89fa      	ldrh	r2, [r7, #14]
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	3302      	adds	r3, #2
 8001a6a:	b299      	uxth	r1, r3
		EEPROM_Index[VariableName] =
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <EEPROM_WriteVariable+0x1f4>)
 8001a6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		EEPROM_SizeTable[VariableName] = Size;
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	4914      	ldr	r1, [pc, #80]	; (8001ac8 <EEPROM_WriteVariable+0x1ec>)
 8001a76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a7a:	54ca      	strb	r2, [r1, r3]
		if (Size == EEPROM_SIZE_DELETED)
 8001a7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <EEPROM_WriteVariable+0x1b2>
			EEPROM_Index[VariableName] = 0;
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <EEPROM_WriteVariable+0x1f4>)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//update next index
		EEPROM_NextIndex += Bytes;
 8001a8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a9a:	6013      	str	r3, [r2, #0]
		if (EEPROM_NextIndex >= PageEndAddress)
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d804      	bhi.n	8001ab0 <EEPROM_WriteVariable+0x1d4>
			EEPROM_NextIndex = 0;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e000      	b.n	8001ab0 <EEPROM_WriteVariable+0x1d4>
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8001aae:	bf00      	nop
	}

	return EEPROM_SUCCESS;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000138 	.word	0x20000138
 8001ac0:	2000013c 	.word	0x2000013c
 8001ac4:	20000144 	.word	0x20000144
 8001ac8:	20000130 	.word	0x20000130
 8001acc:	20000140 	.word	0x20000140
 8001ad0:	20000134 	.word	0x20000134

08001ad4 <EEPROM_PageTransfer>:
//		- write variable to receiving page
// - erase source page
// - mark receiving page as valid
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
static EEPROM_Result EEPROM_PageTransfer() {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af02      	add	r7, sp, #8
	EEPROM_Result result;
	EEPROM_Value Value;

	//get start & end address of valid page (source) (as offset to EEPROM start)
	uint16_t StartAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS;
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <EEPROM_PageTransfer+0xc0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae4:	81bb      	strh	r3, [r7, #12]
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
			+ FLASH_PAGE_SIZE;
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <EEPROM_PageTransfer+0xc0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
 8001aec:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001af0:	817b      	strh	r3, [r7, #10]

	//copy each variable
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	81fb      	strh	r3, [r7, #14]
 8001af6:	e02a      	b.n	8001b4e <EEPROM_PageTransfer+0x7a>
		//check if is stored on the source page
		if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress) {
 8001af8:	89fb      	ldrh	r3, [r7, #14]
 8001afa:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <EEPROM_PageTransfer+0xc4>)
 8001afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b00:	89ba      	ldrh	r2, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d220      	bcs.n	8001b48 <EEPROM_PageTransfer+0x74>
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <EEPROM_PageTransfer+0xc4>)
 8001b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0e:	897a      	ldrh	r2, [r7, #10]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d919      	bls.n	8001b48 <EEPROM_PageTransfer+0x74>
			//read variable value (if possible)
			if (EEPROM_ReadVariable(i, &Value) == EEPROM_SUCCESS) {
 8001b14:	463a      	mov	r2, r7
 8001b16:	89fb      	ldrh	r3, [r7, #14]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fe84 	bl	8001828 <EEPROM_ReadVariable>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d110      	bne.n	8001b48 <EEPROM_PageTransfer+0x74>
				//write variable to receiving page
				result = EEPROM_WriteVariable(i, Value, EEPROM_SizeTable[i]);
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <EEPROM_PageTransfer+0xc8>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	89f9      	ldrh	r1, [r7, #14]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b34:	4608      	mov	r0, r1
 8001b36:	f7ff fed1 	bl	80018dc <EEPROM_WriteVariable>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	727b      	strb	r3, [r7, #9]
				if (result != EEPROM_SUCCESS)
 8001b3e:	7a7b      	ldrb	r3, [r7, #9]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <EEPROM_PageTransfer+0x74>
					return result;
 8001b44:	7a7b      	ldrb	r3, [r7, #9]
 8001b46:	e021      	b.n	8001b8c <EEPROM_PageTransfer+0xb8>
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	81fb      	strh	r3, [r7, #14]
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d9d1      	bls.n	8001af8 <EEPROM_PageTransfer+0x24>
			}
		}
	}

	//erase source page
	result = EEPROM_SetPageStatus(EEPROM_ValidPage, EEPROM_ERASED);
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <EEPROM_PageTransfer+0xc0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f821 	bl	8001ba4 <EEPROM_SetPageStatus>
 8001b62:	4603      	mov	r3, r0
 8001b64:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b66:	7a7b      	ldrb	r3, [r7, #9]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <EEPROM_PageTransfer+0x9c>
		return result;
 8001b6c:	7a7b      	ldrb	r3, [r7, #9]
 8001b6e:	e00d      	b.n	8001b8c <EEPROM_PageTransfer+0xb8>

	//mark receiving page as valid
	result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <EEPROM_PageTransfer+0xcc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f814 	bl	8001ba4 <EEPROM_SetPageStatus>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <EEPROM_PageTransfer+0xb6>
		return result;
 8001b86:	7a7b      	ldrb	r3, [r7, #9]
 8001b88:	e000      	b.n	8001b8c <EEPROM_PageTransfer+0xb8>

	return EEPROM_SUCCESS;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000138 	.word	0x20000138
 8001b98:	20000134 	.word	0x20000134
 8001b9c:	20000130 	.word	0x20000130
 8001ba0:	2000013c 	.word	0x2000013c

08001ba4 <EEPROM_SetPageStatus>:
//
// Page:		page to change the status (as EEPROM_Page)
// PageStatus:	page status to set for page (as EEPROM_PageStatus)
// return:		EEPROM_SUCCESS, EEPROM_ERROR, EEPROM_BUSY or EEPROM_TIMEOUT
static EEPROM_Result EEPROM_SetPageStatus(EEPROM_Page Page,
		EEPROM_PageStatus PageStatus) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
	EEPROM_Result result;

	//check if erase operation required
	if (PageStatus == EEPROM_ERASED) {
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d13f      	bne.n	8001c3a <EEPROM_SetPageStatus+0x96>
		//remove every variable from index, that is stored on erase page
		uint16_t StartAddress = Page - EEPROM_START_ADDRESS;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc2:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t EndAddress = Page - EEPROM_START_ADDRESS + FLASH_PAGE_SIZE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001bcc:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bd2:	e015      	b.n	8001c00 <EEPROM_SetPageStatus+0x5c>
			if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress)
 8001bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <EEPROM_SetPageStatus+0x128>)
 8001bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d20b      	bcs.n	8001bfa <EEPROM_SetPageStatus+0x56>
 8001be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be4:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <EEPROM_SetPageStatus+0x128>)
 8001be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bea:	8c3a      	ldrh	r2, [r7, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d904      	bls.n	8001bfa <EEPROM_SetPageStatus+0x56>
				EEPROM_Index[i] = 0;
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf2:	4a36      	ldr	r2, [pc, #216]	; (8001ccc <EEPROM_SetPageStatus+0x128>)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d9e6      	bls.n	8001bd4 <EEPROM_SetPageStatus+0x30>
		}

		//setup erase definitions
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
		EraseDefinitions.PageAddress = Page;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
		EraseDefinitions.NbPages = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
		uint32_t PageError;

		//erase page
		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 8001c16:	f107 020c 	add.w	r2, r7, #12
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fbbb 	bl	800439c <HAL_FLASHEx_Erase>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (result != EEPROM_SUCCESS)
 8001c2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c38:	e043      	b.n	8001cc2 <EEPROM_SetPageStatus+0x11e>
	}

	//else write status to flash
	else {
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page,
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	2001      	movs	r0, #1
 8001c44:	f002 fa62 	bl	800410c <HAL_FLASH_Program>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				PageStatus);
		if (result != EEPROM_SUCCESS)
 8001c4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c5a:	e032      	b.n	8001cc2 <EEPROM_SetPageStatus+0x11e>
	}

	//update global page status variables (remove page from old status and attach to new status)
	if (EEPROM_ValidPage == Page)
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <EEPROM_SetPageStatus+0x12c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d103      	bne.n	8001c6e <EEPROM_SetPageStatus+0xca>
		EEPROM_ValidPage = EEPROM_PAGE_NONE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <EEPROM_SetPageStatus+0x12c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e010      	b.n	8001c90 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ReceivingPage == Page)
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <EEPROM_SetPageStatus+0x130>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d103      	bne.n	8001c80 <EEPROM_SetPageStatus+0xdc>
		EEPROM_ReceivingPage = EEPROM_PAGE_NONE;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <EEPROM_SetPageStatus+0x130>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e007      	b.n	8001c90 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ErasedPage == Page)
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <EEPROM_SetPageStatus+0x134>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d102      	bne.n	8001c90 <EEPROM_SetPageStatus+0xec>
		EEPROM_ErasedPage = EEPROM_PAGE_NONE;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <EEPROM_SetPageStatus+0x134>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

	if (PageStatus == EEPROM_VALID)
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <EEPROM_SetPageStatus+0xfa>
		EEPROM_ValidPage = Page;
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <EEPROM_SetPageStatus+0x12c>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e010      	b.n	8001cc0 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_RECEIVING)
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d103      	bne.n	8001cb0 <EEPROM_SetPageStatus+0x10c>
		EEPROM_ReceivingPage = Page;
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <EEPROM_SetPageStatus+0x130>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e007      	b.n	8001cc0 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_ERASED)
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d102      	bne.n	8001cc0 <EEPROM_SetPageStatus+0x11c>
		EEPROM_ErasedPage = Page;
 8001cba:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <EEPROM_SetPageStatus+0x134>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6013      	str	r3, [r2, #0]

	return EEPROM_SUCCESS;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000134 	.word	0x20000134
 8001cd0:	20000138 	.word	0x20000138
 8001cd4:	2000013c 	.word	0x2000013c
 8001cd8:	20000140 	.word	0x20000140

08001cdc <EEPROM_PageToIndex>:
// - set next free flash address
// - return on loop end
//
// Page:	page to search for variables
// return:	EEPROM_SUCCESS
static EEPROM_Result EEPROM_PageToIndex(EEPROM_Page Page) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	uint8_t SizeCode;					//size of current variable as Size code
	uint8_t Size;							//size of current variable in bytes
	uint16_t Name;									//name of current variable

	//ignore call when Page is PAGE_NONE
	if (Page == EEPROM_PAGE_NONE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <EEPROM_PageToIndex+0x12>
		return EEPROM_SUCCESS;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e070      	b.n	8001dd0 <EEPROM_PageToIndex+0xf4>

	//get page addresses
	uint32_t Address = Page + 2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
	uint32_t PageEndAddress = Page + FLASH_PAGE_SIZE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfa:	613b      	str	r3, [r7, #16]

	//loop through page starting after page header
	while (Address < PageEndAddress) {
 8001cfc:	e059      	b.n	8001db2 <EEPROM_PageToIndex+0xd6>
		//read potential variable header
		VariableHeader = *((__IO uint16_t*) Address);
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	81fb      	strh	r3, [r7, #14]

		//if no header written (causes: end of data reached or reset while writing)
		if (VariableHeader == 0xFFFF) {
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d121      	bne.n	8001d52 <EEPROM_PageToIndex+0x76>
			//loop through next 4 halfword and check if there is anything written
			Size = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001d12:	2302      	movs	r3, #2
 8001d14:	75fb      	strb	r3, [r7, #23]
 8001d16:	e013      	b.n	8001d40 <EEPROM_PageToIndex+0x64>
				if (Address + i >= PageEndAddress)
 8001d18:	7dfa      	ldrb	r2, [r7, #23]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d911      	bls.n	8001d48 <EEPROM_PageToIndex+0x6c>
					break;
				//while looping count the size of written data (resulting from reset while writing)
				if (*((__IO uint16_t*) (Address + i)) != 0xFFFF)
 8001d24:	7dfa      	ldrb	r2, [r7, #23]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d001      	beq.n	8001d3a <EEPROM_PageToIndex+0x5e>
					Size = i;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	75fb      	strb	r3, [r7, #23]
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d9e8      	bls.n	8001d18 <EEPROM_PageToIndex+0x3c>
 8001d46:	e000      	b.n	8001d4a <EEPROM_PageToIndex+0x6e>
					break;
 8001d48:	bf00      	nop
			}
			//if no data found, last variable of page was reached (end loop)
			if (Size == 0)
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <EEPROM_PageToIndex+0xcc>
				break;
 8001d50:	e033      	b.n	8001dba <EEPROM_PageToIndex+0xde>
		}

		//else (if header written, proper variable value is following)
		else {
			//get size code
			SizeCode = VariableHeader >> 14;
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	0b9b      	lsrs	r3, r3, #14
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	737b      	strb	r3, [r7, #13]

			//check for valid name (VARIABLE_COUNT might have been reduced between builds, but old variables are still in flash)
			Name = VariableHeader & 0b0011111111111111;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d60:	817b      	strh	r3, [r7, #10]
			if (Name < EEPROM_VARIABLE_COUNT) {
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d815      	bhi.n	8001d94 <EEPROM_PageToIndex+0xb8>
				//if everything valid, update the index and the size table
				EEPROM_Index[Name] = Address + 2 - EEPROM_START_ADDRESS;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	897a      	ldrh	r2, [r7, #10]
 8001d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d72:	3302      	adds	r3, #2
 8001d74:	b299      	uxth	r1, r3
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <EEPROM_PageToIndex+0x100>)
 8001d78:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				EEPROM_SizeTable[Name] = SizeCode;
 8001d7c:	897b      	ldrh	r3, [r7, #10]
 8001d7e:	4918      	ldr	r1, [pc, #96]	; (8001de0 <EEPROM_PageToIndex+0x104>)
 8001d80:	7b7a      	ldrb	r2, [r7, #13]
 8001d82:	54ca      	strb	r2, [r1, r3]
				if (SizeCode == EEPROM_SIZE_DELETED)
 8001d84:	7b7b      	ldrb	r3, [r7, #13]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <EEPROM_PageToIndex+0xb8>
					EEPROM_Index[Name] = 0;
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <EEPROM_PageToIndex+0x100>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			//calculate size in bytes from size code
			Size = 1 << SizeCode;
 8001d94:	7b7b      	ldrb	r3, [r7, #13]
 8001d96:	2201      	movs	r2, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	77fb      	strb	r3, [r7, #31]
			if (SizeCode == EEPROM_SIZE_DELETED)
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <EEPROM_PageToIndex+0xcc>
				Size = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
		}

		//go to next address on page
		Address = Address + 2 + Size;
 8001da8:	7ffa      	ldrb	r2, [r7, #31]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4413      	add	r3, r2
 8001dae:	3302      	adds	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
	while (Address < PageEndAddress) {
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3a1      	bcc.n	8001cfe <EEPROM_PageToIndex+0x22>
	}

	//set next free flash address
	EEPROM_NextIndex = Address;
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <EEPROM_PageToIndex+0x108>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6013      	str	r3, [r2, #0]
	if (Address >= PageEndAddress)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <EEPROM_PageToIndex+0xf2>
		EEPROM_NextIndex = 0;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <EEPROM_PageToIndex+0x108>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

	//return on loop end
	return EEPROM_SUCCESS;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3724      	adds	r7, #36	; 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000134 	.word	0x20000134
 8001de0:	20000130 	.word	0x20000130
 8001de4:	20000144 	.word	0x20000144

08001de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4619      	mov	r1, r3
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_GPIO_Init+0x84>)
 8001e5a:	f002 fb47 	bl	80044ec <HAL_GPIO_Init>

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010800 	.word	0x40010800

08001e70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <MX_I2C1_Init+0x54>)
 8001e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e7c:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_I2C1_Init+0x58>)
 8001e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001eae:	f002 fcb9 	bl	8004824 <HAL_I2C_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb8:	f000 fb67 	bl	800258a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000019c 	.word	0x2000019c
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	00061a80 	.word	0x00061a80

08001ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_I2C_MspInit+0x90>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d132      	bne.n	8001f52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0a:	2312      	movs	r3, #18
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4812      	ldr	r0, [pc, #72]	; (8001f64 <HAL_I2C_MspInit+0x98>)
 8001f1a:	f002 fae7 	bl	80044ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_I2C_MspInit+0x9c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_I2C_MspInit+0x9c>)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010c00 	.word	0x40010c00
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	00000000 	.word	0x00000000

08001f70 <flashMemoryInit>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint16_t address);
void writeFlash(uint32_t address, double data);

void flashMemoryInit() {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af02      	add	r7, sp, #8
	//initialize EEPROM
	EEPROM_Init();
 8001f76:	f7ff fb8f 	bl	8001698 <EEPROM_Init>

	//set default value if variable not assigned
	EEPROM_Value value;
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	81fb      	strh	r3, [r7, #14]
 8001f7e:	e02b      	b.n	8001fd8 <flashMemoryInit+0x68>
		if (EEPROM_ReadVariable(i, &value) == EEPROM_NOT_ASSIGNED) {
 8001f80:	463a      	mov	r2, r7
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fc4e 	bl	8001828 <EEPROM_ReadVariable>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d11c      	bne.n	8001fcc <flashMemoryInit+0x5c>
			isCorrectionAssign = false;
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <flashMemoryInit+0x80>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

			switch (i) {
 8001f98:	89fb      	ldrh	r3, [r7, #14]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <flashMemoryInit+0x34>
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d00a      	beq.n	8001fb8 <flashMemoryInit+0x48>
 8001fa2:	e016      	b.n	8001fd2 <flashMemoryInit+0x62>
			case 0:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001fa4:	a310      	add	r3, pc, #64	; (adr r3, 8001fe8 <flashMemoryInit+0x78>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	89f9      	ldrh	r1, [r7, #14]
 8001fac:	2003      	movs	r0, #3
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	f7ff fc93 	bl	80018dc <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fb6:	e00c      	b.n	8001fd2 <flashMemoryInit+0x62>
			case 1:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001fb8:	a30b      	add	r3, pc, #44	; (adr r3, 8001fe8 <flashMemoryInit+0x78>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	89f9      	ldrh	r1, [r7, #14]
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	9000      	str	r0, [sp, #0]
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	f7ff fc89 	bl	80018dc <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fca:	e002      	b.n	8001fd2 <flashMemoryInit+0x62>
			}
		} else {
			isCorrectionAssign = true;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <flashMemoryInit+0x80>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	81fb      	strh	r3, [r7, #14]
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d9d0      	bls.n	8001f80 <flashMemoryInit+0x10>
		}
	}
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	88e368f1 	.word	0x88e368f1
 8001fec:	3ee4f8b5 	.word	0x3ee4f8b5
 8001ff0:	20000148 	.word	0x20000148

08001ff4 <saveGyroData>:

void saveGyroData(double x, double y) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ffe:	e9c7 2300 	strd	r2, r3, [r7]
	isCorrectionAssign = true;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <saveGyroData+0x3c>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
	writeFlash(xAddress, x);
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <saveGyroData+0x40>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002012:	4608      	mov	r0, r1
 8002014:	f000 f82e 	bl	8002074 <writeFlash>
	writeFlash(yAddress, y);
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <saveGyroData+0x44>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002022:	4608      	mov	r0, r1
 8002024:	f000 f826 	bl	8002074 <writeFlash>
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000148 	.word	0x20000148
 8002034:	2000014a 	.word	0x2000014a
 8002038:	20000000 	.word	0x20000000

0800203c <readXFromFlash>:

double readXFromFlash() {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	return readFlash(xAddress);
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <readXFromFlash+0x18>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f82c 	bl	80020a2 <readFlash>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
}
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000014a 	.word	0x2000014a

08002058 <readYFromFlash>:

double readYFromFlash() {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	return readFlash(yAddress);
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <readYFromFlash+0x18>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f81e 	bl	80020a2 <readFlash>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
}
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000000 	.word	0x20000000

08002074 <writeFlash>:

void writeFlash(uint32_t address, double data) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	e9c7 2300 	strd	r2, r3, [r7]
	EEPROM_Value value;
	value.Double = data;
 8002080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002084:	e9c7 2304 	strd	r2, r3, [r7, #16]
	EEPROM_WriteVariable(address, value, EEPROM_SIZE64);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	b299      	uxth	r1, r3
 800208c:	2303      	movs	r3, #3
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002094:	4608      	mov	r0, r1
 8002096:	f7ff fc21 	bl	80018dc <EEPROM_WriteVariable>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <readFlash>:

double readFlash(uint16_t address) {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	80fb      	strh	r3, [r7, #6]
	EEPROM_Value value;
	EEPROM_ReadVariable(address, &value);
 80020ac:	f107 0208 	add.w	r2, r7, #8
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fbb7 	bl	8001828 <EEPROM_ReadVariable>
	return value.Double;
 80020ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <main>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int main(void) {
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b08f      	sub	sp, #60	; 0x3c
 80020cc:	af00      	add	r7, sp, #0

	HAL_Init();
 80020ce:	f000 fed3 	bl	8002e78 <HAL_Init>

	SystemClock_Config();
 80020d2:	f000 f8f5 	bl	80022c0 <SystemClock_Config>

	MX_GPIO_Init();
 80020d6:	f7ff fe87 	bl	8001de8 <MX_GPIO_Init>
	MX_CAN1_Init();
 80020da:	f7ff f937 	bl	800134c <MX_CAN1_Init>
	MX_CAN2_Init();
 80020de:	f7ff f98d 	bl	80013fc <MX_CAN2_Init>
	MX_I2C1_Init();
 80020e2:	f7ff fec5 	bl	8001e70 <MX_I2C1_Init>
	flashMemoryInit();
 80020e6:	f7ff ff43 	bl	8001f70 <flashMemoryInit>

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80020ea:	486d      	ldr	r0, [pc, #436]	; (80022a0 <main+0x1d8>)
 80020ec:	f001 f926 	bl	800333c <HAL_CAN_Start>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <main+0x32>
		Error_Handler();
 80020f6:	f000 fa48 	bl	800258a <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 80020fa:	f648 4102 	movw	r1, #35842	; 0x8c02
 80020fe:	4868      	ldr	r0, [pc, #416]	; (80022a0 <main+0x1d8>)
 8002100:	f001 fb7f 	bl	8003802 <HAL_CAN_ActivateNotification>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <main+0x46>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 800210a:	f000 fa3e 	bl	800258a <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 800210e:	4865      	ldr	r0, [pc, #404]	; (80022a4 <main+0x1dc>)
 8002110:	f001 f914 	bl	800333c <HAL_CAN_Start>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <main+0x56>
		Error_Handler();
 800211a:	f000 fa36 	bl	800258a <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 800211e:	f648 4110 	movw	r1, #35856	; 0x8c10
 8002122:	4860      	ldr	r0, [pc, #384]	; (80022a4 <main+0x1dc>)
 8002124:	f001 fb6d 	bl	8003802 <HAL_CAN_ActivateNotification>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <main+0x6a>
			CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 800212e:	f000 fa2c 	bl	800258a <Error_Handler>
	}

	//MPU initialize
	int initCountFailure = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
	while (MPU6050_Init(&hi2c1) == 1) {
 8002136:	e005      	b.n	8002144 <main+0x7c>
		initCountFailure++;
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	3301      	adds	r3, #1
 800213c:	637b      	str	r3, [r7, #52]	; 0x34

		if (initCountFailure == 100) {
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d006      	beq.n	8002152 <main+0x8a>
	while (MPU6050_Init(&hi2c1) == 1) {
 8002144:	4858      	ldr	r0, [pc, #352]	; (80022a8 <main+0x1e0>)
 8002146:	f000 fa25 	bl	8002594 <MPU6050_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d0f3      	beq.n	8002138 <main+0x70>
 8002150:	e000      	b.n	8002154 <main+0x8c>
			break;
 8002152:	bf00      	nop
		}
	}

	//loop
	while (1) {
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8002154:	4955      	ldr	r1, [pc, #340]	; (80022ac <main+0x1e4>)
 8002156:	4854      	ldr	r0, [pc, #336]	; (80022a8 <main+0x1e0>)
 8002158:	f000 fa76 	bl	8002648 <MPU6050_Read_All>

		double realX = MPU6050.KalmanAngleX;
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <main+0x1e4>)
 800215e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002162:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double realY = MPU6050.KalmanAngleY;
 8002166:	4b51      	ldr	r3, [pc, #324]	; (80022ac <main+0x1e4>)
 8002168:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800216c:	e9c7 2304 	strd	r2, r3, [r7, #16]

		double storedX = readXFromFlash();
 8002170:	f7ff ff64 	bl	800203c <readXFromFlash>
 8002174:	e9c7 0102 	strd	r0, r1, [r7, #8]
		double storedY = readYFromFlash();
 8002178:	f7ff ff6e 	bl	8002058 <readYFromFlash>
 800217c:	e9c7 0100 	strd	r0, r1, [r7]

		double pitch = storedY - realY;
 8002180:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002184:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002188:	f7fe f852 	bl	8000230 <__aeabi_dsub>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double roll = storedX - realX;
 8002194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219c:	f7fe f848 	bl	8000230 <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (pitch > 60) {
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <main+0x1e8>)
 80021ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021b2:	f7fe fc85 	bl	8000ac0 <__aeabi_dcmpgt>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <main+0xfe>
			pitch = 60;
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <main+0x1e8>)
 80021c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (pitch < -60) {
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b3a      	ldr	r3, [pc, #232]	; (80022b4 <main+0x1ec>)
 80021cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021d0:	f7fe fc58 	bl	8000a84 <__aeabi_dcmplt>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <main+0x11c>
			pitch = -60;
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <main+0x1ec>)
 80021e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (roll > 60) {
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <main+0x1e8>)
 80021ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021ee:	f7fe fc67 	bl	8000ac0 <__aeabi_dcmpgt>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <main+0x13a>
			roll = 60;
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <main+0x1e8>)
 80021fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}
		if (roll < -60) {
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <main+0x1ec>)
 8002208:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800220c:	f7fe fc3a 	bl	8000a84 <__aeabi_dcmplt>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <main+0x158>
			roll = -60;
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <main+0x1ec>)
 800221c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

		//20 & -20 degree max
		pitch += 0x78;
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <main+0x1f0>)
 8002226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800222a:	f7fe f803 	bl	8000234 <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		//29 & -29 degree max
		roll += 0x78;
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b1f      	ldr	r3, [pc, #124]	; (80022b8 <main+0x1f0>)
 800223c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002240:	f7fd fff8 	bl	8000234 <__adddf3>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (isCorrectionAssign) {
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <main+0x1f4>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <main+0x1a8>
			sendGyroData(pitch, roll);
 8002254:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002258:	f7fe fc52 	bl	8000b00 <__aeabi_d2iz>
 800225c:	4604      	mov	r4, r0
 800225e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002262:	f7fe fc4d 	bl	8000b00 <__aeabi_d2iz>
 8002266:	4603      	mov	r3, r0
 8002268:	4619      	mov	r1, r3
 800226a:	4620      	mov	r0, r4
 800226c:	f000 f958 	bl	8002520 <sendGyroData>
		}

		if (BUTTON_STATE(CALIBRATE_MPU_BUTTON) == 1 || !isCorrectionAssign) {
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff f847 	bl	8001304 <BUTTON_STATE>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d006      	beq.n	800228a <main+0x1c2>
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <main+0x1f4>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f083 0301 	eor.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <main+0x1ce>
			saveGyroData(realX, realY);
 800228a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800228e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002292:	f7ff feaf 	bl	8001ff4 <saveGyroData>
		}

		HAL_Delay(100);
 8002296:	2064      	movs	r0, #100	; 0x64
 8002298:	f000 fe50 	bl	8002f3c <HAL_Delay>
	while (1) {
 800229c:	e75a      	b.n	8002154 <main+0x8c>
 800229e:	bf00      	nop
 80022a0:	20000174 	.word	0x20000174
 80022a4:	2000014c 	.word	0x2000014c
 80022a8:	2000019c 	.word	0x2000019c
 80022ac:	200001f0 	.word	0x200001f0
 80022b0:	404e0000 	.word	0x404e0000
 80022b4:	c04e0000 	.word	0xc04e0000
 80022b8:	405e0000 	.word	0x405e0000
 80022bc:	20000148 	.word	0x20000148

080022c0 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b094      	sub	sp, #80	; 0x50
 80022c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	2238      	movs	r2, #56	; 0x38
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f005 fc9e 	bl	8007c10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80022ec:	2304      	movs	r3, #4
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f0:	2301      	movs	r3, #1
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80022f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022fa:	2302      	movs	r3, #2
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002308:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800230a:	2302      	movs	r3, #2
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800230e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002312:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002314:	2340      	movs	r3, #64	; 0x40
 8002316:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002318:	f107 0318 	add.w	r3, r7, #24
 800231c:	4618      	mov	r0, r3
 800231e:	f004 ff55 	bl	80071cc <HAL_RCC_OscConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0x6c>
		Error_Handler();
 8002328:	f000 f92f 	bl	800258a <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800232c:	230f      	movs	r3, #15
 800232e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002330:	2302      	movs	r3, #2
 8002332:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f005 fa57 	bl	80077f8 <HAL_RCC_ClockConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0x94>
		Error_Handler();
 8002350:	f000 f91b 	bl	800258a <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <SystemClock_Config+0xa4>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3750      	adds	r7, #80	; 0x50
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	42420070 	.word	0x42420070

08002368 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo0 can1 callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan1, RxDataCan1)
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002372:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002374:	2100      	movs	r1, #0
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f001 f932 	bl	80035e0 <HAL_CAN_GetRxMessage>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d113      	bne.n	80023aa <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			== HAL_OK) {
		if (RxHeaderCan1.StdId == 0x350 && RxDataCan1[0] == 0xc7) {
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 800238a:	d106      	bne.n	800239a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2bc7      	cmp	r3, #199	; 0xc7
 8002392:	d102      	bne.n	800239a <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			RxDataCan1[0] = 0xc6;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002396:	22c6      	movs	r2, #198	; 0xc6
 8002398:	701a      	strb	r2, [r3, #0]
		}

		CAN2_Transmit_manual(RxHeaderCan1.StdId, RxHeaderCan1.DLC, RxDataCan1);
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80023a0:	6911      	ldr	r1, [r2, #16]
 80023a2:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f871 	bl	800248c <CAN2_Transmit_manual>
	}
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200002d0 	.word	0x200002d0
 80023b8:	2000024c 	.word	0x2000024c

080023bc <HAL_CAN_RxFifo1MsgPendingCallback>:

// can fifo1 for can2 callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeaderCan2, RxDataCan2)
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80023c6:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f001 f908 	bl	80035e0 <HAL_CAN_GetRxMessage>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
			== HAL_OK) {
		CAN1_Transmit_manual(RxHeaderCan2.StdId, RxHeaderCan2.DLC, RxDataCan2);
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a06      	ldr	r2, [pc, #24]	; (80023f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023dc:	6911      	ldr	r1, [r2, #16]
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f809 	bl	80023f8 <CAN1_Transmit_manual>
	}
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200002c0 	.word	0x200002c0
 80023f4:	2000028c 	.word	0x2000028c

080023f8 <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 8002404:	bf00      	nop
 8002406:	481d      	ldr	r0, [pc, #116]	; (800247c <CAN1_Transmit_manual+0x84>)
 8002408:	f001 f8b6 	bl	8003578 <HAL_CAN_GetTxMailboxesFreeLevel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f9      	beq.n	8002406 <CAN1_Transmit_manual+0xe>

	}

	TxHeaderCan1.StdId = ID_CAN;
 8002412:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <CAN1_Transmit_manual+0x88>)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6013      	str	r3, [r2, #0]
	TxHeaderCan1.DLC = DLC_CAN;
 8002418:	4a19      	ldr	r2, [pc, #100]	; (8002480 <CAN1_Transmit_manual+0x88>)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	6113      	str	r3, [r2, #16]
	TxDataCan1[0] = DATA_CAN[0];
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 8002424:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = DATA_CAN[1];
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	785a      	ldrb	r2, [r3, #1]
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 800242c:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = DATA_CAN[2];
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	789a      	ldrb	r2, [r3, #2]
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 8002434:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = DATA_CAN[3];
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	78da      	ldrb	r2, [r3, #3]
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 800243c:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = DATA_CAN[4];
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	791a      	ldrb	r2, [r3, #4]
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 8002444:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = DATA_CAN[5];
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	795a      	ldrb	r2, [r3, #5]
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 800244c:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = DATA_CAN[6];
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	799a      	ldrb	r2, [r3, #6]
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 8002454:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = DATA_CAN[7];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	79da      	ldrb	r2, [r3, #7]
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 800245c:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeaderCan1, TxDataCan1, &TxMailboxCan1)
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <CAN1_Transmit_manual+0x90>)
 8002460:	4a08      	ldr	r2, [pc, #32]	; (8002484 <CAN1_Transmit_manual+0x8c>)
 8002462:	4907      	ldr	r1, [pc, #28]	; (8002480 <CAN1_Transmit_manual+0x88>)
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <CAN1_Transmit_manual+0x84>)
 8002466:	f000 ffad 	bl	80033c4 <HAL_CAN_AddTxMessage>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <CAN1_Transmit_manual+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002470:	f000 f88b 	bl	800258a <Error_Handler>
	}
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000174 	.word	0x20000174
 8002480:	2000026c 	.word	0x2000026c
 8002484:	200002c8 	.word	0x200002c8
 8002488:	20000248 	.word	0x20000248

0800248c <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN) {
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) == 0) {
 8002498:	bf00      	nop
 800249a:	481d      	ldr	r0, [pc, #116]	; (8002510 <CAN2_Transmit_manual+0x84>)
 800249c:	f001 f86c 	bl	8003578 <HAL_CAN_GetTxMailboxesFreeLevel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f9      	beq.n	800249a <CAN2_Transmit_manual+0xe>

	}

	TxHeaderCan2.StdId = ID_CAN;
 80024a6:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <CAN2_Transmit_manual+0x88>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6013      	str	r3, [r2, #0]
	TxHeaderCan2.DLC = DLC_CAN;
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <CAN2_Transmit_manual+0x88>)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	6113      	str	r3, [r2, #16]
	TxDataCan2[0] = DATA_CAN[0];
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	781a      	ldrb	r2, [r3, #0]
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024b8:	701a      	strb	r2, [r3, #0]
	TxDataCan2[1] = DATA_CAN[1];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	785a      	ldrb	r2, [r3, #1]
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024c0:	705a      	strb	r2, [r3, #1]
	TxDataCan2[2] = DATA_CAN[2];
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	789a      	ldrb	r2, [r3, #2]
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024c8:	709a      	strb	r2, [r3, #2]
	TxDataCan2[3] = DATA_CAN[3];
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	78da      	ldrb	r2, [r3, #3]
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024d0:	70da      	strb	r2, [r3, #3]
	TxDataCan2[4] = DATA_CAN[4];
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791a      	ldrb	r2, [r3, #4]
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024d8:	711a      	strb	r2, [r3, #4]
	TxDataCan2[5] = DATA_CAN[5];
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	795a      	ldrb	r2, [r3, #5]
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024e0:	715a      	strb	r2, [r3, #5]
	TxDataCan2[6] = DATA_CAN[6];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	799a      	ldrb	r2, [r3, #6]
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024e8:	719a      	strb	r2, [r3, #6]
	TxDataCan2[7] = DATA_CAN[7];
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	79da      	ldrb	r2, [r3, #7]
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024f0:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeaderCan2, TxDataCan2, &TxMailboxCan2)
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <CAN2_Transmit_manual+0x90>)
 80024f4:	4a08      	ldr	r2, [pc, #32]	; (8002518 <CAN2_Transmit_manual+0x8c>)
 80024f6:	4907      	ldr	r1, [pc, #28]	; (8002514 <CAN2_Transmit_manual+0x88>)
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <CAN2_Transmit_manual+0x84>)
 80024fa:	f000 ff63 	bl	80033c4 <HAL_CAN_AddTxMessage>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <CAN2_Transmit_manual+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002504:	f000 f841 	bl	800258a <Error_Handler>
	}
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	2000014c 	.word	0x2000014c
 8002514:	200002a8 	.word	0x200002a8
 8002518:	20000284 	.word	0x20000284
 800251c:	20000268 	.word	0x20000268

08002520 <sendGyroData>:

void sendGyroData(int x, int y) {
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	TxDataCan1[0] = y;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <sendGyroData+0x48>)
 8002530:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = x;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <sendGyroData+0x48>)
 8002538:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = 0x00;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <sendGyroData+0x48>)
 800253c:	2200      	movs	r2, #0
 800253e:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = 0x00;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <sendGyroData+0x48>)
 8002542:	2200      	movs	r2, #0
 8002544:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = 0x00;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <sendGyroData+0x48>)
 8002548:	2200      	movs	r2, #0
 800254a:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = 0x00;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <sendGyroData+0x48>)
 800254e:	2200      	movs	r2, #0
 8002550:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = 0x00;
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <sendGyroData+0x48>)
 8002554:	2200      	movs	r2, #0
 8002556:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = 0x00;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <sendGyroData+0x48>)
 800255a:	2200      	movs	r2, #0
 800255c:	71da      	strb	r2, [r3, #7]

//	CAN2_Transmit_manual(0x685, 8, TxDataCan1);
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	200002c8 	.word	0x200002c8

0800256c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_CAN_GetError(hcan);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f001 fb7a 	bl	8003c6e <HAL_CAN_GetError>
 800257a:	60f8      	str	r0, [r7, #12]
	HAL_CAN_ResetError(hcan);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f001 fb81 	bl	8003c84 <HAL_CAN_ResetError>
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <Error_Handler>:

void Error_Handler(void) {
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800258e:	b672      	cpsid	i
}
 8002590:	bf00      	nop
	__disable_irq();

	while (1) {
 8002592:	e7fe      	b.n	8002592 <Error_Handler+0x8>

08002594 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af04      	add	r7, sp, #16
 800259a:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 800259c:	2364      	movs	r3, #100	; 0x64
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	2301      	movs	r3, #1
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	f107 030f 	add.w	r3, r7, #15
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	2275      	movs	r2, #117	; 0x75
 80025ae:	21d0      	movs	r1, #208	; 0xd0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f002 fb75 	bl	8004ca0 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b68      	cmp	r3, #104	; 0x68
 80025ba:	d13d      	bne.n	8002638 <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 80025c0:	2364      	movs	r3, #100	; 0x64
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	2301      	movs	r3, #1
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	f107 030e 	add.w	r3, r7, #14
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2301      	movs	r3, #1
 80025d0:	226b      	movs	r2, #107	; 0x6b
 80025d2:	21d0      	movs	r1, #208	; 0xd0
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f002 fa69 	bl	8004aac <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80025da:	2307      	movs	r3, #7
 80025dc:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 80025de:	2364      	movs	r3, #100	; 0x64
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	2301      	movs	r3, #1
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	f107 030e 	add.w	r3, r7, #14
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	2219      	movs	r2, #25
 80025f0:	21d0      	movs	r1, #208	; 0xd0
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f002 fa5a 	bl	8004aac <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 80025fc:	2364      	movs	r3, #100	; 0x64
 80025fe:	9302      	str	r3, [sp, #8]
 8002600:	2301      	movs	r3, #1
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	f107 030e 	add.w	r3, r7, #14
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2301      	movs	r3, #1
 800260c:	221c      	movs	r2, #28
 800260e:	21d0      	movs	r1, #208	; 0xd0
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f002 fa4b 	bl	8004aac <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 800261a:	2364      	movs	r3, #100	; 0x64
 800261c:	9302      	str	r3, [sp, #8]
 800261e:	2301      	movs	r3, #1
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	f107 030e 	add.w	r3, r7, #14
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2301      	movs	r3, #1
 800262a:	221b      	movs	r2, #27
 800262c:	21d0      	movs	r1, #208	; 0xd0
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f002 fa3c 	bl	8004aac <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <MPU6050_Init+0xa6>
	}
	return 1;
 8002638:	2301      	movs	r3, #1
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	0000      	movs	r0, r0
 8002644:	0000      	movs	r0, r0
	...

08002648 <MPU6050_Read_All>:
	temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
			+ (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800264c:	b094      	sub	sp, #80	; 0x50
 800264e:	af04      	add	r7, sp, #16
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14,
 8002654:	2364      	movs	r3, #100	; 0x64
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	230e      	movs	r3, #14
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2301      	movs	r3, #1
 8002664:	223b      	movs	r2, #59	; 0x3b
 8002666:	21d0      	movs	r1, #208	; 0xd0
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f002 fb19 	bl	8004ca0 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800266e:	7a3b      	ldrb	r3, [r7, #8]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b21a      	sxth	r2, r3
 8002674:	7a7b      	ldrb	r3, [r7, #9]
 8002676:	b21b      	sxth	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	b21a      	sxth	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002680:	7abb      	ldrb	r3, [r7, #10]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	b21a      	sxth	r2, r3
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	b21b      	sxth	r3, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	b21a      	sxth	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002692:	7b3b      	ldrb	r3, [r7, #12]
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	b21a      	sxth	r2, r3
 8002698:	7b7b      	ldrb	r3, [r7, #13]
 800269a:	b21b      	sxth	r3, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	b21a      	sxth	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	809a      	strh	r2, [r3, #4]
	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	b21b      	sxth	r3, r3
 80026ae:	4313      	orrs	r3, r2
 80026b0:	86fb      	strh	r3, [r7, #54]	; 0x36
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80026b2:	7c3b      	ldrb	r3, [r7, #16]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	b21a      	sxth	r2, r3
 80026b8:	7c7b      	ldrb	r3, [r7, #17]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21a      	sxth	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80026c4:	7cbb      	ldrb	r3, [r7, #18]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80026d6:	7d3b      	ldrb	r3, [r7, #20]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	b21a      	sxth	r2, r3
 80026dc:	7d7b      	ldrb	r3, [r7, #21]
 80026de:	b21b      	sxth	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd feec 	bl	80004cc <__aeabi_i2d>
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	4bb7      	ldr	r3, [pc, #732]	; (80029d8 <MPU6050_Read_All+0x390>)
 80026fa:	f7fe f87b 	bl	80007f4 <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd fedc 	bl	80004cc <__aeabi_i2d>
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	4baf      	ldr	r3, [pc, #700]	; (80029d8 <MPU6050_Read_All+0x390>)
 800271a:	f7fe f86b 	bl	80007f4 <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fecc 	bl	80004cc <__aeabi_i2d>
 8002734:	a3a2      	add	r3, pc, #648	; (adr r3, 80029c0 <MPU6050_Read_All+0x378>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fe f85b 	bl	80007f4 <__aeabi_ddiv>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	6839      	ldr	r1, [r7, #0]
 8002744:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
 8002748:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fab9 	bl	8000cc4 <__aeabi_i2f>
 8002752:	4603      	mov	r3, r0
 8002754:	49a1      	ldr	r1, [pc, #644]	; (80029dc <MPU6050_Read_All+0x394>)
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fbbc 	bl	8000ed4 <__aeabi_fdiv>
 800275c:	4603      	mov	r3, r0
 800275e:	49a0      	ldr	r1, [pc, #640]	; (80029e0 <MPU6050_Read_All+0x398>)
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe f9fb 	bl	8000b5c <__addsf3>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
			+ (float) 36.53);
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fea9 	bl	80004cc <__aeabi_i2d>
 800277a:	a393      	add	r3, pc, #588	; (adr r3, 80029c8 <MPU6050_Read_All+0x380>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fe f838 	bl	80007f4 <__aeabi_ddiv>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	6839      	ldr	r1, [r7, #0]
 800278a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fe99 	bl	80004cc <__aeabi_i2d>
 800279a:	a38b      	add	r3, pc, #556	; (adr r3, 80029c8 <MPU6050_Read_All+0x380>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fe f828 	bl	80007f4 <__aeabi_ddiv>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe89 	bl	80004cc <__aeabi_i2d>
 80027ba:	a383      	add	r3, pc, #524	; (adr r3, 80029c8 <MPU6050_Read_All+0x380>)
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f7fe f818 	bl	80007f4 <__aeabi_ddiv>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 80027ce:	f000 fbab 	bl	8002f28 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	4b83      	ldr	r3, [pc, #524]	; (80029e4 <MPU6050_Read_All+0x39c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fe66 	bl	80004ac <__aeabi_ui2d>
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	4b80      	ldr	r3, [pc, #512]	; (80029e8 <MPU6050_Read_All+0x3a0>)
 80027e6:	f7fe f805 	bl	80007f4 <__aeabi_ddiv>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 80027f2:	f000 fb99 	bl	8002f28 <HAL_GetTick>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4a7a      	ldr	r2, [pc, #488]	; (80029e4 <MPU6050_Read_All+0x39c>)
 80027fa:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002802:	461a      	mov	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280a:	fb03 f202 	mul.w	r2, r3, r2
					+ DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002814:	4619      	mov	r1, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800281c:	fb03 f301 	mul.w	r3, r3, r1
 8002820:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe52 	bl	80004cc <__aeabi_i2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f005 fb86 	bl	8007f40 <sqrt>
 8002834:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if (roll_sqrt != 0.0) {
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002844:	f7fe f914 	bl	8000a70 <__aeabi_dcmpeq>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d119      	bne.n	8002882 <MPU6050_Read_All+0x23a>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe39 	bl	80004cc <__aeabi_i2d>
 800285a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800285e:	f7fd ffc9 	bl	80007f4 <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f005 f9d9 	bl	8007c20 <atan>
 800286e:	a358      	add	r3, pc, #352	; (adr r3, 80029d0 <MPU6050_Read_All+0x388>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fd fe94 	bl	80005a0 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002880:	e005      	b.n	800288e <MPU6050_Read_All+0x246>
	} else {
		roll = 0.0;
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002894:	425b      	negs	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe18 	bl	80004cc <__aeabi_i2d>
 800289c:	4682      	mov	sl, r0
 800289e:	468b      	mov	fp, r1
			DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe10 	bl	80004cc <__aeabi_i2d>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4650      	mov	r0, sl
 80028b2:	4659      	mov	r1, fp
 80028b4:	f005 fb41 	bl	8007f3a <atan2>
 80028b8:	a345      	add	r3, pc, #276	; (adr r3, 80029d0 <MPU6050_Read_All+0x388>)
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f7fd fe6f 	bl	80005a0 <__aeabi_dmul>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90)
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <MPU6050_Read_All+0x3a4>)
 80028d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028d4:	f7fe f8d6 	bl	8000a84 <__aeabi_dcmplt>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <MPU6050_Read_All+0x2ac>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <MPU6050_Read_All+0x3a8>)
 80028ea:	f7fe f8e9 	bl	8000ac0 <__aeabi_dcmpgt>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d114      	bne.n	800291e <MPU6050_Read_All+0x2d6>
			|| (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <MPU6050_Read_All+0x3a8>)
 80028fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028fe:	f7fe f8df 	bl	8000ac0 <__aeabi_dcmpgt>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d015      	beq.n	8002934 <MPU6050_Read_All+0x2ec>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	4b36      	ldr	r3, [pc, #216]	; (80029ec <MPU6050_Read_All+0x3a4>)
 8002914:	f7fe f8b6 	bl	8000a84 <__aeabi_dcmplt>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <MPU6050_Read_All+0x2ec>
		KalmanY.angle = pitch;
 800291e:	4935      	ldr	r1, [pc, #212]	; (80029f4 <MPU6050_Read_All+0x3ac>)
 8002920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002924:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002932:	e012      	b.n	800295a <MPU6050_Read_All+0x312>
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800293a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800293e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002942:	e9cd 2300 	strd	r2, r3, [sp]
 8002946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800294a:	482a      	ldr	r0, [pc, #168]	; (80029f4 <MPU6050_Read_All+0x3ac>)
 800294c:	f000 f856 	bl	80029fc <Kalman_getAngle>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	6839      	ldr	r1, [r7, #0]
 8002956:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				DataStruct->Gy, dt);
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002960:	4690      	mov	r8, r2
 8002962:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <MPU6050_Read_All+0x3a8>)
 800296c:	4640      	mov	r0, r8
 800296e:	4649      	mov	r1, r9
 8002970:	f7fe f8a6 	bl	8000ac0 <__aeabi_dcmpgt>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <MPU6050_Read_All+0x344>
		DataStruct->Gx = -DataStruct->Gx;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002980:	4614      	mov	r4, r2
 8002982:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800299a:	e9cd 2300 	strd	r2, r3, [sp]
 800299e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029a2:	4815      	ldr	r0, [pc, #84]	; (80029f8 <MPU6050_Read_All+0x3b0>)
 80029a4:	f000 f82a 	bl	80029fc <Kalman_getAngle>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			dt);
}
 80029b2:	bf00      	nop
 80029b4:	3740      	adds	r7, #64	; 0x40
 80029b6:	46bd      	mov	sp, r7
 80029b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029bc:	f3af 8000 	nop.w
 80029c0:	00000000 	.word	0x00000000
 80029c4:	40cc2900 	.word	0x40cc2900
 80029c8:	00000000 	.word	0x00000000
 80029cc:	40606000 	.word	0x40606000
 80029d0:	1a63c1f8 	.word	0x1a63c1f8
 80029d4:	404ca5dc 	.word	0x404ca5dc
 80029d8:	40d00000 	.word	0x40d00000
 80029dc:	43aa0000 	.word	0x43aa0000
 80029e0:	42121eb8 	.word	0x42121eb8
 80029e4:	200002d8 	.word	0x200002d8
 80029e8:	408f4000 	.word	0x408f4000
 80029ec:	c0568000 	.word	0xc0568000
 80029f0:	40568000 	.word	0x40568000
 80029f4:	20000050 	.word	0x20000050
 80029f8:	20000008 	.word	0x20000008

080029fc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b092      	sub	sp, #72	; 0x48
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a12:	f7fd fc0d 	bl	8000230 <__aeabi_dsub>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a2c:	f7fd fdb8 	bl	80005a0 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4620      	mov	r0, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7fd fbfc 	bl	8000234 <__adddf3>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	68f9      	ldr	r1, [r7, #12]
 8002a42:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a56:	f7fd fda3 	bl	80005a0 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a68:	f7fd fbe2 	bl	8000230 <__aeabi_dsub>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a7a:	f7fd fbd9 	bl	8000230 <__aeabi_dsub>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fbd2 	bl	8000234 <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002a98:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a9c:	f7fd fd80 	bl	80005a0 <__aeabi_dmul>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fbc4 	bl	8000234 <__adddf3>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ac2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ac6:	f7fd fd6b 	bl	80005a0 <__aeabi_dmul>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4620      	mov	r0, r4
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	f7fd fbad 	bl	8000230 <__aeabi_dsub>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	68f9      	ldr	r1, [r7, #12]
 8002adc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002aec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002af0:	f7fd fd56 	bl	80005a0 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fd fb98 	bl	8000230 <__aeabi_dsub>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	68f9      	ldr	r1, [r7, #12]
 8002b06:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002b1a:	f7fd fd41 	bl	80005a0 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4620      	mov	r0, r4
 8002b24:	4629      	mov	r1, r5
 8002b26:	f7fd fb85 	bl	8000234 <__adddf3>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	68f9      	ldr	r1, [r7, #12]
 8002b30:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b40:	f7fd fb78 	bl	8000234 <__adddf3>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b56:	f7fd fe4d 	bl	80007f4 <__aeabi_ddiv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b6c:	f7fd fe42 	bl	80007f4 <__aeabi_ddiv>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b82:	f7fd fb55 	bl	8000230 <__aeabi_dsub>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b9c:	f7fd fd00 	bl	80005a0 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fb44 	bl	8000234 <__adddf3>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002bbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bc4:	f7fd fcec 	bl	80005a0 <__aeabi_dmul>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4620      	mov	r0, r4
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7fd fb30 	bl	8000234 <__adddf3>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	68f9      	ldr	r1, [r7, #12]
 8002bda:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002be4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002bee:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c00:	f7fd fcce 	bl	80005a0 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fb10 	bl	8000230 <__aeabi_dsub>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002c20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c28:	f7fd fcba 	bl	80005a0 <__aeabi_dmul>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4620      	mov	r0, r4
 8002c32:	4629      	mov	r1, r5
 8002c34:	f7fd fafc 	bl	8000230 <__aeabi_dsub>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	68f9      	ldr	r1, [r7, #12]
 8002c3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002c48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c50:	f7fd fca6 	bl	80005a0 <__aeabi_dmul>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd fae8 	bl	8000230 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	68f9      	ldr	r1, [r7, #12]
 8002c66:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002c70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c78:	f7fd fc92 	bl	80005a0 <__aeabi_dmul>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4620      	mov	r0, r4
 8002c82:	4629      	mov	r1, r5
 8002c84:	f7fd fad4 	bl	8000230 <__aeabi_dsub>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	68f9      	ldr	r1, [r7, #12]
 8002c8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	3748      	adds	r7, #72	; 0x48
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002caa:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <HAL_MspInit+0x5c>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_MspInit+0x5c>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6193      	str	r3, [r2, #24]
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_MspInit+0x5c>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_MspInit+0x5c>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HAL_MspInit+0x5c>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	61d3      	str	r3, [r2, #28]
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_MspInit+0x5c>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_MspInit+0x60>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_MspInit+0x60>)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40010000 	.word	0x40010000

08002d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <NMI_Handler+0x4>

08002d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d12:	e7fe      	b.n	8002d12 <HardFault_Handler+0x4>

08002d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <MemManage_Handler+0x4>

08002d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <BusFault_Handler+0x4>

08002d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d24:	e7fe      	b.n	8002d24 <UsageFault_Handler+0x4>

08002d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d4e:	f000 f8d9 	bl	8002f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <CAN1_TX_IRQHandler+0x10>)
 8002d5e:	f000 fd75 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000174 	.word	0x20000174

08002d6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <CAN1_RX0_IRQHandler+0x10>)
 8002d72:	f000 fd6b 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000174 	.word	0x20000174

08002d80 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <CAN1_RX1_IRQHandler+0x10>)
 8002d86:	f000 fd61 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000174 	.word	0x20000174

08002d94 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <CAN1_SCE_IRQHandler+0x10>)
 8002d9a:	f000 fd57 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000174 	.word	0x20000174

08002da8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <I2C1_EV_IRQHandler+0x10>)
 8002dae:	f002 f9df 	bl	8005170 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	2000019c 	.word	0x2000019c

08002dbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <I2C1_ER_IRQHandler+0x10>)
 8002dc2:	f002 fb46 	bl	8005452 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000019c 	.word	0x2000019c

08002dd0 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002dd4:	4802      	ldr	r0, [pc, #8]	; (8002de0 <CAN2_TX_IRQHandler+0x10>)
 8002dd6:	f000 fd39 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000014c 	.word	0x2000014c

08002de4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <CAN2_RX0_IRQHandler+0x10>)
 8002dea:	f000 fd2f 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	2000014c 	.word	0x2000014c

08002df8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <CAN2_RX1_IRQHandler+0x10>)
 8002dfe:	f000 fd25 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	2000014c 	.word	0x2000014c

08002e0c <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <CAN2_SCE_IRQHandler+0x10>)
 8002e12:	f000 fd1b 	bl	800384c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000014c 	.word	0x2000014c

08002e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e2c:	480c      	ldr	r0, [pc, #48]	; (8002e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e2e:	490d      	ldr	r1, [pc, #52]	; (8002e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e34:	e002      	b.n	8002e3c <LoopCopyDataInit>

08002e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3a:	3304      	adds	r3, #4

08002e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e40:	d3f9      	bcc.n	8002e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e44:	4c0a      	ldr	r4, [pc, #40]	; (8002e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e48:	e001      	b.n	8002e4e <LoopFillZerobss>

08002e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e4c:	3204      	adds	r2, #4

08002e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e50:	d3fb      	bcc.n	8002e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e52:	f7ff ffe5 	bl	8002e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e56:	f004 feb7 	bl	8007bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e5a:	f7ff f935 	bl	80020c8 <main>
  bx lr
 8002e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8002e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e64:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002e68:	08008368 	.word	0x08008368
  ldr r2, =_sbss
 8002e6c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002e70:	20000300 	.word	0x20000300

08002e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <ADC1_2_IRQHandler>
	...

08002e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_Init+0x28>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_Init+0x28>)
 8002e82:	f043 0310 	orr.w	r3, r3, #16
 8002e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f000 ffe9 	bl	8003e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f000 f808 	bl	8002ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f7ff ff06 	bl	8002ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000

08002ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_InitTick+0x54>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_InitTick+0x58>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f801 	bl	8003eca <HAL_SYSTICK_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00e      	b.n	8002ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	d80a      	bhi.n	8002eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ee0:	f000 ffc9 	bl	8003e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee4:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <HAL_InitTick+0x5c>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000098 	.word	0x20000098
 8002efc:	200000a0 	.word	0x200000a0
 8002f00:	2000009c 	.word	0x2000009c

08002f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_IncTick+0x1c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_IncTick+0x20>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a03      	ldr	r2, [pc, #12]	; (8002f24 <HAL_IncTick+0x20>)
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	200000a0 	.word	0x200000a0
 8002f24:	200002dc 	.word	0x200002dc

08002f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <HAL_GetTick+0x10>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	200002dc 	.word	0x200002dc

08002f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff fff0 	bl	8002f28 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f54:	d005      	beq.n	8002f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_Delay+0x44>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f62:	bf00      	nop
 8002f64:	f7ff ffe0 	bl	8002f28 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d8f7      	bhi.n	8002f64 <HAL_Delay+0x28>
  {
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200000a0 	.word	0x200000a0

08002f84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0ed      	b.n	8003172 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe fa82 	bl	80014ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb8:	f7ff ffb6 	bl	8002f28 <HAL_GetTick>
 8002fbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fbe:	e012      	b.n	8002fe6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fc0:	f7ff ffb2 	bl	8002f28 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b0a      	cmp	r3, #10
 8002fcc:	d90b      	bls.n	8002fe6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2205      	movs	r2, #5
 8002fde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0c5      	b.n	8003172 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0e5      	beq.n	8002fc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0202 	bic.w	r2, r2, #2
 8003002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003004:	f7ff ff90 	bl	8002f28 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800300a:	e012      	b.n	8003032 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800300c:	f7ff ff8c 	bl	8002f28 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b0a      	cmp	r3, #10
 8003018:	d90b      	bls.n	8003032 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2205      	movs	r2, #5
 800302a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e09f      	b.n	8003172 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7e1b      	ldrb	r3, [r3, #24]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d108      	bne.n	800305a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e007      	b.n	800306a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e5b      	ldrb	r3, [r3, #25]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e007      	b.n	8003094 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7e9b      	ldrb	r3, [r3, #26]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d108      	bne.n	80030ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0220 	orr.w	r2, r2, #32
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e007      	b.n	80030be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0220 	bic.w	r2, r2, #32
 80030bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7edb      	ldrb	r3, [r3, #27]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d108      	bne.n	80030d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0210 	bic.w	r2, r2, #16
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e007      	b.n	80030e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0210 	orr.w	r2, r2, #16
 80030e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	7f1b      	ldrb	r3, [r3, #28]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d108      	bne.n	8003102 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0208 	orr.w	r2, r2, #8
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e007      	b.n	8003112 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0208 	bic.w	r2, r2, #8
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7f5b      	ldrb	r3, [r3, #29]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0204 	orr.w	r2, r2, #4
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	e007      	b.n	800313c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	ea42 0103 	orr.w	r1, r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	1e5a      	subs	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003192:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d003      	beq.n	80031a2 <HAL_CAN_ConfigFilter+0x26>
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	2b02      	cmp	r3, #2
 800319e:	f040 80be 	bne.w	800331e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80031a2:	4b65      	ldr	r3, [pc, #404]	; (8003338 <HAL_CAN_ConfigFilter+0x1bc>)
 80031a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	021b      	lsls	r3, r3, #8
 80031d2:	431a      	orrs	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2201      	movs	r2, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	401a      	ands	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d123      	bne.n	800324c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003226:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3248      	adds	r2, #72	; 0x48
 800322c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003240:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	3348      	adds	r3, #72	; 0x48
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d122      	bne.n	800329a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	431a      	orrs	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003274:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3248      	adds	r2, #72	; 0x48
 800327a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800328e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003290:	6979      	ldr	r1, [r7, #20]
 8003292:	3348      	adds	r3, #72	; 0x48
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	401a      	ands	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032b4:	e007      	b.n	80032c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	401a      	ands	r2, r3
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80032e0:	e007      	b.n	80032f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	431a      	orrs	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003310:	f023 0201 	bic.w	r2, r3, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	e006      	b.n	800332c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40006400 	.word	0x40006400

0800333c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d12e      	bne.n	80033ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003368:	f7ff fdde 	bl	8002f28 <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800336e:	e012      	b.n	8003396 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003370:	f7ff fdda 	bl	8002f28 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b0a      	cmp	r3, #10
 800337c:	d90b      	bls.n	8003396 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2205      	movs	r2, #5
 800338e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e012      	b.n	80033bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e006      	b.n	80033bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
  }
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033e2:	7ffb      	ldrb	r3, [r7, #31]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d003      	beq.n	80033f0 <HAL_CAN_AddTxMessage+0x2c>
 80033e8:	7ffb      	ldrb	r3, [r7, #31]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	f040 80b8 	bne.w	8003560 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a0 	beq.w	8003550 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	0e1b      	lsrs	r3, r3, #24
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d907      	bls.n	8003430 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e09e      	b.n	800356e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003430:	2201      	movs	r2, #1
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	409a      	lsls	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	6809      	ldr	r1, [r1, #0]
 8003450:	431a      	orrs	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3318      	adds	r3, #24
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	440b      	add	r3, r1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e00f      	b.n	800347e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003468:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003472:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3318      	adds	r3, #24
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	440b      	add	r3, r1
 800347c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3318      	adds	r3, #24
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	440b      	add	r3, r1
 800348e:	3304      	adds	r3, #4
 8003490:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	7d1b      	ldrb	r3, [r3, #20]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d111      	bne.n	80034be <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3318      	adds	r3, #24
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3318      	adds	r3, #24
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	440b      	add	r3, r1
 80034ba:	3304      	adds	r3, #4
 80034bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3307      	adds	r3, #7
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	061a      	lsls	r2, r3, #24
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3306      	adds	r3, #6
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3305      	adds	r3, #5
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	4313      	orrs	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	3204      	adds	r2, #4
 80034de:	7812      	ldrb	r2, [r2, #0]
 80034e0:	4610      	mov	r0, r2
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	6811      	ldr	r1, [r2, #0]
 80034e6:	ea43 0200 	orr.w	r2, r3, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	440b      	add	r3, r1
 80034f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3303      	adds	r3, #3
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	061a      	lsls	r2, r3, #24
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3302      	adds	r3, #2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3301      	adds	r3, #1
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	4313      	orrs	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	4610      	mov	r0, r2
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	6811      	ldr	r1, [r2, #0]
 800351c:	ea43 0200 	orr.w	r2, r3, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	440b      	add	r3, r1
 8003526:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800352a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3318      	adds	r3, #24
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	4413      	add	r3, r2
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6811      	ldr	r1, [r2, #0]
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3318      	adds	r3, #24
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	440b      	add	r3, r1
 800354a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e00e      	b.n	800356e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e006      	b.n	800356e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
  }
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800358c:	7afb      	ldrb	r3, [r7, #11]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d002      	beq.n	8003598 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d11d      	bne.n	80035d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3301      	adds	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3301      	adds	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80035d4:	68fb      	ldr	r3, [r7, #12]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d003      	beq.n	8003604 <HAL_CAN_GetRxMessage+0x24>
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	f040 80f3 	bne.w	80037ea <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d116      	bne.n	8003646 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0e7      	b.n	80037f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0d8      	b.n	80037f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	331b      	adds	r3, #27
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0204 	and.w	r2, r3, #4
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10c      	bne.n	800367e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	331b      	adds	r3, #27
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	0d5b      	lsrs	r3, r3, #21
 8003674:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e00b      	b.n	8003696 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	331b      	adds	r3, #27
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4413      	add	r3, r2
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	08db      	lsrs	r3, r3, #3
 800368e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	331b      	adds	r3, #27
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0202 	and.w	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	331b      	adds	r3, #27
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	3304      	adds	r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 020f 	and.w	r2, r3, #15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	331b      	adds	r3, #27
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	3304      	adds	r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	331b      	adds	r3, #27
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4413      	add	r3, r2
 8003714:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0a1a      	lsrs	r2, r3, #8
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	4413      	add	r3, r2
 800372e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0c1a      	lsrs	r2, r3, #16
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	3302      	adds	r3, #2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	4413      	add	r3, r2
 8003748:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	0e1a      	lsrs	r2, r3, #24
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	3303      	adds	r3, #3
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	4413      	add	r3, r2
 8003762:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	3304      	adds	r3, #4
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	4413      	add	r3, r2
 800377a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0a1a      	lsrs	r2, r3, #8
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	3305      	adds	r3, #5
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4413      	add	r3, r2
 8003794:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0c1a      	lsrs	r2, r3, #16
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	3306      	adds	r3, #6
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0e1a      	lsrs	r2, r3, #24
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3307      	adds	r3, #7
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d108      	bne.n	80037d6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0220 	orr.w	r2, r2, #32
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	e007      	b.n	80037e6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0220 	orr.w	r2, r2, #32
 80037e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e006      	b.n	80037f8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003812:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d002      	beq.n	8003820 <HAL_CAN_ActivateNotification+0x1e>
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d109      	bne.n	8003834 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6959      	ldr	r1, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e006      	b.n	8003842 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
  }
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d07c      	beq.n	800398c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d023      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f983 	bl	8003bba <HAL_CAN_TxMailbox0CompleteCallback>
 80038b4:	e016      	b.n	80038e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	e00c      	b.n	80038e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	e002      	b.n	80038e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f986 	bl	8003bf0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d024      	beq.n	8003938 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f962 	bl	8003bcc <HAL_CAN_TxMailbox1CompleteCallback>
 8003908:	e016      	b.n	8003938 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	e00c      	b.n	8003938 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	e002      	b.n	8003938 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f965 	bl	8003c02 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d024      	beq.n	800398c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800394a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f941 	bl	8003bde <HAL_CAN_TxMailbox2CompleteCallback>
 800395c:	e016      	b.n	800398c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	e00c      	b.n	800398c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	e002      	b.n	800398c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f944 	bl	8003c14 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2210      	movs	r2, #16
 80039ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d006      	beq.n	80039d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f92a 	bl	8003c26 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fe fcbc 	bl	8002368 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2210      	movs	r2, #16
 8003a12:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d006      	beq.n	8003a36 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f901 	bl	8003c38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d009      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe fcb4 	bl	80023bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f8ea 	bl	8003c4a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00b      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2208      	movs	r2, #8
 8003a90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8e2 	bl	8003c5c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d07b      	beq.n	8003b9a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d072      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f043 0302 	orr.w	r3, r3, #2
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d043      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d03e      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b1a:	2b60      	cmp	r3, #96	; 0x60
 8003b1c:	d02b      	beq.n	8003b76 <HAL_CAN_IRQHandler+0x32a>
 8003b1e:	2b60      	cmp	r3, #96	; 0x60
 8003b20:	d82e      	bhi.n	8003b80 <HAL_CAN_IRQHandler+0x334>
 8003b22:	2b50      	cmp	r3, #80	; 0x50
 8003b24:	d022      	beq.n	8003b6c <HAL_CAN_IRQHandler+0x320>
 8003b26:	2b50      	cmp	r3, #80	; 0x50
 8003b28:	d82a      	bhi.n	8003b80 <HAL_CAN_IRQHandler+0x334>
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d019      	beq.n	8003b62 <HAL_CAN_IRQHandler+0x316>
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d826      	bhi.n	8003b80 <HAL_CAN_IRQHandler+0x334>
 8003b32:	2b30      	cmp	r3, #48	; 0x30
 8003b34:	d010      	beq.n	8003b58 <HAL_CAN_IRQHandler+0x30c>
 8003b36:	2b30      	cmp	r3, #48	; 0x30
 8003b38:	d822      	bhi.n	8003b80 <HAL_CAN_IRQHandler+0x334>
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d002      	beq.n	8003b44 <HAL_CAN_IRQHandler+0x2f8>
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d005      	beq.n	8003b4e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b42:	e01d      	b.n	8003b80 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f043 0308 	orr.w	r3, r3, #8
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b4c:	e019      	b.n	8003b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	f043 0310 	orr.w	r3, r3, #16
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b56:	e014      	b.n	8003b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	f043 0320 	orr.w	r3, r3, #32
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b60:	e00f      	b.n	8003b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b6a:	e00a      	b.n	8003b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b74:	e005      	b.n	8003b82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b7e:	e000      	b.n	8003b82 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2204      	movs	r2, #4
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fe fcdd 	bl	800256c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3728      	adds	r7, #40	; 0x28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c96:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c98:	7bbb      	ldrb	r3, [r7, #14]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d002      	beq.n	8003ca4 <HAL_CAN_ResetError+0x20>
 8003c9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d103      	bne.n	8003cac <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8003caa:	e007      	b.n	8003cbc <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4906      	ldr	r1, [pc, #24]	; (8003d60 <__NVIC_EnableIRQ+0x34>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	e000e100 	.word	0xe000e100

08003d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	db0a      	blt.n	8003d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	490c      	ldr	r1, [pc, #48]	; (8003db0 <__NVIC_SetPriority+0x4c>)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	0112      	lsls	r2, r2, #4
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	440b      	add	r3, r1
 8003d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d8c:	e00a      	b.n	8003da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4908      	ldr	r1, [pc, #32]	; (8003db4 <__NVIC_SetPriority+0x50>)
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	3b04      	subs	r3, #4
 8003d9c:	0112      	lsls	r2, r2, #4
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	440b      	add	r3, r1
 8003da2:	761a      	strb	r2, [r3, #24]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000e100 	.word	0xe000e100
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b089      	sub	sp, #36	; 0x24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f1c3 0307 	rsb	r3, r3, #7
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	bf28      	it	cs
 8003dd6:	2304      	movcs	r3, #4
 8003dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d902      	bls.n	8003de8 <NVIC_EncodePriority+0x30>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3b03      	subs	r3, #3
 8003de6:	e000      	b.n	8003dea <NVIC_EncodePriority+0x32>
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0a:	43d9      	mvns	r1, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e10:	4313      	orrs	r3, r2
         );
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e2c:	d301      	bcc.n	8003e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e00f      	b.n	8003e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <SysTick_Config+0x40>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e3a:	210f      	movs	r1, #15
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e40:	f7ff ff90 	bl	8003d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <SysTick_Config+0x40>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <SysTick_Config+0x40>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010

08003e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff2d 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e88:	f7ff ff42 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff ff90 	bl	8003db8 <NVIC_EncodePriority>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff5f 	bl	8003d64 <__NVIC_SetPriority>
}
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff35 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ffa2 	bl	8003e1c <SysTick_Config>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d005      	beq.n	8003f06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2204      	movs	r2, #4
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	e0d6      	b.n	80040b4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 020e 	bic.w	r2, r2, #14
 8003f14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b64      	ldr	r3, [pc, #400]	; (80040c0 <HAL_DMA_Abort_IT+0x1dc>)
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d958      	bls.n	8003fe4 <HAL_DMA_Abort_IT+0x100>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <HAL_DMA_Abort_IT+0x1e0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04f      	beq.n	8003fdc <HAL_DMA_Abort_IT+0xf8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a61      	ldr	r2, [pc, #388]	; (80040c8 <HAL_DMA_Abort_IT+0x1e4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d048      	beq.n	8003fd8 <HAL_DMA_Abort_IT+0xf4>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a60      	ldr	r2, [pc, #384]	; (80040cc <HAL_DMA_Abort_IT+0x1e8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_DMA_Abort_IT+0xee>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a5e      	ldr	r2, [pc, #376]	; (80040d0 <HAL_DMA_Abort_IT+0x1ec>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d038      	beq.n	8003fcc <HAL_DMA_Abort_IT+0xe8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5d      	ldr	r2, [pc, #372]	; (80040d4 <HAL_DMA_Abort_IT+0x1f0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d030      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0xe2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5b      	ldr	r2, [pc, #364]	; (80040d8 <HAL_DMA_Abort_IT+0x1f4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d028      	beq.n	8003fc0 <HAL_DMA_Abort_IT+0xdc>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a53      	ldr	r2, [pc, #332]	; (80040c0 <HAL_DMA_Abort_IT+0x1dc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d020      	beq.n	8003fba <HAL_DMA_Abort_IT+0xd6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a57      	ldr	r2, [pc, #348]	; (80040dc <HAL_DMA_Abort_IT+0x1f8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <HAL_DMA_Abort_IT+0xd2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a56      	ldr	r2, [pc, #344]	; (80040e0 <HAL_DMA_Abort_IT+0x1fc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d012      	beq.n	8003fb2 <HAL_DMA_Abort_IT+0xce>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a54      	ldr	r2, [pc, #336]	; (80040e4 <HAL_DMA_Abort_IT+0x200>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00a      	beq.n	8003fac <HAL_DMA_Abort_IT+0xc8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a53      	ldr	r2, [pc, #332]	; (80040e8 <HAL_DMA_Abort_IT+0x204>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d102      	bne.n	8003fa6 <HAL_DMA_Abort_IT+0xc2>
 8003fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa4:	e01b      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003faa:	e018      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb0:	e015      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	e013      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e011      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fbe:	e00e      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fc4:	e00b      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fca:	e008      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fd0:	e005      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fd6:	e002      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	e000      	b.n	8003fde <HAL_DMA_Abort_IT+0xfa>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4a43      	ldr	r2, [pc, #268]	; (80040ec <HAL_DMA_Abort_IT+0x208>)
 8003fe0:	6053      	str	r3, [r2, #4]
 8003fe2:	e057      	b.n	8004094 <HAL_DMA_Abort_IT+0x1b0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a36      	ldr	r2, [pc, #216]	; (80040c4 <HAL_DMA_Abort_IT+0x1e0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04f      	beq.n	800408e <HAL_DMA_Abort_IT+0x1aa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a35      	ldr	r2, [pc, #212]	; (80040c8 <HAL_DMA_Abort_IT+0x1e4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d048      	beq.n	800408a <HAL_DMA_Abort_IT+0x1a6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a33      	ldr	r2, [pc, #204]	; (80040cc <HAL_DMA_Abort_IT+0x1e8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d040      	beq.n	8004084 <HAL_DMA_Abort_IT+0x1a0>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_DMA_Abort_IT+0x1ec>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d038      	beq.n	800407e <HAL_DMA_Abort_IT+0x19a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <HAL_DMA_Abort_IT+0x1f0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d030      	beq.n	8004078 <HAL_DMA_Abort_IT+0x194>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <HAL_DMA_Abort_IT+0x1f4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d028      	beq.n	8004072 <HAL_DMA_Abort_IT+0x18e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_DMA_Abort_IT+0x1dc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d020      	beq.n	800406c <HAL_DMA_Abort_IT+0x188>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <HAL_DMA_Abort_IT+0x1f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d019      	beq.n	8004068 <HAL_DMA_Abort_IT+0x184>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <HAL_DMA_Abort_IT+0x1fc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d012      	beq.n	8004064 <HAL_DMA_Abort_IT+0x180>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <HAL_DMA_Abort_IT+0x200>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00a      	beq.n	800405e <HAL_DMA_Abort_IT+0x17a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <HAL_DMA_Abort_IT+0x204>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d102      	bne.n	8004058 <HAL_DMA_Abort_IT+0x174>
 8004052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004056:	e01b      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 8004058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800405c:	e018      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 800405e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004062:	e015      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 8004064:	2310      	movs	r3, #16
 8004066:	e013      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 8004068:	2301      	movs	r3, #1
 800406a:	e011      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 800406c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004070:	e00e      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 8004072:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004076:	e00b      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 8004078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800407c:	e008      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 800407e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004082:	e005      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 8004084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004088:	e002      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 800408a:	2310      	movs	r3, #16
 800408c:	e000      	b.n	8004090 <HAL_DMA_Abort_IT+0x1ac>
 800408e:	2301      	movs	r3, #1
 8004090:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <HAL_DMA_Abort_IT+0x20c>)
 8004092:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4798      	blx	r3
    } 
  }
  return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40020080 	.word	0x40020080
 80040c4:	40020008 	.word	0x40020008
 80040c8:	4002001c 	.word	0x4002001c
 80040cc:	40020030 	.word	0x40020030
 80040d0:	40020044 	.word	0x40020044
 80040d4:	40020058 	.word	0x40020058
 80040d8:	4002006c 	.word	0x4002006c
 80040dc:	40020408 	.word	0x40020408
 80040e0:	4002041c 	.word	0x4002041c
 80040e4:	40020430 	.word	0x40020430
 80040e8:	40020444 	.word	0x40020444
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40020000 	.word	0x40020000

080040f4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004126:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <HAL_FLASH_Program+0xd8>)
 8004128:	7e1b      	ldrb	r3, [r3, #24]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_FLASH_Program+0x26>
 800412e:	2302      	movs	r3, #2
 8004130:	e054      	b.n	80041dc <HAL_FLASH_Program+0xd0>
 8004132:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <HAL_FLASH_Program+0xd8>)
 8004134:	2201      	movs	r2, #1
 8004136:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004138:	f24c 3050 	movw	r0, #50000	; 0xc350
 800413c:	f000 f898 	bl	8004270 <FLASH_WaitForLastOperation>
 8004140:	4603      	mov	r3, r0
 8004142:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004144:	7dfb      	ldrb	r3, [r7, #23]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d144      	bne.n	80041d4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004150:	2301      	movs	r3, #1
 8004152:	757b      	strb	r3, [r7, #21]
 8004154:	e007      	b.n	8004166 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d102      	bne.n	8004162 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800415c:	2302      	movs	r3, #2
 800415e:	757b      	strb	r3, [r7, #21]
 8004160:	e001      	b.n	8004166 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004162:	2304      	movs	r3, #4
 8004164:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004166:	2300      	movs	r3, #0
 8004168:	75bb      	strb	r3, [r7, #22]
 800416a:	e02d      	b.n	80041c8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800416c:	7dbb      	ldrb	r3, [r7, #22]
 800416e:	005a      	lsls	r2, r3, #1
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	eb02 0c03 	add.w	ip, r2, r3
 8004176:	7dbb      	ldrb	r3, [r7, #22]
 8004178:	0119      	lsls	r1, r3, #4
 800417a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417e:	f1c1 0620 	rsb	r6, r1, #32
 8004182:	f1a1 0020 	sub.w	r0, r1, #32
 8004186:	fa22 f401 	lsr.w	r4, r2, r1
 800418a:	fa03 f606 	lsl.w	r6, r3, r6
 800418e:	4334      	orrs	r4, r6
 8004190:	fa23 f000 	lsr.w	r0, r3, r0
 8004194:	4304      	orrs	r4, r0
 8004196:	fa23 f501 	lsr.w	r5, r3, r1
 800419a:	b2a3      	uxth	r3, r4
 800419c:	4619      	mov	r1, r3
 800419e:	4660      	mov	r0, ip
 80041a0:	f000 f84a 	bl	8004238 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041a8:	f000 f862 	bl	8004270 <FLASH_WaitForLastOperation>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_FLASH_Program+0xdc>)
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <HAL_FLASH_Program+0xdc>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80041c2:	7dbb      	ldrb	r3, [r7, #22]
 80041c4:	3301      	adds	r3, #1
 80041c6:	75bb      	strb	r3, [r7, #22]
 80041c8:	7dba      	ldrb	r2, [r7, #22]
 80041ca:	7d7b      	ldrb	r3, [r7, #21]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d3cd      	bcc.n	800416c <HAL_FLASH_Program+0x60>
 80041d0:	e000      	b.n	80041d4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80041d2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_FLASH_Program+0xd8>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	761a      	strb	r2, [r3, #24]

  return status;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e4:	200002e0 	.word	0x200002e0
 80041e8:	40022000 	.word	0x40022000

080041ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <HAL_FLASH_Unlock+0x40>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00d      	beq.n	800421e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_FLASH_Unlock+0x40>)
 8004204:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <HAL_FLASH_Unlock+0x44>)
 8004206:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_FLASH_Unlock+0x40>)
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_FLASH_Unlock+0x48>)
 800420c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <HAL_FLASH_Unlock+0x40>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800421e:	79fb      	ldrb	r3, [r7, #7]
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40022000 	.word	0x40022000
 8004230:	45670123 	.word	0x45670123
 8004234:	cdef89ab 	.word	0xcdef89ab

08004238 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <FLASH_Program_HalfWord+0x30>)
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <FLASH_Program_HalfWord+0x34>)
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <FLASH_Program_HalfWord+0x34>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	801a      	strh	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	200002e0 	.word	0x200002e0
 800426c:	40022000 	.word	0x40022000

08004270 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004278:	f7fe fe56 	bl	8002f28 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800427e:	e010      	b.n	80042a2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004286:	d00c      	beq.n	80042a2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <FLASH_WaitForLastOperation+0x2e>
 800428e:	f7fe fe4b 	bl	8002f28 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d201      	bcs.n	80042a2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e025      	b.n	80042ee <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <FLASH_WaitForLastOperation+0x88>)
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e8      	bne.n	8004280 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <FLASH_WaitForLastOperation+0x88>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80042ba:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <FLASH_WaitForLastOperation+0x88>)
 80042bc:	2220      	movs	r2, #32
 80042be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <FLASH_WaitForLastOperation+0x88>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <FLASH_WaitForLastOperation+0x88>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <FLASH_WaitForLastOperation+0x88>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80042e4:	f000 f80a 	bl	80042fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40022000 	.word	0x40022000

080042fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <FLASH_SetErrorCode+0x98>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004312:	4b21      	ldr	r3, [pc, #132]	; (8004398 <FLASH_SetErrorCode+0x9c>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f043 0302 	orr.w	r3, r3, #2
 800431a:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <FLASH_SetErrorCode+0x9c>)
 800431c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f043 0310 	orr.w	r3, r3, #16
 8004324:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004326:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <FLASH_SetErrorCode+0x98>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004332:	4b19      	ldr	r3, [pc, #100]	; (8004398 <FLASH_SetErrorCode+0x9c>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	4a17      	ldr	r2, [pc, #92]	; (8004398 <FLASH_SetErrorCode+0x9c>)
 800433c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <FLASH_SetErrorCode+0x98>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004352:	4b11      	ldr	r3, [pc, #68]	; (8004398 <FLASH_SetErrorCode+0x9c>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	4a0f      	ldr	r2, [pc, #60]	; (8004398 <FLASH_SetErrorCode+0x9c>)
 800435c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <FLASH_SetErrorCode+0x98>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <FLASH_SetErrorCode+0x98>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f240 1201 	movw	r2, #257	; 0x101
 8004370:	4293      	cmp	r3, r2
 8004372:	d106      	bne.n	8004382 <FLASH_SetErrorCode+0x86>
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <FLASH_SetErrorCode+0x98>)
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	4a06      	ldr	r2, [pc, #24]	; (8004394 <FLASH_SetErrorCode+0x98>)
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	61d3      	str	r3, [r2, #28]
}  
 8004380:	e002      	b.n	8004388 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004382:	4a04      	ldr	r2, [pc, #16]	; (8004394 <FLASH_SetErrorCode+0x98>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	60d3      	str	r3, [r2, #12]
}  
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40022000 	.word	0x40022000
 8004398:	200002e0 	.word	0x200002e0

0800439c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043ae:	4b2f      	ldr	r3, [pc, #188]	; (800446c <HAL_FLASHEx_Erase+0xd0>)
 80043b0:	7e1b      	ldrb	r3, [r3, #24]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_FLASHEx_Erase+0x1e>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e053      	b.n	8004462 <HAL_FLASHEx_Erase+0xc6>
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <HAL_FLASHEx_Erase+0xd0>)
 80043bc:	2201      	movs	r2, #1
 80043be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d116      	bne.n	80043f6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043cc:	f7ff ff50 	bl	8004270 <FLASH_WaitForLastOperation>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d141      	bne.n	800445a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80043d6:	2001      	movs	r0, #1
 80043d8:	f000 f84c 	bl	8004474 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043e0:	f7ff ff46 	bl	8004270 <FLASH_WaitForLastOperation>
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80043e8:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_FLASHEx_Erase+0xd4>)
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <HAL_FLASHEx_Erase+0xd4>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	6113      	str	r3, [r2, #16]
 80043f4:	e031      	b.n	800445a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043fa:	f7ff ff39 	bl	8004270 <FLASH_WaitForLastOperation>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d12a      	bne.n	800445a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800440a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	e019      	b.n	8004448 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004414:	68b8      	ldr	r0, [r7, #8]
 8004416:	f000 f849 	bl	80044ac <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800441a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800441e:	f7ff ff27 	bl	8004270 <FLASH_WaitForLastOperation>
 8004422:	4603      	mov	r3, r0
 8004424:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_FLASHEx_Erase+0xd4>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HAL_FLASHEx_Erase+0xd4>)
 800442c:	f023 0302 	bic.w	r3, r3, #2
 8004430:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	601a      	str	r2, [r3, #0]
            break;
 800443e:	e00c      	b.n	800445a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	02da      	lsls	r2, r3, #11
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	d3dc      	bcc.n	8004414 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <HAL_FLASHEx_Erase+0xd0>)
 800445c:	2200      	movs	r2, #0
 800445e:	761a      	strb	r2, [r3, #24]

  return status;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200002e0 	.word	0x200002e0
 8004470:	40022000 	.word	0x40022000

08004474 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <FLASH_MassErase+0x30>)
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <FLASH_MassErase+0x34>)
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <FLASH_MassErase+0x34>)
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800448e:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <FLASH_MassErase+0x34>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <FLASH_MassErase+0x34>)
 8004494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004498:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	200002e0 	.word	0x200002e0
 80044a8:	40022000 	.word	0x40022000

080044ac <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <FLASH_PageErase+0x38>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <FLASH_PageErase+0x3c>)
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <FLASH_PageErase+0x3c>)
 80044c0:	f043 0302 	orr.w	r3, r3, #2
 80044c4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80044c6:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <FLASH_PageErase+0x3c>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <FLASH_PageErase+0x3c>)
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	4a05      	ldr	r2, [pc, #20]	; (80044e8 <FLASH_PageErase+0x3c>)
 80044d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	200002e0 	.word	0x200002e0
 80044e8:	40022000 	.word	0x40022000

080044ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b08b      	sub	sp, #44	; 0x2c
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044fe:	e169      	b.n	80047d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004500:	2201      	movs	r2, #1
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	429a      	cmp	r2, r3
 800451a:	f040 8158 	bne.w	80047ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4a9a      	ldr	r2, [pc, #616]	; (800478c <HAL_GPIO_Init+0x2a0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d05e      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004528:	4a98      	ldr	r2, [pc, #608]	; (800478c <HAL_GPIO_Init+0x2a0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d875      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 800452e:	4a98      	ldr	r2, [pc, #608]	; (8004790 <HAL_GPIO_Init+0x2a4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d058      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004534:	4a96      	ldr	r2, [pc, #600]	; (8004790 <HAL_GPIO_Init+0x2a4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d86f      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 800453a:	4a96      	ldr	r2, [pc, #600]	; (8004794 <HAL_GPIO_Init+0x2a8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d052      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004540:	4a94      	ldr	r2, [pc, #592]	; (8004794 <HAL_GPIO_Init+0x2a8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d869      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 8004546:	4a94      	ldr	r2, [pc, #592]	; (8004798 <HAL_GPIO_Init+0x2ac>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04c      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 800454c:	4a92      	ldr	r2, [pc, #584]	; (8004798 <HAL_GPIO_Init+0x2ac>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d863      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 8004552:	4a92      	ldr	r2, [pc, #584]	; (800479c <HAL_GPIO_Init+0x2b0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d046      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004558:	4a90      	ldr	r2, [pc, #576]	; (800479c <HAL_GPIO_Init+0x2b0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d85d      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 800455e:	2b12      	cmp	r3, #18
 8004560:	d82a      	bhi.n	80045b8 <HAL_GPIO_Init+0xcc>
 8004562:	2b12      	cmp	r3, #18
 8004564:	d859      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <HAL_GPIO_Init+0x80>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	080045e7 	.word	0x080045e7
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045d3 	.word	0x080045d3
 8004578:	08004615 	.word	0x08004615
 800457c:	0800461b 	.word	0x0800461b
 8004580:	0800461b 	.word	0x0800461b
 8004584:	0800461b 	.word	0x0800461b
 8004588:	0800461b 	.word	0x0800461b
 800458c:	0800461b 	.word	0x0800461b
 8004590:	0800461b 	.word	0x0800461b
 8004594:	0800461b 	.word	0x0800461b
 8004598:	0800461b 	.word	0x0800461b
 800459c:	0800461b 	.word	0x0800461b
 80045a0:	0800461b 	.word	0x0800461b
 80045a4:	0800461b 	.word	0x0800461b
 80045a8:	0800461b 	.word	0x0800461b
 80045ac:	0800461b 	.word	0x0800461b
 80045b0:	080045c9 	.word	0x080045c9
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	4a79      	ldr	r2, [pc, #484]	; (80047a0 <HAL_GPIO_Init+0x2b4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045be:	e02c      	b.n	800461a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	623b      	str	r3, [r7, #32]
          break;
 80045c6:	e029      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	3304      	adds	r3, #4
 80045ce:	623b      	str	r3, [r7, #32]
          break;
 80045d0:	e024      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	3308      	adds	r3, #8
 80045d8:	623b      	str	r3, [r7, #32]
          break;
 80045da:	e01f      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	330c      	adds	r3, #12
 80045e2:	623b      	str	r3, [r7, #32]
          break;
 80045e4:	e01a      	b.n	800461c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045ee:	2304      	movs	r3, #4
 80045f0:	623b      	str	r3, [r7, #32]
          break;
 80045f2:	e013      	b.n	800461c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045fc:	2308      	movs	r3, #8
 80045fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	611a      	str	r2, [r3, #16]
          break;
 8004606:	e009      	b.n	800461c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004608:	2308      	movs	r3, #8
 800460a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	615a      	str	r2, [r3, #20]
          break;
 8004612:	e003      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004614:	2300      	movs	r3, #0
 8004616:	623b      	str	r3, [r7, #32]
          break;
 8004618:	e000      	b.n	800461c <HAL_GPIO_Init+0x130>
          break;
 800461a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2bff      	cmp	r3, #255	; 0xff
 8004620:	d801      	bhi.n	8004626 <HAL_GPIO_Init+0x13a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	e001      	b.n	800462a <HAL_GPIO_Init+0x13e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2bff      	cmp	r3, #255	; 0xff
 8004630:	d802      	bhi.n	8004638 <HAL_GPIO_Init+0x14c>
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	e002      	b.n	800463e <HAL_GPIO_Init+0x152>
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	3b08      	subs	r3, #8
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	210f      	movs	r1, #15
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	401a      	ands	r2, r3
 8004650:	6a39      	ldr	r1, [r7, #32]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	431a      	orrs	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80b1 	beq.w	80047ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800466c:	4b4d      	ldr	r3, [pc, #308]	; (80047a4 <HAL_GPIO_Init+0x2b8>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4a4c      	ldr	r2, [pc, #304]	; (80047a4 <HAL_GPIO_Init+0x2b8>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6193      	str	r3, [r2, #24]
 8004678:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <HAL_GPIO_Init+0x2b8>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004684:	4a48      	ldr	r2, [pc, #288]	; (80047a8 <HAL_GPIO_Init+0x2bc>)
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	3302      	adds	r3, #2
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	220f      	movs	r2, #15
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a40      	ldr	r2, [pc, #256]	; (80047ac <HAL_GPIO_Init+0x2c0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_GPIO_Init+0x1ec>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3f      	ldr	r2, [pc, #252]	; (80047b0 <HAL_GPIO_Init+0x2c4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <HAL_GPIO_Init+0x1e8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3e      	ldr	r2, [pc, #248]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <HAL_GPIO_Init+0x1e4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3d      	ldr	r2, [pc, #244]	; (80047b8 <HAL_GPIO_Init+0x2cc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_GPIO_Init+0x1e0>
 80046c8:	2303      	movs	r3, #3
 80046ca:	e006      	b.n	80046da <HAL_GPIO_Init+0x1ee>
 80046cc:	2304      	movs	r3, #4
 80046ce:	e004      	b.n	80046da <HAL_GPIO_Init+0x1ee>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e002      	b.n	80046da <HAL_GPIO_Init+0x1ee>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <HAL_GPIO_Init+0x1ee>
 80046d8:	2300      	movs	r3, #0
 80046da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046dc:	f002 0203 	and.w	r2, r2, #3
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	4093      	lsls	r3, r2
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046ea:	492f      	ldr	r1, [pc, #188]	; (80047a8 <HAL_GPIO_Init+0x2bc>)
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	089b      	lsrs	r3, r3, #2
 80046f0:	3302      	adds	r3, #2
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d006      	beq.n	8004712 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	492c      	ldr	r1, [pc, #176]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	e006      	b.n	8004720 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004712:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	43db      	mvns	r3, r3
 800471a:	4928      	ldr	r1, [pc, #160]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800471c:	4013      	ands	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d006      	beq.n	800473a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800472c:	4b23      	ldr	r3, [pc, #140]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	4922      	ldr	r1, [pc, #136]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	4313      	orrs	r3, r2
 8004736:	604b      	str	r3, [r1, #4]
 8004738:	e006      	b.n	8004748 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	43db      	mvns	r3, r3
 8004742:	491e      	ldr	r1, [pc, #120]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004744:	4013      	ands	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004754:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4918      	ldr	r1, [pc, #96]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
 8004760:	e006      	b.n	8004770 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	43db      	mvns	r3, r3
 800476a:	4914      	ldr	r1, [pc, #80]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800476c:	4013      	ands	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d021      	beq.n	80047c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800477c:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	490e      	ldr	r1, [pc, #56]	; (80047bc <HAL_GPIO_Init+0x2d0>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	60cb      	str	r3, [r1, #12]
 8004788:	e021      	b.n	80047ce <HAL_GPIO_Init+0x2e2>
 800478a:	bf00      	nop
 800478c:	10320000 	.word	0x10320000
 8004790:	10310000 	.word	0x10310000
 8004794:	10220000 	.word	0x10220000
 8004798:	10210000 	.word	0x10210000
 800479c:	10120000 	.word	0x10120000
 80047a0:	10110000 	.word	0x10110000
 80047a4:	40021000 	.word	0x40021000
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40010800 	.word	0x40010800
 80047b0:	40010c00 	.word	0x40010c00
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40011400 	.word	0x40011400
 80047bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_GPIO_Init+0x304>)
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	4909      	ldr	r1, [pc, #36]	; (80047f0 <HAL_GPIO_Init+0x304>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	3301      	adds	r3, #1
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f47f ae8e 	bne.w	8004500 <HAL_GPIO_Init+0x14>
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	372c      	adds	r7, #44	; 0x2c
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	40010400 	.word	0x40010400

080047f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	887b      	ldrh	r3, [r7, #2]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e001      	b.n	8004816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bc80      	pop	{r7}
 8004820:	4770      	bx	lr
	...

08004824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e12b      	b.n	8004a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fb3e 	bl	8001ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	; 0x24
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004888:	f003 f966 	bl	8007b58 <HAL_RCC_GetPCLK1Freq>
 800488c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	4a81      	ldr	r2, [pc, #516]	; (8004a98 <HAL_I2C_Init+0x274>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d807      	bhi.n	80048a8 <HAL_I2C_Init+0x84>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <HAL_I2C_Init+0x278>)
 800489c:	4293      	cmp	r3, r2
 800489e:	bf94      	ite	ls
 80048a0:	2301      	movls	r3, #1
 80048a2:	2300      	movhi	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e006      	b.n	80048b6 <HAL_I2C_Init+0x92>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a7d      	ldr	r2, [pc, #500]	; (8004aa0 <HAL_I2C_Init+0x27c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bf94      	ite	ls
 80048b0:	2301      	movls	r3, #1
 80048b2:	2300      	movhi	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e0e7      	b.n	8004a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a78      	ldr	r2, [pc, #480]	; (8004aa4 <HAL_I2C_Init+0x280>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	0c9b      	lsrs	r3, r3, #18
 80048c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_I2C_Init+0x274>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d802      	bhi.n	80048f8 <HAL_I2C_Init+0xd4>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	3301      	adds	r3, #1
 80048f6:	e009      	b.n	800490c <HAL_I2C_Init+0xe8>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	4a69      	ldr	r2, [pc, #420]	; (8004aa8 <HAL_I2C_Init+0x284>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	099b      	lsrs	r3, r3, #6
 800490a:	3301      	adds	r3, #1
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	430b      	orrs	r3, r1
 8004912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800491e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	495c      	ldr	r1, [pc, #368]	; (8004a98 <HAL_I2C_Init+0x274>)
 8004928:	428b      	cmp	r3, r1
 800492a:	d819      	bhi.n	8004960 <HAL_I2C_Init+0x13c>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1e59      	subs	r1, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fbb1 f3f3 	udiv	r3, r1, r3
 800493a:	1c59      	adds	r1, r3, #1
 800493c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004940:	400b      	ands	r3, r1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HAL_I2C_Init+0x138>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1e59      	subs	r1, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fbb1 f3f3 	udiv	r3, r1, r3
 8004954:	3301      	adds	r3, #1
 8004956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495a:	e051      	b.n	8004a00 <HAL_I2C_Init+0x1dc>
 800495c:	2304      	movs	r3, #4
 800495e:	e04f      	b.n	8004a00 <HAL_I2C_Init+0x1dc>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d111      	bne.n	800498c <HAL_I2C_Init+0x168>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1e58      	subs	r0, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	440b      	add	r3, r1
 8004976:	fbb0 f3f3 	udiv	r3, r0, r3
 800497a:	3301      	adds	r3, #1
 800497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	e012      	b.n	80049b2 <HAL_I2C_Init+0x18e>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1e58      	subs	r0, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	0099      	lsls	r1, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Init+0x196>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e022      	b.n	8004a00 <HAL_I2C_Init+0x1dc>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10e      	bne.n	80049e0 <HAL_I2C_Init+0x1bc>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1e58      	subs	r0, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	440b      	add	r3, r1
 80049d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d4:	3301      	adds	r3, #1
 80049d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	e00f      	b.n	8004a00 <HAL_I2C_Init+0x1dc>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1e58      	subs	r0, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	0099      	lsls	r1, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f6:	3301      	adds	r3, #1
 80049f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	6809      	ldr	r1, [r1, #0]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6911      	ldr	r1, [r2, #16]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68d2      	ldr	r2, [r2, #12]
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	000186a0 	.word	0x000186a0
 8004a9c:	001e847f 	.word	0x001e847f
 8004aa0:	003d08ff 	.word	0x003d08ff
 8004aa4:	431bde83 	.word	0x431bde83
 8004aa8:	10624dd3 	.word	0x10624dd3

08004aac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	817b      	strh	r3, [r7, #10]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	813b      	strh	r3, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ac6:	f7fe fa2f 	bl	8002f28 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	f040 80d9 	bne.w	8004c8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2319      	movs	r3, #25
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	496d      	ldr	r1, [pc, #436]	; (8004c98 <HAL_I2C_Mem_Write+0x1ec>)
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f002 f949 	bl	8006d7c <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
 8004af2:	e0cc      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_I2C_Mem_Write+0x56>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e0c5      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d007      	beq.n	8004b28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2221      	movs	r2, #33	; 0x21
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a4d      	ldr	r2, [pc, #308]	; (8004c9c <HAL_I2C_Mem_Write+0x1f0>)
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b6a:	88f8      	ldrh	r0, [r7, #6]
 8004b6c:	893a      	ldrh	r2, [r7, #8]
 8004b6e:	8979      	ldrh	r1, [r7, #10]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4603      	mov	r3, r0
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f001 fed8 	bl	8006930 <I2C_RequestMemoryWrite>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d052      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e081      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f002 f9ca 	bl	8006f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d107      	bne.n	8004bb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06b      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	781a      	ldrb	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d11b      	bne.n	8004c2c <HAL_I2C_Mem_Write+0x180>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d017      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	781a      	ldrb	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1aa      	bne.n	8004b8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f002 f9b6 	bl	8006faa <I2C_WaitOnBTFFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d107      	bne.n	8004c5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e016      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	00100002 	.word	0x00100002
 8004c9c:	ffff0000 	.word	0xffff0000

08004ca0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	; 0x30
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	817b      	strh	r3, [r7, #10]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	813b      	strh	r3, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cbe:	f7fe f933 	bl	8002f28 <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	f040 8244 	bne.w	800515a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	2319      	movs	r3, #25
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4982      	ldr	r1, [pc, #520]	; (8004ee4 <HAL_I2C_Mem_Read+0x244>)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f002 f84d 	bl	8006d7c <I2C_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e237      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2C_Mem_Read+0x5a>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e230      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d007      	beq.n	8004d20 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2222      	movs	r2, #34	; 0x22
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2240      	movs	r2, #64	; 0x40
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a62      	ldr	r2, [pc, #392]	; (8004ee8 <HAL_I2C_Mem_Read+0x248>)
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d62:	88f8      	ldrh	r0, [r7, #6]
 8004d64:	893a      	ldrh	r2, [r7, #8]
 8004d66:	8979      	ldrh	r1, [r7, #10]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	4603      	mov	r3, r0
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f001 fe72 	bl	8006a5c <I2C_RequestMemoryRead>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1ec      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d113      	bne.n	8004db2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e1c0      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d11e      	bne.n	8004df8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dca:	b672      	cpsid	i
}
 8004dcc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004df4:	b662      	cpsie	i
}
 8004df6:	e035      	b.n	8004e64 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d11e      	bne.n	8004e3e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e10:	b672      	cpsid	i
}
 8004e12:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e3a:	b662      	cpsie	i
}
 8004e3c:	e012      	b.n	8004e64 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e4c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e64:	e166      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	f200 811f 	bhi.w	80050ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d123      	bne.n	8004ec0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f002 f907 	bl	8007090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e167      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ebe:	e139      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d152      	bne.n	8004f6e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4906      	ldr	r1, [pc, #24]	; (8004eec <HAL_I2C_Mem_Read+0x24c>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f001 ff52 	bl	8006d7c <I2C_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e13c      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
 8004ee2:	bf00      	nop
 8004ee4:	00100002 	.word	0x00100002
 8004ee8:	ffff0000 	.word	0xffff0000
 8004eec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef0:	b672      	cpsid	i
}
 8004ef2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f36:	b662      	cpsie	i
}
 8004f38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f6c:	e0e2      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2200      	movs	r2, #0
 8004f76:	497b      	ldr	r1, [pc, #492]	; (8005164 <HAL_I2C_Mem_Read+0x4c4>)
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f001 feff 	bl	8006d7c <I2C_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0e9      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f98:	b672      	cpsid	i
}
 8004f9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fce:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_I2C_Mem_Read+0x4c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	08db      	lsrs	r3, r3, #3
 8004fd4:	4a65      	ldr	r2, [pc, #404]	; (800516c <HAL_I2C_Mem_Read+0x4cc>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	0a1a      	lsrs	r2, r3, #8
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	00da      	lsls	r2, r3, #3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d118      	bne.n	8005026 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005016:	b662      	cpsie	i
}
 8005018:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e09a      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d1d9      	bne.n	8004fe8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005076:	b662      	cpsie	i
}
 8005078:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050ac:	e042      	b.n	8005134 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f001 ffec 	bl	8007090 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e04c      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d118      	bne.n	8005134 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	2b00      	cmp	r3, #0
 800513a:	f47f ae94 	bne.w	8004e66 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	e000      	b.n	800515c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800515a:	2302      	movs	r3, #2
  }
}
 800515c:	4618      	mov	r0, r3
 800515e:	3728      	adds	r7, #40	; 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	00010004 	.word	0x00010004
 8005168:	20000098 	.word	0x20000098
 800516c:	14f8b589 	.word	0x14f8b589

08005170 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005190:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b10      	cmp	r3, #16
 800519e:	d003      	beq.n	80051a8 <HAL_I2C_EV_IRQHandler+0x38>
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	f040 80c1 	bne.w	800532a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10d      	bne.n	80051de <HAL_I2C_EV_IRQHandler+0x6e>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051c8:	d003      	beq.n	80051d2 <HAL_I2C_EV_IRQHandler+0x62>
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051d0:	d101      	bne.n	80051d6 <HAL_I2C_EV_IRQHandler+0x66>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_I2C_EV_IRQHandler+0x68>
 80051d6:	2300      	movs	r3, #0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	f000 8132 	beq.w	8005442 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <HAL_I2C_EV_IRQHandler+0x92>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	0a5b      	lsrs	r3, r3, #9
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d006      	beq.n	8005202 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 ffcf 	bl	8007198 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fd77 	bl	8005cee <I2C_Master_SB>
 8005200:	e092      	b.n	8005328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	08db      	lsrs	r3, r3, #3
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_I2C_EV_IRQHandler+0xb2>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	0a5b      	lsrs	r3, r3, #9
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fdec 	bl	8005df8 <I2C_Master_ADD10>
 8005220:	e082      	b.n	8005328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <HAL_I2C_EV_IRQHandler+0xd2>
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	0a5b      	lsrs	r3, r3, #9
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fe05 	bl	8005e4a <I2C_Master_ADDR>
 8005240:	e072      	b.n	8005328 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	089b      	lsrs	r3, r3, #2
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d03b      	beq.n	80052c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525c:	f000 80f3 	beq.w	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00f      	beq.n	800528c <HAL_I2C_EV_IRQHandler+0x11c>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	0a9b      	lsrs	r3, r3, #10
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <HAL_I2C_EV_IRQHandler+0x11c>
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d103      	bne.n	800528c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9f1 	bl	800566c <I2C_MasterTransmit_TXE>
 800528a:	e04d      	b.n	8005328 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80d6 	beq.w	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	0a5b      	lsrs	r3, r3, #9
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80cf 	beq.w	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	2b21      	cmp	r3, #33	; 0x21
 80052ac:	d103      	bne.n	80052b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa78 	bl	80057a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052b4:	e0c7      	b.n	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
 80052b8:	2b40      	cmp	r3, #64	; 0x40
 80052ba:	f040 80c4 	bne.w	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fae6 	bl	8005890 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c4:	e0bf      	b.n	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d4:	f000 80b7 	beq.w	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <HAL_I2C_EV_IRQHandler+0x194>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	0a9b      	lsrs	r3, r3, #10
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d009      	beq.n	8005304 <HAL_I2C_EV_IRQHandler+0x194>
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fb5b 	bl	80059b8 <I2C_MasterReceive_RXNE>
 8005302:	e011      	b.n	8005328 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 809a 	beq.w	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	0a5b      	lsrs	r3, r3, #9
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8093 	beq.w	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fbfa 	bl	8005b1a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005326:	e08e      	b.n	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005328:	e08d      	b.n	8005446 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e007      	b.n	800534c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d012      	beq.n	800537e <HAL_I2C_EV_IRQHandler+0x20e>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	0a5b      	lsrs	r3, r3, #9
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00c      	beq.n	800537e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005374:	69b9      	ldr	r1, [r7, #24]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 ffbe 	bl	80062f8 <I2C_Slave_ADDR>
 800537c:	e066      	b.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_I2C_EV_IRQHandler+0x22e>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	0a5b      	lsrs	r3, r3, #9
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fff8 	bl	800638c <I2C_Slave_STOPF>
 800539c:	e056      	b.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	2b21      	cmp	r3, #33	; 0x21
 80053a2:	d002      	beq.n	80053aa <HAL_I2C_EV_IRQHandler+0x23a>
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	2b29      	cmp	r3, #41	; 0x29
 80053a8:	d125      	bne.n	80053f6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	09db      	lsrs	r3, r3, #7
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00f      	beq.n	80053d6 <HAL_I2C_EV_IRQHandler+0x266>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	0a9b      	lsrs	r3, r3, #10
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d009      	beq.n	80053d6 <HAL_I2C_EV_IRQHandler+0x266>
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fed6 	bl	8006180 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053d4:	e039      	b.n	800544a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	089b      	lsrs	r3, r3, #2
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d033      	beq.n	800544a <HAL_I2C_EV_IRQHandler+0x2da>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	0a5b      	lsrs	r3, r3, #9
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02d      	beq.n	800544a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 ff03 	bl	80061fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053f4:	e029      	b.n	800544a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	099b      	lsrs	r3, r3, #6
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00f      	beq.n	8005422 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	0a9b      	lsrs	r3, r3, #10
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_I2C_EV_IRQHandler+0x2b2>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 ff0d 	bl	800623a <I2C_SlaveReceive_RXNE>
 8005420:	e014      	b.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00e      	beq.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	0a5b      	lsrs	r3, r3, #9
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 ff3b 	bl	80062b6 <I2C_SlaveReceive_BTF>
 8005440:	e004      	b.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005442:	bf00      	nop
 8005444:	e002      	b.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800544a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b08a      	sub	sp, #40	; 0x28
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800546a:	2300      	movs	r3, #0
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005474:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_I2C_ER_IRQHandler+0x5e>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800549e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ae:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	0a5b      	lsrs	r3, r3, #9
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00e      	beq.n	80054da <HAL_I2C_ER_IRQHandler+0x88>
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f043 0302 	orr.w	r3, r3, #2
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80054d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	0a9b      	lsrs	r3, r3, #10
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d03f      	beq.n	8005566 <HAL_I2C_ER_IRQHandler+0x114>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d039      	beq.n	8005566 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80054f2:	7efb      	ldrb	r3, [r7, #27]
 80054f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800550c:	7ebb      	ldrb	r3, [r7, #26]
 800550e:	2b20      	cmp	r3, #32
 8005510:	d112      	bne.n	8005538 <HAL_I2C_ER_IRQHandler+0xe6>
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <HAL_I2C_ER_IRQHandler+0xe6>
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	2b21      	cmp	r3, #33	; 0x21
 800551c:	d008      	beq.n	8005530 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b29      	cmp	r3, #41	; 0x29
 8005522:	d005      	beq.n	8005530 <HAL_I2C_ER_IRQHandler+0xde>
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	2b28      	cmp	r3, #40	; 0x28
 8005528:	d106      	bne.n	8005538 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b21      	cmp	r3, #33	; 0x21
 800552e:	d103      	bne.n	8005538 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 f85b 	bl	80065ec <I2C_Slave_AF>
 8005536:	e016      	b.n	8005566 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005540:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	f043 0304 	orr.w	r3, r3, #4
 8005548:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800554a:	7efb      	ldrb	r3, [r7, #27]
 800554c:	2b10      	cmp	r3, #16
 800554e:	d002      	beq.n	8005556 <HAL_I2C_ER_IRQHandler+0x104>
 8005550:	7efb      	ldrb	r3, [r7, #27]
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d107      	bne.n	8005566 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	0adb      	lsrs	r3, r3, #11
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <HAL_I2C_ER_IRQHandler+0x13e>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	f043 0308 	orr.w	r3, r3, #8
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800558e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 f892 	bl	80066cc <I2C_ITError>
  }
}
 80055a8:	bf00      	nop
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr

080055f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	70fb      	strb	r3, [r7, #3]
 8005604:	4613      	mov	r3, r2
 8005606:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr

08005612 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	bc80      	pop	{r7}
 8005622:	4770      	bx	lr

08005624 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr

0800565a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005682:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d150      	bne.n	8005734 <I2C_MasterTransmit_TXE+0xc8>
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b21      	cmp	r3, #33	; 0x21
 8005696:	d14d      	bne.n	8005734 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b08      	cmp	r3, #8
 800569c:	d01d      	beq.n	80056da <I2C_MasterTransmit_TXE+0x6e>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d01a      	beq.n	80056da <I2C_MasterTransmit_TXE+0x6e>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056aa:	d016      	beq.n	80056da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2211      	movs	r2, #17
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff ff6c 	bl	80055b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056d8:	e060      	b.n	800579c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d107      	bne.n	8005724 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff ff81 	bl	8005624 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005722:	e03b      	b.n	800579c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ff3f 	bl	80055b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005732:	e033      	b.n	800579c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b21      	cmp	r3, #33	; 0x21
 8005738:	d005      	beq.n	8005746 <I2C_MasterTransmit_TXE+0xda>
 800573a:	7bbb      	ldrb	r3, [r7, #14]
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d12d      	bne.n	800579c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b22      	cmp	r3, #34	; 0x22
 8005744:	d12a      	bne.n	800579c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d108      	bne.n	8005762 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005760:	e01c      	b.n	800579c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d103      	bne.n	8005776 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f88e 	bl	8005890 <I2C_MemoryTransmit_TXE_BTF>
}
 8005774:	e012      	b.n	800579c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800579a:	e7ff      	b.n	800579c <I2C_MasterTransmit_TXE+0x130>
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b21      	cmp	r3, #33	; 0x21
 80057bc:	d164      	bne.n	8005888 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80057ec:	e04c      	b.n	8005888 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d01d      	beq.n	8005830 <I2C_MasterTransmit_BTF+0x8c>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d01a      	beq.n	8005830 <I2C_MasterTransmit_BTF+0x8c>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005800:	d016      	beq.n	8005830 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005810:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2211      	movs	r2, #17
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff fec1 	bl	80055b0 <HAL_I2C_MasterTxCpltCallback>
}
 800582e:	e02b      	b.n	8005888 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800583e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	d107      	bne.n	800587a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fed6 	bl	8005624 <HAL_I2C_MemTxCpltCallback>
}
 8005878:	e006      	b.n	8005888 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fe94 	bl	80055b0 <HAL_I2C_MasterTxCpltCallback>
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11d      	bne.n	80058e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10b      	bne.n	80058c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c0:	1c9a      	adds	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80058c6:	e073      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	121b      	asrs	r3, r3, #8
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058e2:	e065      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d10b      	bne.n	8005904 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005902:	e055      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	2b02      	cmp	r3, #2
 800590a:	d151      	bne.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b22      	cmp	r3, #34	; 0x22
 8005910:	d10d      	bne.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005920:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800592c:	e040      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d015      	beq.n	8005964 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b21      	cmp	r3, #33	; 0x21
 800593c:	d112      	bne.n	8005964 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005962:	e025      	b.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d120      	bne.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	2b21      	cmp	r3, #33	; 0x21
 8005972:	d11d      	bne.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005982:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fe3a 	bl	8005624 <HAL_I2C_MemTxCpltCallback>
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b22      	cmp	r3, #34	; 0x22
 80059ca:	f040 80a2 	bne.w	8005b12 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d921      	bls.n	8005a20 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	f040 8082 	bne.w	8005b12 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005a1e:	e078      	b.n	8005b12 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d074      	beq.n	8005b12 <I2C_MasterReceive_RXNE+0x15a>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d002      	beq.n	8005a34 <I2C_MasterReceive_RXNE+0x7c>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d16e      	bne.n	8005b12 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f001 faf9 	bl	800702c <I2C_WaitOnSTOPRequestThroughIT>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d142      	bne.n	8005ac6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b40      	cmp	r3, #64	; 0x40
 8005a98:	d10a      	bne.n	8005ab0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff fdc4 	bl	8005636 <HAL_I2C_MemRxCpltCallback>
}
 8005aae:	e030      	b.n	8005b12 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2212      	movs	r2, #18
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fd7f 	bl	80055c2 <HAL_I2C_MasterRxCpltCallback>
}
 8005ac4:	e025      	b.n	8005b12 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ad4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fd9b 	bl	8005648 <HAL_I2C_ErrorCallback>
}
 8005b12:	bf00      	nop
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d11b      	bne.n	8005b6a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b40:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005b68:	e0bd      	b.n	8005ce6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d129      	bne.n	8005bc8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b82:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d00a      	beq.n	8005ba0 <I2C_MasterReceive_BTF+0x86>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d007      	beq.n	8005ba0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005bc6:	e08e      	b.n	8005ce6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d176      	bne.n	8005cc0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d002      	beq.n	8005bde <I2C_MasterReceive_BTF+0xc4>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d108      	bne.n	8005bf0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e019      	b.n	8005c24 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d002      	beq.n	8005bfc <I2C_MasterReceive_BTF+0xe2>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d108      	bne.n	8005c0e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e00a      	b.n	8005c24 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d007      	beq.n	8005c24 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	691a      	ldr	r2, [r3, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d10a      	bne.n	8005caa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff fcc7 	bl	8005636 <HAL_I2C_MemRxCpltCallback>
}
 8005ca8:	e01d      	b.n	8005ce6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2212      	movs	r2, #18
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff fc82 	bl	80055c2 <HAL_I2C_MasterRxCpltCallback>
}
 8005cbe:	e012      	b.n	8005ce6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d117      	bne.n	8005d32 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d1a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d1c:	e067      	b.n	8005dee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	611a      	str	r2, [r3, #16]
}
 8005d30:	e05d      	b.n	8005dee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d3a:	d133      	bne.n	8005da4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b21      	cmp	r3, #33	; 0x21
 8005d46:	d109      	bne.n	8005d5c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d58:	611a      	str	r2, [r3, #16]
 8005d5a:	e008      	b.n	8005d6e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <I2C_Master_SB+0x92>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d108      	bne.n	8005d92 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d032      	beq.n	8005dee <I2C_Master_SB+0x100>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02d      	beq.n	8005dee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da0:	605a      	str	r2, [r3, #4]
}
 8005da2:	e024      	b.n	8005dee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10e      	bne.n	8005dca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	11db      	asrs	r3, r3, #7
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 0306 	and.w	r3, r3, #6
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f063 030f 	orn	r3, r3, #15
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	611a      	str	r2, [r3, #16]
}
 8005dc8:	e011      	b.n	8005dee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d10d      	bne.n	8005dee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	11db      	asrs	r3, r3, #7
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f003 0306 	and.w	r3, r3, #6
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f063 030e 	orn	r3, r3, #14
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	611a      	str	r2, [r3, #16]
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr

08005df8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <I2C_Master_ADD10+0x26>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d108      	bne.n	8005e30 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <I2C_Master_ADD10+0x48>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e3e:	605a      	str	r2, [r3, #4]
  }
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b091      	sub	sp, #68	; 0x44
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b22      	cmp	r3, #34	; 0x22
 8005e72:	f040 8174 	bne.w	800615e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10f      	bne.n	8005e9e <I2C_Master_ADDR+0x54>
 8005e7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d10b      	bne.n	8005e9e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e86:	2300      	movs	r3, #0
 8005e88:	633b      	str	r3, [r7, #48]	; 0x30
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	633b      	str	r3, [r7, #48]	; 0x30
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	e16b      	b.n	8006176 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d11d      	bne.n	8005ee2 <I2C_Master_ADDR+0x98>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eae:	d118      	bne.n	8005ee2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	651a      	str	r2, [r3, #80]	; 0x50
 8005ee0:	e149      	b.n	8006176 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eec:	2300      	movs	r3, #0
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	e120      	b.n	8006156 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	f040 808a 	bne.w	8006034 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f26:	d137      	bne.n	8005f98 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f36:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f46:	d113      	bne.n	8005f70 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f56:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	e0f2      	b.n	8006156 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f70:	2300      	movs	r3, #0
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	e0de      	b.n	8006156 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d02e      	beq.n	8005ffc <I2C_Master_ADDR+0x1b2>
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d02b      	beq.n	8005ffc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa6:	2b12      	cmp	r3, #18
 8005fa8:	d102      	bne.n	8005fb0 <I2C_Master_ADDR+0x166>
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d125      	bne.n	8005ffc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d00e      	beq.n	8005fd4 <I2C_Master_ADDR+0x18a>
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d00b      	beq.n	8005fd4 <I2C_Master_ADDR+0x18a>
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2b10      	cmp	r3, #16
 8005fc0:	d008      	beq.n	8005fd4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e007      	b.n	8005fe4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fe2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	e0ac      	b.n	8006156 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800600a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e090      	b.n	8006156 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d158      	bne.n	80060f0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	2b04      	cmp	r3, #4
 8006042:	d021      	beq.n	8006088 <I2C_Master_ADDR+0x23e>
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	2b02      	cmp	r3, #2
 8006048:	d01e      	beq.n	8006088 <I2C_Master_ADDR+0x23e>
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	2b10      	cmp	r3, #16
 800604e:	d01b      	beq.n	8006088 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e012      	b.n	80060ae <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006096:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060bc:	d14b      	bne.n	8006156 <I2C_Master_ADDR+0x30c>
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060c4:	d00b      	beq.n	80060de <I2C_Master_ADDR+0x294>
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d008      	beq.n	80060de <I2C_Master_ADDR+0x294>
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d005      	beq.n	80060de <I2C_Master_ADDR+0x294>
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d002      	beq.n	80060de <I2C_Master_ADDR+0x294>
 80060d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d13b      	bne.n	8006156 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	e032      	b.n	8006156 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060fe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610e:	d117      	bne.n	8006140 <I2C_Master_ADDR+0x2f6>
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006116:	d00b      	beq.n	8006130 <I2C_Master_ADDR+0x2e6>
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	2b01      	cmp	r3, #1
 800611c:	d008      	beq.n	8006130 <I2C_Master_ADDR+0x2e6>
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	2b08      	cmp	r3, #8
 8006122:	d005      	beq.n	8006130 <I2C_Master_ADDR+0x2e6>
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	2b10      	cmp	r3, #16
 8006128:	d002      	beq.n	8006130 <I2C_Master_ADDR+0x2e6>
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	2b20      	cmp	r3, #32
 800612e:	d107      	bne.n	8006140 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800613e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800615c:	e00b      	b.n	8006176 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]
}
 8006174:	e7ff      	b.n	8006176 <I2C_Master_ADDR+0x32c>
 8006176:	bf00      	nop
 8006178:	3744      	adds	r7, #68	; 0x44
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d02b      	beq.n	80061f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d114      	bne.n	80061f2 <I2C_SlaveTransmit_TXE+0x72>
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	2b29      	cmp	r3, #41	; 0x29
 80061cc:	d111      	bne.n	80061f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2221      	movs	r2, #33	; 0x21
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2228      	movs	r2, #40	; 0x28
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff f9f1 	bl	80055d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d011      	beq.n	8006230 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	781a      	ldrb	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr

0800623a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02c      	beq.n	80062ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d114      	bne.n	80062ae <I2C_SlaveReceive_RXNE+0x74>
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b2a      	cmp	r3, #42	; 0x2a
 8006288:	d111      	bne.n	80062ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006298:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2222      	movs	r2, #34	; 0x22
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2228      	movs	r2, #40	; 0x28
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff f99c 	bl	80055e6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d012      	beq.n	80062ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006312:	2b28      	cmp	r3, #40	; 0x28
 8006314:	d127      	bne.n	8006366 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006324:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	09db      	lsrs	r3, r3, #7
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	81bb      	strh	r3, [r7, #12]
 8006348:	e002      	b.n	8006350 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006358:	89ba      	ldrh	r2, [r7, #12]
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff f94a 	bl	80055f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006364:	e00e      	b.n	8006384 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006384:	bf00      	nop
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80063ac:	2300      	movs	r3, #0
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	60bb      	str	r3, [r7, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e8:	d172      	bne.n	80064d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b22      	cmp	r3, #34	; 0x22
 80063ee:	d002      	beq.n	80063f6 <I2C_Slave_STOPF+0x6a>
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b2a      	cmp	r3, #42	; 0x2a
 80063f4:	d135      	bne.n	8006462 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	b29a      	uxth	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f043 0204 	orr.w	r2, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006428:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	4618      	mov	r0, r3
 8006430:	f7fd fe60 	bl	80040f4 <HAL_DMA_GetState>
 8006434:	4603      	mov	r3, r0
 8006436:	2b01      	cmp	r3, #1
 8006438:	d049      	beq.n	80064ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	4a69      	ldr	r2, [pc, #420]	; (80065e4 <I2C_Slave_STOPF+0x258>)
 8006440:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	4618      	mov	r0, r3
 8006448:	f7fd fd4c 	bl	8003ee4 <HAL_DMA_Abort_IT>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d03d      	beq.n	80064ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006460:	e035      	b.n	80064ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	b29a      	uxth	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f043 0204 	orr.w	r2, r3, #4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006494:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	4618      	mov	r0, r3
 800649c:	f7fd fe2a 	bl	80040f4 <HAL_DMA_GetState>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d014      	beq.n	80064d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064aa:	4a4e      	ldr	r2, [pc, #312]	; (80065e4 <I2C_Slave_STOPF+0x258>)
 80064ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd fd16 	bl	8003ee4 <HAL_DMA_Abort_IT>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d008      	beq.n	80064d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064c8:	4610      	mov	r0, r2
 80064ca:	4798      	blx	r3
 80064cc:	e000      	b.n	80064d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d03e      	beq.n	8006558 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d112      	bne.n	800650e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d112      	bne.n	8006542 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	f043 0204 	orr.w	r2, r3, #4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8b3 	bl	80066cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006566:	e039      	b.n	80065dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b2a      	cmp	r3, #42	; 0x2a
 800656c:	d109      	bne.n	8006582 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2228      	movs	r2, #40	; 0x28
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff f832 	bl	80055e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b28      	cmp	r3, #40	; 0x28
 800658c:	d111      	bne.n	80065b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <I2C_Slave_STOPF+0x25c>)
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff f831 	bl	8005612 <HAL_I2C_ListenCpltCallback>
}
 80065b0:	e014      	b.n	80065dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	2b22      	cmp	r3, #34	; 0x22
 80065b8:	d002      	beq.n	80065c0 <I2C_Slave_STOPF+0x234>
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	2b22      	cmp	r3, #34	; 0x22
 80065be:	d10d      	bne.n	80065dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff f805 	bl	80055e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	08006c2d 	.word	0x08006c2d
 80065e8:	ffff0000 	.word	0xffff0000

080065ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d002      	beq.n	800660e <I2C_Slave_AF+0x22>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b20      	cmp	r3, #32
 800660c:	d129      	bne.n	8006662 <I2C_Slave_AF+0x76>
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b28      	cmp	r3, #40	; 0x28
 8006612:	d126      	bne.n	8006662 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a2c      	ldr	r2, [pc, #176]	; (80066c8 <I2C_Slave_AF+0xdc>)
 8006618:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006628:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006632:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006642:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2220      	movs	r2, #32
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fe ffd9 	bl	8005612 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006660:	e02e      	b.n	80066c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b21      	cmp	r3, #33	; 0x21
 8006666:	d126      	bne.n	80066b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <I2C_Slave_AF+0xdc>)
 800666c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2221      	movs	r2, #33	; 0x21
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006692:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800669c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fe ff90 	bl	80055d4 <HAL_I2C_SlaveTxCpltCallback>
}
 80066b4:	e004      	b.n	80066c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066be:	615a      	str	r2, [r3, #20]
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	ffff0000 	.word	0xffff0000

080066cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d002      	beq.n	80066f0 <I2C_ITError+0x24>
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d10a      	bne.n	8006706 <I2C_ITError+0x3a>
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b22      	cmp	r3, #34	; 0x22
 80066f4:	d107      	bne.n	8006706 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006704:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800670c:	2b28      	cmp	r3, #40	; 0x28
 800670e:	d107      	bne.n	8006720 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2228      	movs	r2, #40	; 0x28
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800671e:	e015      	b.n	800674c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800672a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672e:	d00a      	beq.n	8006746 <I2C_ITError+0x7a>
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b60      	cmp	r3, #96	; 0x60
 8006734:	d007      	beq.n	8006746 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675a:	d161      	bne.n	8006820 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800676a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006770:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006774:	2b01      	cmp	r3, #1
 8006776:	d020      	beq.n	80067ba <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677c:	4a6a      	ldr	r2, [pc, #424]	; (8006928 <I2C_ITError+0x25c>)
 800677e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	4618      	mov	r0, r3
 8006786:	f7fd fbad 	bl	8003ee4 <HAL_DMA_Abort_IT>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8089 	beq.w	80068a4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0201 	bic.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	e074      	b.n	80068a4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	4a5a      	ldr	r2, [pc, #360]	; (8006928 <I2C_ITError+0x25c>)
 80067c0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd fb8c 	bl	8003ee4 <HAL_DMA_Abort_IT>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d068      	beq.n	80068a4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d10b      	bne.n	80067f8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0201 	bic.w	r2, r2, #1
 8006806:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800681a:	4610      	mov	r0, r2
 800681c:	4798      	blx	r3
 800681e:	e041      	b.n	80068a4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b60      	cmp	r3, #96	; 0x60
 800682a:	d125      	bne.n	8006878 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	d10b      	bne.n	8006860 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691a      	ldr	r2, [r3, #16]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fe fef2 	bl	800565a <HAL_I2C_AbortCpltCallback>
 8006876:	e015      	b.n	80068a4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d10b      	bne.n	800689e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fe fed2 	bl	8005648 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10e      	bne.n	80068d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d007      	beq.n	80068e2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068e0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d113      	bne.n	800691e <I2C_ITError+0x252>
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	2b28      	cmp	r3, #40	; 0x28
 80068fa:	d110      	bne.n	800691e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a0b      	ldr	r2, [pc, #44]	; (800692c <I2C_ITError+0x260>)
 8006900:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe fe7a 	bl	8005612 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	08006c2d 	.word	0x08006c2d
 800692c:	ffff0000 	.word	0xffff0000

08006930 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	461a      	mov	r2, r3
 800693e:	4603      	mov	r3, r0
 8006940:	817b      	strh	r3, [r7, #10]
 8006942:	460b      	mov	r3, r1
 8006944:	813b      	strh	r3, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006958:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	2200      	movs	r2, #0
 8006962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fa08 	bl	8006d7c <I2C_WaitOnFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006980:	d103      	bne.n	800698a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006988:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e05f      	b.n	8006a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800698e:	897b      	ldrh	r3, [r7, #10]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800699c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	6a3a      	ldr	r2, [r7, #32]
 80069a2:	492d      	ldr	r1, [pc, #180]	; (8006a58 <I2C_RequestMemoryWrite+0x128>)
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fa40 	bl	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e04c      	b.n	8006a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b4:	2300      	movs	r3, #0
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069cc:	6a39      	ldr	r1, [r7, #32]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 faaa 	bl	8006f28 <I2C_WaitOnTXEFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00d      	beq.n	80069f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d107      	bne.n	80069f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e02b      	b.n	8006a4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d105      	bne.n	8006a08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069fc:	893b      	ldrh	r3, [r7, #8]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	611a      	str	r2, [r3, #16]
 8006a06:	e021      	b.n	8006a4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a08:	893b      	ldrh	r3, [r7, #8]
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a18:	6a39      	ldr	r1, [r7, #32]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa84 	bl	8006f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00d      	beq.n	8006a42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d107      	bne.n	8006a3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e005      	b.n	8006a4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a42:	893b      	ldrh	r3, [r7, #8]
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	00010002 	.word	0x00010002

08006a5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	4608      	mov	r0, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	817b      	strh	r3, [r7, #10]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	813b      	strh	r3, [r7, #8]
 8006a72:	4613      	mov	r3, r2
 8006a74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 f96a 	bl	8006d7c <I2C_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00d      	beq.n	8006aca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006abc:	d103      	bne.n	8006ac6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e0aa      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aca:	897b      	ldrh	r3, [r7, #10]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ad8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	4952      	ldr	r1, [pc, #328]	; (8006c28 <I2C_RequestMemoryRead+0x1cc>)
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f9a2 	bl	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e097      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b08:	6a39      	ldr	r1, [r7, #32]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fa0c 	bl	8006f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00d      	beq.n	8006b32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b04      	cmp	r3, #4
 8006b1c:	d107      	bne.n	8006b2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e076      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d105      	bne.n	8006b44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b38:	893b      	ldrh	r3, [r7, #8]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	611a      	str	r2, [r3, #16]
 8006b42:	e021      	b.n	8006b88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b44:	893b      	ldrh	r3, [r7, #8]
 8006b46:	0a1b      	lsrs	r3, r3, #8
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b54:	6a39      	ldr	r1, [r7, #32]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f9e6 	bl	8006f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00d      	beq.n	8006b7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d107      	bne.n	8006b7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e050      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b7e:	893b      	ldrh	r3, [r7, #8]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8a:	6a39      	ldr	r1, [r7, #32]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f9cb 	bl	8006f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00d      	beq.n	8006bb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d107      	bne.n	8006bb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e035      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f8d3 	bl	8006d7c <I2C_WaitOnFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bea:	d103      	bne.n	8006bf4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e013      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bf8:	897b      	ldrh	r3, [r7, #10]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	4906      	ldr	r1, [pc, #24]	; (8006c28 <I2C_RequestMemoryRead+0x1cc>)
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f90b 	bl	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	00010002 	.word	0x00010002

08006c2c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c44:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c46:	4b4b      	ldr	r3, [pc, #300]	; (8006d74 <I2C_DMAAbort+0x148>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	08db      	lsrs	r3, r3, #3
 8006c4c:	4a4a      	ldr	r2, [pc, #296]	; (8006d78 <I2C_DMAAbort+0x14c>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0a1a      	lsrs	r2, r3, #8
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	00da      	lsls	r2, r3, #3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	f043 0220 	orr.w	r2, r3, #32
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006c72:	e00a      	b.n	8006c8a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c88:	d0ea      	beq.n	8006c60 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c96:	2200      	movs	r2, #0
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ccc:	2200      	movs	r2, #0
 8006cce:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	2200      	movs	r2, #0
 8006cde:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b60      	cmp	r3, #96	; 0x60
 8006cfa:	d10e      	bne.n	8006d1a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d12:	6978      	ldr	r0, [r7, #20]
 8006d14:	f7fe fca1 	bl	800565a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d18:	e027      	b.n	8006d6a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d1a:	7cfb      	ldrb	r3, [r7, #19]
 8006d1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d20:	2b28      	cmp	r3, #40	; 0x28
 8006d22:	d117      	bne.n	8006d54 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2200      	movs	r2, #0
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2228      	movs	r2, #40	; 0x28
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d52:	e007      	b.n	8006d64 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006d64:	6978      	ldr	r0, [r7, #20]
 8006d66:	f7fe fc6f 	bl	8005648 <HAL_I2C_ErrorCallback>
}
 8006d6a:	bf00      	nop
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000098 	.word	0x20000098
 8006d78:	14f8b589 	.word	0x14f8b589

08006d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d8c:	e025      	b.n	8006dda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d94:	d021      	beq.n	8006dda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d96:	f7fc f8c7 	bl	8002f28 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d302      	bcc.n	8006dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d116      	bne.n	8006dda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	f043 0220 	orr.w	r2, r3, #32
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e023      	b.n	8006e22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	0c1b      	lsrs	r3, r3, #16
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d10d      	bne.n	8006e00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	43da      	mvns	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4013      	ands	r3, r2
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bf0c      	ite	eq
 8006df6:	2301      	moveq	r3, #1
 8006df8:	2300      	movne	r3, #0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	e00c      	b.n	8006e1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	43da      	mvns	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bf0c      	ite	eq
 8006e12:	2301      	moveq	r3, #1
 8006e14:	2300      	movne	r3, #0
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	461a      	mov	r2, r3
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d0b6      	beq.n	8006d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e38:	e051      	b.n	8006ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e48:	d123      	bne.n	8006e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	f043 0204 	orr.w	r2, r3, #4
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e046      	b.n	8006f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e98:	d021      	beq.n	8006ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9a:	f7fc f845 	bl	8002f28 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d116      	bne.n	8006ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e020      	b.n	8006f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	0c1b      	lsrs	r3, r3, #16
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10c      	bne.n	8006f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	43da      	mvns	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	e00b      	b.n	8006f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	43da      	mvns	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d18d      	bne.n	8006e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f34:	e02d      	b.n	8006f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f900 	bl	800713c <I2C_IsAcknowledgeFailed>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e02d      	b.n	8006fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f4c:	d021      	beq.n	8006f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4e:	f7fb ffeb 	bl	8002f28 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d116      	bne.n	8006f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e007      	b.n	8006fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9c:	2b80      	cmp	r3, #128	; 0x80
 8006f9e:	d1ca      	bne.n	8006f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fb6:	e02d      	b.n	8007014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f8bf 	bl	800713c <I2C_IsAcknowledgeFailed>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e02d      	b.n	8007024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fce:	d021      	beq.n	8007014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd0:	f7fb ffaa 	bl	8002f28 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d302      	bcc.n	8006fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d116      	bne.n	8007014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e007      	b.n	8007024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b04      	cmp	r3, #4
 8007020:	d1ca      	bne.n	8006fb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007038:	4b13      	ldr	r3, [pc, #76]	; (8007088 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	08db      	lsrs	r3, r3, #3
 800703e:	4a13      	ldr	r2, [pc, #76]	; (800708c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007040:	fba2 2303 	umull	r2, r3, r2, r3
 8007044:	0a1a      	lsrs	r2, r3, #8
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3b01      	subs	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d107      	bne.n	800706a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f043 0220 	orr.w	r2, r3, #32
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e008      	b.n	800707c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007078:	d0e9      	beq.n	800704e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20000098 	.word	0x20000098
 800708c:	14f8b589 	.word	0x14f8b589

08007090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800709c:	e042      	b.n	8007124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d119      	bne.n	80070e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0210 	mvn.w	r2, #16
 80070b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e029      	b.n	8007134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e0:	f7fb ff22 	bl	8002f28 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d302      	bcc.n	80070f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d116      	bne.n	8007124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f043 0220 	orr.w	r2, r3, #32
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e007      	b.n	8007134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b40      	cmp	r3, #64	; 0x40
 8007130:	d1b5      	bne.n	800709e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007152:	d11b      	bne.n	800718c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800715c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	f043 0204 	orr.w	r2, r3, #4
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr

08007198 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80071a8:	d103      	bne.n	80071b2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80071b0:	e007      	b.n	80071c2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80071ba:	d102      	bne.n	80071c2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2208      	movs	r2, #8
 80071c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr

080071cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e304      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 8087 	beq.w	80072fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071ec:	4b92      	ldr	r3, [pc, #584]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f003 030c 	and.w	r3, r3, #12
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d00c      	beq.n	8007212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80071f8:	4b8f      	ldr	r3, [pc, #572]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f003 030c 	and.w	r3, r3, #12
 8007200:	2b08      	cmp	r3, #8
 8007202:	d112      	bne.n	800722a <HAL_RCC_OscConfig+0x5e>
 8007204:	4b8c      	ldr	r3, [pc, #560]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d10b      	bne.n	800722a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007212:	4b89      	ldr	r3, [pc, #548]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d06c      	beq.n	80072f8 <HAL_RCC_OscConfig+0x12c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d168      	bne.n	80072f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e2de      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007232:	d106      	bne.n	8007242 <HAL_RCC_OscConfig+0x76>
 8007234:	4b80      	ldr	r3, [pc, #512]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a7f      	ldr	r2, [pc, #508]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800723a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	e02e      	b.n	80072a0 <HAL_RCC_OscConfig+0xd4>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10c      	bne.n	8007264 <HAL_RCC_OscConfig+0x98>
 800724a:	4b7b      	ldr	r3, [pc, #492]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a7a      	ldr	r2, [pc, #488]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	4b78      	ldr	r3, [pc, #480]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a77      	ldr	r2, [pc, #476]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800725c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	e01d      	b.n	80072a0 <HAL_RCC_OscConfig+0xd4>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800726c:	d10c      	bne.n	8007288 <HAL_RCC_OscConfig+0xbc>
 800726e:	4b72      	ldr	r3, [pc, #456]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a71      	ldr	r2, [pc, #452]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	4b6f      	ldr	r3, [pc, #444]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a6e      	ldr	r2, [pc, #440]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	e00b      	b.n	80072a0 <HAL_RCC_OscConfig+0xd4>
 8007288:	4b6b      	ldr	r3, [pc, #428]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a6a      	ldr	r2, [pc, #424]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800728e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	4b68      	ldr	r3, [pc, #416]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a67      	ldr	r2, [pc, #412]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800729a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800729e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d013      	beq.n	80072d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a8:	f7fb fe3e 	bl	8002f28 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072b0:	f7fb fe3a 	bl	8002f28 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b64      	cmp	r3, #100	; 0x64
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e292      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c2:	4b5d      	ldr	r3, [pc, #372]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0f0      	beq.n	80072b0 <HAL_RCC_OscConfig+0xe4>
 80072ce:	e014      	b.n	80072fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d0:	f7fb fe2a 	bl	8002f28 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072d8:	f7fb fe26 	bl	8002f28 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b64      	cmp	r3, #100	; 0x64
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e27e      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ea:	4b53      	ldr	r3, [pc, #332]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1f0      	bne.n	80072d8 <HAL_RCC_OscConfig+0x10c>
 80072f6:	e000      	b.n	80072fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d063      	beq.n	80073ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007306:	4b4c      	ldr	r3, [pc, #304]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f003 030c 	and.w	r3, r3, #12
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00b      	beq.n	800732a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007312:	4b49      	ldr	r3, [pc, #292]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f003 030c 	and.w	r3, r3, #12
 800731a:	2b08      	cmp	r3, #8
 800731c:	d11c      	bne.n	8007358 <HAL_RCC_OscConfig+0x18c>
 800731e:	4b46      	ldr	r3, [pc, #280]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d116      	bne.n	8007358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800732a:	4b43      	ldr	r3, [pc, #268]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <HAL_RCC_OscConfig+0x176>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d001      	beq.n	8007342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e252      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007342:	4b3d      	ldr	r3, [pc, #244]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	4939      	ldr	r1, [pc, #228]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007352:	4313      	orrs	r3, r2
 8007354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007356:	e03a      	b.n	80073ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d020      	beq.n	80073a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007360:	4b36      	ldr	r3, [pc, #216]	; (800743c <HAL_RCC_OscConfig+0x270>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007366:	f7fb fddf 	bl	8002f28 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800736e:	f7fb fddb 	bl	8002f28 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e233      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007380:	4b2d      	ldr	r3, [pc, #180]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738c:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	4927      	ldr	r1, [pc, #156]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 800739c:	4313      	orrs	r3, r2
 800739e:	600b      	str	r3, [r1, #0]
 80073a0:	e015      	b.n	80073ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073a2:	4b26      	ldr	r3, [pc, #152]	; (800743c <HAL_RCC_OscConfig+0x270>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a8:	f7fb fdbe 	bl	8002f28 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073b0:	f7fb fdba 	bl	8002f28 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e212      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073c2:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d03a      	beq.n	8007450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d019      	beq.n	8007416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <HAL_RCC_OscConfig+0x274>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073e8:	f7fb fd9e 	bl	8002f28 <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073f0:	f7fb fd9a 	bl	8002f28 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e1f2      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <HAL_RCC_OscConfig+0x26c>)
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800740e:	2001      	movs	r0, #1
 8007410:	f000 fbb6 	bl	8007b80 <RCC_Delay>
 8007414:	e01c      	b.n	8007450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007416:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <HAL_RCC_OscConfig+0x274>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741c:	f7fb fd84 	bl	8002f28 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007422:	e00f      	b.n	8007444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007424:	f7fb fd80 	bl	8002f28 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d908      	bls.n	8007444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e1d8      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
 8007436:	bf00      	nop
 8007438:	40021000 	.word	0x40021000
 800743c:	42420000 	.word	0x42420000
 8007440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007444:	4b9b      	ldr	r3, [pc, #620]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e9      	bne.n	8007424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80a6 	beq.w	80075aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800745e:	2300      	movs	r3, #0
 8007460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007462:	4b94      	ldr	r3, [pc, #592]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10d      	bne.n	800748a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800746e:	4b91      	ldr	r3, [pc, #580]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	4a90      	ldr	r2, [pc, #576]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007478:	61d3      	str	r3, [r2, #28]
 800747a:	4b8e      	ldr	r3, [pc, #568]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007482:	60bb      	str	r3, [r7, #8]
 8007484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800748a:	4b8b      	ldr	r3, [pc, #556]	; (80076b8 <HAL_RCC_OscConfig+0x4ec>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007492:	2b00      	cmp	r3, #0
 8007494:	d118      	bne.n	80074c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007496:	4b88      	ldr	r3, [pc, #544]	; (80076b8 <HAL_RCC_OscConfig+0x4ec>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a87      	ldr	r2, [pc, #540]	; (80076b8 <HAL_RCC_OscConfig+0x4ec>)
 800749c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074a2:	f7fb fd41 	bl	8002f28 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074aa:	f7fb fd3d 	bl	8002f28 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b64      	cmp	r3, #100	; 0x64
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e195      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074bc:	4b7e      	ldr	r3, [pc, #504]	; (80076b8 <HAL_RCC_OscConfig+0x4ec>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d106      	bne.n	80074de <HAL_RCC_OscConfig+0x312>
 80074d0:	4b78      	ldr	r3, [pc, #480]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	4a77      	ldr	r2, [pc, #476]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80074d6:	f043 0301 	orr.w	r3, r3, #1
 80074da:	6213      	str	r3, [r2, #32]
 80074dc:	e02d      	b.n	800753a <HAL_RCC_OscConfig+0x36e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x334>
 80074e6:	4b73      	ldr	r3, [pc, #460]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	4a72      	ldr	r2, [pc, #456]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	6213      	str	r3, [r2, #32]
 80074f2:	4b70      	ldr	r3, [pc, #448]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	4a6f      	ldr	r2, [pc, #444]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80074f8:	f023 0304 	bic.w	r3, r3, #4
 80074fc:	6213      	str	r3, [r2, #32]
 80074fe:	e01c      	b.n	800753a <HAL_RCC_OscConfig+0x36e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b05      	cmp	r3, #5
 8007506:	d10c      	bne.n	8007522 <HAL_RCC_OscConfig+0x356>
 8007508:	4b6a      	ldr	r3, [pc, #424]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	4a69      	ldr	r2, [pc, #420]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800750e:	f043 0304 	orr.w	r3, r3, #4
 8007512:	6213      	str	r3, [r2, #32]
 8007514:	4b67      	ldr	r3, [pc, #412]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	4a66      	ldr	r2, [pc, #408]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	6213      	str	r3, [r2, #32]
 8007520:	e00b      	b.n	800753a <HAL_RCC_OscConfig+0x36e>
 8007522:	4b64      	ldr	r3, [pc, #400]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	4a63      	ldr	r2, [pc, #396]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	6213      	str	r3, [r2, #32]
 800752e:	4b61      	ldr	r3, [pc, #388]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	4a60      	ldr	r2, [pc, #384]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007534:	f023 0304 	bic.w	r3, r3, #4
 8007538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d015      	beq.n	800756e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007542:	f7fb fcf1 	bl	8002f28 <HAL_GetTick>
 8007546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007548:	e00a      	b.n	8007560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800754a:	f7fb fced 	bl	8002f28 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f241 3288 	movw	r2, #5000	; 0x1388
 8007558:	4293      	cmp	r3, r2
 800755a:	d901      	bls.n	8007560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e143      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007560:	4b54      	ldr	r3, [pc, #336]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0ee      	beq.n	800754a <HAL_RCC_OscConfig+0x37e>
 800756c:	e014      	b.n	8007598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800756e:	f7fb fcdb 	bl	8002f28 <HAL_GetTick>
 8007572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007574:	e00a      	b.n	800758c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007576:	f7fb fcd7 	bl	8002f28 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	f241 3288 	movw	r2, #5000	; 0x1388
 8007584:	4293      	cmp	r3, r2
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e12d      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800758c:	4b49      	ldr	r3, [pc, #292]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1ee      	bne.n	8007576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d105      	bne.n	80075aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800759e:	4b45      	ldr	r3, [pc, #276]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	4a44      	ldr	r2, [pc, #272]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80075a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 808c 	beq.w	80076cc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80075b4:	4b3f      	ldr	r3, [pc, #252]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c0:	d10e      	bne.n	80075e0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80075c2:	4b3c      	ldr	r3, [pc, #240]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d108      	bne.n	80075e0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80075ce:	4b39      	ldr	r3, [pc, #228]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80075d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075da:	d101      	bne.n	80075e0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e103      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d14e      	bne.n	8007686 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80075e8:	4b32      	ldr	r3, [pc, #200]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d009      	beq.n	8007608 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80075f4:	4b2f      	ldr	r3, [pc, #188]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007600:	429a      	cmp	r2, r3
 8007602:	d001      	beq.n	8007608 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e0ef      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007608:	4b2c      	ldr	r3, [pc, #176]	; (80076bc <HAL_RCC_OscConfig+0x4f0>)
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800760e:	f7fb fc8b 	bl	8002f28 <HAL_GetTick>
 8007612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007614:	e008      	b.n	8007628 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007616:	f7fb fc87 	bl	8002f28 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b64      	cmp	r3, #100	; 0x64
 8007622:	d901      	bls.n	8007628 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e0df      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007628:	4b22      	ldr	r3, [pc, #136]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f0      	bne.n	8007616 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8007634:	4b1f      	ldr	r3, [pc, #124]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	491c      	ldr	r1, [pc, #112]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007642:	4313      	orrs	r3, r2
 8007644:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8007646:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	4918      	ldr	r1, [pc, #96]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007654:	4313      	orrs	r3, r2
 8007656:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8007658:	4b18      	ldr	r3, [pc, #96]	; (80076bc <HAL_RCC_OscConfig+0x4f0>)
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800765e:	f7fb fc63 	bl	8002f28 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007666:	f7fb fc5f 	bl	8002f28 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b64      	cmp	r3, #100	; 0x64
 8007672:	d901      	bls.n	8007678 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e0b7      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f0      	beq.n	8007666 <HAL_RCC_OscConfig+0x49a>
 8007684:	e022      	b.n	80076cc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	4a0a      	ldr	r2, [pc, #40]	; (80076b4 <HAL_RCC_OscConfig+0x4e8>)
 800768c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007690:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007692:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <HAL_RCC_OscConfig+0x4f0>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007698:	f7fb fc46 	bl	8002f28 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800769e:	e00f      	b.n	80076c0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076a0:	f7fb fc42 	bl	8002f28 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b64      	cmp	r3, #100	; 0x64
 80076ac:	d908      	bls.n	80076c0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e09a      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
 80076b2:	bf00      	nop
 80076b4:	40021000 	.word	0x40021000
 80076b8:	40007000 	.word	0x40007000
 80076bc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80076c0:	4b4b      	ldr	r3, [pc, #300]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e9      	bne.n	80076a0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8088 	beq.w	80077e6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076d6:	4b46      	ldr	r3, [pc, #280]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f003 030c 	and.w	r3, r3, #12
 80076de:	2b08      	cmp	r3, #8
 80076e0:	d068      	beq.n	80077b4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d14d      	bne.n	8007786 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ea:	4b42      	ldr	r3, [pc, #264]	; (80077f4 <HAL_RCC_OscConfig+0x628>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f0:	f7fb fc1a 	bl	8002f28 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f8:	f7fb fc16 	bl	8002f28 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e06e      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800770a:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f0      	bne.n	80076f8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800771e:	d10f      	bne.n	8007740 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007720:	4b33      	ldr	r3, [pc, #204]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4931      	ldr	r1, [pc, #196]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 800772a:	4313      	orrs	r3, r2
 800772c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800772e:	4b30      	ldr	r3, [pc, #192]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	f023 020f 	bic.w	r2, r3, #15
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	492d      	ldr	r1, [pc, #180]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 800773c:	4313      	orrs	r3, r2
 800773e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007740:	4b2b      	ldr	r3, [pc, #172]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	430b      	orrs	r3, r1
 8007752:	4927      	ldr	r1, [pc, #156]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 8007754:	4313      	orrs	r3, r2
 8007756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007758:	4b26      	ldr	r3, [pc, #152]	; (80077f4 <HAL_RCC_OscConfig+0x628>)
 800775a:	2201      	movs	r2, #1
 800775c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800775e:	f7fb fbe3 	bl	8002f28 <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007766:	f7fb fbdf 	bl	8002f28 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e037      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007778:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0f0      	beq.n	8007766 <HAL_RCC_OscConfig+0x59a>
 8007784:	e02f      	b.n	80077e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007786:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <HAL_RCC_OscConfig+0x628>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778c:	f7fb fbcc 	bl	8002f28 <HAL_GetTick>
 8007790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007794:	f7fb fbc8 	bl	8002f28 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e020      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077a6:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f0      	bne.n	8007794 <HAL_RCC_OscConfig+0x5c8>
 80077b2:	e018      	b.n	80077e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e013      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <HAL_RCC_OscConfig+0x624>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d106      	bne.n	80077e2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077de:	429a      	cmp	r2, r3
 80077e0:	d001      	beq.n	80077e6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40021000 	.word	0x40021000
 80077f4:	42420060 	.word	0x42420060

080077f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0d0      	b.n	80079ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800780c:	4b6a      	ldr	r3, [pc, #424]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d910      	bls.n	800783c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800781a:	4b67      	ldr	r3, [pc, #412]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f023 0207 	bic.w	r2, r3, #7
 8007822:	4965      	ldr	r1, [pc, #404]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	4313      	orrs	r3, r2
 8007828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800782a:	4b63      	ldr	r3, [pc, #396]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d001      	beq.n	800783c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e0b8      	b.n	80079ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d020      	beq.n	800788a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007854:	4b59      	ldr	r3, [pc, #356]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4a58      	ldr	r2, [pc, #352]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 800785a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800785e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800786c:	4b53      	ldr	r3, [pc, #332]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	4a52      	ldr	r2, [pc, #328]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007872:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007878:	4b50      	ldr	r3, [pc, #320]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	494d      	ldr	r1, [pc, #308]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007886:	4313      	orrs	r3, r2
 8007888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d040      	beq.n	8007918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d107      	bne.n	80078ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800789e:	4b47      	ldr	r3, [pc, #284]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d115      	bne.n	80078d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e07f      	b.n	80079ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d107      	bne.n	80078c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078b6:	4b41      	ldr	r3, [pc, #260]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e073      	b.n	80079ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c6:	4b3d      	ldr	r3, [pc, #244]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e06b      	b.n	80079ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078d6:	4b39      	ldr	r3, [pc, #228]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f023 0203 	bic.w	r2, r3, #3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	4936      	ldr	r1, [pc, #216]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078e8:	f7fb fb1e 	bl	8002f28 <HAL_GetTick>
 80078ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ee:	e00a      	b.n	8007906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078f0:	f7fb fb1a 	bl	8002f28 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fe:	4293      	cmp	r3, r2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e053      	b.n	80079ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007906:	4b2d      	ldr	r3, [pc, #180]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f003 020c 	and.w	r2, r3, #12
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	429a      	cmp	r2, r3
 8007916:	d1eb      	bne.n	80078f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007918:	4b27      	ldr	r3, [pc, #156]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0307 	and.w	r3, r3, #7
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d210      	bcs.n	8007948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007926:	4b24      	ldr	r3, [pc, #144]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f023 0207 	bic.w	r2, r3, #7
 800792e:	4922      	ldr	r1, [pc, #136]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	4313      	orrs	r3, r2
 8007934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007936:	4b20      	ldr	r3, [pc, #128]	; (80079b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d001      	beq.n	8007948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e032      	b.n	80079ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d008      	beq.n	8007966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007954:	4b19      	ldr	r3, [pc, #100]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	4916      	ldr	r1, [pc, #88]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007962:	4313      	orrs	r3, r2
 8007964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	490e      	ldr	r1, [pc, #56]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 8007982:	4313      	orrs	r3, r2
 8007984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007986:	f000 f821 	bl	80079cc <HAL_RCC_GetSysClockFreq>
 800798a:	4602      	mov	r2, r0
 800798c:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <HAL_RCC_ClockConfig+0x1c4>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	091b      	lsrs	r3, r3, #4
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	490a      	ldr	r1, [pc, #40]	; (80079c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007998:	5ccb      	ldrb	r3, [r1, r3]
 800799a:	fa22 f303 	lsr.w	r3, r2, r3
 800799e:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <HAL_RCC_ClockConfig+0x1cc>)
 80079a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80079a2:	4b09      	ldr	r3, [pc, #36]	; (80079c8 <HAL_RCC_ClockConfig+0x1d0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fb fa7c 	bl	8002ea4 <HAL_InitTick>

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	40022000 	.word	0x40022000
 80079bc:	40021000 	.word	0x40021000
 80079c0:	080082d0 	.word	0x080082d0
 80079c4:	20000098 	.word	0x20000098
 80079c8:	2000009c 	.word	0x2000009c

080079cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ce:	b091      	sub	sp, #68	; 0x44
 80079d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80079d2:	4b56      	ldr	r3, [pc, #344]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x160>)
 80079d4:	f107 0414 	add.w	r4, r7, #20
 80079d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079da:	c407      	stmia	r4!, {r0, r1, r2}
 80079dc:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80079de:	4b54      	ldr	r3, [pc, #336]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x164>)
 80079e0:	1d3c      	adds	r4, r7, #4
 80079e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
 80079ec:	2300      	movs	r3, #0
 80079ee:	633b      	str	r3, [r7, #48]	; 0x30
 80079f0:	2300      	movs	r3, #0
 80079f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f4:	2300      	movs	r3, #0
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a00:	2300      	movs	r3, #0
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007a04:	4b4b      	ldr	r3, [pc, #300]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	f003 030c 	and.w	r3, r3, #12
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	d002      	beq.n	8007a1a <HAL_RCC_GetSysClockFreq+0x4e>
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d003      	beq.n	8007a20 <HAL_RCC_GetSysClockFreq+0x54>
 8007a18:	e080      	b.n	8007b1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a1a:	4b47      	ldr	r3, [pc, #284]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007a1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a1e:	e080      	b.n	8007b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a22:	0c9b      	lsrs	r3, r3, #18
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d066      	beq.n	8007b0c <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007a3e:	4b3d      	ldr	r3, [pc, #244]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007a50:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007a52:	4b38      	ldr	r3, [pc, #224]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d044      	beq.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007a5e:	4b35      	ldr	r3, [pc, #212]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	091b      	lsrs	r3, r3, #4
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	3301      	adds	r3, #1
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007a6c:	4b31      	ldr	r3, [pc, #196]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x168>)
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	0a1b      	lsrs	r3, r3, #8
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	3302      	adds	r3, #2
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	461a      	mov	r2, r3
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	fb02 f501 	mul.w	r5, r2, r1
 8007a8e:	fb00 f403 	mul.w	r4, r0, r3
 8007a92:	442c      	add	r4, r5
 8007a94:	fba0 2302 	umull	r2, r3, r0, r2
 8007a98:	18e1      	adds	r1, r4, r3
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4926      	ldr	r1, [pc, #152]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007a9e:	fb01 f003 	mul.w	r0, r1, r3
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	fb01 f102 	mul.w	r1, r1, r2
 8007aa8:	4401      	add	r1, r0
 8007aaa:	4823      	ldr	r0, [pc, #140]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007aac:	fba2 4500 	umull	r4, r5, r2, r0
 8007ab0:	194b      	adds	r3, r1, r5
 8007ab2:	461d      	mov	r5, r3
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	fb02 fc01 	mul.w	ip, r2, r1
 8007ac8:	fb00 f603 	mul.w	r6, r0, r3
 8007acc:	4466      	add	r6, ip
 8007ace:	fba0 2302 	umull	r2, r3, r0, r2
 8007ad2:	18f1      	adds	r1, r6, r3
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f9 fa97 	bl	800100c <__aeabi_uldivmod>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae6:	e007      	b.n	8007af8 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	4a13      	ldr	r2, [pc, #76]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007aec:	fb02 f203 	mul.w	r2, r2, r3
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007af8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007afc:	461a      	mov	r2, r3
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d108      	bne.n	8007b16 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8007b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b06:	085b      	lsrs	r3, r3, #1
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b0a:	e004      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	4a0b      	ldr	r2, [pc, #44]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x170>)
 8007b10:	fb02 f303 	mul.w	r3, r2, r3
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b1a:	e002      	b.n	8007b22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b1c:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x174>)
 8007b1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3744      	adds	r7, #68	; 0x44
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2c:	080082b0 	.word	0x080082b0
 8007b30:	080082c0 	.word	0x080082c0
 8007b34:	40021000 	.word	0x40021000
 8007b38:	017d7840 	.word	0x017d7840
 8007b3c:	003d0900 	.word	0x003d0900
 8007b40:	007a1200 	.word	0x007a1200

08007b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b44:	b480      	push	{r7}
 8007b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b48:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr
 8007b54:	20000098 	.word	0x20000098

08007b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b5c:	f7ff fff2 	bl	8007b44 <HAL_RCC_GetHCLKFreq>
 8007b60:	4602      	mov	r2, r0
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	4903      	ldr	r1, [pc, #12]	; (8007b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b6e:	5ccb      	ldrb	r3, [r1, r3]
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	080082e0 	.word	0x080082e0

08007b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007b88:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <RCC_Delay+0x34>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a0a      	ldr	r2, [pc, #40]	; (8007bb8 <RCC_Delay+0x38>)
 8007b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b92:	0a5b      	lsrs	r3, r3, #9
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b9c:	bf00      	nop
  }
  while (Delay --);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1e5a      	subs	r2, r3, #1
 8007ba2:	60fa      	str	r2, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1f9      	bne.n	8007b9c <RCC_Delay+0x1c>
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr
 8007bb4:	20000098 	.word	0x20000098
 8007bb8:	10624dd3 	.word	0x10624dd3

08007bbc <__errno>:
 8007bbc:	4b01      	ldr	r3, [pc, #4]	; (8007bc4 <__errno+0x8>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	200000a4 	.word	0x200000a4

08007bc8 <__libc_init_array>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	2600      	movs	r6, #0
 8007bcc:	4d0c      	ldr	r5, [pc, #48]	; (8007c00 <__libc_init_array+0x38>)
 8007bce:	4c0d      	ldr	r4, [pc, #52]	; (8007c04 <__libc_init_array+0x3c>)
 8007bd0:	1b64      	subs	r4, r4, r5
 8007bd2:	10a4      	asrs	r4, r4, #2
 8007bd4:	42a6      	cmp	r6, r4
 8007bd6:	d109      	bne.n	8007bec <__libc_init_array+0x24>
 8007bd8:	f000 fb5c 	bl	8008294 <_init>
 8007bdc:	2600      	movs	r6, #0
 8007bde:	4d0a      	ldr	r5, [pc, #40]	; (8007c08 <__libc_init_array+0x40>)
 8007be0:	4c0a      	ldr	r4, [pc, #40]	; (8007c0c <__libc_init_array+0x44>)
 8007be2:	1b64      	subs	r4, r4, r5
 8007be4:	10a4      	asrs	r4, r4, #2
 8007be6:	42a6      	cmp	r6, r4
 8007be8:	d105      	bne.n	8007bf6 <__libc_init_array+0x2e>
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf0:	4798      	blx	r3
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	e7ee      	b.n	8007bd4 <__libc_init_array+0xc>
 8007bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfa:	4798      	blx	r3
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	e7f2      	b.n	8007be6 <__libc_init_array+0x1e>
 8007c00:	08008360 	.word	0x08008360
 8007c04:	08008360 	.word	0x08008360
 8007c08:	08008360 	.word	0x08008360
 8007c0c:	08008364 	.word	0x08008364

08007c10 <memset>:
 8007c10:	4603      	mov	r3, r0
 8007c12:	4402      	add	r2, r0
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d100      	bne.n	8007c1a <memset+0xa>
 8007c18:	4770      	bx	lr
 8007c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1e:	e7f9      	b.n	8007c14 <memset+0x4>

08007c20 <atan>:
 8007c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4bb6      	ldr	r3, [pc, #728]	; (8007f00 <atan+0x2e0>)
 8007c26:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007c2a:	429e      	cmp	r6, r3
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	468b      	mov	fp, r1
 8007c32:	dd17      	ble.n	8007c64 <atan+0x44>
 8007c34:	4bb3      	ldr	r3, [pc, #716]	; (8007f04 <atan+0x2e4>)
 8007c36:	429e      	cmp	r6, r3
 8007c38:	dc01      	bgt.n	8007c3e <atan+0x1e>
 8007c3a:	d109      	bne.n	8007c50 <atan+0x30>
 8007c3c:	b140      	cbz	r0, 8007c50 <atan+0x30>
 8007c3e:	4622      	mov	r2, r4
 8007c40:	462b      	mov	r3, r5
 8007c42:	4620      	mov	r0, r4
 8007c44:	4629      	mov	r1, r5
 8007c46:	f7f8 faf5 	bl	8000234 <__adddf3>
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	460d      	mov	r5, r1
 8007c4e:	e005      	b.n	8007c5c <atan+0x3c>
 8007c50:	f1bb 0f00 	cmp.w	fp, #0
 8007c54:	4cac      	ldr	r4, [pc, #688]	; (8007f08 <atan+0x2e8>)
 8007c56:	f300 8121 	bgt.w	8007e9c <atan+0x27c>
 8007c5a:	4dac      	ldr	r5, [pc, #688]	; (8007f0c <atan+0x2ec>)
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	4629      	mov	r1, r5
 8007c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	4baa      	ldr	r3, [pc, #680]	; (8007f10 <atan+0x2f0>)
 8007c66:	429e      	cmp	r6, r3
 8007c68:	dc11      	bgt.n	8007c8e <atan+0x6e>
 8007c6a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007c6e:	429e      	cmp	r6, r3
 8007c70:	dc0a      	bgt.n	8007c88 <atan+0x68>
 8007c72:	a38b      	add	r3, pc, #556	; (adr r3, 8007ea0 <atan+0x280>)
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f7f8 fadc 	bl	8000234 <__adddf3>
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	4ba5      	ldr	r3, [pc, #660]	; (8007f14 <atan+0x2f4>)
 8007c80:	f7f8 ff1e 	bl	8000ac0 <__aeabi_dcmpgt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d1e9      	bne.n	8007c5c <atan+0x3c>
 8007c88:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c8c:	e027      	b.n	8007cde <atan+0xbe>
 8007c8e:	f000 f951 	bl	8007f34 <fabs>
 8007c92:	4ba1      	ldr	r3, [pc, #644]	; (8007f18 <atan+0x2f8>)
 8007c94:	4604      	mov	r4, r0
 8007c96:	429e      	cmp	r6, r3
 8007c98:	460d      	mov	r5, r1
 8007c9a:	f300 80b8 	bgt.w	8007e0e <atan+0x1ee>
 8007c9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007ca2:	429e      	cmp	r6, r3
 8007ca4:	f300 809c 	bgt.w	8007de0 <atan+0x1c0>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	f7f8 fac2 	bl	8000234 <__adddf3>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4b98      	ldr	r3, [pc, #608]	; (8007f14 <atan+0x2f4>)
 8007cb4:	f7f8 fabc 	bl	8000230 <__aeabi_dsub>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	f7f8 fab5 	bl	8000234 <__adddf3>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 fd8f 	bl	80007f4 <__aeabi_ddiv>
 8007cd6:	f04f 0a00 	mov.w	sl, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	460d      	mov	r5, r1
 8007cde:	4622      	mov	r2, r4
 8007ce0:	462b      	mov	r3, r5
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 fc5b 	bl	80005a0 <__aeabi_dmul>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4689      	mov	r9, r1
 8007cf2:	f7f8 fc55 	bl	80005a0 <__aeabi_dmul>
 8007cf6:	a36c      	add	r3, pc, #432	; (adr r3, 8007ea8 <atan+0x288>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	460f      	mov	r7, r1
 8007d00:	f7f8 fc4e 	bl	80005a0 <__aeabi_dmul>
 8007d04:	a36a      	add	r3, pc, #424	; (adr r3, 8007eb0 <atan+0x290>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f7f8 fa93 	bl	8000234 <__adddf3>
 8007d0e:	4632      	mov	r2, r6
 8007d10:	463b      	mov	r3, r7
 8007d12:	f7f8 fc45 	bl	80005a0 <__aeabi_dmul>
 8007d16:	a368      	add	r3, pc, #416	; (adr r3, 8007eb8 <atan+0x298>)
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f7f8 fa8a 	bl	8000234 <__adddf3>
 8007d20:	4632      	mov	r2, r6
 8007d22:	463b      	mov	r3, r7
 8007d24:	f7f8 fc3c 	bl	80005a0 <__aeabi_dmul>
 8007d28:	a365      	add	r3, pc, #404	; (adr r3, 8007ec0 <atan+0x2a0>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fa81 	bl	8000234 <__adddf3>
 8007d32:	4632      	mov	r2, r6
 8007d34:	463b      	mov	r3, r7
 8007d36:	f7f8 fc33 	bl	80005a0 <__aeabi_dmul>
 8007d3a:	a363      	add	r3, pc, #396	; (adr r3, 8007ec8 <atan+0x2a8>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fa78 	bl	8000234 <__adddf3>
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	f7f8 fc2a 	bl	80005a0 <__aeabi_dmul>
 8007d4c:	a360      	add	r3, pc, #384	; (adr r3, 8007ed0 <atan+0x2b0>)
 8007d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d52:	f7f8 fa6f 	bl	8000234 <__adddf3>
 8007d56:	4642      	mov	r2, r8
 8007d58:	464b      	mov	r3, r9
 8007d5a:	f7f8 fc21 	bl	80005a0 <__aeabi_dmul>
 8007d5e:	a35e      	add	r3, pc, #376	; (adr r3, 8007ed8 <atan+0x2b8>)
 8007d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d64:	4680      	mov	r8, r0
 8007d66:	4689      	mov	r9, r1
 8007d68:	4630      	mov	r0, r6
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	f7f8 fc18 	bl	80005a0 <__aeabi_dmul>
 8007d70:	a35b      	add	r3, pc, #364	; (adr r3, 8007ee0 <atan+0x2c0>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fa5b 	bl	8000230 <__aeabi_dsub>
 8007d7a:	4632      	mov	r2, r6
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	f7f8 fc0f 	bl	80005a0 <__aeabi_dmul>
 8007d82:	a359      	add	r3, pc, #356	; (adr r3, 8007ee8 <atan+0x2c8>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fa52 	bl	8000230 <__aeabi_dsub>
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	463b      	mov	r3, r7
 8007d90:	f7f8 fc06 	bl	80005a0 <__aeabi_dmul>
 8007d94:	a356      	add	r3, pc, #344	; (adr r3, 8007ef0 <atan+0x2d0>)
 8007d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9a:	f7f8 fa49 	bl	8000230 <__aeabi_dsub>
 8007d9e:	4632      	mov	r2, r6
 8007da0:	463b      	mov	r3, r7
 8007da2:	f7f8 fbfd 	bl	80005a0 <__aeabi_dmul>
 8007da6:	a354      	add	r3, pc, #336	; (adr r3, 8007ef8 <atan+0x2d8>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 fa40 	bl	8000230 <__aeabi_dsub>
 8007db0:	4632      	mov	r2, r6
 8007db2:	463b      	mov	r3, r7
 8007db4:	f7f8 fbf4 	bl	80005a0 <__aeabi_dmul>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	f7f8 fa38 	bl	8000234 <__adddf3>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	462b      	mov	r3, r5
 8007dc8:	f7f8 fbea 	bl	80005a0 <__aeabi_dmul>
 8007dcc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	d144      	bne.n	8007e60 <atan+0x240>
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7f8 fa29 	bl	8000230 <__aeabi_dsub>
 8007dde:	e734      	b.n	8007c4a <atan+0x2a>
 8007de0:	2200      	movs	r2, #0
 8007de2:	4b4c      	ldr	r3, [pc, #304]	; (8007f14 <atan+0x2f4>)
 8007de4:	f7f8 fa24 	bl	8000230 <__aeabi_dsub>
 8007de8:	2200      	movs	r2, #0
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	4620      	mov	r0, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	4b48      	ldr	r3, [pc, #288]	; (8007f14 <atan+0x2f4>)
 8007df4:	f7f8 fa1e 	bl	8000234 <__adddf3>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	4639      	mov	r1, r7
 8007e00:	f7f8 fcf8 	bl	80007f4 <__aeabi_ddiv>
 8007e04:	f04f 0a01 	mov.w	sl, #1
 8007e08:	4604      	mov	r4, r0
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	e767      	b.n	8007cde <atan+0xbe>
 8007e0e:	4b43      	ldr	r3, [pc, #268]	; (8007f1c <atan+0x2fc>)
 8007e10:	429e      	cmp	r6, r3
 8007e12:	da1a      	bge.n	8007e4a <atan+0x22a>
 8007e14:	2200      	movs	r2, #0
 8007e16:	4b42      	ldr	r3, [pc, #264]	; (8007f20 <atan+0x300>)
 8007e18:	f7f8 fa0a 	bl	8000230 <__aeabi_dsub>
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4606      	mov	r6, r0
 8007e20:	460f      	mov	r7, r1
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	4b3e      	ldr	r3, [pc, #248]	; (8007f20 <atan+0x300>)
 8007e28:	f7f8 fbba 	bl	80005a0 <__aeabi_dmul>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4b39      	ldr	r3, [pc, #228]	; (8007f14 <atan+0x2f4>)
 8007e30:	f7f8 fa00 	bl	8000234 <__adddf3>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4630      	mov	r0, r6
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	f7f8 fcda 	bl	80007f4 <__aeabi_ddiv>
 8007e40:	f04f 0a02 	mov.w	sl, #2
 8007e44:	4604      	mov	r4, r0
 8007e46:	460d      	mov	r5, r1
 8007e48:	e749      	b.n	8007cde <atan+0xbe>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	2000      	movs	r0, #0
 8007e50:	4934      	ldr	r1, [pc, #208]	; (8007f24 <atan+0x304>)
 8007e52:	f7f8 fccf 	bl	80007f4 <__aeabi_ddiv>
 8007e56:	f04f 0a03 	mov.w	sl, #3
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	460d      	mov	r5, r1
 8007e5e:	e73e      	b.n	8007cde <atan+0xbe>
 8007e60:	4b31      	ldr	r3, [pc, #196]	; (8007f28 <atan+0x308>)
 8007e62:	4e32      	ldr	r6, [pc, #200]	; (8007f2c <atan+0x30c>)
 8007e64:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007e68:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007e6c:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e70:	f7f8 f9de 	bl	8000230 <__aeabi_dsub>
 8007e74:	4622      	mov	r2, r4
 8007e76:	462b      	mov	r3, r5
 8007e78:	f7f8 f9da 	bl	8000230 <__aeabi_dsub>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007e84:	f7f8 f9d4 	bl	8000230 <__aeabi_dsub>
 8007e88:	f1bb 0f00 	cmp.w	fp, #0
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	460d      	mov	r5, r1
 8007e90:	f6bf aee4 	bge.w	8007c5c <atan+0x3c>
 8007e94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e98:	461d      	mov	r5, r3
 8007e9a:	e6df      	b.n	8007c5c <atan+0x3c>
 8007e9c:	4d24      	ldr	r5, [pc, #144]	; (8007f30 <atan+0x310>)
 8007e9e:	e6dd      	b.n	8007c5c <atan+0x3c>
 8007ea0:	8800759c 	.word	0x8800759c
 8007ea4:	7e37e43c 	.word	0x7e37e43c
 8007ea8:	e322da11 	.word	0xe322da11
 8007eac:	3f90ad3a 	.word	0x3f90ad3a
 8007eb0:	24760deb 	.word	0x24760deb
 8007eb4:	3fa97b4b 	.word	0x3fa97b4b
 8007eb8:	a0d03d51 	.word	0xa0d03d51
 8007ebc:	3fb10d66 	.word	0x3fb10d66
 8007ec0:	c54c206e 	.word	0xc54c206e
 8007ec4:	3fb745cd 	.word	0x3fb745cd
 8007ec8:	920083ff 	.word	0x920083ff
 8007ecc:	3fc24924 	.word	0x3fc24924
 8007ed0:	5555550d 	.word	0x5555550d
 8007ed4:	3fd55555 	.word	0x3fd55555
 8007ed8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007edc:	bfa2b444 	.word	0xbfa2b444
 8007ee0:	52defd9a 	.word	0x52defd9a
 8007ee4:	3fadde2d 	.word	0x3fadde2d
 8007ee8:	af749a6d 	.word	0xaf749a6d
 8007eec:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ef0:	fe231671 	.word	0xfe231671
 8007ef4:	3fbc71c6 	.word	0x3fbc71c6
 8007ef8:	9998ebc4 	.word	0x9998ebc4
 8007efc:	3fc99999 	.word	0x3fc99999
 8007f00:	440fffff 	.word	0x440fffff
 8007f04:	7ff00000 	.word	0x7ff00000
 8007f08:	54442d18 	.word	0x54442d18
 8007f0c:	bff921fb 	.word	0xbff921fb
 8007f10:	3fdbffff 	.word	0x3fdbffff
 8007f14:	3ff00000 	.word	0x3ff00000
 8007f18:	3ff2ffff 	.word	0x3ff2ffff
 8007f1c:	40038000 	.word	0x40038000
 8007f20:	3ff80000 	.word	0x3ff80000
 8007f24:	bff00000 	.word	0xbff00000
 8007f28:	08008308 	.word	0x08008308
 8007f2c:	080082e8 	.word	0x080082e8
 8007f30:	3ff921fb 	.word	0x3ff921fb

08007f34 <fabs>:
 8007f34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f38:	4770      	bx	lr

08007f3a <atan2>:
 8007f3a:	f000 b82d 	b.w	8007f98 <__ieee754_atan2>
	...

08007f40 <sqrt>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	4606      	mov	r6, r0
 8007f44:	460f      	mov	r7, r1
 8007f46:	f000 f8f9 	bl	800813c <__ieee754_sqrt>
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <sqrt+0x54>)
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8007f52:	460d      	mov	r5, r1
 8007f54:	3301      	adds	r3, #1
 8007f56:	d019      	beq.n	8007f8c <sqrt+0x4c>
 8007f58:	4632      	mov	r2, r6
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	4639      	mov	r1, r7
 8007f60:	f7f8 fdb8 	bl	8000ad4 <__aeabi_dcmpun>
 8007f64:	b990      	cbnz	r0, 8007f8c <sqrt+0x4c>
 8007f66:	2200      	movs	r2, #0
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fd89 	bl	8000a84 <__aeabi_dcmplt>
 8007f72:	b158      	cbz	r0, 8007f8c <sqrt+0x4c>
 8007f74:	f7ff fe22 	bl	8007bbc <__errno>
 8007f78:	2321      	movs	r3, #33	; 0x21
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4610      	mov	r0, r2
 8007f82:	4619      	mov	r1, r3
 8007f84:	f7f8 fc36 	bl	80007f4 <__aeabi_ddiv>
 8007f88:	4604      	mov	r4, r0
 8007f8a:	460d      	mov	r5, r1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000108 	.word	0x20000108

08007f98 <__ieee754_atan2>:
 8007f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	4692      	mov	sl, r2
 8007f9e:	4699      	mov	r9, r3
 8007fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fa4:	461f      	mov	r7, r3
 8007fa6:	f1ca 0300 	rsb	r3, sl, #0
 8007faa:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8008138 <__ieee754_atan2+0x1a0>
 8007fae:	ea43 030a 	orr.w	r3, r3, sl
 8007fb2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007fb6:	4573      	cmp	r3, lr
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	d808      	bhi.n	8007fd0 <__ieee754_atan2+0x38>
 8007fbe:	4246      	negs	r6, r0
 8007fc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fc4:	4306      	orrs	r6, r0
 8007fc6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007fca:	4576      	cmp	r6, lr
 8007fcc:	468c      	mov	ip, r1
 8007fce:	d908      	bls.n	8007fe2 <__ieee754_atan2+0x4a>
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 f92c 	bl	8000234 <__adddf3>
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	e019      	b.n	8008016 <__ieee754_atan2+0x7e>
 8007fe2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007fe6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007fea:	ea56 060a 	orrs.w	r6, r6, sl
 8007fee:	d103      	bne.n	8007ff8 <__ieee754_atan2+0x60>
 8007ff0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	f7ff be14 	b.w	8007c20 <atan>
 8007ff8:	17be      	asrs	r6, r7, #30
 8007ffa:	f006 0602 	and.w	r6, r6, #2
 8007ffe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008002:	ea53 0100 	orrs.w	r1, r3, r0
 8008006:	d10a      	bne.n	800801e <__ieee754_atan2+0x86>
 8008008:	2e02      	cmp	r6, #2
 800800a:	d067      	beq.n	80080dc <__ieee754_atan2+0x144>
 800800c:	2e03      	cmp	r6, #3
 800800e:	d102      	bne.n	8008016 <__ieee754_atan2+0x7e>
 8008010:	a53b      	add	r5, pc, #236	; (adr r5, 8008100 <__ieee754_atan2+0x168>)
 8008012:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008016:	4620      	mov	r0, r4
 8008018:	4629      	mov	r1, r5
 800801a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	ea52 010a 	orrs.w	r1, r2, sl
 8008022:	d106      	bne.n	8008032 <__ieee754_atan2+0x9a>
 8008024:	f1bc 0f00 	cmp.w	ip, #0
 8008028:	da63      	bge.n	80080f2 <__ieee754_atan2+0x15a>
 800802a:	a537      	add	r5, pc, #220	; (adr r5, 8008108 <__ieee754_atan2+0x170>)
 800802c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008030:	e7f1      	b.n	8008016 <__ieee754_atan2+0x7e>
 8008032:	4572      	cmp	r2, lr
 8008034:	d10f      	bne.n	8008056 <__ieee754_atan2+0xbe>
 8008036:	4293      	cmp	r3, r2
 8008038:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800803c:	d107      	bne.n	800804e <__ieee754_atan2+0xb6>
 800803e:	2e02      	cmp	r6, #2
 8008040:	d850      	bhi.n	80080e4 <__ieee754_atan2+0x14c>
 8008042:	4b3b      	ldr	r3, [pc, #236]	; (8008130 <__ieee754_atan2+0x198>)
 8008044:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008048:	e9d6 4500 	ldrd	r4, r5, [r6]
 800804c:	e7e3      	b.n	8008016 <__ieee754_atan2+0x7e>
 800804e:	2e02      	cmp	r6, #2
 8008050:	d84c      	bhi.n	80080ec <__ieee754_atan2+0x154>
 8008052:	4b38      	ldr	r3, [pc, #224]	; (8008134 <__ieee754_atan2+0x19c>)
 8008054:	e7f6      	b.n	8008044 <__ieee754_atan2+0xac>
 8008056:	4573      	cmp	r3, lr
 8008058:	d0e4      	beq.n	8008024 <__ieee754_atan2+0x8c>
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008060:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008064:	da20      	bge.n	80080a8 <__ieee754_atan2+0x110>
 8008066:	2f00      	cmp	r7, #0
 8008068:	da01      	bge.n	800806e <__ieee754_atan2+0xd6>
 800806a:	323c      	adds	r2, #60	; 0x3c
 800806c:	db20      	blt.n	80080b0 <__ieee754_atan2+0x118>
 800806e:	4652      	mov	r2, sl
 8008070:	464b      	mov	r3, r9
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 fbbd 	bl	80007f4 <__aeabi_ddiv>
 800807a:	f7ff ff5b 	bl	8007f34 <fabs>
 800807e:	f7ff fdcf 	bl	8007c20 <atan>
 8008082:	4604      	mov	r4, r0
 8008084:	460d      	mov	r5, r1
 8008086:	2e01      	cmp	r6, #1
 8008088:	d015      	beq.n	80080b6 <__ieee754_atan2+0x11e>
 800808a:	2e02      	cmp	r6, #2
 800808c:	d017      	beq.n	80080be <__ieee754_atan2+0x126>
 800808e:	2e00      	cmp	r6, #0
 8008090:	d0c1      	beq.n	8008016 <__ieee754_atan2+0x7e>
 8008092:	a31f      	add	r3, pc, #124	; (adr r3, 8008110 <__ieee754_atan2+0x178>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 f8c8 	bl	8000230 <__aeabi_dsub>
 80080a0:	a31d      	add	r3, pc, #116	; (adr r3, 8008118 <__ieee754_atan2+0x180>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	e016      	b.n	80080d6 <__ieee754_atan2+0x13e>
 80080a8:	a51d      	add	r5, pc, #116	; (adr r5, 8008120 <__ieee754_atan2+0x188>)
 80080aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080ae:	e7ea      	b.n	8008086 <__ieee754_atan2+0xee>
 80080b0:	2400      	movs	r4, #0
 80080b2:	2500      	movs	r5, #0
 80080b4:	e7e7      	b.n	8008086 <__ieee754_atan2+0xee>
 80080b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80080ba:	461d      	mov	r5, r3
 80080bc:	e7ab      	b.n	8008016 <__ieee754_atan2+0x7e>
 80080be:	a314      	add	r3, pc, #80	; (adr r3, 8008110 <__ieee754_atan2+0x178>)
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	4620      	mov	r0, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 f8b2 	bl	8000230 <__aeabi_dsub>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	a111      	add	r1, pc, #68	; (adr r1, 8008118 <__ieee754_atan2+0x180>)
 80080d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d6:	f7f8 f8ab 	bl	8000230 <__aeabi_dsub>
 80080da:	e77f      	b.n	8007fdc <__ieee754_atan2+0x44>
 80080dc:	a50e      	add	r5, pc, #56	; (adr r5, 8008118 <__ieee754_atan2+0x180>)
 80080de:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080e2:	e798      	b.n	8008016 <__ieee754_atan2+0x7e>
 80080e4:	a510      	add	r5, pc, #64	; (adr r5, 8008128 <__ieee754_atan2+0x190>)
 80080e6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080ea:	e794      	b.n	8008016 <__ieee754_atan2+0x7e>
 80080ec:	2400      	movs	r4, #0
 80080ee:	2500      	movs	r5, #0
 80080f0:	e791      	b.n	8008016 <__ieee754_atan2+0x7e>
 80080f2:	a50b      	add	r5, pc, #44	; (adr r5, 8008120 <__ieee754_atan2+0x188>)
 80080f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080f8:	e78d      	b.n	8008016 <__ieee754_atan2+0x7e>
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w
 8008100:	54442d18 	.word	0x54442d18
 8008104:	c00921fb 	.word	0xc00921fb
 8008108:	54442d18 	.word	0x54442d18
 800810c:	bff921fb 	.word	0xbff921fb
 8008110:	33145c07 	.word	0x33145c07
 8008114:	3ca1a626 	.word	0x3ca1a626
 8008118:	54442d18 	.word	0x54442d18
 800811c:	400921fb 	.word	0x400921fb
 8008120:	54442d18 	.word	0x54442d18
 8008124:	3ff921fb 	.word	0x3ff921fb
 8008128:	54442d18 	.word	0x54442d18
 800812c:	3fe921fb 	.word	0x3fe921fb
 8008130:	08008328 	.word	0x08008328
 8008134:	08008340 	.word	0x08008340
 8008138:	7ff00000 	.word	0x7ff00000

0800813c <__ieee754_sqrt>:
 800813c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008290 <__ieee754_sqrt+0x154>
 8008140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008144:	ea3c 0c01 	bics.w	ip, ip, r1
 8008148:	460b      	mov	r3, r1
 800814a:	4606      	mov	r6, r0
 800814c:	460d      	mov	r5, r1
 800814e:	460a      	mov	r2, r1
 8008150:	4607      	mov	r7, r0
 8008152:	4604      	mov	r4, r0
 8008154:	d10e      	bne.n	8008174 <__ieee754_sqrt+0x38>
 8008156:	4602      	mov	r2, r0
 8008158:	f7f8 fa22 	bl	80005a0 <__aeabi_dmul>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4630      	mov	r0, r6
 8008162:	4629      	mov	r1, r5
 8008164:	f7f8 f866 	bl	8000234 <__adddf3>
 8008168:	4606      	mov	r6, r0
 800816a:	460d      	mov	r5, r1
 800816c:	4630      	mov	r0, r6
 800816e:	4629      	mov	r1, r5
 8008170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008174:	2900      	cmp	r1, #0
 8008176:	dc0d      	bgt.n	8008194 <__ieee754_sqrt+0x58>
 8008178:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800817c:	ea5c 0707 	orrs.w	r7, ip, r7
 8008180:	d0f4      	beq.n	800816c <__ieee754_sqrt+0x30>
 8008182:	b139      	cbz	r1, 8008194 <__ieee754_sqrt+0x58>
 8008184:	4602      	mov	r2, r0
 8008186:	f7f8 f853 	bl	8000230 <__aeabi_dsub>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	f7f8 fb31 	bl	80007f4 <__aeabi_ddiv>
 8008192:	e7e9      	b.n	8008168 <__ieee754_sqrt+0x2c>
 8008194:	1512      	asrs	r2, r2, #20
 8008196:	d074      	beq.n	8008282 <__ieee754_sqrt+0x146>
 8008198:	2000      	movs	r0, #0
 800819a:	07d5      	lsls	r5, r2, #31
 800819c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081a0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80081a4:	bf5e      	ittt	pl
 80081a6:	0fe3      	lsrpl	r3, r4, #31
 80081a8:	0064      	lslpl	r4, r4, #1
 80081aa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80081ae:	0fe3      	lsrs	r3, r4, #31
 80081b0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80081b4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80081b8:	2516      	movs	r5, #22
 80081ba:	4601      	mov	r1, r0
 80081bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80081c0:	1076      	asrs	r6, r6, #1
 80081c2:	0064      	lsls	r4, r4, #1
 80081c4:	188f      	adds	r7, r1, r2
 80081c6:	429f      	cmp	r7, r3
 80081c8:	bfde      	ittt	le
 80081ca:	1bdb      	suble	r3, r3, r7
 80081cc:	18b9      	addle	r1, r7, r2
 80081ce:	1880      	addle	r0, r0, r2
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	3d01      	subs	r5, #1
 80081d4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80081d8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80081dc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80081e0:	d1f0      	bne.n	80081c4 <__ieee754_sqrt+0x88>
 80081e2:	462a      	mov	r2, r5
 80081e4:	f04f 0e20 	mov.w	lr, #32
 80081e8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80081ec:	428b      	cmp	r3, r1
 80081ee:	eb07 0c05 	add.w	ip, r7, r5
 80081f2:	dc02      	bgt.n	80081fa <__ieee754_sqrt+0xbe>
 80081f4:	d113      	bne.n	800821e <__ieee754_sqrt+0xe2>
 80081f6:	45a4      	cmp	ip, r4
 80081f8:	d811      	bhi.n	800821e <__ieee754_sqrt+0xe2>
 80081fa:	f1bc 0f00 	cmp.w	ip, #0
 80081fe:	eb0c 0507 	add.w	r5, ip, r7
 8008202:	da43      	bge.n	800828c <__ieee754_sqrt+0x150>
 8008204:	2d00      	cmp	r5, #0
 8008206:	db41      	blt.n	800828c <__ieee754_sqrt+0x150>
 8008208:	f101 0801 	add.w	r8, r1, #1
 800820c:	1a5b      	subs	r3, r3, r1
 800820e:	4641      	mov	r1, r8
 8008210:	45a4      	cmp	ip, r4
 8008212:	bf88      	it	hi
 8008214:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008218:	eba4 040c 	sub.w	r4, r4, ip
 800821c:	443a      	add	r2, r7
 800821e:	005b      	lsls	r3, r3, #1
 8008220:	f1be 0e01 	subs.w	lr, lr, #1
 8008224:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008228:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800822c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008230:	d1dc      	bne.n	80081ec <__ieee754_sqrt+0xb0>
 8008232:	4323      	orrs	r3, r4
 8008234:	d006      	beq.n	8008244 <__ieee754_sqrt+0x108>
 8008236:	1c54      	adds	r4, r2, #1
 8008238:	bf0b      	itete	eq
 800823a:	4672      	moveq	r2, lr
 800823c:	3201      	addne	r2, #1
 800823e:	3001      	addeq	r0, #1
 8008240:	f022 0201 	bicne.w	r2, r2, #1
 8008244:	1043      	asrs	r3, r0, #1
 8008246:	07c1      	lsls	r1, r0, #31
 8008248:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800824c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008250:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008254:	bf48      	it	mi
 8008256:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800825a:	4610      	mov	r0, r2
 800825c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008260:	e782      	b.n	8008168 <__ieee754_sqrt+0x2c>
 8008262:	0ae3      	lsrs	r3, r4, #11
 8008264:	3915      	subs	r1, #21
 8008266:	0564      	lsls	r4, r4, #21
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0fa      	beq.n	8008262 <__ieee754_sqrt+0x126>
 800826c:	02de      	lsls	r6, r3, #11
 800826e:	d50a      	bpl.n	8008286 <__ieee754_sqrt+0x14a>
 8008270:	f1c2 0020 	rsb	r0, r2, #32
 8008274:	fa24 f000 	lsr.w	r0, r4, r0
 8008278:	1e55      	subs	r5, r2, #1
 800827a:	4094      	lsls	r4, r2
 800827c:	4303      	orrs	r3, r0
 800827e:	1b4a      	subs	r2, r1, r5
 8008280:	e78a      	b.n	8008198 <__ieee754_sqrt+0x5c>
 8008282:	4611      	mov	r1, r2
 8008284:	e7f0      	b.n	8008268 <__ieee754_sqrt+0x12c>
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	3201      	adds	r2, #1
 800828a:	e7ef      	b.n	800826c <__ieee754_sqrt+0x130>
 800828c:	4688      	mov	r8, r1
 800828e:	e7bd      	b.n	800820c <__ieee754_sqrt+0xd0>
 8008290:	7ff00000 	.word	0x7ff00000

08008294 <_init>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr

080082a0 <_fini>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr
