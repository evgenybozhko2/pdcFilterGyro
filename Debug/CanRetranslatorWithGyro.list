
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c4  080059c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059cc  080059cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  08005a44  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005a44  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e152  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002775  00000000  00000000  0002e1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00031488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d94  00000000  00000000  00031ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7df  00000000  00000000  00035c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b096b  00000000  00000000  00044413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4d7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  000f4dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	080058c4 	.word	0x080058c4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	080058c4 	.word	0x080058c4

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 b96e 	b.w	800051c <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	468e      	mov	lr, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	f040 8083 	bne.w	8000370 <__udivmoddi4+0x118>
 800026a:	428a      	cmp	r2, r1
 800026c:	4617      	mov	r7, r2
 800026e:	d947      	bls.n	8000300 <__udivmoddi4+0xa8>
 8000270:	fab2 f382 	clz	r3, r2
 8000274:	b14b      	cbz	r3, 800028a <__udivmoddi4+0x32>
 8000276:	f1c3 0120 	rsb	r1, r3, #32
 800027a:	fa05 fe03 	lsl.w	lr, r5, r3
 800027e:	fa20 f101 	lsr.w	r1, r0, r1
 8000282:	409f      	lsls	r7, r3
 8000284:	ea41 0e0e 	orr.w	lr, r1, lr
 8000288:	409c      	lsls	r4, r3
 800028a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028e:	fbbe fcf8 	udiv	ip, lr, r8
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb08 e21c 	mls	r2, r8, ip, lr
 800029a:	fb0c f009 	mul.w	r0, ip, r9
 800029e:	0c21      	lsrs	r1, r4, #16
 80002a0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a4:	4290      	cmp	r0, r2
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x66>
 80002a8:	18ba      	adds	r2, r7, r2
 80002aa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80002ae:	f080 8118 	bcs.w	80004e2 <__udivmoddi4+0x28a>
 80002b2:	4290      	cmp	r0, r2
 80002b4:	f240 8115 	bls.w	80004e2 <__udivmoddi4+0x28a>
 80002b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80002bc:	443a      	add	r2, r7
 80002be:	1a12      	subs	r2, r2, r0
 80002c0:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c4:	fb08 2210 	mls	r2, r8, r0, r2
 80002c8:	fb00 f109 	mul.w	r1, r0, r9
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	42a1      	cmp	r1, r4
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x92>
 80002d6:	193c      	adds	r4, r7, r4
 80002d8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002dc:	f080 8103 	bcs.w	80004e6 <__udivmoddi4+0x28e>
 80002e0:	42a1      	cmp	r1, r4
 80002e2:	f240 8100 	bls.w	80004e6 <__udivmoddi4+0x28e>
 80002e6:	3802      	subs	r0, #2
 80002e8:	443c      	add	r4, r7
 80002ea:	1a64      	subs	r4, r4, r1
 80002ec:	2100      	movs	r1, #0
 80002ee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa4>
 80002f4:	2200      	movs	r2, #0
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	e9c6 4200 	strd	r4, r2, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xac>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f382 	clz	r3, r2
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14f      	bne.n	80003ac <__udivmoddi4+0x154>
 800030c:	1a8d      	subs	r5, r1, r2
 800030e:	2101      	movs	r1, #1
 8000310:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000314:	fa1f f882 	uxth.w	r8, r2
 8000318:	fbb5 fcfe 	udiv	ip, r5, lr
 800031c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000320:	fb08 f00c 	mul.w	r0, r8, ip
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800032a:	42a8      	cmp	r0, r5
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0xe6>
 800032e:	197d      	adds	r5, r7, r5
 8000330:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0xe4>
 8000336:	42a8      	cmp	r0, r5
 8000338:	f200 80e9 	bhi.w	800050e <__udivmoddi4+0x2b6>
 800033c:	4694      	mov	ip, r2
 800033e:	1a2d      	subs	r5, r5, r0
 8000340:	fbb5 f0fe 	udiv	r0, r5, lr
 8000344:	fb0e 5510 	mls	r5, lr, r0, r5
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000352:	45a0      	cmp	r8, r4
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x10e>
 8000356:	193c      	adds	r4, r7, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x10c>
 800035e:	45a0      	cmp	r8, r4
 8000360:	f200 80d9 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 0408 	sub.w	r4, r4, r8
 800036a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036e:	e7c0      	b.n	80002f2 <__udivmoddi4+0x9a>
 8000370:	428b      	cmp	r3, r1
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x12e>
 8000374:	2e00      	cmp	r6, #0
 8000376:	f000 80b1 	beq.w	80004dc <__udivmoddi4+0x284>
 800037a:	2100      	movs	r1, #0
 800037c:	e9c6 0500 	strd	r0, r5, [r6]
 8000380:	4608      	mov	r0, r1
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d14b      	bne.n	8000426 <__udivmoddi4+0x1ce>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0x140>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 80b9 	bhi.w	800050a <__udivmoddi4+0x2b2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb65 0303 	sbc.w	r3, r5, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	469e      	mov	lr, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d0aa      	beq.n	80002fc <__udivmoddi4+0xa4>
 80003a6:	e9c6 4e00 	strd	r4, lr, [r6]
 80003aa:	e7a7      	b.n	80002fc <__udivmoddi4+0xa4>
 80003ac:	409f      	lsls	r7, r3
 80003ae:	f1c3 0220 	rsb	r2, r3, #32
 80003b2:	40d1      	lsrs	r1, r2
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fa1f f887 	uxth.w	r8, r7
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	fa24 f202 	lsr.w	r2, r4, r2
 80003c8:	409d      	lsls	r5, r3
 80003ca:	fb00 fc08 	mul.w	ip, r0, r8
 80003ce:	432a      	orrs	r2, r5
 80003d0:	0c15      	lsrs	r5, r2, #16
 80003d2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d6:	45ac      	cmp	ip, r5
 80003d8:	fa04 f403 	lsl.w	r4, r4, r3
 80003dc:	d909      	bls.n	80003f2 <__udivmoddi4+0x19a>
 80003de:	197d      	adds	r5, r7, r5
 80003e0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e4:	f080 808f 	bcs.w	8000506 <__udivmoddi4+0x2ae>
 80003e8:	45ac      	cmp	ip, r5
 80003ea:	f240 808c 	bls.w	8000506 <__udivmoddi4+0x2ae>
 80003ee:	3802      	subs	r0, #2
 80003f0:	443d      	add	r5, r7
 80003f2:	eba5 050c 	sub.w	r5, r5, ip
 80003f6:	fbb5 f1fe 	udiv	r1, r5, lr
 80003fa:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fe:	fb01 f908 	mul.w	r9, r1, r8
 8000402:	b295      	uxth	r5, r2
 8000404:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000408:	45a9      	cmp	r9, r5
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x1c4>
 800040c:	197d      	adds	r5, r7, r5
 800040e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000412:	d274      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 8000414:	45a9      	cmp	r9, r5
 8000416:	d972      	bls.n	80004fe <__udivmoddi4+0x2a6>
 8000418:	3902      	subs	r1, #2
 800041a:	443d      	add	r5, r7
 800041c:	eba5 0509 	sub.w	r5, r5, r9
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e778      	b.n	8000318 <__udivmoddi4+0xc0>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	408b      	lsls	r3, r1
 800042c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000430:	ea4c 0c03 	orr.w	ip, ip, r3
 8000434:	fa25 f407 	lsr.w	r4, r5, r7
 8000438:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800043c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000440:	fa1f f88c 	uxth.w	r8, ip
 8000444:	fb0e 4419 	mls	r4, lr, r9, r4
 8000448:	fa20 f307 	lsr.w	r3, r0, r7
 800044c:	fb09 fa08 	mul.w	sl, r9, r8
 8000450:	408d      	lsls	r5, r1
 8000452:	431d      	orrs	r5, r3
 8000454:	0c2b      	lsrs	r3, r5, #16
 8000456:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800045a:	45a2      	cmp	sl, r4
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 f301 	lsl.w	r3, r0, r1
 8000464:	d909      	bls.n	800047a <__udivmoddi4+0x222>
 8000466:	eb1c 0404 	adds.w	r4, ip, r4
 800046a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046e:	d248      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 8000470:	45a2      	cmp	sl, r4
 8000472:	d946      	bls.n	8000502 <__udivmoddi4+0x2aa>
 8000474:	f1a9 0902 	sub.w	r9, r9, #2
 8000478:	4464      	add	r4, ip
 800047a:	eba4 040a 	sub.w	r4, r4, sl
 800047e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000482:	fb0e 4410 	mls	r4, lr, r0, r4
 8000486:	fb00 fa08 	mul.w	sl, r0, r8
 800048a:	b2ad      	uxth	r5, r5
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	45a2      	cmp	sl, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x24e>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800049c:	d22d      	bcs.n	80004fa <__udivmoddi4+0x2a2>
 800049e:	45a2      	cmp	sl, r4
 80004a0:	d92b      	bls.n	80004fa <__udivmoddi4+0x2a2>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	eba4 040a 	sub.w	r4, r4, sl
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d319      	bcc.n	80004ee <__udivmoddi4+0x296>
 80004ba:	d016      	beq.n	80004ea <__udivmoddi4+0x292>
 80004bc:	b15e      	cbz	r6, 80004d6 <__udivmoddi4+0x27e>
 80004be:	ebb3 020e 	subs.w	r2, r3, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	fa22 f301 	lsr.w	r3, r2, r1
 80004ce:	431f      	orrs	r7, r3
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	e9c6 7400 	strd	r7, r4, [r6]
 80004d6:	2100      	movs	r1, #0
 80004d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70c      	b.n	80002fc <__udivmoddi4+0xa4>
 80004e2:	468c      	mov	ip, r1
 80004e4:	e6eb      	b.n	80002be <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6ff      	b.n	80002ea <__udivmoddi4+0x92>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2e6      	bcs.n	80004bc <__udivmoddi4+0x264>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 050c 	sbc.w	r5, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e0      	b.n	80004bc <__udivmoddi4+0x264>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d3      	b.n	80004a6 <__udivmoddi4+0x24e>
 80004fe:	4611      	mov	r1, r2
 8000500:	e78c      	b.n	800041c <__udivmoddi4+0x1c4>
 8000502:	4681      	mov	r9, r0
 8000504:	e7b9      	b.n	800047a <__udivmoddi4+0x222>
 8000506:	4608      	mov	r0, r1
 8000508:	e773      	b.n	80003f2 <__udivmoddi4+0x19a>
 800050a:	4608      	mov	r0, r1
 800050c:	e749      	b.n	80003a2 <__udivmoddi4+0x14a>
 800050e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000512:	443d      	add	r5, r7
 8000514:	e713      	b.n	800033e <__udivmoddi4+0xe6>
 8000516:	3802      	subs	r0, #2
 8000518:	443c      	add	r4, r7
 800051a:	e724      	b.n	8000366 <__udivmoddi4+0x10e>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	; 0x28
 8000524:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000528:	4a28      	ldr	r2, [pc, #160]	; (80005cc <MX_CAN1_Init+0xac>)
 800052a:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 8;
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800052e:	2208      	movs	r2, #8
 8000530:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000540:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000544:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000548:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800054c:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000550:	2200      	movs	r2, #0
 8000552:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000556:	2201      	movs	r2, #1
 8000558:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800055c:	2200      	movs	r2, #0
 800055e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000562:	2200      	movs	r2, #0
 8000564:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000568:	2200      	movs	r2, #0
 800056a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800056e:	2201      	movs	r2, #1
 8000570:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000572:	4815      	ldr	r0, [pc, #84]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000574:	f001 f9d4 	bl	8001920 <HAL_CAN_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_CAN1_Init+0x62>
		Error_Handler();
 800057e:	f000 ffc3 	bl	8001508 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800058a:	2301      	movs	r3, #1
 800058c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80005a6:	230e      	movs	r3, #14
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_CAN1_Init+0xa8>)
 80005b0:	f001 fab2 	bl	8001b18 <HAL_CAN_ConfigFilter>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_CAN1_Init+0x9e>
		Error_Handler();
 80005ba:	f000 ffa5 	bl	8001508 <Error_Handler>
	}
}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000e0 	.word	0x200000e0
 80005cc:	40006400 	.word	0x40006400

080005d0 <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <MX_CAN2_Init+0xac>)
 80005da:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 8;
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005de:	2208      	movs	r2, #8
 80005e0:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005f4:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005fc:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000600:	2200      	movs	r2, #0
 8000602:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000606:	2201      	movs	r2, #1
 8000608:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_CAN2_Init+0xa8>)
 800060c:	2200      	movs	r2, #0
 800060e:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000612:	2200      	movs	r2, #0
 8000614:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000618:	2200      	movs	r2, #0
 800061a:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN2_Init+0xa8>)
 800061e:	2201      	movs	r2, #1
 8000620:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000622:	4815      	ldr	r0, [pc, #84]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000624:	f001 f97c 	bl	8001920 <HAL_CAN_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_CAN2_Init+0x62>
		Error_Handler();
 800062e:	f000 ff6b 	bl	8001508 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 14;
 8000632:	230e      	movs	r3, #14
 8000634:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x000;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800064e:	2301      	movs	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000656:	230e      	movs	r3, #14
 8000658:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000660:	f001 fa5a 	bl	8001b18 <HAL_CAN_ConfigFilter>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_CAN2_Init+0x9e>
		Error_Handler();
 800066a:	f000 ff4d 	bl	8001508 <Error_Handler>
	}

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000b8 	.word	0x200000b8
 800067c:	40006800 	.word	0x40006800

08000680 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	; 0x30
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a6d      	ldr	r2, [pc, #436]	; (8000850 <HAL_CAN_MspInit+0x1d0>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d15b      	bne.n	8000758 <HAL_CAN_MspInit+0xd8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80006a0:	4b6c      	ldr	r3, [pc, #432]	; (8000854 <HAL_CAN_MspInit+0x1d4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a6b      	ldr	r2, [pc, #428]	; (8000854 <HAL_CAN_MspInit+0x1d4>)
 80006a8:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <HAL_CAN_MspInit+0x1d4>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d10b      	bne.n	80006ca <HAL_CAN_MspInit+0x4a>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80006b2:	4b69      	ldr	r3, [pc, #420]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a68      	ldr	r2, [pc, #416]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80006b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b66      	ldr	r3, [pc, #408]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b63      	ldr	r3, [pc, #396]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a62      	ldr	r2, [pc, #392]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b60      	ldr	r3, [pc, #384]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006e6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4859      	ldr	r0, [pc, #356]	; (800085c <HAL_CAN_MspInit+0x1dc>)
 80006f8:	f002 fad6 	bl	8002ca8 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4852      	ldr	r0, [pc, #328]	; (800085c <HAL_CAN_MspInit+0x1dc>)
 8000712:	f002 fac9 	bl	8002ca8 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2013      	movs	r0, #19
 800071c:	f002 f89d 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000720:	2013      	movs	r0, #19
 8000722:	f002 f8b6 	bl	8002892 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2014      	movs	r0, #20
 800072c:	f002 f895 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000730:	2014      	movs	r0, #20
 8000732:	f002 f8ae 	bl	8002892 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2015      	movs	r0, #21
 800073c:	f002 f88d 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000740:	2015      	movs	r0, #21
 8000742:	f002 f8a6 	bl	8002892 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2016      	movs	r0, #22
 800074c:	f002 f885 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000750:	2016      	movs	r0, #22
 8000752:	f002 f89e 	bl	8002892 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
	}
}
 8000756:	e077      	b.n	8000848 <HAL_CAN_MspInit+0x1c8>
	} else if (canHandle->Instance == CAN2) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a40      	ldr	r2, [pc, #256]	; (8000860 <HAL_CAN_MspInit+0x1e0>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d172      	bne.n	8000848 <HAL_CAN_MspInit+0x1c8>
		__HAL_RCC_CAN2_CLK_ENABLE();
 8000762:	4b3d      	ldr	r3, [pc, #244]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a3c      	ldr	r2, [pc, #240]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 8000768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <HAL_CAN_MspInit+0x1d4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4a34      	ldr	r2, [pc, #208]	; (8000854 <HAL_CAN_MspInit+0x1d4>)
 8000782:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8000784:	4b33      	ldr	r3, [pc, #204]	; (8000854 <HAL_CAN_MspInit+0x1d4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10b      	bne.n	80007a4 <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 800078c:	4b32      	ldr	r3, [pc, #200]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000796:	61d3      	str	r3, [r2, #28]
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a2b      	ldr	r2, [pc, #172]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <HAL_CAN_MspInit+0x1d8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007bc:	2320      	movs	r3, #32
 80007be:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4825      	ldr	r0, [pc, #148]	; (8000864 <HAL_CAN_MspInit+0x1e4>)
 80007d0:	f002 fa6a 	bl	8002ca8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	481f      	ldr	r0, [pc, #124]	; (8000864 <HAL_CAN_MspInit+0x1e4>)
 80007e8:	f002 fa5e 	bl	8002ca8 <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_CAN2_ENABLE();
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_CAN_MspInit+0x1e8>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <HAL_CAN_MspInit+0x1e8>)
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	6053      	str	r3, [r2, #4]
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	203f      	movs	r0, #63	; 0x3f
 800080e:	f002 f824 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000812:	203f      	movs	r0, #63	; 0x3f
 8000814:	f002 f83d 	bl	8002892 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2040      	movs	r0, #64	; 0x40
 800081e:	f002 f81c 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000822:	2040      	movs	r0, #64	; 0x40
 8000824:	f002 f835 	bl	8002892 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2041      	movs	r0, #65	; 0x41
 800082e:	f002 f814 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000832:	2041      	movs	r0, #65	; 0x41
 8000834:	f002 f82d 	bl	8002892 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2042      	movs	r0, #66	; 0x42
 800083e:	f002 f80c 	bl	800285a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000842:	2042      	movs	r0, #66	; 0x42
 8000844:	f002 f825 	bl	8002892 <HAL_NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3730      	adds	r7, #48	; 0x30
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40006400 	.word	0x40006400
 8000854:	2000008c 	.word	0x2000008c
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800
 8000860:	40006800 	.word	0x40006800
 8000864:	40010c00 	.word	0x40010c00
 8000868:	40010000 	.word	0x40010000

0800086c <EEPROM_Init>:
// - set global variables ValidPage, ReceivingPage and ErasedPage
// - build address index
// - resume page transfer if needed
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_Init() {
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
	EEPROM_Result result;

	//unlock the flash memory
	HAL_FLASH_Unlock();
 8000872:	f002 f899 	bl	80029a8 <HAL_FLASH_Unlock>

	//read each page status and check if valid
	EEPROM_PageStatus PageStatus0 = *((__IO uint16_t*) EEPROM_PAGE0);
 8000876:	4b5c      	ldr	r3, [pc, #368]	; (80009e8 <EEPROM_Init+0x17c>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	83fb      	strh	r3, [r7, #30]
	EEPROM_PageStatus PageStatus1 = *((__IO uint16_t*) EEPROM_PAGE1);
 800087c:	4b5b      	ldr	r3, [pc, #364]	; (80009ec <EEPROM_Init+0x180>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	83bb      	strh	r3, [r7, #28]
	uint8_t InvalidState = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 != EEPROM_VALID && PageStatus0 != EEPROM_RECEIVING
 8000886:	8bfb      	ldrh	r3, [r7, #30]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00b      	beq.n	80008a4 <EEPROM_Init+0x38>
 800088c:	8bfb      	ldrh	r3, [r7, #30]
 800088e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000892:	4293      	cmp	r3, r2
 8000894:	d006      	beq.n	80008a4 <EEPROM_Init+0x38>
			&& PageStatus0 != EEPROM_ERASED)
 8000896:	8bfb      	ldrh	r3, [r7, #30]
 8000898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089c:	4293      	cmp	r3, r2
 800089e:	d001      	beq.n	80008a4 <EEPROM_Init+0x38>
		InvalidState = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	76fb      	strb	r3, [r7, #27]
	if (PageStatus1 != EEPROM_VALID && PageStatus1 != EEPROM_RECEIVING
 80008a4:	8bbb      	ldrh	r3, [r7, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00b      	beq.n	80008c2 <EEPROM_Init+0x56>
 80008aa:	8bbb      	ldrh	r3, [r7, #28]
 80008ac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d006      	beq.n	80008c2 <EEPROM_Init+0x56>
			&& PageStatus1 != EEPROM_ERASED)
 80008b4:	8bbb      	ldrh	r3, [r7, #28]
 80008b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d001      	beq.n	80008c2 <EEPROM_Init+0x56>
		InvalidState = 1;
 80008be:	2301      	movs	r3, #1
 80008c0:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 == PageStatus1)
 80008c2:	8bfa      	ldrh	r2, [r7, #30]
 80008c4:	8bbb      	ldrh	r3, [r7, #28]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d101      	bne.n	80008ce <EEPROM_Init+0x62>
		InvalidState = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	76fb      	strb	r3, [r7, #27]

	// if invalid page status, format EEPROM (erase both pages and set page0 as valid)
	if (InvalidState) {
 80008ce:	7efb      	ldrb	r3, [r7, #27]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d029      	beq.n	8000928 <EEPROM_Init+0xbc>
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
		EraseDefinitions.Banks = FLASH_BANK_1;
 80008d8:	2301      	movs	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
		EraseDefinitions.PageAddress = EEPROM_PAGE0;
 80008dc:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <EEPROM_Init+0x17c>)
 80008de:	613b      	str	r3, [r7, #16]
		EraseDefinitions.NbPages = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
		uint32_t PageError;

		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 80008e4:	1d3a      	adds	r2, r7, #4
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 f933 	bl	8002b58 <HAL_FLASHEx_Erase>
 80008f2:	4603      	mov	r3, r0
 80008f4:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 80008f6:	7ebb      	ldrb	r3, [r7, #26]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <EEPROM_Init+0x94>
			return result;
 80008fc:	7ebb      	ldrb	r3, [r7, #26]
 80008fe:	e06e      	b.n	80009de <EEPROM_Init+0x172>

		result = HAL_FLASH_Program(EEPROM_SIZE16, EEPROM_PAGE0, EEPROM_VALID);
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	4937      	ldr	r1, [pc, #220]	; (80009e8 <EEPROM_Init+0x17c>)
 800090a:	2001      	movs	r0, #1
 800090c:	f001 ffdc 	bl	80028c8 <HAL_FLASH_Program>
 8000910:	4603      	mov	r3, r0
 8000912:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 8000914:	7ebb      	ldrb	r3, [r7, #26]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <EEPROM_Init+0xb2>
			return result;
 800091a:	7ebb      	ldrb	r3, [r7, #26]
 800091c:	e05f      	b.n	80009de <EEPROM_Init+0x172>

		PageStatus0 = EEPROM_VALID;
 800091e:	2300      	movs	r3, #0
 8000920:	83fb      	strh	r3, [r7, #30]
		PageStatus1 = EEPROM_ERASED;
 8000922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000926:	83bb      	strh	r3, [r7, #28]
	}

	//set global variables ValidPage, ReceivingPage and ErasedPage (one stays EEPROM_PAGE_NONE)
	if (PageStatus0 == EEPROM_VALID)
 8000928:	8bfb      	ldrh	r3, [r7, #30]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <EEPROM_Init+0xc8>
		EEPROM_ValidPage = EEPROM_PAGE0;
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <EEPROM_Init+0x184>)
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <EEPROM_Init+0x17c>)
 8000932:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_VALID)
 8000934:	8bbb      	ldrh	r3, [r7, #28]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <EEPROM_Init+0xd4>
		EEPROM_ValidPage = EEPROM_PAGE1;
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <EEPROM_Init+0x184>)
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <EEPROM_Init+0x180>)
 800093e:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_RECEIVING)
 8000940:	8bfb      	ldrh	r3, [r7, #30]
 8000942:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000946:	4293      	cmp	r3, r2
 8000948:	d102      	bne.n	8000950 <EEPROM_Init+0xe4>
		EEPROM_ReceivingPage = EEPROM_PAGE0;
 800094a:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <EEPROM_Init+0x188>)
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <EEPROM_Init+0x17c>)
 800094e:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_RECEIVING)
 8000950:	8bbb      	ldrh	r3, [r7, #28]
 8000952:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000956:	4293      	cmp	r3, r2
 8000958:	d102      	bne.n	8000960 <EEPROM_Init+0xf4>
		EEPROM_ReceivingPage = EEPROM_PAGE1;
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <EEPROM_Init+0x188>)
 800095c:	4a23      	ldr	r2, [pc, #140]	; (80009ec <EEPROM_Init+0x180>)
 800095e:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_ERASED)
 8000960:	8bfb      	ldrh	r3, [r7, #30]
 8000962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000966:	4293      	cmp	r3, r2
 8000968:	d102      	bne.n	8000970 <EEPROM_Init+0x104>
		EEPROM_ErasedPage = EEPROM_PAGE0;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <EEPROM_Init+0x18c>)
 800096c:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <EEPROM_Init+0x17c>)
 800096e:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_ERASED)
 8000970:	8bbb      	ldrh	r3, [r7, #28]
 8000972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000976:	4293      	cmp	r3, r2
 8000978:	d102      	bne.n	8000980 <EEPROM_Init+0x114>
		EEPROM_ErasedPage = EEPROM_PAGE1;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <EEPROM_Init+0x18c>)
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <EEPROM_Init+0x180>)
 800097e:	601a      	str	r2, [r3, #0]

	//build address index (addresses from receiving page are dominant)
	EEPROM_PageToIndex(EEPROM_ValidPage);
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <EEPROM_Init+0x184>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fa93 	bl	8000eb0 <EEPROM_PageToIndex>
	EEPROM_PageToIndex(EEPROM_ReceivingPage);
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <EEPROM_Init+0x188>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fa8e 	bl	8000eb0 <EEPROM_PageToIndex>

	//if needed, resume page transfer or just mark receiving page as valid
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE) {
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <EEPROM_Init+0x188>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d01f      	beq.n	80009dc <EEPROM_Init+0x170>
		if (EEPROM_ValidPage == EEPROM_PAGE_NONE) {
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <EEPROM_Init+0x184>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d10c      	bne.n	80009be <EEPROM_Init+0x152>
			result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <EEPROM_Init+0x188>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f9e4 	bl	8000d78 <EEPROM_SetPageStatus>
 80009b0:	4603      	mov	r3, r0
 80009b2:	76bb      	strb	r3, [r7, #26]
			if (result != EEPROM_SUCCESS)
 80009b4:	7ebb      	ldrb	r3, [r7, #26]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d010      	beq.n	80009dc <EEPROM_Init+0x170>
				return result;
 80009ba:	7ebb      	ldrb	r3, [r7, #26]
 80009bc:	e00f      	b.n	80009de <EEPROM_Init+0x172>
		} else {
			result = EEPROM_PageTransfer(EEPROM_ValidPage,
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <EEPROM_Init+0x184>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0c      	ldr	r2, [pc, #48]	; (80009f4 <EEPROM_Init+0x188>)
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f96d 	bl	8000ca8 <EEPROM_PageTransfer>
 80009ce:	4603      	mov	r3, r0
 80009d0:	76bb      	strb	r3, [r7, #26]
					EEPROM_ReceivingPage);
			if (result != EEPROM_SUCCESS)
 80009d2:	7ebb      	ldrb	r3, [r7, #26]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <EEPROM_Init+0x170>
				return result;
 80009d8:	7ebb      	ldrb	r3, [r7, #26]
 80009da:	e000      	b.n	80009de <EEPROM_Init+0x172>
		}
	}

	return EEPROM_SUCCESS;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3720      	adds	r7, #32
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	0800f000 	.word	0x0800f000
 80009ec:	0800f800 	.word	0x0800f800
 80009f0:	20000098 	.word	0x20000098
 80009f4:	2000009c 	.word	0x2000009c
 80009f8:	200000a0 	.word	0x200000a0

080009fc <EEPROM_ReadVariable>:
// - read variable value from physical address with right size
//
// VariableName:	name (number) of the variable to read
// Value:			outputs the variable value
// return:			EEPROM_SUCCESS, EEPROM_INVALID_NAME, EEPROM_NOT_ASSIGNED
EEPROM_Result EEPROM_ReadVariable(uint16_t VariableName, EEPROM_Value *Value) {
 80009fc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	6039      	str	r1, [r7, #0]
 8000a08:	80fb      	strh	r3, [r7, #6]
	//check if variable name exists
	if (VariableName >= EEPROM_VARIABLE_COUNT)
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d901      	bls.n	8000a14 <EEPROM_ReadVariable+0x18>
		return EEPROM_INVALID_NAME;
 8000a10:	2306      	movs	r3, #6
 8000a12:	e041      	b.n	8000a98 <EEPROM_ReadVariable+0x9c>

	//check if variable was assigned
	uint32_t Address = EEPROM_START_ADDRESS + EEPROM_Index[VariableName];
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <EEPROM_ReadVariable+0xa8>)
 8000a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000a20:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000a24:	60fb      	str	r3, [r7, #12]
	if (Address == EEPROM_PAGE0)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <EEPROM_ReadVariable+0xac>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <EEPROM_ReadVariable+0x36>
		return EEPROM_NOT_ASSIGNED;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	e032      	b.n	8000a98 <EEPROM_ReadVariable+0x9c>

	//read variable value from physical address with right size
	switch (EEPROM_SizeTable[VariableName]) {
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <EEPROM_ReadVariable+0xb0>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	2b03      	cmp	r3, #3
 8000a3a:	d011      	beq.n	8000a60 <EEPROM_ReadVariable+0x64>
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	dc28      	bgt.n	8000a92 <EEPROM_ReadVariable+0x96>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d002      	beq.n	8000a4a <EEPROM_ReadVariable+0x4e>
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d006      	beq.n	8000a56 <EEPROM_ReadVariable+0x5a>
 8000a48:	e023      	b.n	8000a92 <EEPROM_ReadVariable+0x96>
	case EEPROM_SIZE16:
		(*Value).uInt16 = *((__IO uint16_t*) Address);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	801a      	strh	r2, [r3, #0]
		break;
 8000a54:	e01f      	b.n	8000a96 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE32:
		(*Value).uInt32 = *((__IO uint32_t*) Address);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	601a      	str	r2, [r3, #0]
		break;
 8000a5e:	e01a      	b.n	8000a96 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE64:
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f04f 0100 	mov.w	r1, #0
				| ((uint64_t) *((__IO uint32_t*) (Address + 4)) << 32);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4698      	mov	r8, r3
 8000a72:	f04f 0900 	mov.w	r9, #0
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	f04f 0300 	mov.w	r3, #0
 8000a7e:	4643      	mov	r3, r8
 8000a80:	2200      	movs	r2, #0
 8000a82:	ea40 0402 	orr.w	r4, r0, r2
 8000a86:	ea41 0503 	orr.w	r5, r1, r3
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 8000a90:	e001      	b.n	8000a96 <EEPROM_ReadVariable+0x9a>
	default:
		return EEPROM_NOT_ASSIGNED;
 8000a92:	2305      	movs	r3, #5
 8000a94:	e000      	b.n	8000a98 <EEPROM_ReadVariable+0x9c>
	}

	return EEPROM_SUCCESS;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000094 	.word	0x20000094
 8000aa8:	0800f000 	.word	0x0800f000
 8000aac:	20000090 	.word	0x20000090

08000ab0 <EEPROM_WriteVariable>:
// VariableName:	name (number) of the variable to write
// Value:			value to be written
// Size:			size of "Value" as EEPROM_Size
// return:			EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_WriteVariable(uint16_t VariableName, EEPROM_Value Value,
		uint8_t Size) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	; 0x30
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	e9c7 2300 	strd	r2, r3, [r7]
 8000abc:	460b      	mov	r3, r1
 8000abe:	81fb      	strh	r3, [r7, #14]
	EEPROM_Result result;

	//get writing page's end address (prefer writing to receiving page)
	EEPROM_Page WritingPage = EEPROM_ValidPage;
 8000ac0:	4b73      	ldr	r3, [pc, #460]	; (8000c90 <EEPROM_WriteVariable+0x1e0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE)
 8000ac6:	4b73      	ldr	r3, [pc, #460]	; (8000c94 <EEPROM_WriteVariable+0x1e4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <EEPROM_WriteVariable+0x24>
		WritingPage = EEPROM_ReceivingPage;
 8000ace:	4b71      	ldr	r3, [pc, #452]	; (8000c94 <EEPROM_WriteVariable+0x1e4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
	if (WritingPage == EEPROM_PAGE_NONE)
 8000ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <EEPROM_WriteVariable+0x2e>
		return EEPROM_NO_VALID_PAGE;
 8000ada:	2304      	movs	r3, #4
 8000adc:	e0d3      	b.n	8000c86 <EEPROM_WriteVariable+0x1d6>
	uint32_t PageEndAddress = WritingPage + FLASH_PAGE_SIZE;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ae4:	61bb      	str	r3, [r7, #24]

	//calculate memory usage of variable
	uint8_t Bytes = 2 + (1 << Size);
 8000ae6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000aea:	2201      	movs	r2, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	3302      	adds	r3, #2
 8000af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (Size == EEPROM_SIZE_DELETED)
 8000af8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <EEPROM_WriteVariable+0x56>
		Bytes = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//check if enough free space or page full
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8000b06:	4b64      	ldr	r3, [pc, #400]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d007      	beq.n	8000b1e <EEPROM_WriteVariable+0x6e>
 8000b0e:	4b62      	ldr	r3, [pc, #392]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	1ad2      	subs	r2, r2, r3
 8000b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d25d      	bcs.n	8000bda <EEPROM_WriteVariable+0x12a>
		//check if data is too much to store on one page
		uint16_t RequiredMemory = 2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8000b22:	2300      	movs	r3, #0
 8000b24:	83fb      	strh	r3, [r7, #30]
 8000b26:	e023      	b.n	8000b70 <EEPROM_WriteVariable+0xc0>
			if (i == VariableName)
 8000b28:	8bfa      	ldrh	r2, [r7, #30]
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d10b      	bne.n	8000b48 <EEPROM_WriteVariable+0x98>
				RequiredMemory += 2 + (1 << Size);
 8000b30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b34:	2201      	movs	r2, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	8c3b      	ldrh	r3, [r7, #32]
 8000b3e:	4413      	add	r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3302      	adds	r3, #2
 8000b44:	843b      	strh	r3, [r7, #32]
 8000b46:	e010      	b.n	8000b6a <EEPROM_WriteVariable+0xba>
			else if (EEPROM_SizeTable[i] != EEPROM_SIZE_DELETED)
 8000b48:	8bfb      	ldrh	r3, [r7, #30]
 8000b4a:	4a54      	ldr	r2, [pc, #336]	; (8000c9c <EEPROM_WriteVariable+0x1ec>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00b      	beq.n	8000b6a <EEPROM_WriteVariable+0xba>
				RequiredMemory += 2 + (1 << EEPROM_SizeTable[i]);
 8000b52:	8bfb      	ldrh	r3, [r7, #30]
 8000b54:	4a51      	ldr	r2, [pc, #324]	; (8000c9c <EEPROM_WriteVariable+0x1ec>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	8c3b      	ldrh	r3, [r7, #32]
 8000b62:	4413      	add	r3, r2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	3302      	adds	r3, #2
 8000b68:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8000b6a:	8bfb      	ldrh	r3, [r7, #30]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	83fb      	strh	r3, [r7, #30]
 8000b70:	8bfb      	ldrh	r3, [r7, #30]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d9d8      	bls.n	8000b28 <EEPROM_WriteVariable+0x78>
		}
		if (RequiredMemory > FLASH_PAGE_SIZE)
 8000b76:	8c3b      	ldrh	r3, [r7, #32]
 8000b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b7c:	d901      	bls.n	8000b82 <EEPROM_WriteVariable+0xd2>
			return EEPROM_FULL;
 8000b7e:	2307      	movs	r3, #7
 8000b80:	e081      	b.n	8000c86 <EEPROM_WriteVariable+0x1d6>

		//mark the empty page as receiving
		result = EEPROM_SetPageStatus(EEPROM_ErasedPage, EEPROM_RECEIVING);
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <EEPROM_WriteVariable+0x1f0>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f8f4 	bl	8000d78 <EEPROM_SetPageStatus>
 8000b90:	4603      	mov	r3, r0
 8000b92:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 8000b94:	7dfb      	ldrb	r3, [r7, #23]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <EEPROM_WriteVariable+0xee>
			return result;
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	e073      	b.n	8000c86 <EEPROM_WriteVariable+0x1d6>

		//change next index to receiving page
		EEPROM_NextIndex = EEPROM_ReceivingPage + 2;
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <EEPROM_WriteVariable+0x1e4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	4a3c      	ldr	r2, [pc, #240]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000ba6:	6013      	str	r3, [r2, #0]

		//write the variable to receiving page (by calling this function again)
		result = EEPROM_WriteVariable(VariableName, Value, Size);
 8000ba8:	89f9      	ldrh	r1, [r7, #14]
 8000baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bb4:	4608      	mov	r0, r1
 8000bb6:	f7ff ff7b 	bl	8000ab0 <EEPROM_WriteVariable>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <EEPROM_WriteVariable+0x118>
			return result;
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	e05e      	b.n	8000c86 <EEPROM_WriteVariable+0x1d6>

		//do page transfer
		result = EEPROM_PageTransfer();
 8000bc8:	f000 f86e 	bl	8000ca8 <EEPROM_PageTransfer>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d055      	beq.n	8000c82 <EEPROM_WriteVariable+0x1d2>
			return result;
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	e055      	b.n	8000c86 <EEPROM_WriteVariable+0x1d6>
	}

	//else (if enough space)
	else {
		//write variable value
		if (Size != EEPROM_SIZE_DELETED) {
 8000bda:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00f      	beq.n	8000c02 <EEPROM_WriteVariable+0x152>
			result = HAL_FLASH_Program(Size, EEPROM_NextIndex + 2,
 8000be2:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1c99      	adds	r1, r3, #2
 8000bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bf0:	f001 fe6a 	bl	80028c8 <HAL_FLASH_Program>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	75fb      	strb	r3, [r7, #23]
					Value.uInt64);
			if (result != EEPROM_SUCCESS)
 8000bf8:	7dfb      	ldrb	r3, [r7, #23]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <EEPROM_WriteVariable+0x152>
				return result;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	e041      	b.n	8000c86 <EEPROM_WriteVariable+0x1d6>
		}

		//create and write variable header (size and name)
		uint16_t VariableHeader = VariableName + (Size << 14);
 8000c02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	039b      	lsls	r3, r3, #14
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	4413      	add	r3, r2
 8000c10:	82bb      	strh	r3, [r7, #20]
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, EEPROM_NextIndex,
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	8aba      	ldrh	r2, [r7, #20]
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f001 fe53 	bl	80028c8 <HAL_FLASH_Program>
 8000c22:	4603      	mov	r3, r0
 8000c24:	75fb      	strb	r3, [r7, #23]
				VariableHeader);
		if (result != EEPROM_SUCCESS)
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <EEPROM_WriteVariable+0x180>
			return result;
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	e02a      	b.n	8000c86 <EEPROM_WriteVariable+0x1d6>

		//update index & size table
		EEPROM_Index[VariableName] =
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	b29b      	uxth	r3, r3
		EEPROM_Index[VariableName] =
 8000c36:	89fa      	ldrh	r2, [r7, #14]
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8000c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	b299      	uxth	r1, r3
		EEPROM_Index[VariableName] =
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <EEPROM_WriteVariable+0x1f4>)
 8000c42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		EEPROM_SizeTable[VariableName] = Size;
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	4914      	ldr	r1, [pc, #80]	; (8000c9c <EEPROM_WriteVariable+0x1ec>)
 8000c4a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000c4e:	54ca      	strb	r2, [r1, r3]
		if (Size == EEPROM_SIZE_DELETED)
 8000c50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d104      	bne.n	8000c62 <EEPROM_WriteVariable+0x1b2>
			EEPROM_Index[VariableName] = 0;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <EEPROM_WriteVariable+0x1f4>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//update next index
		EEPROM_NextIndex += Bytes;
 8000c62:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000c6e:	6013      	str	r3, [r2, #0]
		if (EEPROM_NextIndex >= PageEndAddress)
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d804      	bhi.n	8000c84 <EEPROM_WriteVariable+0x1d4>
			EEPROM_NextIndex = 0;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <EEPROM_WriteVariable+0x1e8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	e000      	b.n	8000c84 <EEPROM_WriteVariable+0x1d4>
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8000c82:	bf00      	nop
	}

	return EEPROM_SUCCESS;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000098 	.word	0x20000098
 8000c94:	2000009c 	.word	0x2000009c
 8000c98:	200000a4 	.word	0x200000a4
 8000c9c:	20000090 	.word	0x20000090
 8000ca0:	200000a0 	.word	0x200000a0
 8000ca4:	20000094 	.word	0x20000094

08000ca8 <EEPROM_PageTransfer>:
//		- write variable to receiving page
// - erase source page
// - mark receiving page as valid
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
static EEPROM_Result EEPROM_PageTransfer() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
	EEPROM_Result result;
	EEPROM_Value Value;

	//get start & end address of valid page (source) (as offset to EEPROM start)
	uint16_t StartAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <EEPROM_PageTransfer+0xc0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cb8:	81bb      	strh	r3, [r7, #12]
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
			+ FLASH_PAGE_SIZE;
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <EEPROM_PageTransfer+0xc0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
 8000cc0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000cc4:	817b      	strh	r3, [r7, #10]

	//copy each variable
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81fb      	strh	r3, [r7, #14]
 8000cca:	e02a      	b.n	8000d22 <EEPROM_PageTransfer+0x7a>
		//check if is stored on the source page
		if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress) {
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <EEPROM_PageTransfer+0xc4>)
 8000cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd4:	89ba      	ldrh	r2, [r7, #12]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d220      	bcs.n	8000d1c <EEPROM_PageTransfer+0x74>
 8000cda:	89fb      	ldrh	r3, [r7, #14]
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <EEPROM_PageTransfer+0xc4>)
 8000cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce2:	897a      	ldrh	r2, [r7, #10]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d919      	bls.n	8000d1c <EEPROM_PageTransfer+0x74>
			//read variable value (if possible)
			if (EEPROM_ReadVariable(i, &Value) == EEPROM_SUCCESS) {
 8000ce8:	463a      	mov	r2, r7
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe84 	bl	80009fc <EEPROM_ReadVariable>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d110      	bne.n	8000d1c <EEPROM_PageTransfer+0x74>
				//write variable to receiving page
				result = EEPROM_WriteVariable(i, Value, EEPROM_SizeTable[i]);
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <EEPROM_PageTransfer+0xc8>)
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	89f9      	ldrh	r1, [r7, #14]
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d08:	4608      	mov	r0, r1
 8000d0a:	f7ff fed1 	bl	8000ab0 <EEPROM_WriteVariable>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	727b      	strb	r3, [r7, #9]
				if (result != EEPROM_SUCCESS)
 8000d12:	7a7b      	ldrb	r3, [r7, #9]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <EEPROM_PageTransfer+0x74>
					return result;
 8000d18:	7a7b      	ldrb	r3, [r7, #9]
 8000d1a:	e021      	b.n	8000d60 <EEPROM_PageTransfer+0xb8>
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	81fb      	strh	r3, [r7, #14]
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d9d1      	bls.n	8000ccc <EEPROM_PageTransfer+0x24>
			}
		}
	}

	//erase source page
	result = EEPROM_SetPageStatus(EEPROM_ValidPage, EEPROM_ERASED);
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <EEPROM_PageTransfer+0xc0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f821 	bl	8000d78 <EEPROM_SetPageStatus>
 8000d36:	4603      	mov	r3, r0
 8000d38:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8000d3a:	7a7b      	ldrb	r3, [r7, #9]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <EEPROM_PageTransfer+0x9c>
		return result;
 8000d40:	7a7b      	ldrb	r3, [r7, #9]
 8000d42:	e00d      	b.n	8000d60 <EEPROM_PageTransfer+0xb8>

	//mark receiving page as valid
	result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <EEPROM_PageTransfer+0xcc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f814 	bl	8000d78 <EEPROM_SetPageStatus>
 8000d50:	4603      	mov	r3, r0
 8000d52:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8000d54:	7a7b      	ldrb	r3, [r7, #9]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <EEPROM_PageTransfer+0xb6>
		return result;
 8000d5a:	7a7b      	ldrb	r3, [r7, #9]
 8000d5c:	e000      	b.n	8000d60 <EEPROM_PageTransfer+0xb8>

	return EEPROM_SUCCESS;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000098 	.word	0x20000098
 8000d6c:	20000094 	.word	0x20000094
 8000d70:	20000090 	.word	0x20000090
 8000d74:	2000009c 	.word	0x2000009c

08000d78 <EEPROM_SetPageStatus>:
//
// Page:		page to change the status (as EEPROM_Page)
// PageStatus:	page status to set for page (as EEPROM_PageStatus)
// return:		EEPROM_SUCCESS, EEPROM_ERROR, EEPROM_BUSY or EEPROM_TIMEOUT
static EEPROM_Result EEPROM_SetPageStatus(EEPROM_Page Page,
		EEPROM_PageStatus PageStatus) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	807b      	strh	r3, [r7, #2]
	EEPROM_Result result;

	//check if erase operation required
	if (PageStatus == EEPROM_ERASED) {
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d13f      	bne.n	8000e0e <EEPROM_SetPageStatus+0x96>
		//remove every variable from index, that is stored on erase page
		uint16_t StartAddress = Page - EEPROM_START_ADDRESS;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d96:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t EndAddress = Page - EEPROM_START_ADDRESS + FLASH_PAGE_SIZE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000da0:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000da6:	e015      	b.n	8000dd4 <EEPROM_SetPageStatus+0x5c>
			if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress)
 8000da8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000daa:	4a3d      	ldr	r2, [pc, #244]	; (8000ea0 <EEPROM_SetPageStatus+0x128>)
 8000dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d20b      	bcs.n	8000dce <EEPROM_SetPageStatus+0x56>
 8000db6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000db8:	4a39      	ldr	r2, [pc, #228]	; (8000ea0 <EEPROM_SetPageStatus+0x128>)
 8000dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dbe:	8c3a      	ldrh	r2, [r7, #32]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d904      	bls.n	8000dce <EEPROM_SetPageStatus+0x56>
				EEPROM_Index[i] = 0;
 8000dc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dc6:	4a36      	ldr	r2, [pc, #216]	; (8000ea0 <EEPROM_SetPageStatus+0x128>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8000dce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d9e6      	bls.n	8000da8 <EEPROM_SetPageStatus+0x30>
		}

		//setup erase definitions
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
		EraseDefinitions.PageAddress = Page;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	61bb      	str	r3, [r7, #24]
		EraseDefinitions.NbPages = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61fb      	str	r3, [r7, #28]
		uint32_t PageError;

		//erase page
		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 8000dea:	f107 020c 	add.w	r2, r7, #12
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 feaf 	bl	8002b58 <HAL_FLASHEx_Erase>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (result != EEPROM_SUCCESS)
 8000e00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <EEPROM_SetPageStatus+0xb8>
			return result;
 8000e08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e0c:	e043      	b.n	8000e96 <EEPROM_SetPageStatus+0x11e>
	}

	//else write status to flash
	else {
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page,
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	2001      	movs	r0, #1
 8000e18:	f001 fd56 	bl	80028c8 <HAL_FLASH_Program>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				PageStatus);
		if (result != EEPROM_SUCCESS)
 8000e22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <EEPROM_SetPageStatus+0xb8>
			return result;
 8000e2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000e2e:	e032      	b.n	8000e96 <EEPROM_SetPageStatus+0x11e>
	}

	//update global page status variables (remove page from old status and attach to new status)
	if (EEPROM_ValidPage == Page)
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <EEPROM_SetPageStatus+0x12c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d103      	bne.n	8000e42 <EEPROM_SetPageStatus+0xca>
		EEPROM_ValidPage = EEPROM_PAGE_NONE;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <EEPROM_SetPageStatus+0x12c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e010      	b.n	8000e64 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ReceivingPage == Page)
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <EEPROM_SetPageStatus+0x130>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d103      	bne.n	8000e54 <EEPROM_SetPageStatus+0xdc>
		EEPROM_ReceivingPage = EEPROM_PAGE_NONE;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <EEPROM_SetPageStatus+0x130>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e007      	b.n	8000e64 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ErasedPage == Page)
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <EEPROM_SetPageStatus+0x134>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d102      	bne.n	8000e64 <EEPROM_SetPageStatus+0xec>
		EEPROM_ErasedPage = EEPROM_PAGE_NONE;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <EEPROM_SetPageStatus+0x134>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

	if (PageStatus == EEPROM_VALID)
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <EEPROM_SetPageStatus+0xfa>
		EEPROM_ValidPage = Page;
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <EEPROM_SetPageStatus+0x12c>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	e010      	b.n	8000e94 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_RECEIVING)
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d103      	bne.n	8000e84 <EEPROM_SetPageStatus+0x10c>
		EEPROM_ReceivingPage = Page;
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <EEPROM_SetPageStatus+0x130>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e007      	b.n	8000e94 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_ERASED)
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d102      	bne.n	8000e94 <EEPROM_SetPageStatus+0x11c>
		EEPROM_ErasedPage = Page;
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <EEPROM_SetPageStatus+0x134>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6013      	str	r3, [r2, #0]

	return EEPROM_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000094 	.word	0x20000094
 8000ea4:	20000098 	.word	0x20000098
 8000ea8:	2000009c 	.word	0x2000009c
 8000eac:	200000a0 	.word	0x200000a0

08000eb0 <EEPROM_PageToIndex>:
// - set next free flash address
// - return on loop end
//
// Page:	page to search for variables
// return:	EEPROM_SUCCESS
static EEPROM_Result EEPROM_PageToIndex(EEPROM_Page Page) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint8_t SizeCode;					//size of current variable as Size code
	uint8_t Size;							//size of current variable in bytes
	uint16_t Name;									//name of current variable

	//ignore call when Page is PAGE_NONE
	if (Page == EEPROM_PAGE_NONE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <EEPROM_PageToIndex+0x12>
		return EEPROM_SUCCESS;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e070      	b.n	8000fa4 <EEPROM_PageToIndex+0xf4>

	//get page addresses
	uint32_t Address = Page + 2;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
	uint32_t PageEndAddress = Page + FLASH_PAGE_SIZE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ece:	613b      	str	r3, [r7, #16]

	//loop through page starting after page header
	while (Address < PageEndAddress) {
 8000ed0:	e059      	b.n	8000f86 <EEPROM_PageToIndex+0xd6>
		//read potential variable header
		VariableHeader = *((__IO uint16_t*) Address);
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	81fb      	strh	r3, [r7, #14]

		//if no header written (causes: end of data reached or reset while writing)
		if (VariableHeader == 0xFFFF) {
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
 8000eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d121      	bne.n	8000f26 <EEPROM_PageToIndex+0x76>
			//loop through next 4 halfword and check if there is anything written
			Size = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	75fb      	strb	r3, [r7, #23]
 8000eea:	e013      	b.n	8000f14 <EEPROM_PageToIndex+0x64>
				if (Address + i >= PageEndAddress)
 8000eec:	7dfa      	ldrb	r2, [r7, #23]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d911      	bls.n	8000f1c <EEPROM_PageToIndex+0x6c>
					break;
				//while looping count the size of written data (resulting from reset while writing)
				if (*((__IO uint16_t*) (Address + i)) != 0xFFFF)
 8000ef8:	7dfa      	ldrb	r2, [r7, #23]
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	4413      	add	r3, r2
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d001      	beq.n	8000f0e <EEPROM_PageToIndex+0x5e>
					Size = i;
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	3302      	adds	r3, #2
 8000f12:	75fb      	strb	r3, [r7, #23]
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d9e8      	bls.n	8000eec <EEPROM_PageToIndex+0x3c>
 8000f1a:	e000      	b.n	8000f1e <EEPROM_PageToIndex+0x6e>
					break;
 8000f1c:	bf00      	nop
			}
			//if no data found, last variable of page was reached (end loop)
			if (Size == 0)
 8000f1e:	7ffb      	ldrb	r3, [r7, #31]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d12b      	bne.n	8000f7c <EEPROM_PageToIndex+0xcc>
				break;
 8000f24:	e033      	b.n	8000f8e <EEPROM_PageToIndex+0xde>
		}

		//else (if header written, proper variable value is following)
		else {
			//get size code
			SizeCode = VariableHeader >> 14;
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	0b9b      	lsrs	r3, r3, #14
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	737b      	strb	r3, [r7, #13]

			//check for valid name (VARIABLE_COUNT might have been reduced between builds, but old variables are still in flash)
			Name = VariableHeader & 0b0011111111111111;
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000f34:	817b      	strh	r3, [r7, #10]
			if (Name < EEPROM_VARIABLE_COUNT) {
 8000f36:	897b      	ldrh	r3, [r7, #10]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d815      	bhi.n	8000f68 <EEPROM_PageToIndex+0xb8>
				//if everything valid, update the index and the size table
				EEPROM_Index[Name] = Address + 2 - EEPROM_START_ADDRESS;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	897a      	ldrh	r2, [r7, #10]
 8000f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f46:	3302      	adds	r3, #2
 8000f48:	b299      	uxth	r1, r3
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <EEPROM_PageToIndex+0x100>)
 8000f4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				EEPROM_SizeTable[Name] = SizeCode;
 8000f50:	897b      	ldrh	r3, [r7, #10]
 8000f52:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <EEPROM_PageToIndex+0x104>)
 8000f54:	7b7a      	ldrb	r2, [r7, #13]
 8000f56:	54ca      	strb	r2, [r1, r3]
				if (SizeCode == EEPROM_SIZE_DELETED)
 8000f58:	7b7b      	ldrb	r3, [r7, #13]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <EEPROM_PageToIndex+0xb8>
					EEPROM_Index[Name] = 0;
 8000f5e:	897b      	ldrh	r3, [r7, #10]
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <EEPROM_PageToIndex+0x100>)
 8000f62:	2100      	movs	r1, #0
 8000f64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			//calculate size in bytes from size code
			Size = 1 << SizeCode;
 8000f68:	7b7b      	ldrb	r3, [r7, #13]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	77fb      	strb	r3, [r7, #31]
			if (SizeCode == EEPROM_SIZE_DELETED)
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <EEPROM_PageToIndex+0xcc>
				Size = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	77fb      	strb	r3, [r7, #31]
		}

		//go to next address on page
		Address = Address + 2 + Size;
 8000f7c:	7ffa      	ldrb	r2, [r7, #31]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4413      	add	r3, r2
 8000f82:	3302      	adds	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
	while (Address < PageEndAddress) {
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d3a1      	bcc.n	8000ed2 <EEPROM_PageToIndex+0x22>
	}

	//set next free flash address
	EEPROM_NextIndex = Address;
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <EEPROM_PageToIndex+0x108>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6013      	str	r3, [r2, #0]
	if (Address >= PageEndAddress)
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d302      	bcc.n	8000fa2 <EEPROM_PageToIndex+0xf2>
		EEPROM_NextIndex = 0;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <EEPROM_PageToIndex+0x108>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

	//return on loop end
	return EEPROM_SUCCESS;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3724      	adds	r7, #36	; 0x24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000094 	.word	0x20000094
 8000fb4:	20000090 	.word	0x20000090
 8000fb8:	200000a4 	.word	0x200000a4

08000fbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_GPIO_Init+0x80>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <MX_GPIO_Init+0x80>)
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_GPIO_Init+0x80>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_GPIO_Init+0x80>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_GPIO_Init+0x80>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_GPIO_Init+0x80>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_GPIO_Init+0x80>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a0d      	ldr	r2, [pc, #52]	; (800103c <MX_GPIO_Init+0x80>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_GPIO_Init+0x80>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_GPIO_Init+0x84>)
 800102e:	f001 fe3b 	bl	8002ca8 <HAL_GPIO_Init>

}
 8001032:	bf00      	nop
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800

08001044 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x50>)
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <MX_I2C1_Init+0x54>)
 800104c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C1_Init+0x50>)
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_I2C1_Init+0x58>)
 8001052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_I2C1_Init+0x50>)
 8001062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_I2C1_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_I2C1_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_I2C1_Init+0x50>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_I2C1_Init+0x50>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_I2C1_Init+0x50>)
 8001082:	f001 ff95 	bl	8002fb0 <HAL_I2C_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800108c:	f000 fa3c 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000108 	.word	0x20000108
 8001098:	40005400 	.word	0x40005400
 800109c:	00061a80 	.word	0x00061a80

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_I2C_MspInit+0x90>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d132      	bne.n	8001126 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_I2C_MspInit+0x94>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_I2C_MspInit+0x94>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_I2C_MspInit+0x94>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010de:	2312      	movs	r3, #18
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4812      	ldr	r0, [pc, #72]	; (8001138 <HAL_I2C_MspInit+0x98>)
 80010ee:	f001 fddb 	bl	8002ca8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_I2C_MspInit+0x9c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
 8001108:	4a0c      	ldr	r2, [pc, #48]	; (800113c <HAL_I2C_MspInit+0x9c>)
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_I2C_MspInit+0x94>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_I2C_MspInit+0x94>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_I2C_MspInit+0x94>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3728      	adds	r7, #40	; 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40005400 	.word	0x40005400
 8001134:	40021000 	.word	0x40021000
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40010000 	.word	0x40010000

08001140 <flashMemoryInit>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint16_t address);
void writeFlash(uint32_t address, double data);

void flashMemoryInit() {
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
	//initialize EEPROM
	EEPROM_Init();
 8001146:	f7ff fb91 	bl	800086c <EEPROM_Init>

	//set default value if variable not assigned
	EEPROM_Value value;
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 800114a:	2300      	movs	r3, #0
 800114c:	81fb      	strh	r3, [r7, #14]
 800114e:	e02b      	b.n	80011a8 <flashMemoryInit+0x68>
		if (EEPROM_ReadVariable(i, &value) == EEPROM_NOT_ASSIGNED) {
 8001150:	463a      	mov	r2, r7
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fc50 	bl	80009fc <EEPROM_ReadVariable>
 800115c:	4603      	mov	r3, r0
 800115e:	2b05      	cmp	r3, #5
 8001160:	d11c      	bne.n	800119c <flashMemoryInit+0x5c>
			isCorrectionAssign = false;
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <flashMemoryInit+0x80>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

			switch (i) {
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <flashMemoryInit+0x34>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d00a      	beq.n	8001188 <flashMemoryInit+0x48>
 8001172:	e016      	b.n	80011a2 <flashMemoryInit+0x62>
			case 0:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001174:	a310      	add	r3, pc, #64	; (adr r3, 80011b8 <flashMemoryInit+0x78>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	89f9      	ldrh	r1, [r7, #14]
 800117c:	2003      	movs	r0, #3
 800117e:	9000      	str	r0, [sp, #0]
 8001180:	4608      	mov	r0, r1
 8001182:	f7ff fc95 	bl	8000ab0 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001186:	e00c      	b.n	80011a2 <flashMemoryInit+0x62>
			case 1:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001188:	a30b      	add	r3, pc, #44	; (adr r3, 80011b8 <flashMemoryInit+0x78>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	89f9      	ldrh	r1, [r7, #14]
 8001190:	2003      	movs	r0, #3
 8001192:	9000      	str	r0, [sp, #0]
 8001194:	4608      	mov	r0, r1
 8001196:	f7ff fc8b 	bl	8000ab0 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 800119a:	e002      	b.n	80011a2 <flashMemoryInit+0x62>
			}
		} else {
			isCorrectionAssign = true;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <flashMemoryInit+0x80>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	3301      	adds	r3, #1
 80011a6:	81fb      	strh	r3, [r7, #14]
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d9d0      	bls.n	8001150 <flashMemoryInit+0x10>
		}
	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	88e368f1 	.word	0x88e368f1
 80011bc:	3ee4f8b5 	.word	0x3ee4f8b5
 80011c0:	200000a8 	.word	0x200000a8

080011c4 <main>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int main(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

	HAL_Init();
 80011c8:	f000 fb48 	bl	800185c <HAL_Init>

	SystemClock_Config();
 80011cc:	f000 f83c 	bl	8001248 <SystemClock_Config>

	MX_GPIO_Init();
 80011d0:	f7ff fef4 	bl	8000fbc <MX_GPIO_Init>
	MX_CAN1_Init();
 80011d4:	f7ff f9a4 	bl	8000520 <MX_CAN1_Init>
	MX_CAN2_Init();
 80011d8:	f7ff f9fa 	bl	80005d0 <MX_CAN2_Init>
	MX_I2C1_Init();
 80011dc:	f7ff ff32 	bl	8001044 <MX_I2C1_Init>
	flashMemoryInit();
 80011e0:	f7ff ffae 	bl	8001140 <flashMemoryInit>

	//MPU initialize
	while (MPU6050_Init(&hi2c1) == 1) {
 80011e4:	bf00      	nop
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <main+0x78>)
 80011e8:	f000 f993 	bl	8001512 <MPU6050_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d0f9      	beq.n	80011e6 <main+0x22>

	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <main+0x7c>)
 80011f4:	f000 fd70 	bl	8001cd8 <HAL_CAN_Start>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <main+0x3e>
		Error_Handler();
 80011fe:	f000 f983 	bl	8001508 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 8001202:	f648 4102 	movw	r1, #35842	; 0x8c02
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <main+0x7c>)
 8001208:	f000 ffec 	bl	80021e4 <HAL_CAN_ActivateNotification>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <main+0x52>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 8001212:	f000 f979 	bl	8001508 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <main+0x80>)
 8001218:	f000 fd5e 	bl	8001cd8 <HAL_CAN_Start>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <main+0x62>
		Error_Handler();
 8001222:	f000 f971 	bl	8001508 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 8001226:	f648 4110 	movw	r1, #35856	; 0x8c10
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <main+0x80>)
 800122c:	f000 ffda 	bl	80021e4 <HAL_CAN_ActivateNotification>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <main+0x76>
			CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 8001236:	f000 f967 	bl	8001508 <Error_Handler>
	}

//	//loop
	while (1) {
 800123a:	e7fe      	b.n	800123a <main+0x76>
 800123c:	20000108 	.word	0x20000108
 8001240:	200000e0 	.word	0x200000e0
 8001244:	200000b8 	.word	0x200000b8

08001248 <SystemClock_Config>:
//
//		HAL_Delay(200);
	}
}

void SystemClock_Config(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	2238      	movs	r2, #56	; 0x38
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fbcc 	bl	80049f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126e:	2301      	movs	r3, #1
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 25;
 8001272:	2319      	movs	r3, #25
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800127a:	2302      	movs	r3, #2
 800127c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800127e:	2300      	movs	r3, #0
 8001280:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001282:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fe8d 	bl	8003fb0 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x58>
		Error_Handler();
 800129c:	f000 f934 	bl	8001508 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012a0:	230f      	movs	r3, #15
 80012a2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2302      	movs	r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2101      	movs	r1, #1
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 f98f 	bl	80045dc <HAL_RCC_ClockConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x80>
		Error_Handler();
 80012c4:	f000 f920 	bl	8001508 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <SystemClock_Config+0x90>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	3750      	adds	r7, #80	; 0x50
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	42420070 	.word	0x42420070

080012dc <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo0 can1 callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan1, RxDataCan1)
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fe69 	bl	8001fc2 <HAL_CAN_GetRxMessage>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d115      	bne.n	8001322 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
			== HAL_OK) {
		if (RxHeaderCan1.StdId == 0x350 && RxDataCan1[0] == 0xc7) {
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80012fe:	d106      	bne.n	800130e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2bc7      	cmp	r3, #199	; 0xc7
 8001306:	d102      	bne.n	800130e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			RxDataCan1[0] = 0xc6;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800130a:	22c6      	movs	r2, #198	; 0xc6
 800130c:	701a      	strb	r2, [r3, #0]
		}

		CAN2_Transmit_manual(RxHeaderCan1.StdId, RxHeaderCan1.DLC, RxDataCan1);
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001316:	6912      	ldr	r2, [r2, #16]
 8001318:	b2d1      	uxtb	r1, r2
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f885 	bl	800142c <CAN2_Transmit_manual>
	}
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000240 	.word	0x20000240
 8001330:	200001bc 	.word	0x200001bc

08001334 <HAL_CAN_RxFifo1MsgPendingCallback>:

// can fifo1 for can2 callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan2, RxDataCan2)
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fe3d 	bl	8001fc2 <HAL_CAN_GetRxMessage>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
			== HAL_OK) {
		CAN1_Transmit_manual(RxHeaderCan2.StdId, RxHeaderCan2.DLC, RxDataCan2);
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001356:	6912      	ldr	r2, [r2, #16]
 8001358:	b2d1      	uxtb	r1, r2
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f809 	bl	8001374 <CAN1_Transmit_manual>
	}
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000230 	.word	0x20000230
 8001370:	200001fc 	.word	0x200001fc

08001374 <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	603a      	str	r2, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	460b      	mov	r3, r1
 8001382:	717b      	strb	r3, [r7, #5]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 8001384:	bf00      	nop
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <CAN1_Transmit_manual+0xa4>)
 8001388:	f000 fdc4 	bl	8001f14 <HAL_CAN_GetTxMailboxesFreeLevel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f9      	beq.n	8001386 <CAN1_Transmit_manual+0x12>

	}

	TxHeaderCan1.StdId = ID_CAN;
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <CAN1_Transmit_manual+0xa8>)
 8001396:	6013      	str	r3, [r2, #0]
	TxHeaderCan1.DLC = DLC_CAN;
 8001398:	797b      	ldrb	r3, [r7, #5]
 800139a:	4a20      	ldr	r2, [pc, #128]	; (800141c <CAN1_Transmit_manual+0xa8>)
 800139c:	6113      	str	r3, [r2, #16]
	TxDataCan1[0] = DATA_CAN[0];
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013a4:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = DATA_CAN[1];
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	785a      	ldrb	r2, [r3, #1]
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013ac:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = DATA_CAN[2];
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	789a      	ldrb	r2, [r3, #2]
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013b4:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = DATA_CAN[3];
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	78da      	ldrb	r2, [r3, #3]
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013bc:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = DATA_CAN[4];
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	791a      	ldrb	r2, [r3, #4]
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013c4:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = DATA_CAN[5];
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	795a      	ldrb	r2, [r3, #5]
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013cc:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = DATA_CAN[6];
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	799a      	ldrb	r2, [r3, #6]
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013d4:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = DATA_CAN[7];
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	79da      	ldrb	r2, [r3, #7]
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013dc:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeaderCan1, TxDataCan1, &TxMailboxCan1)
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <CAN1_Transmit_manual+0xb0>)
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <CAN1_Transmit_manual+0xac>)
 80013e2:	490e      	ldr	r1, [pc, #56]	; (800141c <CAN1_Transmit_manual+0xa8>)
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <CAN1_Transmit_manual+0xa4>)
 80013e6:	f000 fcbb 	bl	8001d60 <HAL_CAN_AddTxMessage>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <CAN1_Transmit_manual+0x88>
			!= HAL_OK) {
		Error_Handler();
 80013f0:	f000 f88a 	bl	8001508 <Error_Handler>
	}

	//wait while message will sent
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailboxCan1)) {
 80013f4:	e002      	b.n	80013fc <CAN1_Transmit_manual+0x88>
		printf("pending can1");
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <CAN1_Transmit_manual+0xb4>)
 80013f8:	f003 fb04 	bl	8004a04 <iprintf>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailboxCan1)) {
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <CAN1_Transmit_manual+0xb0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <CAN1_Transmit_manual+0xa4>)
 8001404:	f000 fdba 	bl	8001f7c <HAL_CAN_IsTxMessagePending>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f3      	bne.n	80013f6 <CAN1_Transmit_manual+0x82>
	}
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200000e0 	.word	0x200000e0
 800141c:	200001dc 	.word	0x200001dc
 8001420:	20000238 	.word	0x20000238
 8001424:	200001b8 	.word	0x200001b8
 8001428:	080058dc 	.word	0x080058dc

0800142c <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	603a      	str	r2, [r7, #0]
 8001436:	80fb      	strh	r3, [r7, #6]
 8001438:	460b      	mov	r3, r1
 800143a:	717b      	strb	r3, [r7, #5]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) == 0) {
 800143c:	bf00      	nop
 800143e:	4823      	ldr	r0, [pc, #140]	; (80014cc <CAN2_Transmit_manual+0xa0>)
 8001440:	f000 fd68 	bl	8001f14 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f9      	beq.n	800143e <CAN2_Transmit_manual+0x12>

	}

	TxHeaderCan2.StdId = ID_CAN;
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <CAN2_Transmit_manual+0xa4>)
 800144e:	6013      	str	r3, [r2, #0]
	TxHeaderCan2.DLC = DLC_CAN;
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <CAN2_Transmit_manual+0xa4>)
 8001454:	6113      	str	r3, [r2, #16]
	TxDataCan2[0] = DATA_CAN[0];
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 800145c:	701a      	strb	r2, [r3, #0]
	TxDataCan2[1] = DATA_CAN[1];
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	785a      	ldrb	r2, [r3, #1]
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 8001464:	705a      	strb	r2, [r3, #1]
	TxDataCan2[2] = DATA_CAN[2];
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	789a      	ldrb	r2, [r3, #2]
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 800146c:	709a      	strb	r2, [r3, #2]
	TxDataCan2[3] = DATA_CAN[3];
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	78da      	ldrb	r2, [r3, #3]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 8001474:	70da      	strb	r2, [r3, #3]
	TxDataCan2[4] = DATA_CAN[4];
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	791a      	ldrb	r2, [r3, #4]
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 800147c:	711a      	strb	r2, [r3, #4]
	TxDataCan2[5] = DATA_CAN[5];
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	795a      	ldrb	r2, [r3, #5]
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 8001484:	715a      	strb	r2, [r3, #5]
	TxDataCan2[6] = DATA_CAN[6];
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	799a      	ldrb	r2, [r3, #6]
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 800148c:	719a      	strb	r2, [r3, #6]
	TxDataCan2[7] = DATA_CAN[7];
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	79da      	ldrb	r2, [r3, #7]
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 8001494:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeaderCan2, TxDataCan2, &TxMailboxCan2)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <CAN2_Transmit_manual+0xac>)
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <CAN2_Transmit_manual+0xa8>)
 800149a:	490d      	ldr	r1, [pc, #52]	; (80014d0 <CAN2_Transmit_manual+0xa4>)
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <CAN2_Transmit_manual+0xa0>)
 800149e:	f000 fc5f 	bl	8001d60 <HAL_CAN_AddTxMessage>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <CAN2_Transmit_manual+0x80>
			!= HAL_OK) {
		Error_Handler();
 80014a8:	f000 f82e 	bl	8001508 <Error_Handler>
	}

	//wait while message will sent
	while (HAL_CAN_IsTxMessagePending(&hcan2, TxMailboxCan2)) {
 80014ac:	bf00      	nop
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <CAN2_Transmit_manual+0xac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <CAN2_Transmit_manual+0xa0>)
 80014b6:	f000 fd61 	bl	8001f7c <HAL_CAN_IsTxMessagePending>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f6      	bne.n	80014ae <CAN2_Transmit_manual+0x82>
	}
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000b8 	.word	0x200000b8
 80014d0:	20000218 	.word	0x20000218
 80014d4:	200001f4 	.word	0x200001f4
 80014d8:	200001d8 	.word	0x200001d8

080014dc <HAL_CAN_ErrorCallback>:
	TxDataCan1[7] = 0x00;

	CAN1_Transmit_manual(0x685, 8, TxDataCan1);
}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_CAN_GetError(hcan);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f8b2 	bl	8002650 <HAL_CAN_GetError>
 80014ec:	60f8      	str	r0, [r7, #12]
	printf("error");
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_CAN_ErrorCallback+0x28>)
 80014f0:	f003 fa88 	bl	8004a04 <iprintf>

	HAL_CAN_ResetError(&hcan);
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 f8b5 	bl	8002666 <HAL_CAN_ResetError>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	080058ec 	.word	0x080058ec

08001508 <Error_Handler>:

void Error_Handler(void) {
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
	__disable_irq();

	while (1) {
 8001510:	e7fe      	b.n	8001510 <Error_Handler+0x8>

08001512 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b088      	sub	sp, #32
 8001516:	af04      	add	r7, sp, #16
 8001518:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 800151a:	2364      	movs	r3, #100	; 0x64
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2301      	movs	r3, #1
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	f107 030f 	add.w	r3, r7, #15
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	2275      	movs	r2, #117	; 0x75
 800152c:	21d0      	movs	r1, #208	; 0xd0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f001 ff7c 	bl	800342c <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b68      	cmp	r3, #104	; 0x68
 8001538:	d13d      	bne.n	80015b6 <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 800153e:	2364      	movs	r3, #100	; 0x64
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	2301      	movs	r3, #1
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	f107 030e 	add.w	r3, r7, #14
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	226b      	movs	r2, #107	; 0x6b
 8001550:	21d0      	movs	r1, #208	; 0xd0
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f001 fe70 	bl	8003238 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001558:	2307      	movs	r3, #7
 800155a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	2301      	movs	r3, #1
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	f107 030e 	add.w	r3, r7, #14
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2301      	movs	r3, #1
 800156c:	2219      	movs	r2, #25
 800156e:	21d0      	movs	r1, #208	; 0xd0
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 fe61 	bl	8003238 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8001576:	2300      	movs	r3, #0
 8001578:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 800157a:	2364      	movs	r3, #100	; 0x64
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	2301      	movs	r3, #1
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 030e 	add.w	r3, r7, #14
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	221c      	movs	r2, #28
 800158c:	21d0      	movs	r1, #208	; 0xd0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f001 fe52 	bl	8003238 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8001594:	2300      	movs	r3, #0
 8001596:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 8001598:	2364      	movs	r3, #100	; 0x64
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2301      	movs	r3, #1
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	f107 030e 	add.w	r3, r7, #14
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	221b      	movs	r2, #27
 80015aa:	21d0      	movs	r1, #208	; 0xd0
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f001 fe43 	bl	8003238 <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <MPU6050_Init+0xa6>
	}
	return 1;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_MspInit+0x5c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <HAL_MspInit+0x5c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_MspInit+0x5c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_MspInit+0x60>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_MspInit+0x60>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001628:	e7fe      	b.n	8001628 <NMI_Handler+0x4>

0800162a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <HardFault_Handler+0x4>

08001630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <MemManage_Handler+0x4>

08001636 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <UsageFault_Handler+0x4>

08001642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166a:	f000 f93d 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <CAN1_TX_IRQHandler+0x10>)
 800167a:	f000 fdd8 	bl	800222e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000e0 	.word	0x200000e0

08001688 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <CAN1_RX0_IRQHandler+0x10>)
 800168e:	f000 fdce 	bl	800222e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000e0 	.word	0x200000e0

0800169c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <CAN1_RX1_IRQHandler+0x10>)
 80016a2:	f000 fdc4 	bl	800222e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000e0 	.word	0x200000e0

080016b0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <CAN1_SCE_IRQHandler+0x10>)
 80016b6:	f000 fdba 	bl	800222e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200000e0 	.word	0x200000e0

080016c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00a      	b.n	80016ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016d6:	f3af 8000 	nop.w
 80016da:	4601      	mov	r1, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	b2ca      	uxtb	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf0      	blt.n	80016d6 <_read+0x12>
	}

return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e009      	b.n	8001724 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf1      	blt.n	8001710 <_write+0x12>
	}
	return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
	return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175c:	605a      	str	r2, [r3, #4]
	return 0;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
	return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
	...

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f003 f8ea 	bl	80049a0 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20010000 	.word	0x20010000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	200000ac 	.word	0x200000ac
 8001800:	20000280 	.word	0x20000280

08001804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001836:	f7ff ffe5 	bl	8001804 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800183a:	f003 f8b7 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7ff fcc1 	bl	80011c4 <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800184c:	080059d4 	.word	0x080059d4
  ldr r2, =_sbss
 8001850:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001854:	20000280 	.word	0x20000280

08001858 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x28>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 ffe9 	bl	8002844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fea2 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 f801 	bl	80028ae <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c4:	f000 ffc9 	bl	800285a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000008 	.word	0x20000008
 8001908:	20000248 	.word	0x20000248

0800190c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000248 	.word	0x20000248

08001920 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0ed      	b.n	8001b0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7fe fe9e 	bl	8000680 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001954:	f7ff ffda 	bl	800190c <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800195a:	e012      	b.n	8001982 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800195c:	f7ff ffd6 	bl	800190c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b0a      	cmp	r3, #10
 8001968:	d90b      	bls.n	8001982 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2205      	movs	r2, #5
 800197a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0c5      	b.n	8001b0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0e5      	beq.n	800195c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0202 	bic.w	r2, r2, #2
 800199e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a0:	f7ff ffb4 	bl	800190c <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019a6:	e012      	b.n	80019ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a8:	f7ff ffb0 	bl	800190c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d90b      	bls.n	80019ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2205      	movs	r2, #5
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e09f      	b.n	8001b0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e5      	bne.n	80019a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7e1b      	ldrb	r3, [r3, #24]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e007      	b.n	8001a06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7e5b      	ldrb	r3, [r3, #25]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e007      	b.n	8001a30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7e9b      	ldrb	r3, [r3, #26]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e007      	b.n	8001a5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0220 	bic.w	r2, r2, #32
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7edb      	ldrb	r3, [r3, #27]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0210 	bic.w	r2, r2, #16
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e007      	b.n	8001a84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0210 	orr.w	r2, r2, #16
 8001a82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7f1b      	ldrb	r3, [r3, #28]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0208 	orr.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0208 	bic.w	r2, r2, #8
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7f5b      	ldrb	r3, [r3, #29]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0204 	orr.w	r2, r2, #4
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e007      	b.n	8001ad8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	ea42 0103 	orr.w	r1, r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	1e5a      	subs	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b30:	7cfb      	ldrb	r3, [r7, #19]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d003      	beq.n	8001b3e <HAL_CAN_ConfigFilter+0x26>
 8001b36:	7cfb      	ldrb	r3, [r7, #19]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	f040 80be 	bne.w	8001cba <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001b40:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b48:	f043 0201 	orr.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2201      	movs	r2, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	401a      	ands	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d123      	bne.n	8001be8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001bc2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3248      	adds	r2, #72	; 0x48
 8001bc8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bdc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	3348      	adds	r3, #72	; 0x48
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	440b      	add	r3, r1
 8001be6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d122      	bne.n	8001c36 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3248      	adds	r2, #72	; 0x48
 8001c16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	3348      	adds	r3, #72	; 0x48
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	401a      	ands	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c50:	e007      	b.n	8001c62 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	401a      	ands	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c7c:	e007      	b.n	8001c8e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cac:	f023 0201 	bic.w	r2, r3, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e006      	b.n	8001cc8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
  }
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40006400 	.word	0x40006400

08001cd8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d12e      	bne.n	8001d4a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d04:	f7ff fe02 	bl	800190c <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d0a:	e012      	b.n	8001d32 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d0c:	f7ff fdfe 	bl	800190c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b0a      	cmp	r3, #10
 8001d18:	d90b      	bls.n	8001d32 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e012      	b.n	8001d58 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1e5      	bne.n	8001d0c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e006      	b.n	8001d58 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d74:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7e:	7ffb      	ldrb	r3, [r7, #31]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d003      	beq.n	8001d8c <HAL_CAN_AddTxMessage+0x2c>
 8001d84:	7ffb      	ldrb	r3, [r7, #31]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	f040 80b8 	bne.w	8001efc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a0 	beq.w	8001eec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	0e1b      	lsrs	r3, r3, #24
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d907      	bls.n	8001dcc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e09e      	b.n	8001f0a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	6809      	ldr	r1, [r1, #0]
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3318      	adds	r3, #24
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	440b      	add	r3, r1
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e00f      	b.n	8001e1a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e04:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e0a:	68f9      	ldr	r1, [r7, #12]
 8001e0c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e0e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3318      	adds	r3, #24
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	440b      	add	r3, r1
 8001e18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3318      	adds	r3, #24
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	440b      	add	r3, r1
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	7d1b      	ldrb	r3, [r3, #20]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d111      	bne.n	8001e5a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	6811      	ldr	r1, [r2, #0]
 8001e4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	3318      	adds	r3, #24
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	440b      	add	r3, r1
 8001e56:	3304      	adds	r3, #4
 8001e58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3307      	adds	r3, #7
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	061a      	lsls	r2, r3, #24
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3306      	adds	r3, #6
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3305      	adds	r3, #5
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	4313      	orrs	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	3204      	adds	r2, #4
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	6811      	ldr	r1, [r2, #0]
 8001e82:	ea43 0200 	orr.w	r2, r3, r0
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3303      	adds	r3, #3
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	061a      	lsls	r2, r3, #24
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	4313      	orrs	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	6811      	ldr	r1, [r2, #0]
 8001eb8:	ea43 0200 	orr.w	r2, r3, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ec6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3318      	adds	r3, #24
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4413      	add	r3, r2
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	6811      	ldr	r1, [r2, #0]
 8001eda:	f043 0201 	orr.w	r2, r3, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	440b      	add	r3, r1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e00e      	b.n	8001f0a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e006      	b.n	8001f0a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3724      	adds	r7, #36	; 0x24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f26:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d002      	beq.n	8001f34 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d11d      	bne.n	8001f70 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001f70:	68fb      	ldr	r3, [r7, #12]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f90:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d002      	beq.n	8001f9e <HAL_CAN_IsTxMessagePending+0x22>
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	069b      	lsls	r3, r3, #26
 8001fa8:	401a      	ands	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	069b      	lsls	r3, r3, #26
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_GetRxMessage+0x24>
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 80f3 	bne.w	80021cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10e      	bne.n	800200a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0e7      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d8      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0204 	and.w	r2, r3, #4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	331b      	adds	r3, #27
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e00b      	b.n	8002078 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	08db      	lsrs	r3, r3, #3
 8002070:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0202 	and.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	331b      	adds	r3, #27
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	331b      	adds	r3, #27
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	331b      	adds	r3, #27
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	4413      	add	r3, r2
 80020e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0a1a      	lsrs	r2, r3, #8
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4413      	add	r3, r2
 8002110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	0c1a      	lsrs	r2, r3, #16
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	3302      	adds	r3, #2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0e1a      	lsrs	r2, r3, #24
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3303      	adds	r3, #3
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4413      	add	r3, r2
 8002144:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	3304      	adds	r3, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	4413      	add	r3, r2
 800215c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0a1a      	lsrs	r2, r3, #8
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	3305      	adds	r3, #5
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	4413      	add	r3, r2
 8002176:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0c1a      	lsrs	r2, r3, #16
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3306      	adds	r3, #6
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4413      	add	r3, r2
 8002190:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0e1a      	lsrs	r2, r3, #24
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	3307      	adds	r3, #7
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0220 	orr.w	r2, r2, #32
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691a      	ldr	r2, [r3, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e006      	b.n	80021da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d002      	beq.n	8002202 <HAL_CAN_ActivateNotification+0x1e>
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d109      	bne.n	8002216 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e006      	b.n	8002224 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b08a      	sub	sp, #40	; 0x28
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d07c      	beq.n	800236e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d023      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2201      	movs	r2, #1
 8002284:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f983 	bl	800259c <HAL_CAN_TxMailbox0CompleteCallback>
 8002296:	e016      	b.n	80022c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
 80022aa:	e00c      	b.n	80022c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	e002      	b.n	80022c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f986 	bl	80025d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d024      	beq.n	800231a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f962 	bl	80025ae <HAL_CAN_TxMailbox1CompleteCallback>
 80022ea:	e016      	b.n	800231a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	e00c      	b.n	800231a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
 8002312:	e002      	b.n	800231a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f965 	bl	80025e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d024      	beq.n	800236e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800232c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f941 	bl	80025c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800233e:	e016      	b.n	800236e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	e00c      	b.n	800236e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e002      	b.n	800236e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f944 	bl	80025f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00c      	beq.n	8002392 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2210      	movs	r2, #16
 8002390:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2208      	movs	r2, #8
 80023ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f92a 	bl	8002608 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7fe ff85 	bl	80012dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00c      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2210      	movs	r2, #16
 80023f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2208      	movs	r2, #8
 8002410:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f901 	bl	800261a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7fe ff7f 	bl	8001334 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00b      	beq.n	8002458 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2210      	movs	r2, #16
 8002450:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f8ea 	bl	800262c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2208      	movs	r2, #8
 8002472:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f8e2 	bl	800263e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d07b      	beq.n	800257c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d072      	beq.n	8002574 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d043      	beq.n	8002574 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d03e      	beq.n	8002574 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fc:	2b60      	cmp	r3, #96	; 0x60
 80024fe:	d02b      	beq.n	8002558 <HAL_CAN_IRQHandler+0x32a>
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d82e      	bhi.n	8002562 <HAL_CAN_IRQHandler+0x334>
 8002504:	2b50      	cmp	r3, #80	; 0x50
 8002506:	d022      	beq.n	800254e <HAL_CAN_IRQHandler+0x320>
 8002508:	2b50      	cmp	r3, #80	; 0x50
 800250a:	d82a      	bhi.n	8002562 <HAL_CAN_IRQHandler+0x334>
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d019      	beq.n	8002544 <HAL_CAN_IRQHandler+0x316>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d826      	bhi.n	8002562 <HAL_CAN_IRQHandler+0x334>
 8002514:	2b30      	cmp	r3, #48	; 0x30
 8002516:	d010      	beq.n	800253a <HAL_CAN_IRQHandler+0x30c>
 8002518:	2b30      	cmp	r3, #48	; 0x30
 800251a:	d822      	bhi.n	8002562 <HAL_CAN_IRQHandler+0x334>
 800251c:	2b10      	cmp	r3, #16
 800251e:	d002      	beq.n	8002526 <HAL_CAN_IRQHandler+0x2f8>
 8002520:	2b20      	cmp	r3, #32
 8002522:	d005      	beq.n	8002530 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002524:	e01d      	b.n	8002562 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800252e:	e019      	b.n	8002564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f043 0310 	orr.w	r3, r3, #16
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002538:	e014      	b.n	8002564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	f043 0320 	orr.w	r3, r3, #32
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002542:	e00f      	b.n	8002564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800254c:	e00a      	b.n	8002564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002556:	e005      	b.n	8002564 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002560:	e000      	b.n	8002564 <HAL_CAN_IRQHandler+0x336>
            break;
 8002562:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002572:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2204      	movs	r2, #4
 800257a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe ffa4 	bl	80014dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002678:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800267a:	7bbb      	ldrb	r3, [r7, #14]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <HAL_CAN_ResetError+0x20>
 8002680:	7bbb      	ldrb	r3, [r7, #14]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d103      	bne.n	800268e <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
 800268c:	e007      	b.n	800269e <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
	...

080026ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c8:	4013      	ands	r3, r2
 80026ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <__NVIC_SetPriorityGrouping+0x44>)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	60d3      	str	r3, [r2, #12]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <__NVIC_GetPriorityGrouping+0x18>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	f003 0307 	and.w	r3, r3, #7
}
 8002702:	4618      	mov	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	2b00      	cmp	r3, #0
 8002720:	db0b      	blt.n	800273a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	f003 021f 	and.w	r2, r3, #31
 8002728:	4906      	ldr	r1, [pc, #24]	; (8002744 <__NVIC_EnableIRQ+0x34>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	2001      	movs	r0, #1
 8002732:	fa00 f202 	lsl.w	r2, r0, r2
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db0a      	blt.n	8002772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	490c      	ldr	r1, [pc, #48]	; (8002794 <__NVIC_SetPriority+0x4c>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	0112      	lsls	r2, r2, #4
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	440b      	add	r3, r1
 800276c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002770:	e00a      	b.n	8002788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4908      	ldr	r1, [pc, #32]	; (8002798 <__NVIC_SetPriority+0x50>)
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3b04      	subs	r3, #4
 8002780:	0112      	lsls	r2, r2, #4
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	440b      	add	r3, r1
 8002786:	761a      	strb	r2, [r3, #24]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f1c3 0307 	rsb	r3, r3, #7
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	bf28      	it	cs
 80027ba:	2304      	movcs	r3, #4
 80027bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3304      	adds	r3, #4
 80027c2:	2b06      	cmp	r3, #6
 80027c4:	d902      	bls.n	80027cc <NVIC_EncodePriority+0x30>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3b03      	subs	r3, #3
 80027ca:	e000      	b.n	80027ce <NVIC_EncodePriority+0x32>
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	401a      	ands	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43d9      	mvns	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	4313      	orrs	r3, r2
         );
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d301      	bcc.n	8002816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002812:	2301      	movs	r3, #1
 8002814:	e00f      	b.n	8002836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <SysTick_Config+0x40>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3b01      	subs	r3, #1
 800281c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281e:	210f      	movs	r1, #15
 8002820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002824:	f7ff ff90 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <SysTick_Config+0x40>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <SysTick_Config+0x40>)
 8002830:	2207      	movs	r2, #7
 8002832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000e010 	.word	0xe000e010

08002844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff2d 	bl	80026ac <__NVIC_SetPriorityGrouping>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800286c:	f7ff ff42 	bl	80026f4 <__NVIC_GetPriorityGrouping>
 8002870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	6978      	ldr	r0, [r7, #20]
 8002878:	f7ff ff90 	bl	800279c <NVIC_EncodePriority>
 800287c:	4602      	mov	r2, r0
 800287e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff5f 	bl	8002748 <__NVIC_SetPriority>
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff35 	bl	8002710 <__NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ffa2 	bl	8002800 <SysTick_Config>
 80028bc:	4603      	mov	r3, r0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_FLASH_Program+0xd8>)
 80028e4:	7e1b      	ldrb	r3, [r3, #24]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_FLASH_Program+0x26>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e054      	b.n	8002998 <HAL_FLASH_Program+0xd0>
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_FLASH_Program+0xd8>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028f8:	f000 f898 	bl	8002a2c <FLASH_WaitForLastOperation>
 80028fc:	4603      	mov	r3, r0
 80028fe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d144      	bne.n	8002990 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800290c:	2301      	movs	r3, #1
 800290e:	757b      	strb	r3, [r7, #21]
 8002910:	e007      	b.n	8002922 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d102      	bne.n	800291e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002918:	2302      	movs	r3, #2
 800291a:	757b      	strb	r3, [r7, #21]
 800291c:	e001      	b.n	8002922 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800291e:	2304      	movs	r3, #4
 8002920:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002922:	2300      	movs	r3, #0
 8002924:	75bb      	strb	r3, [r7, #22]
 8002926:	e02d      	b.n	8002984 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002928:	7dbb      	ldrb	r3, [r7, #22]
 800292a:	005a      	lsls	r2, r3, #1
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	eb02 0c03 	add.w	ip, r2, r3
 8002932:	7dbb      	ldrb	r3, [r7, #22]
 8002934:	0119      	lsls	r1, r3, #4
 8002936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800293a:	f1c1 0620 	rsb	r6, r1, #32
 800293e:	f1a1 0020 	sub.w	r0, r1, #32
 8002942:	fa22 f401 	lsr.w	r4, r2, r1
 8002946:	fa03 f606 	lsl.w	r6, r3, r6
 800294a:	4334      	orrs	r4, r6
 800294c:	fa23 f000 	lsr.w	r0, r3, r0
 8002950:	4304      	orrs	r4, r0
 8002952:	fa23 f501 	lsr.w	r5, r3, r1
 8002956:	b2a3      	uxth	r3, r4
 8002958:	4619      	mov	r1, r3
 800295a:	4660      	mov	r0, ip
 800295c:	f000 f84a 	bl	80029f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002960:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002964:	f000 f862 	bl	8002a2c <FLASH_WaitForLastOperation>
 8002968:	4603      	mov	r3, r0
 800296a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800296c:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_FLASH_Program+0xdc>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_FLASH_Program+0xdc>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d107      	bne.n	800298e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800297e:	7dbb      	ldrb	r3, [r7, #22]
 8002980:	3301      	adds	r3, #1
 8002982:	75bb      	strb	r3, [r7, #22]
 8002984:	7dba      	ldrb	r2, [r7, #22]
 8002986:	7d7b      	ldrb	r3, [r7, #21]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3cd      	bcc.n	8002928 <HAL_FLASH_Program+0x60>
 800298c:	e000      	b.n	8002990 <HAL_FLASH_Program+0xc8>
      {
        break;
 800298e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_FLASH_Program+0xd8>)
 8002992:	2200      	movs	r2, #0
 8002994:	761a      	strb	r2, [r3, #24]

  return status;
 8002996:	7dfb      	ldrb	r3, [r7, #23]
}
 8002998:	4618      	mov	r0, r3
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a0:	20000250 	.word	0x20000250
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_FLASH_Unlock+0x40>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_FLASH_Unlock+0x40>)
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <HAL_FLASH_Unlock+0x44>)
 80029c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_FLASH_Unlock+0x40>)
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_FLASH_Unlock+0x48>)
 80029c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_FLASH_Unlock+0x40>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80029da:	79fb      	ldrb	r3, [r7, #7]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40022000 	.word	0x40022000
 80029ec:	45670123 	.word	0x45670123
 80029f0:	cdef89ab 	.word	0xcdef89ab

080029f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <FLASH_Program_HalfWord+0x30>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <FLASH_Program_HalfWord+0x34>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <FLASH_Program_HalfWord+0x34>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	801a      	strh	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000250 	.word	0x20000250
 8002a28:	40022000 	.word	0x40022000

08002a2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002a34:	f7fe ff6a 	bl	800190c <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a3a:	e010      	b.n	8002a5e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a42:	d00c      	beq.n	8002a5e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <FLASH_WaitForLastOperation+0x2e>
 8002a4a:	f7fe ff5f 	bl	800190c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d201      	bcs.n	8002a5e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e025      	b.n	8002aaa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <FLASH_WaitForLastOperation+0x88>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e8      	bne.n	8002a3c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <FLASH_WaitForLastOperation+0x88>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <FLASH_WaitForLastOperation+0x88>)
 8002a78:	2220      	movs	r2, #32
 8002a7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <FLASH_WaitForLastOperation+0x88>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <FLASH_WaitForLastOperation+0x88>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <FLASH_WaitForLastOperation+0x88>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002aa0:	f000 f80a 	bl	8002ab8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40022000 	.word	0x40022000

08002ab8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <FLASH_SetErrorCode+0x9c>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <FLASH_SetErrorCode+0x9c>)
 8002ad8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f043 0310 	orr.w	r3, r3, #16
 8002ae0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <FLASH_SetErrorCode+0x9c>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <FLASH_SetErrorCode+0x9c>)
 8002af8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00b      	beq.n	8002b26 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002b0e:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <FLASH_SetErrorCode+0x9c>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <FLASH_SetErrorCode+0x9c>)
 8002b18:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f240 1201 	movw	r2, #257	; 0x101
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d106      	bne.n	8002b3e <FLASH_SetErrorCode+0x86>
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	61d3      	str	r3, [r2, #28]
}  
 8002b3c:	e002      	b.n	8002b44 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <FLASH_SetErrorCode+0x98>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60d3      	str	r3, [r2, #12]
}  
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000
 8002b54:	20000250 	.word	0x20000250

08002b58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_FLASHEx_Erase+0xd0>)
 8002b6c:	7e1b      	ldrb	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_FLASHEx_Erase+0x1e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e053      	b.n	8002c1e <HAL_FLASHEx_Erase+0xc6>
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <HAL_FLASHEx_Erase+0xd0>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d116      	bne.n	8002bb2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b88:	f7ff ff50 	bl	8002a2c <FLASH_WaitForLastOperation>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d141      	bne.n	8002c16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002b92:	2001      	movs	r0, #1
 8002b94:	f000 f84c 	bl	8002c30 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b9c:	f7ff ff46 	bl	8002a2c <FLASH_WaitForLastOperation>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <HAL_FLASHEx_Erase+0xd4>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	; (8002c2c <HAL_FLASHEx_Erase+0xd4>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6113      	str	r3, [r2, #16]
 8002bb0:	e031      	b.n	8002c16 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002bb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bb6:	f7ff ff39 	bl	8002a2c <FLASH_WaitForLastOperation>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d12a      	bne.n	8002c16 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	e019      	b.n	8002c04 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002bd0:	68b8      	ldr	r0, [r7, #8]
 8002bd2:	f000 f849 	bl	8002c68 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bda:	f7ff ff27 	bl	8002a2c <FLASH_WaitForLastOperation>
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_FLASHEx_Erase+0xd4>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <HAL_FLASHEx_Erase+0xd4>)
 8002be8:	f023 0302 	bic.w	r3, r3, #2
 8002bec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	601a      	str	r2, [r3, #0]
            break;
 8002bfa:	e00c      	b.n	8002c16 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c02:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	02da      	lsls	r2, r3, #11
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d3dc      	bcc.n	8002bd0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <HAL_FLASHEx_Erase+0xd0>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	761a      	strb	r2, [r3, #24]

  return status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000250 	.word	0x20000250
 8002c2c:	40022000 	.word	0x40022000

08002c30 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <FLASH_MassErase+0x30>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <FLASH_MassErase+0x34>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <FLASH_MassErase+0x34>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <FLASH_MassErase+0x34>)
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <FLASH_MassErase+0x34>)
 8002c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c54:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000250 	.word	0x20000250
 8002c64:	40022000 	.word	0x40022000

08002c68 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <FLASH_PageErase+0x38>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <FLASH_PageErase+0x3c>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <FLASH_PageErase+0x3c>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c82:	4a08      	ldr	r2, [pc, #32]	; (8002ca4 <FLASH_PageErase+0x3c>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <FLASH_PageErase+0x3c>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <FLASH_PageErase+0x3c>)
 8002c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c92:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000250 	.word	0x20000250
 8002ca4:	40022000 	.word	0x40022000

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b08b      	sub	sp, #44	; 0x2c
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	e169      	b.n	8002f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	f040 8158 	bne.w	8002f8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a9a      	ldr	r2, [pc, #616]	; (8002f48 <HAL_GPIO_Init+0x2a0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d05e      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a98      	ldr	r2, [pc, #608]	; (8002f48 <HAL_GPIO_Init+0x2a0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d875      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002cea:	4a98      	ldr	r2, [pc, #608]	; (8002f4c <HAL_GPIO_Init+0x2a4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d058      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002cf0:	4a96      	ldr	r2, [pc, #600]	; (8002f4c <HAL_GPIO_Init+0x2a4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d86f      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002cf6:	4a96      	ldr	r2, [pc, #600]	; (8002f50 <HAL_GPIO_Init+0x2a8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d052      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002cfc:	4a94      	ldr	r2, [pc, #592]	; (8002f50 <HAL_GPIO_Init+0x2a8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d869      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d02:	4a94      	ldr	r2, [pc, #592]	; (8002f54 <HAL_GPIO_Init+0x2ac>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d04c      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002d08:	4a92      	ldr	r2, [pc, #584]	; (8002f54 <HAL_GPIO_Init+0x2ac>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d863      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d0e:	4a92      	ldr	r2, [pc, #584]	; (8002f58 <HAL_GPIO_Init+0x2b0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d046      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
 8002d14:	4a90      	ldr	r2, [pc, #576]	; (8002f58 <HAL_GPIO_Init+0x2b0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d85d      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d1a:	2b12      	cmp	r3, #18
 8002d1c:	d82a      	bhi.n	8002d74 <HAL_GPIO_Init+0xcc>
 8002d1e:	2b12      	cmp	r3, #18
 8002d20:	d859      	bhi.n	8002dd6 <HAL_GPIO_Init+0x12e>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_GPIO_Init+0x80>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002da3 	.word	0x08002da3
 8002d2c:	08002d7d 	.word	0x08002d7d
 8002d30:	08002d8f 	.word	0x08002d8f
 8002d34:	08002dd1 	.word	0x08002dd1
 8002d38:	08002dd7 	.word	0x08002dd7
 8002d3c:	08002dd7 	.word	0x08002dd7
 8002d40:	08002dd7 	.word	0x08002dd7
 8002d44:	08002dd7 	.word	0x08002dd7
 8002d48:	08002dd7 	.word	0x08002dd7
 8002d4c:	08002dd7 	.word	0x08002dd7
 8002d50:	08002dd7 	.word	0x08002dd7
 8002d54:	08002dd7 	.word	0x08002dd7
 8002d58:	08002dd7 	.word	0x08002dd7
 8002d5c:	08002dd7 	.word	0x08002dd7
 8002d60:	08002dd7 	.word	0x08002dd7
 8002d64:	08002dd7 	.word	0x08002dd7
 8002d68:	08002dd7 	.word	0x08002dd7
 8002d6c:	08002d85 	.word	0x08002d85
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	4a79      	ldr	r2, [pc, #484]	; (8002f5c <HAL_GPIO_Init+0x2b4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d7a:	e02c      	b.n	8002dd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	623b      	str	r3, [r7, #32]
          break;
 8002d82:	e029      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	623b      	str	r3, [r7, #32]
          break;
 8002d8c:	e024      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	3308      	adds	r3, #8
 8002d94:	623b      	str	r3, [r7, #32]
          break;
 8002d96:	e01f      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	e01a      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002daa:	2304      	movs	r3, #4
 8002dac:	623b      	str	r3, [r7, #32]
          break;
 8002dae:	e013      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db8:	2308      	movs	r3, #8
 8002dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	611a      	str	r2, [r3, #16]
          break;
 8002dc2:	e009      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	615a      	str	r2, [r3, #20]
          break;
 8002dce:	e003      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
          break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x130>
          break;
 8002dd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2bff      	cmp	r3, #255	; 0xff
 8002ddc:	d801      	bhi.n	8002de2 <HAL_GPIO_Init+0x13a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	e001      	b.n	8002de6 <HAL_GPIO_Init+0x13e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d802      	bhi.n	8002df4 <HAL_GPIO_Init+0x14c>
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	e002      	b.n	8002dfa <HAL_GPIO_Init+0x152>
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	3b08      	subs	r3, #8
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	210f      	movs	r1, #15
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	431a      	orrs	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80b1 	beq.w	8002f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e28:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <HAL_GPIO_Init+0x2b8>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a4c      	ldr	r2, [pc, #304]	; (8002f60 <HAL_GPIO_Init+0x2b8>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_GPIO_Init+0x2b8>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e40:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a40      	ldr	r2, [pc, #256]	; (8002f68 <HAL_GPIO_Init+0x2c0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_GPIO_Init+0x1ec>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3f      	ldr	r2, [pc, #252]	; (8002f6c <HAL_GPIO_Init+0x2c4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00d      	beq.n	8002e90 <HAL_GPIO_Init+0x1e8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a3e      	ldr	r2, [pc, #248]	; (8002f70 <HAL_GPIO_Init+0x2c8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <HAL_GPIO_Init+0x1e4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a3d      	ldr	r2, [pc, #244]	; (8002f74 <HAL_GPIO_Init+0x2cc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d101      	bne.n	8002e88 <HAL_GPIO_Init+0x1e0>
 8002e84:	2303      	movs	r3, #3
 8002e86:	e006      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e88:	2304      	movs	r3, #4
 8002e8a:	e004      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e002      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_GPIO_Init+0x1ee>
 8002e94:	2300      	movs	r3, #0
 8002e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e98:	f002 0203 	and.w	r2, r2, #3
 8002e9c:	0092      	lsls	r2, r2, #2
 8002e9e:	4093      	lsls	r3, r2
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ea6:	492f      	ldr	r1, [pc, #188]	; (8002f64 <HAL_GPIO_Init+0x2bc>)
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	492c      	ldr	r1, [pc, #176]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ece:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4928      	ldr	r1, [pc, #160]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	4922      	ldr	r1, [pc, #136]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	604b      	str	r3, [r1, #4]
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	491e      	ldr	r1, [pc, #120]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d006      	beq.n	8002f1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	4918      	ldr	r1, [pc, #96]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]
 8002f1c:	e006      	b.n	8002f2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	4914      	ldr	r1, [pc, #80]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d021      	beq.n	8002f7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	490e      	ldr	r1, [pc, #56]	; (8002f78 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60cb      	str	r3, [r1, #12]
 8002f44:	e021      	b.n	8002f8a <HAL_GPIO_Init+0x2e2>
 8002f46:	bf00      	nop
 8002f48:	10320000 	.word	0x10320000
 8002f4c:	10310000 	.word	0x10310000
 8002f50:	10220000 	.word	0x10220000
 8002f54:	10210000 	.word	0x10210000
 8002f58:	10120000 	.word	0x10120000
 8002f5c:	10110000 	.word	0x10110000
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010800 	.word	0x40010800
 8002f6c:	40010c00 	.word	0x40010c00
 8002f70:	40011000 	.word	0x40011000
 8002f74:	40011400 	.word	0x40011400
 8002f78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_GPIO_Init+0x304>)
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	4909      	ldr	r1, [pc, #36]	; (8002fac <HAL_GPIO_Init+0x304>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	fa22 f303 	lsr.w	r3, r2, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f47f ae8e 	bne.w	8002cbc <HAL_GPIO_Init+0x14>
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	372c      	adds	r7, #44	; 0x2c
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40010400 	.word	0x40010400

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e12b      	b.n	800321a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe f862 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 fc92 	bl	800493c <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a81      	ldr	r2, [pc, #516]	; (8003224 <HAL_I2C_Init+0x274>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a80      	ldr	r2, [pc, #512]	; (8003228 <HAL_I2C_Init+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a7d      	ldr	r2, [pc, #500]	; (800322c <HAL_I2C_Init+0x27c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0e7      	b.n	800321a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a78      	ldr	r2, [pc, #480]	; (8003230 <HAL_I2C_Init+0x280>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <HAL_I2C_Init+0x274>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a69      	ldr	r2, [pc, #420]	; (8003234 <HAL_I2C_Init+0x284>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	495c      	ldr	r1, [pc, #368]	; (8003224 <HAL_I2C_Init+0x274>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d819      	bhi.n	80030ec <HAL_I2C_Init+0x13c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030cc:	400b      	ands	r3, r1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_I2C_Init+0x138>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1e59      	subs	r1, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e6:	e051      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e04f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_I2C_Init+0x168>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e012      	b.n	800313e <HAL_I2C_Init+0x18e>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	0099      	lsls	r1, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	fbb0 f3f3 	udiv	r3, r0, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Init+0x196>
 8003142:	2301      	movs	r3, #1
 8003144:	e022      	b.n	800318c <HAL_I2C_Init+0x1dc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <HAL_I2C_Init+0x1bc>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e58      	subs	r0, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	440b      	add	r3, r1
 800315c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316a:	e00f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	6809      	ldr	r1, [r1, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6911      	ldr	r1, [r2, #16]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	000186a0 	.word	0x000186a0
 8003228:	001e847f 	.word	0x001e847f
 800322c:	003d08ff 	.word	0x003d08ff
 8003230:	431bde83 	.word	0x431bde83
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	460b      	mov	r3, r1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003252:	f7fe fb5b 	bl	800190c <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b20      	cmp	r3, #32
 8003262:	f040 80d9 	bne.w	8003418 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2319      	movs	r3, #25
 800326c:	2201      	movs	r2, #1
 800326e:	496d      	ldr	r1, [pc, #436]	; (8003424 <HAL_I2C_Mem_Write+0x1ec>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fcc1 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	e0cc      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2C_Mem_Write+0x56>
 800328a:	2302      	movs	r3, #2
 800328c:	e0c5      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d007      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2221      	movs	r2, #33	; 0x21
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2240      	movs	r2, #64	; 0x40
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <HAL_I2C_Mem_Write+0x1f0>)
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032f6:	88f8      	ldrh	r0, [r7, #6]
 80032f8:	893a      	ldrh	r2, [r7, #8]
 80032fa:	8979      	ldrh	r1, [r7, #10]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	4603      	mov	r3, r0
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 faf8 	bl	80038fc <I2C_RequestMemoryWrite>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d052      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e081      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fd42 	bl	8003da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06b      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d11b      	bne.n	80033b8 <HAL_I2C_Mem_Write+0x180>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1aa      	bne.n	8003316 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fd2e 	bl	8003e26 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e016      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	00100002 	.word	0x00100002
 8003428:	ffff0000 	.word	0xffff0000

0800342c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	; 0x30
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	4603      	mov	r3, r0
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	460b      	mov	r3, r1
 8003440:	813b      	strh	r3, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800344a:	f7fe fa5f 	bl	800190c <HAL_GetTick>
 800344e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b20      	cmp	r3, #32
 800345a:	f040 8244 	bne.w	80038e6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2319      	movs	r3, #25
 8003464:	2201      	movs	r2, #1
 8003466:	4982      	ldr	r1, [pc, #520]	; (8003670 <HAL_I2C_Mem_Read+0x244>)
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fbc5 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	e237      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_I2C_Mem_Read+0x5a>
 8003482:	2302      	movs	r3, #2
 8003484:	e230      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d007      	beq.n	80034ac <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2222      	movs	r2, #34	; 0x22
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2240      	movs	r2, #64	; 0x40
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a62      	ldr	r2, [pc, #392]	; (8003674 <HAL_I2C_Mem_Read+0x248>)
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ee:	88f8      	ldrh	r0, [r7, #6]
 80034f0:	893a      	ldrh	r2, [r7, #8]
 80034f2:	8979      	ldrh	r1, [r7, #10]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	4603      	mov	r3, r0
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fa92 	bl	8003a28 <I2C_RequestMemoryRead>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1ec      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d113      	bne.n	800353e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e1c0      	b.n	80038c0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	2b01      	cmp	r3, #1
 8003544:	d11e      	bne.n	8003584 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003554:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003556:	b672      	cpsid	i
}
 8003558:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003580:	b662      	cpsie	i
}
 8003582:	e035      	b.n	80035f0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11e      	bne.n	80035ca <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800359c:	b672      	cpsid	i
}
 800359e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035c6:	b662      	cpsie	i
}
 80035c8:	e012      	b.n	80035f0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035f0:	e166      	b.n	80038c0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	f200 811f 	bhi.w	800383a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b01      	cmp	r3, #1
 8003602:	d123      	bne.n	800364c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fc4d 	bl	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e167      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364a:	e139      	b.n	80038c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	2b02      	cmp	r3, #2
 8003652:	d152      	bne.n	80036fa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	2200      	movs	r2, #0
 800365c:	4906      	ldr	r1, [pc, #24]	; (8003678 <HAL_I2C_Mem_Read+0x24c>)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 faca 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e13c      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
 800366e:	bf00      	nop
 8003670:	00100002 	.word	0x00100002
 8003674:	ffff0000 	.word	0xffff0000
 8003678:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800367c:	b672      	cpsid	i
}
 800367e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036c2:	b662      	cpsie	i
}
 80036c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036f8:	e0e2      	b.n	80038c0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003700:	2200      	movs	r2, #0
 8003702:	497b      	ldr	r1, [pc, #492]	; (80038f0 <HAL_I2C_Mem_Read+0x4c4>)
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fa77 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0e9      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003722:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003724:	b672      	cpsid	i
}
 8003726:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800375a:	4b66      	ldr	r3, [pc, #408]	; (80038f4 <HAL_I2C_Mem_Read+0x4c8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	08db      	lsrs	r3, r3, #3
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_I2C_Mem_Read+0x4cc>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a1a      	lsrs	r2, r3, #8
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00da      	lsls	r2, r3, #3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	3b01      	subs	r3, #1
 8003778:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d118      	bne.n	80037b2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037a2:	b662      	cpsie	i
}
 80037a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e09a      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d1d9      	bne.n	8003774 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003802:	b662      	cpsie	i
}
 8003804:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003838:	e042      	b.n	80038c0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fb32 	bl	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e04c      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d118      	bne.n	80038c0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f ae94 	bne.w	80035f2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3728      	adds	r7, #40	; 0x28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	00010004 	.word	0x00010004
 80038f4:	20000000 	.word	0x20000000
 80038f8:	14f8b589 	.word	0x14f8b589

080038fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	4608      	mov	r0, r1
 8003906:	4611      	mov	r1, r2
 8003908:	461a      	mov	r2, r3
 800390a:	4603      	mov	r3, r0
 800390c:	817b      	strh	r3, [r7, #10]
 800390e:	460b      	mov	r3, r1
 8003910:	813b      	strh	r3, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	2200      	movs	r2, #0
 800392e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f960 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00d      	beq.n	800395a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394c:	d103      	bne.n	8003956 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e05f      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800395a:	897b      	ldrh	r3, [r7, #10]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	6a3a      	ldr	r2, [r7, #32]
 800396e:	492d      	ldr	r1, [pc, #180]	; (8003a24 <I2C_RequestMemoryWrite+0x128>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f998 	bl	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e04c      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	6a39      	ldr	r1, [r7, #32]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fa02 	bl	8003da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d107      	bne.n	80039be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e02b      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d105      	bne.n	80039d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039c8:	893b      	ldrh	r3, [r7, #8]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	611a      	str	r2, [r3, #16]
 80039d2:	e021      	b.n	8003a18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e4:	6a39      	ldr	r1, [r7, #32]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f9dc 	bl	8003da4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00d      	beq.n	8003a0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d107      	bne.n	8003a0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e005      	b.n	8003a1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0e:	893b      	ldrh	r3, [r7, #8]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	00010002 	.word	0x00010002

08003a28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	817b      	strh	r3, [r7, #10]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	813b      	strh	r3, [r7, #8]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8c2 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a88:	d103      	bne.n	8003a92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0aa      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	4952      	ldr	r1, [pc, #328]	; (8003bf4 <I2C_RequestMemoryRead+0x1cc>)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f8fa 	bl	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e097      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f964 	bl	8003da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e076      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b04:	893b      	ldrh	r3, [r7, #8]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	611a      	str	r2, [r3, #16]
 8003b0e:	e021      	b.n	8003b54 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b10:	893b      	ldrh	r3, [r7, #8]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	6a39      	ldr	r1, [r7, #32]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f93e 	bl	8003da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d107      	bne.n	8003b46 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e050      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4a:	893b      	ldrh	r3, [r7, #8]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f923 	bl	8003da4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e035      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f82b 	bl	8003bf8 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb6:	d103      	bne.n	8003bc0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e013      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	4906      	ldr	r1, [pc, #24]	; (8003bf4 <I2C_RequestMemoryRead+0x1cc>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f863 	bl	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	00010002 	.word	0x00010002

08003bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c08:	e025      	b.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d021      	beq.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fd fe7b 	bl	800190c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d116      	bne.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e023      	b.n	8003c9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d10d      	bne.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	e00c      	b.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4013      	ands	r3, r2
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d0b6      	beq.n	8003c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb4:	e051      	b.n	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc4:	d123      	bne.n	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cde:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f043 0204 	orr.w	r2, r3, #4
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e046      	b.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d14:	d021      	beq.n	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d16:	f7fd fdf9 	bl	800190c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d116      	bne.n	8003d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e020      	b.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10c      	bne.n	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	bf14      	ite	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	2300      	moveq	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e00b      	b.n	8003d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	43da      	mvns	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d18d      	bne.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003db0:	e02d      	b.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f8ce 	bl	8003f54 <I2C_IsAcknowledgeFailed>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e02d      	b.n	8003e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc8:	d021      	beq.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fd fd9f 	bl	800190c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d116      	bne.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e007      	b.n	8003e1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e18:	2b80      	cmp	r3, #128	; 0x80
 8003e1a:	d1ca      	bne.n	8003db2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e32:	e02d      	b.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f88d 	bl	8003f54 <I2C_IsAcknowledgeFailed>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e02d      	b.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e4a:	d021      	beq.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4c:	f7fd fd5e 	bl	800190c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d302      	bcc.n	8003e62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d116      	bne.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e007      	b.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d1ca      	bne.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eb4:	e042      	b.n	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d119      	bne.n	8003ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0210 	mvn.w	r2, #16
 8003ecc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e029      	b.n	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef8:	f7fd fd08 	bl	800190c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d302      	bcc.n	8003f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d116      	bne.n	8003f3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e007      	b.n	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b40      	cmp	r3, #64	; 0x40
 8003f48:	d1b5      	bne.n	8003eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d11b      	bne.n	8003fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f043 0204 	orr.w	r2, r3, #4
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e304      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8087 	beq.w	80040de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd0:	4b92      	ldr	r3, [pc, #584]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d00c      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fdc:	4b8f      	ldr	r3, [pc, #572]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d112      	bne.n	800400e <HAL_RCC_OscConfig+0x5e>
 8003fe8:	4b8c      	ldr	r3, [pc, #560]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d10b      	bne.n	800400e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff6:	4b89      	ldr	r3, [pc, #548]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d06c      	beq.n	80040dc <HAL_RCC_OscConfig+0x12c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d168      	bne.n	80040dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e2de      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x76>
 8004018:	4b80      	ldr	r3, [pc, #512]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a7f      	ldr	r2, [pc, #508]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e02e      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x98>
 800402e:	4b7b      	ldr	r3, [pc, #492]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7a      	ldr	r2, [pc, #488]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b78      	ldr	r3, [pc, #480]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e01d      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0xbc>
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a71      	ldr	r2, [pc, #452]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6e      	ldr	r2, [pc, #440]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 800406c:	4b6b      	ldr	r3, [pc, #428]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6a      	ldr	r2, [pc, #424]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a67      	ldr	r2, [pc, #412]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800407e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fd fc3e 	bl	800190c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fd fc3a 	bl	800190c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e292      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b5d      	ldr	r3, [pc, #372]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0xe4>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fc2a 	bl	800190c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fd fc26 	bl	800190c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e27e      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x10c>
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d063      	beq.n	80041b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ea:	4b4c      	ldr	r3, [pc, #304]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040f6:	4b49      	ldr	r3, [pc, #292]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d11c      	bne.n	800413c <HAL_RCC_OscConfig+0x18c>
 8004102:	4b46      	ldr	r3, [pc, #280]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d116      	bne.n	800413c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x176>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e252      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4939      	ldr	r1, [pc, #228]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	e03a      	b.n	80041b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004144:	4b36      	ldr	r3, [pc, #216]	; (8004220 <HAL_RCC_OscConfig+0x270>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd fbdf 	bl	800190c <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004152:	f7fd fbdb 	bl	800190c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e233      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4927      	ldr	r1, [pc, #156]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <HAL_RCC_OscConfig+0x270>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd fbbe 	bl	800190c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7fd fbba 	bl	800190c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e212      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d03a      	beq.n	8004234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d019      	beq.n	80041fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <HAL_RCC_OscConfig+0x274>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fd fb9e 	bl	800190c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fd fb9a 	bl	800190c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e1f2      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f000 fbb6 	bl	8004964 <RCC_Delay>
 80041f8:	e01c      	b.n	8004234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_OscConfig+0x274>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004200:	f7fd fb84 	bl	800190c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004206:	e00f      	b.n	8004228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004208:	f7fd fb80 	bl	800190c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d908      	bls.n	8004228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e1d8      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	42420000 	.word	0x42420000
 8004224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	4b9b      	ldr	r3, [pc, #620]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e9      	bne.n	8004208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a6 	beq.w	800438e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b94      	ldr	r3, [pc, #592]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4a90      	ldr	r2, [pc, #576]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	61d3      	str	r3, [r2, #28]
 800425e:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	4b8b      	ldr	r3, [pc, #556]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d118      	bne.n	80042ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a87      	ldr	r2, [pc, #540]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fd fb41 	bl	800190c <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fd fb3d 	bl	800190c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b64      	cmp	r3, #100	; 0x64
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e195      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	4b7e      	ldr	r3, [pc, #504]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x312>
 80042b4:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6213      	str	r3, [r2, #32]
 80042c0:	e02d      	b.n	800431e <HAL_RCC_OscConfig+0x36e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x334>
 80042ca:	4b73      	ldr	r3, [pc, #460]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a72      	ldr	r2, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6213      	str	r3, [r2, #32]
 80042d6:	4b70      	ldr	r3, [pc, #448]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4a6f      	ldr	r2, [pc, #444]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6213      	str	r3, [r2, #32]
 80042e2:	e01c      	b.n	800431e <HAL_RCC_OscConfig+0x36e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d10c      	bne.n	8004306 <HAL_RCC_OscConfig+0x356>
 80042ec:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a69      	ldr	r2, [pc, #420]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6213      	str	r3, [r2, #32]
 80042f8:	4b67      	ldr	r3, [pc, #412]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4a66      	ldr	r2, [pc, #408]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6213      	str	r3, [r2, #32]
 8004304:	e00b      	b.n	800431e <HAL_RCC_OscConfig+0x36e>
 8004306:	4b64      	ldr	r3, [pc, #400]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a63      	ldr	r2, [pc, #396]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6213      	str	r3, [r2, #32]
 8004312:	4b61      	ldr	r3, [pc, #388]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4a60      	ldr	r2, [pc, #384]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004318:	f023 0304 	bic.w	r3, r3, #4
 800431c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d015      	beq.n	8004352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fd faf1 	bl	800190c <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fd faed 	bl	800190c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	; 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e143      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	4b54      	ldr	r3, [pc, #336]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ee      	beq.n	800432e <HAL_RCC_OscConfig+0x37e>
 8004350:	e014      	b.n	800437c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004352:	f7fd fadb 	bl	800190c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fd fad7 	bl	800190c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e12d      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004370:	4b49      	ldr	r3, [pc, #292]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d105      	bne.n	800438e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004382:	4b45      	ldr	r3, [pc, #276]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	4a44      	ldr	r2, [pc, #272]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 808c 	beq.w	80044b0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004398:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d10e      	bne.n	80043c4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80043a6:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d108      	bne.n	80043c4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d101      	bne.n	80043c4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e103      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d14e      	bne.n	800446a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80043cc:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d009      	beq.n	80043ec <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80043d8:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0ef      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80043ec:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <HAL_RCC_OscConfig+0x4f0>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fd fa8b 	bl	800190c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043fa:	f7fd fa87 	bl	800190c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0df      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004418:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004424:	491c      	ldr	r1, [pc, #112]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800442a:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4918      	ldr	r1, [pc, #96]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004438:	4313      	orrs	r3, r2
 800443a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800443c:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <HAL_RCC_OscConfig+0x4f0>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fd fa63 	bl	800190c <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800444a:	f7fd fa5f 	bl	800190c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b64      	cmp	r3, #100	; 0x64
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e0b7      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800445c:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x49a>
 8004468:	e022      	b.n	80044b0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004474:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_OscConfig+0x4f0>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd fa46 	bl	800190c <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004482:	e00f      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004484:	f7fd fa42 	bl	800190c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d908      	bls.n	80044a4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e09a      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	40007000 	.word	0x40007000
 80044a0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80044a4:	4b4b      	ldr	r3, [pc, #300]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e9      	bne.n	8004484 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8088 	beq.w	80045ca <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ba:	4b46      	ldr	r3, [pc, #280]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d068      	beq.n	8004598 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d14d      	bne.n	800456a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b42      	ldr	r3, [pc, #264]	; (80045d8 <HAL_RCC_OscConfig+0x628>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fd fa1a 	bl	800190c <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fd fa16 	bl	800190c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e06e      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004502:	d10f      	bne.n	8004524 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004504:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4931      	ldr	r1, [pc, #196]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 800450e:	4313      	orrs	r3, r2
 8004510:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004512:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f023 020f 	bic.w	r2, r3, #15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	492d      	ldr	r1, [pc, #180]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 8004520:	4313      	orrs	r3, r2
 8004522:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004524:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004534:	430b      	orrs	r3, r1
 8004536:	4927      	ldr	r1, [pc, #156]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800453c:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_RCC_OscConfig+0x628>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fd f9e3 	bl	800190c <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fd f9df 	bl	800190c <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e037      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x59a>
 8004568:	e02f      	b.n	80045ca <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x628>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fd f9cc 	bl	800190c <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004578:	f7fd f9c8 	bl	800190c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e020      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x5c8>
 8004596:	e018      	b.n	80045ca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e013      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_OscConfig+0x624>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d001      	beq.n	80045ca <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	42420060 	.word	0x42420060

080045dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0d0      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045f0:	4b6a      	ldr	r3, [pc, #424]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d910      	bls.n	8004620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b67      	ldr	r3, [pc, #412]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0207 	bic.w	r2, r3, #7
 8004606:	4965      	ldr	r1, [pc, #404]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b63      	ldr	r3, [pc, #396]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0b8      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d020      	beq.n	800466e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a58      	ldr	r2, [pc, #352]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004642:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004650:	4b53      	ldr	r3, [pc, #332]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004656:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800465a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465c:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	494d      	ldr	r1, [pc, #308]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d040      	beq.n	80046fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d115      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e073      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e06b      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f023 0203 	bic.w	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4936      	ldr	r1, [pc, #216]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046cc:	f7fd f91e 	bl	800190c <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d4:	f7fd f91a 	bl	800190c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e053      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 020c 	and.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1eb      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d210      	bcs.n	800472c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 0207 	bic.w	r2, r3, #7
 8004712:	4922      	ldr	r1, [pc, #136]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e032      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4916      	ldr	r1, [pc, #88]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	490e      	ldr	r1, [pc, #56]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800476a:	f000 f821 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 800476e:	4602      	mov	r2, r0
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	490a      	ldr	r1, [pc, #40]	; (80047a4 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	5ccb      	ldrb	r3, [r1, r3]
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_ClockConfig+0x1d0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd f87c 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40022000 	.word	0x40022000
 80047a0:	40021000 	.word	0x40021000
 80047a4:	08005914 	.word	0x08005914
 80047a8:	20000000 	.word	0x20000000
 80047ac:	20000004 	.word	0x20000004

080047b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b2:	b091      	sub	sp, #68	; 0x44
 80047b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80047b6:	4b56      	ldr	r3, [pc, #344]	; (8004910 <HAL_RCC_GetSysClockFreq+0x160>)
 80047b8:	f107 0414 	add.w	r4, r7, #20
 80047bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047be:	c407      	stmia	r4!, {r0, r1, r2}
 80047c0:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80047c2:	4b54      	ldr	r3, [pc, #336]	; (8004914 <HAL_RCC_GetSysClockFreq+0x164>)
 80047c4:	1d3c      	adds	r4, r7, #4
 80047c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	637b      	str	r3, [r7, #52]	; 0x34
 80047d0:	2300      	movs	r3, #0
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
 80047d4:	2300      	movs	r3, #0
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d8:	2300      	movs	r3, #0
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047e8:	4b4b      	ldr	r3, [pc, #300]	; (8004918 <HAL_RCC_GetSysClockFreq+0x168>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d002      	beq.n	80047fe <HAL_RCC_GetSysClockFreq+0x4e>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d003      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x54>
 80047fc:	e080      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_GetSysClockFreq+0x16c>)
 8004800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004802:	e080      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004806:	0c9b      	lsrs	r3, r3, #18
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004810:	4413      	add	r3, r2
 8004812:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d066      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8004822:	4b3d      	ldr	r3, [pc, #244]	; (8004918 <HAL_RCC_GetSysClockFreq+0x168>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800482e:	4413      	add	r3, r2
 8004830:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8004834:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004836:	4b38      	ldr	r3, [pc, #224]	; (8004918 <HAL_RCC_GetSysClockFreq+0x168>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004842:	4b35      	ldr	r3, [pc, #212]	; (8004918 <HAL_RCC_GetSysClockFreq+0x168>)
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	3301      	adds	r3, #1
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004850:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCC_GetSysClockFreq+0x168>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3302      	adds	r3, #2
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	4618      	mov	r0, r3
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	461a      	mov	r2, r3
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	fb02 f501 	mul.w	r5, r2, r1
 8004872:	fb00 f403 	mul.w	r4, r0, r3
 8004876:	442c      	add	r4, r5
 8004878:	fba0 2302 	umull	r2, r3, r0, r2
 800487c:	18e1      	adds	r1, r4, r3
 800487e:	460b      	mov	r3, r1
 8004880:	4926      	ldr	r1, [pc, #152]	; (800491c <HAL_RCC_GetSysClockFreq+0x16c>)
 8004882:	fb01 f003 	mul.w	r0, r1, r3
 8004886:	2100      	movs	r1, #0
 8004888:	fb01 f102 	mul.w	r1, r1, r2
 800488c:	4401      	add	r1, r0
 800488e:	4823      	ldr	r0, [pc, #140]	; (800491c <HAL_RCC_GetSysClockFreq+0x16c>)
 8004890:	fba2 4500 	umull	r4, r5, r2, r0
 8004894:	194b      	adds	r3, r1, r5
 8004896:	461d      	mov	r5, r3
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	4618      	mov	r0, r3
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	461a      	mov	r2, r3
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	fb02 fc01 	mul.w	ip, r2, r1
 80048ac:	fb00 f603 	mul.w	r6, r0, r3
 80048b0:	4466      	add	r6, ip
 80048b2:	fba0 2302 	umull	r2, r3, r0, r2
 80048b6:	18f1      	adds	r1, r6, r3
 80048b8:	460b      	mov	r3, r1
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fb fcb3 	bl	8000228 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4613      	mov	r3, r2
 80048c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ca:	e007      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80048cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <HAL_RCC_GetSysClockFreq+0x16c>)
 80048d0:	fb02 f203 	mul.w	r2, r2, r3
 80048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80048dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048e0:	461a      	mov	r2, r3
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d108      	bne.n	80048fa <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 80048e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ee:	e004      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <HAL_RCC_GetSysClockFreq+0x170>)
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b08      	ldr	r3, [pc, #32]	; (8004924 <HAL_RCC_GetSysClockFreq+0x174>)
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004908:	4618      	mov	r0, r3
 800490a:	3744      	adds	r7, #68	; 0x44
 800490c:	46bd      	mov	sp, r7
 800490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004910:	080058f4 	.word	0x080058f4
 8004914:	08005904 	.word	0x08005904
 8004918:	40021000 	.word	0x40021000
 800491c:	017d7840 	.word	0x017d7840
 8004920:	003d0900 	.word	0x003d0900
 8004924:	007a1200 	.word	0x007a1200

08004928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b02      	ldr	r3, [pc, #8]	; (8004938 <HAL_RCC_GetHCLKFreq+0x10>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	20000000 	.word	0x20000000

0800493c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004940:	f7ff fff2 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	08005924 	.word	0x08005924

08004964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <RCC_Delay+0x34>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <RCC_Delay+0x38>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	0a5b      	lsrs	r3, r3, #9
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004980:	bf00      	nop
  }
  while (Delay --);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1e5a      	subs	r2, r3, #1
 8004986:	60fa      	str	r2, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f9      	bne.n	8004980 <RCC_Delay+0x1c>
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	20000000 	.word	0x20000000
 800499c:	10624dd3 	.word	0x10624dd3

080049a0 <__errno>:
 80049a0:	4b01      	ldr	r3, [pc, #4]	; (80049a8 <__errno+0x8>)
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	2000000c 	.word	0x2000000c

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	2600      	movs	r6, #0
 80049b0:	4d0c      	ldr	r5, [pc, #48]	; (80049e4 <__libc_init_array+0x38>)
 80049b2:	4c0d      	ldr	r4, [pc, #52]	; (80049e8 <__libc_init_array+0x3c>)
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	f000 ff82 	bl	80058c4 <_init>
 80049c0:	2600      	movs	r6, #0
 80049c2:	4d0a      	ldr	r5, [pc, #40]	; (80049ec <__libc_init_array+0x40>)
 80049c4:	4c0a      	ldr	r4, [pc, #40]	; (80049f0 <__libc_init_array+0x44>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	080059cc 	.word	0x080059cc
 80049e8:	080059cc 	.word	0x080059cc
 80049ec:	080059cc 	.word	0x080059cc
 80049f0:	080059d0 	.word	0x080059d0

080049f4 <memset>:
 80049f4:	4603      	mov	r3, r0
 80049f6:	4402      	add	r2, r0
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d100      	bne.n	80049fe <memset+0xa>
 80049fc:	4770      	bx	lr
 80049fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004a02:	e7f9      	b.n	80049f8 <memset+0x4>

08004a04 <iprintf>:
 8004a04:	b40f      	push	{r0, r1, r2, r3}
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <iprintf+0x2c>)
 8004a08:	b513      	push	{r0, r1, r4, lr}
 8004a0a:	681c      	ldr	r4, [r3, #0]
 8004a0c:	b124      	cbz	r4, 8004a18 <iprintf+0x14>
 8004a0e:	69a3      	ldr	r3, [r4, #24]
 8004a10:	b913      	cbnz	r3, 8004a18 <iprintf+0x14>
 8004a12:	4620      	mov	r0, r4
 8004a14:	f000 f866 	bl	8004ae4 <__sinit>
 8004a18:	ab05      	add	r3, sp, #20
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	9a04      	ldr	r2, [sp, #16]
 8004a1e:	68a1      	ldr	r1, [r4, #8]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	f000 f981 	bl	8004d28 <_vfiprintf_r>
 8004a26:	b002      	add	sp, #8
 8004a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a2c:	b004      	add	sp, #16
 8004a2e:	4770      	bx	lr
 8004a30:	2000000c 	.word	0x2000000c

08004a34 <std>:
 8004a34:	2300      	movs	r3, #0
 8004a36:	b510      	push	{r4, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a42:	6083      	str	r3, [r0, #8]
 8004a44:	8181      	strh	r1, [r0, #12]
 8004a46:	6643      	str	r3, [r0, #100]	; 0x64
 8004a48:	81c2      	strh	r2, [r0, #14]
 8004a4a:	6183      	str	r3, [r0, #24]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	2208      	movs	r2, #8
 8004a50:	305c      	adds	r0, #92	; 0x5c
 8004a52:	f7ff ffcf 	bl	80049f4 <memset>
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <std+0x38>)
 8004a58:	6224      	str	r4, [r4, #32]
 8004a5a:	6263      	str	r3, [r4, #36]	; 0x24
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <std+0x3c>)
 8004a5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <std+0x40>)
 8004a62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <std+0x44>)
 8004a66:	6323      	str	r3, [r4, #48]	; 0x30
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	bf00      	nop
 8004a6c:	080052d5 	.word	0x080052d5
 8004a70:	080052f7 	.word	0x080052f7
 8004a74:	0800532f 	.word	0x0800532f
 8004a78:	08005353 	.word	0x08005353

08004a7c <_cleanup_r>:
 8004a7c:	4901      	ldr	r1, [pc, #4]	; (8004a84 <_cleanup_r+0x8>)
 8004a7e:	f000 b8af 	b.w	8004be0 <_fwalk_reent>
 8004a82:	bf00      	nop
 8004a84:	0800562d 	.word	0x0800562d

08004a88 <__sfmoreglue>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	2568      	movs	r5, #104	; 0x68
 8004a8c:	1e4a      	subs	r2, r1, #1
 8004a8e:	4355      	muls	r5, r2
 8004a90:	460e      	mov	r6, r1
 8004a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a96:	f000 f8c5 	bl	8004c24 <_malloc_r>
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	b140      	cbz	r0, 8004ab0 <__sfmoreglue+0x28>
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8004aa4:	300c      	adds	r0, #12
 8004aa6:	60a0      	str	r0, [r4, #8]
 8004aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004aac:	f7ff ffa2 	bl	80049f4 <memset>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}

08004ab4 <__sfp_lock_acquire>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sfp_lock_acquire+0x8>)
 8004ab6:	f000 b8b3 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	20000278 	.word	0x20000278

08004ac0 <__sfp_lock_release>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sfp_lock_release+0x8>)
 8004ac2:	f000 b8ae 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000278 	.word	0x20000278

08004acc <__sinit_lock_acquire>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__sinit_lock_acquire+0x8>)
 8004ace:	f000 b8a7 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20000273 	.word	0x20000273

08004ad8 <__sinit_lock_release>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__sinit_lock_release+0x8>)
 8004ada:	f000 b8a2 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	20000273 	.word	0x20000273

08004ae4 <__sinit>:
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	f7ff fff0 	bl	8004acc <__sinit_lock_acquire>
 8004aec:	69a3      	ldr	r3, [r4, #24]
 8004aee:	b11b      	cbz	r3, 8004af8 <__sinit+0x14>
 8004af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af4:	f7ff bff0 	b.w	8004ad8 <__sinit_lock_release>
 8004af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004afc:	6523      	str	r3, [r4, #80]	; 0x50
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <__sinit+0x68>)
 8004b00:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <__sinit+0x6c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b06:	42a3      	cmp	r3, r4
 8004b08:	bf08      	it	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	bf08      	it	eq
 8004b10:	61a3      	streq	r3, [r4, #24]
 8004b12:	f000 f81f 	bl	8004b54 <__sfp>
 8004b16:	6060      	str	r0, [r4, #4]
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 f81b 	bl	8004b54 <__sfp>
 8004b1e:	60a0      	str	r0, [r4, #8]
 8004b20:	4620      	mov	r0, r4
 8004b22:	f000 f817 	bl	8004b54 <__sfp>
 8004b26:	2200      	movs	r2, #0
 8004b28:	2104      	movs	r1, #4
 8004b2a:	60e0      	str	r0, [r4, #12]
 8004b2c:	6860      	ldr	r0, [r4, #4]
 8004b2e:	f7ff ff81 	bl	8004a34 <std>
 8004b32:	2201      	movs	r2, #1
 8004b34:	2109      	movs	r1, #9
 8004b36:	68a0      	ldr	r0, [r4, #8]
 8004b38:	f7ff ff7c 	bl	8004a34 <std>
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	2112      	movs	r1, #18
 8004b40:	68e0      	ldr	r0, [r4, #12]
 8004b42:	f7ff ff77 	bl	8004a34 <std>
 8004b46:	2301      	movs	r3, #1
 8004b48:	61a3      	str	r3, [r4, #24]
 8004b4a:	e7d1      	b.n	8004af0 <__sinit+0xc>
 8004b4c:	0800592c 	.word	0x0800592c
 8004b50:	08004a7d 	.word	0x08004a7d

08004b54 <__sfp>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	4607      	mov	r7, r0
 8004b58:	f7ff ffac 	bl	8004ab4 <__sfp_lock_acquire>
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <__sfp+0x84>)
 8004b5e:	681e      	ldr	r6, [r3, #0]
 8004b60:	69b3      	ldr	r3, [r6, #24]
 8004b62:	b913      	cbnz	r3, 8004b6a <__sfp+0x16>
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7ff ffbd 	bl	8004ae4 <__sinit>
 8004b6a:	3648      	adds	r6, #72	; 0x48
 8004b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	d503      	bpl.n	8004b7c <__sfp+0x28>
 8004b74:	6833      	ldr	r3, [r6, #0]
 8004b76:	b30b      	cbz	r3, 8004bbc <__sfp+0x68>
 8004b78:	6836      	ldr	r6, [r6, #0]
 8004b7a:	e7f7      	b.n	8004b6c <__sfp+0x18>
 8004b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b80:	b9d5      	cbnz	r5, 8004bb8 <__sfp+0x64>
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <__sfp+0x88>)
 8004b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b88:	60e3      	str	r3, [r4, #12]
 8004b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b8c:	f000 f847 	bl	8004c1e <__retarget_lock_init_recursive>
 8004b90:	f7ff ff96 	bl	8004ac0 <__sfp_lock_release>
 8004b94:	2208      	movs	r2, #8
 8004b96:	4629      	mov	r1, r5
 8004b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004ba0:	6025      	str	r5, [r4, #0]
 8004ba2:	61a5      	str	r5, [r4, #24]
 8004ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ba8:	f7ff ff24 	bl	80049f4 <memset>
 8004bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb8:	3468      	adds	r4, #104	; 0x68
 8004bba:	e7d9      	b.n	8004b70 <__sfp+0x1c>
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7ff ff62 	bl	8004a88 <__sfmoreglue>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	6030      	str	r0, [r6, #0]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d1d5      	bne.n	8004b78 <__sfp+0x24>
 8004bcc:	f7ff ff78 	bl	8004ac0 <__sfp_lock_release>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	e7ee      	b.n	8004bb4 <__sfp+0x60>
 8004bd6:	bf00      	nop
 8004bd8:	0800592c 	.word	0x0800592c
 8004bdc:	ffff0001 	.word	0xffff0001

08004be0 <_fwalk_reent>:
 8004be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be4:	4606      	mov	r6, r0
 8004be6:	4688      	mov	r8, r1
 8004be8:	2700      	movs	r7, #0
 8004bea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf6:	d505      	bpl.n	8004c04 <_fwalk_reent+0x24>
 8004bf8:	6824      	ldr	r4, [r4, #0]
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	d1f7      	bne.n	8004bee <_fwalk_reent+0xe>
 8004bfe:	4638      	mov	r0, r7
 8004c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c04:	89ab      	ldrh	r3, [r5, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d907      	bls.n	8004c1a <_fwalk_reent+0x3a>
 8004c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	d003      	beq.n	8004c1a <_fwalk_reent+0x3a>
 8004c12:	4629      	mov	r1, r5
 8004c14:	4630      	mov	r0, r6
 8004c16:	47c0      	blx	r8
 8004c18:	4307      	orrs	r7, r0
 8004c1a:	3568      	adds	r5, #104	; 0x68
 8004c1c:	e7e9      	b.n	8004bf2 <_fwalk_reent+0x12>

08004c1e <__retarget_lock_init_recursive>:
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_acquire_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_release_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <_malloc_r>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	1ccd      	adds	r5, r1, #3
 8004c28:	f025 0503 	bic.w	r5, r5, #3
 8004c2c:	3508      	adds	r5, #8
 8004c2e:	2d0c      	cmp	r5, #12
 8004c30:	bf38      	it	cc
 8004c32:	250c      	movcc	r5, #12
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	4606      	mov	r6, r0
 8004c38:	db01      	blt.n	8004c3e <_malloc_r+0x1a>
 8004c3a:	42a9      	cmp	r1, r5
 8004c3c:	d903      	bls.n	8004c46 <_malloc_r+0x22>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	6033      	str	r3, [r6, #0]
 8004c42:	2000      	movs	r0, #0
 8004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c46:	f000 fdb1 	bl	80057ac <__malloc_lock>
 8004c4a:	4921      	ldr	r1, [pc, #132]	; (8004cd0 <_malloc_r+0xac>)
 8004c4c:	680a      	ldr	r2, [r1, #0]
 8004c4e:	4614      	mov	r4, r2
 8004c50:	b99c      	cbnz	r4, 8004c7a <_malloc_r+0x56>
 8004c52:	4f20      	ldr	r7, [pc, #128]	; (8004cd4 <_malloc_r+0xb0>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	b923      	cbnz	r3, 8004c62 <_malloc_r+0x3e>
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f000 fb2a 	bl	80052b4 <_sbrk_r>
 8004c60:	6038      	str	r0, [r7, #0]
 8004c62:	4629      	mov	r1, r5
 8004c64:	4630      	mov	r0, r6
 8004c66:	f000 fb25 	bl	80052b4 <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d123      	bne.n	8004cb6 <_malloc_r+0x92>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	4630      	mov	r0, r6
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f000 fda0 	bl	80057b8 <__malloc_unlock>
 8004c78:	e7e3      	b.n	8004c42 <_malloc_r+0x1e>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	1b5b      	subs	r3, r3, r5
 8004c7e:	d417      	bmi.n	8004cb0 <_malloc_r+0x8c>
 8004c80:	2b0b      	cmp	r3, #11
 8004c82:	d903      	bls.n	8004c8c <_malloc_r+0x68>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	441c      	add	r4, r3
 8004c88:	6025      	str	r5, [r4, #0]
 8004c8a:	e004      	b.n	8004c96 <_malloc_r+0x72>
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	42a2      	cmp	r2, r4
 8004c90:	bf0c      	ite	eq
 8004c92:	600b      	streq	r3, [r1, #0]
 8004c94:	6053      	strne	r3, [r2, #4]
 8004c96:	4630      	mov	r0, r6
 8004c98:	f000 fd8e 	bl	80057b8 <__malloc_unlock>
 8004c9c:	f104 000b 	add.w	r0, r4, #11
 8004ca0:	1d23      	adds	r3, r4, #4
 8004ca2:	f020 0007 	bic.w	r0, r0, #7
 8004ca6:	1ac2      	subs	r2, r0, r3
 8004ca8:	d0cc      	beq.n	8004c44 <_malloc_r+0x20>
 8004caa:	1a1b      	subs	r3, r3, r0
 8004cac:	50a3      	str	r3, [r4, r2]
 8004cae:	e7c9      	b.n	8004c44 <_malloc_r+0x20>
 8004cb0:	4622      	mov	r2, r4
 8004cb2:	6864      	ldr	r4, [r4, #4]
 8004cb4:	e7cc      	b.n	8004c50 <_malloc_r+0x2c>
 8004cb6:	1cc4      	adds	r4, r0, #3
 8004cb8:	f024 0403 	bic.w	r4, r4, #3
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	d0e3      	beq.n	8004c88 <_malloc_r+0x64>
 8004cc0:	1a21      	subs	r1, r4, r0
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	f000 faf6 	bl	80052b4 <_sbrk_r>
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d1dd      	bne.n	8004c88 <_malloc_r+0x64>
 8004ccc:	e7cf      	b.n	8004c6e <_malloc_r+0x4a>
 8004cce:	bf00      	nop
 8004cd0:	200000b0 	.word	0x200000b0
 8004cd4:	200000b4 	.word	0x200000b4

08004cd8 <__sfputc_r>:
 8004cd8:	6893      	ldr	r3, [r2, #8]
 8004cda:	b410      	push	{r4}
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	6093      	str	r3, [r2, #8]
 8004ce2:	da07      	bge.n	8004cf4 <__sfputc_r+0x1c>
 8004ce4:	6994      	ldr	r4, [r2, #24]
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	db01      	blt.n	8004cee <__sfputc_r+0x16>
 8004cea:	290a      	cmp	r1, #10
 8004cec:	d102      	bne.n	8004cf4 <__sfputc_r+0x1c>
 8004cee:	bc10      	pop	{r4}
 8004cf0:	f000 bb34 	b.w	800535c <__swbuf_r>
 8004cf4:	6813      	ldr	r3, [r2, #0]
 8004cf6:	1c58      	adds	r0, r3, #1
 8004cf8:	6010      	str	r0, [r2, #0]
 8004cfa:	7019      	strb	r1, [r3, #0]
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	bc10      	pop	{r4}
 8004d00:	4770      	bx	lr

08004d02 <__sfputs_r>:
 8004d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d04:	4606      	mov	r6, r0
 8004d06:	460f      	mov	r7, r1
 8004d08:	4614      	mov	r4, r2
 8004d0a:	18d5      	adds	r5, r2, r3
 8004d0c:	42ac      	cmp	r4, r5
 8004d0e:	d101      	bne.n	8004d14 <__sfputs_r+0x12>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e007      	b.n	8004d24 <__sfputs_r+0x22>
 8004d14:	463a      	mov	r2, r7
 8004d16:	4630      	mov	r0, r6
 8004d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d1c:	f7ff ffdc 	bl	8004cd8 <__sfputc_r>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d1f3      	bne.n	8004d0c <__sfputs_r+0xa>
 8004d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d28 <_vfiprintf_r>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	4614      	mov	r4, r2
 8004d30:	4698      	mov	r8, r3
 8004d32:	4606      	mov	r6, r0
 8004d34:	b09d      	sub	sp, #116	; 0x74
 8004d36:	b118      	cbz	r0, 8004d40 <_vfiprintf_r+0x18>
 8004d38:	6983      	ldr	r3, [r0, #24]
 8004d3a:	b90b      	cbnz	r3, 8004d40 <_vfiprintf_r+0x18>
 8004d3c:	f7ff fed2 	bl	8004ae4 <__sinit>
 8004d40:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <_vfiprintf_r+0x240>)
 8004d42:	429d      	cmp	r5, r3
 8004d44:	d11b      	bne.n	8004d7e <_vfiprintf_r+0x56>
 8004d46:	6875      	ldr	r5, [r6, #4]
 8004d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d4a:	07d9      	lsls	r1, r3, #31
 8004d4c:	d405      	bmi.n	8004d5a <_vfiprintf_r+0x32>
 8004d4e:	89ab      	ldrh	r3, [r5, #12]
 8004d50:	059a      	lsls	r2, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_vfiprintf_r+0x32>
 8004d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d56:	f7ff ff63 	bl	8004c20 <__retarget_lock_acquire_recursive>
 8004d5a:	89ab      	ldrh	r3, [r5, #12]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	d501      	bpl.n	8004d64 <_vfiprintf_r+0x3c>
 8004d60:	692b      	ldr	r3, [r5, #16]
 8004d62:	b9eb      	cbnz	r3, 8004da0 <_vfiprintf_r+0x78>
 8004d64:	4629      	mov	r1, r5
 8004d66:	4630      	mov	r0, r6
 8004d68:	f000 fb5c 	bl	8005424 <__swsetup_r>
 8004d6c:	b1c0      	cbz	r0, 8004da0 <_vfiprintf_r+0x78>
 8004d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d70:	07dc      	lsls	r4, r3, #31
 8004d72:	d50e      	bpl.n	8004d92 <_vfiprintf_r+0x6a>
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d78:	b01d      	add	sp, #116	; 0x74
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <_vfiprintf_r+0x244>)
 8004d80:	429d      	cmp	r5, r3
 8004d82:	d101      	bne.n	8004d88 <_vfiprintf_r+0x60>
 8004d84:	68b5      	ldr	r5, [r6, #8]
 8004d86:	e7df      	b.n	8004d48 <_vfiprintf_r+0x20>
 8004d88:	4b79      	ldr	r3, [pc, #484]	; (8004f70 <_vfiprintf_r+0x248>)
 8004d8a:	429d      	cmp	r5, r3
 8004d8c:	bf08      	it	eq
 8004d8e:	68f5      	ldreq	r5, [r6, #12]
 8004d90:	e7da      	b.n	8004d48 <_vfiprintf_r+0x20>
 8004d92:	89ab      	ldrh	r3, [r5, #12]
 8004d94:	0598      	lsls	r0, r3, #22
 8004d96:	d4ed      	bmi.n	8004d74 <_vfiprintf_r+0x4c>
 8004d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d9a:	f7ff ff42 	bl	8004c22 <__retarget_lock_release_recursive>
 8004d9e:	e7e9      	b.n	8004d74 <_vfiprintf_r+0x4c>
 8004da0:	2300      	movs	r3, #0
 8004da2:	9309      	str	r3, [sp, #36]	; 0x24
 8004da4:	2320      	movs	r3, #32
 8004da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004daa:	2330      	movs	r3, #48	; 0x30
 8004dac:	f04f 0901 	mov.w	r9, #1
 8004db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004f74 <_vfiprintf_r+0x24c>
 8004db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	469a      	mov	sl, r3
 8004dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dc4:	b10a      	cbz	r2, 8004dca <_vfiprintf_r+0xa2>
 8004dc6:	2a25      	cmp	r2, #37	; 0x25
 8004dc8:	d1f9      	bne.n	8004dbe <_vfiprintf_r+0x96>
 8004dca:	ebba 0b04 	subs.w	fp, sl, r4
 8004dce:	d00b      	beq.n	8004de8 <_vfiprintf_r+0xc0>
 8004dd0:	465b      	mov	r3, fp
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f7ff ff93 	bl	8004d02 <__sfputs_r>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	f000 80aa 	beq.w	8004f36 <_vfiprintf_r+0x20e>
 8004de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004de4:	445a      	add	r2, fp
 8004de6:	9209      	str	r2, [sp, #36]	; 0x24
 8004de8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a2 	beq.w	8004f36 <_vfiprintf_r+0x20e>
 8004df2:	2300      	movs	r3, #0
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dfc:	f10a 0a01 	add.w	sl, sl, #1
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	9307      	str	r3, [sp, #28]
 8004e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e08:	931a      	str	r3, [sp, #104]	; 0x68
 8004e0a:	4654      	mov	r4, sl
 8004e0c:	2205      	movs	r2, #5
 8004e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e12:	4858      	ldr	r0, [pc, #352]	; (8004f74 <_vfiprintf_r+0x24c>)
 8004e14:	f000 fcbc 	bl	8005790 <memchr>
 8004e18:	9a04      	ldr	r2, [sp, #16]
 8004e1a:	b9d8      	cbnz	r0, 8004e54 <_vfiprintf_r+0x12c>
 8004e1c:	06d1      	lsls	r1, r2, #27
 8004e1e:	bf44      	itt	mi
 8004e20:	2320      	movmi	r3, #32
 8004e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e26:	0713      	lsls	r3, r2, #28
 8004e28:	bf44      	itt	mi
 8004e2a:	232b      	movmi	r3, #43	; 0x2b
 8004e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e30:	f89a 3000 	ldrb.w	r3, [sl]
 8004e34:	2b2a      	cmp	r3, #42	; 0x2a
 8004e36:	d015      	beq.n	8004e64 <_vfiprintf_r+0x13c>
 8004e38:	4654      	mov	r4, sl
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f04f 0c0a 	mov.w	ip, #10
 8004e40:	9a07      	ldr	r2, [sp, #28]
 8004e42:	4621      	mov	r1, r4
 8004e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e48:	3b30      	subs	r3, #48	; 0x30
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	d94e      	bls.n	8004eec <_vfiprintf_r+0x1c4>
 8004e4e:	b1b0      	cbz	r0, 8004e7e <_vfiprintf_r+0x156>
 8004e50:	9207      	str	r2, [sp, #28]
 8004e52:	e014      	b.n	8004e7e <_vfiprintf_r+0x156>
 8004e54:	eba0 0308 	sub.w	r3, r0, r8
 8004e58:	fa09 f303 	lsl.w	r3, r9, r3
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	9304      	str	r3, [sp, #16]
 8004e62:	e7d2      	b.n	8004e0a <_vfiprintf_r+0xe2>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	1d19      	adds	r1, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	9103      	str	r1, [sp, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bfbb      	ittet	lt
 8004e70:	425b      	neglt	r3, r3
 8004e72:	f042 0202 	orrlt.w	r2, r2, #2
 8004e76:	9307      	strge	r3, [sp, #28]
 8004e78:	9307      	strlt	r3, [sp, #28]
 8004e7a:	bfb8      	it	lt
 8004e7c:	9204      	strlt	r2, [sp, #16]
 8004e7e:	7823      	ldrb	r3, [r4, #0]
 8004e80:	2b2e      	cmp	r3, #46	; 0x2e
 8004e82:	d10c      	bne.n	8004e9e <_vfiprintf_r+0x176>
 8004e84:	7863      	ldrb	r3, [r4, #1]
 8004e86:	2b2a      	cmp	r3, #42	; 0x2a
 8004e88:	d135      	bne.n	8004ef6 <_vfiprintf_r+0x1ce>
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	3402      	adds	r4, #2
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9203      	str	r2, [sp, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfb8      	it	lt
 8004e98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e9c:	9305      	str	r3, [sp, #20]
 8004e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f84 <_vfiprintf_r+0x25c>
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	7821      	ldrb	r1, [r4, #0]
 8004ea8:	f000 fc72 	bl	8005790 <memchr>
 8004eac:	b140      	cbz	r0, 8004ec0 <_vfiprintf_r+0x198>
 8004eae:	2340      	movs	r3, #64	; 0x40
 8004eb0:	eba0 000a 	sub.w	r0, r0, sl
 8004eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8004eb8:	9b04      	ldr	r3, [sp, #16]
 8004eba:	3401      	adds	r4, #1
 8004ebc:	4303      	orrs	r3, r0
 8004ebe:	9304      	str	r3, [sp, #16]
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	2206      	movs	r2, #6
 8004ec6:	482c      	ldr	r0, [pc, #176]	; (8004f78 <_vfiprintf_r+0x250>)
 8004ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ecc:	f000 fc60 	bl	8005790 <memchr>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d03f      	beq.n	8004f54 <_vfiprintf_r+0x22c>
 8004ed4:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <_vfiprintf_r+0x254>)
 8004ed6:	bb1b      	cbnz	r3, 8004f20 <_vfiprintf_r+0x1f8>
 8004ed8:	9b03      	ldr	r3, [sp, #12]
 8004eda:	3307      	adds	r3, #7
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	443b      	add	r3, r7
 8004ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eea:	e767      	b.n	8004dbc <_vfiprintf_r+0x94>
 8004eec:	460c      	mov	r4, r1
 8004eee:	2001      	movs	r0, #1
 8004ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef4:	e7a5      	b.n	8004e42 <_vfiprintf_r+0x11a>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f04f 0c0a 	mov.w	ip, #10
 8004efc:	4619      	mov	r1, r3
 8004efe:	3401      	adds	r4, #1
 8004f00:	9305      	str	r3, [sp, #20]
 8004f02:	4620      	mov	r0, r4
 8004f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f08:	3a30      	subs	r2, #48	; 0x30
 8004f0a:	2a09      	cmp	r2, #9
 8004f0c:	d903      	bls.n	8004f16 <_vfiprintf_r+0x1ee>
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0c5      	beq.n	8004e9e <_vfiprintf_r+0x176>
 8004f12:	9105      	str	r1, [sp, #20]
 8004f14:	e7c3      	b.n	8004e9e <_vfiprintf_r+0x176>
 8004f16:	4604      	mov	r4, r0
 8004f18:	2301      	movs	r3, #1
 8004f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f1e:	e7f0      	b.n	8004f02 <_vfiprintf_r+0x1da>
 8004f20:	ab03      	add	r3, sp, #12
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	462a      	mov	r2, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <_vfiprintf_r+0x258>)
 8004f2a:	a904      	add	r1, sp, #16
 8004f2c:	f3af 8000 	nop.w
 8004f30:	4607      	mov	r7, r0
 8004f32:	1c78      	adds	r0, r7, #1
 8004f34:	d1d6      	bne.n	8004ee4 <_vfiprintf_r+0x1bc>
 8004f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f38:	07d9      	lsls	r1, r3, #31
 8004f3a:	d405      	bmi.n	8004f48 <_vfiprintf_r+0x220>
 8004f3c:	89ab      	ldrh	r3, [r5, #12]
 8004f3e:	059a      	lsls	r2, r3, #22
 8004f40:	d402      	bmi.n	8004f48 <_vfiprintf_r+0x220>
 8004f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f44:	f7ff fe6d 	bl	8004c22 <__retarget_lock_release_recursive>
 8004f48:	89ab      	ldrh	r3, [r5, #12]
 8004f4a:	065b      	lsls	r3, r3, #25
 8004f4c:	f53f af12 	bmi.w	8004d74 <_vfiprintf_r+0x4c>
 8004f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f52:	e711      	b.n	8004d78 <_vfiprintf_r+0x50>
 8004f54:	ab03      	add	r3, sp, #12
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	462a      	mov	r2, r5
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <_vfiprintf_r+0x258>)
 8004f5e:	a904      	add	r1, sp, #16
 8004f60:	f000 f882 	bl	8005068 <_printf_i>
 8004f64:	e7e4      	b.n	8004f30 <_vfiprintf_r+0x208>
 8004f66:	bf00      	nop
 8004f68:	08005950 	.word	0x08005950
 8004f6c:	08005970 	.word	0x08005970
 8004f70:	08005930 	.word	0x08005930
 8004f74:	08005990 	.word	0x08005990
 8004f78:	0800599a 	.word	0x0800599a
 8004f7c:	00000000 	.word	0x00000000
 8004f80:	08004d03 	.word	0x08004d03
 8004f84:	08005996 	.word	0x08005996

08004f88 <_printf_common>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	4699      	mov	r9, r3
 8004f90:	688a      	ldr	r2, [r1, #8]
 8004f92:	690b      	ldr	r3, [r1, #16]
 8004f94:	4607      	mov	r7, r0
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bfb8      	it	lt
 8004f9a:	4613      	movlt	r3, r2
 8004f9c:	6033      	str	r3, [r6, #0]
 8004f9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa8:	b10a      	cbz	r2, 8004fae <_printf_common+0x26>
 8004faa:	3301      	adds	r3, #1
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	0699      	lsls	r1, r3, #26
 8004fb2:	bf42      	ittt	mi
 8004fb4:	6833      	ldrmi	r3, [r6, #0]
 8004fb6:	3302      	addmi	r3, #2
 8004fb8:	6033      	strmi	r3, [r6, #0]
 8004fba:	6825      	ldr	r5, [r4, #0]
 8004fbc:	f015 0506 	ands.w	r5, r5, #6
 8004fc0:	d106      	bne.n	8004fd0 <_printf_common+0x48>
 8004fc2:	f104 0a19 	add.w	sl, r4, #25
 8004fc6:	68e3      	ldr	r3, [r4, #12]
 8004fc8:	6832      	ldr	r2, [r6, #0]
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	42ab      	cmp	r3, r5
 8004fce:	dc28      	bgt.n	8005022 <_printf_common+0x9a>
 8004fd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fd4:	1e13      	subs	r3, r2, #0
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	bf18      	it	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	0692      	lsls	r2, r2, #26
 8004fde:	d42d      	bmi.n	800503c <_printf_common+0xb4>
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d020      	beq.n	8005030 <_printf_common+0xa8>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	68e5      	ldr	r5, [r4, #12]
 8004ff2:	f003 0306 	and.w	r3, r3, #6
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	bf18      	it	ne
 8004ffa:	2500      	movne	r5, #0
 8004ffc:	6832      	ldr	r2, [r6, #0]
 8004ffe:	f04f 0600 	mov.w	r6, #0
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	bf08      	it	eq
 8005006:	1aad      	subeq	r5, r5, r2
 8005008:	6922      	ldr	r2, [r4, #16]
 800500a:	bf08      	it	eq
 800500c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005010:	4293      	cmp	r3, r2
 8005012:	bfc4      	itt	gt
 8005014:	1a9b      	subgt	r3, r3, r2
 8005016:	18ed      	addgt	r5, r5, r3
 8005018:	341a      	adds	r4, #26
 800501a:	42b5      	cmp	r5, r6
 800501c:	d11a      	bne.n	8005054 <_printf_common+0xcc>
 800501e:	2000      	movs	r0, #0
 8005020:	e008      	b.n	8005034 <_printf_common+0xac>
 8005022:	2301      	movs	r3, #1
 8005024:	4652      	mov	r2, sl
 8005026:	4649      	mov	r1, r9
 8005028:	4638      	mov	r0, r7
 800502a:	47c0      	blx	r8
 800502c:	3001      	adds	r0, #1
 800502e:	d103      	bne.n	8005038 <_printf_common+0xb0>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005038:	3501      	adds	r5, #1
 800503a:	e7c4      	b.n	8004fc6 <_printf_common+0x3e>
 800503c:	2030      	movs	r0, #48	; 0x30
 800503e:	18e1      	adds	r1, r4, r3
 8005040:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800504a:	4422      	add	r2, r4
 800504c:	3302      	adds	r3, #2
 800504e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005052:	e7c5      	b.n	8004fe0 <_printf_common+0x58>
 8005054:	2301      	movs	r3, #1
 8005056:	4622      	mov	r2, r4
 8005058:	4649      	mov	r1, r9
 800505a:	4638      	mov	r0, r7
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d0e6      	beq.n	8005030 <_printf_common+0xa8>
 8005062:	3601      	adds	r6, #1
 8005064:	e7d9      	b.n	800501a <_printf_common+0x92>
	...

08005068 <_printf_i>:
 8005068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	460c      	mov	r4, r1
 800506e:	7e27      	ldrb	r7, [r4, #24]
 8005070:	4691      	mov	r9, r2
 8005072:	2f78      	cmp	r7, #120	; 0x78
 8005074:	4680      	mov	r8, r0
 8005076:	469a      	mov	sl, r3
 8005078:	990c      	ldr	r1, [sp, #48]	; 0x30
 800507a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800507e:	d807      	bhi.n	8005090 <_printf_i+0x28>
 8005080:	2f62      	cmp	r7, #98	; 0x62
 8005082:	d80a      	bhi.n	800509a <_printf_i+0x32>
 8005084:	2f00      	cmp	r7, #0
 8005086:	f000 80d9 	beq.w	800523c <_printf_i+0x1d4>
 800508a:	2f58      	cmp	r7, #88	; 0x58
 800508c:	f000 80a4 	beq.w	80051d8 <_printf_i+0x170>
 8005090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005098:	e03a      	b.n	8005110 <_printf_i+0xa8>
 800509a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800509e:	2b15      	cmp	r3, #21
 80050a0:	d8f6      	bhi.n	8005090 <_printf_i+0x28>
 80050a2:	a001      	add	r0, pc, #4	; (adr r0, 80050a8 <_printf_i+0x40>)
 80050a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80050a8:	08005101 	.word	0x08005101
 80050ac:	08005115 	.word	0x08005115
 80050b0:	08005091 	.word	0x08005091
 80050b4:	08005091 	.word	0x08005091
 80050b8:	08005091 	.word	0x08005091
 80050bc:	08005091 	.word	0x08005091
 80050c0:	08005115 	.word	0x08005115
 80050c4:	08005091 	.word	0x08005091
 80050c8:	08005091 	.word	0x08005091
 80050cc:	08005091 	.word	0x08005091
 80050d0:	08005091 	.word	0x08005091
 80050d4:	08005223 	.word	0x08005223
 80050d8:	08005145 	.word	0x08005145
 80050dc:	08005205 	.word	0x08005205
 80050e0:	08005091 	.word	0x08005091
 80050e4:	08005091 	.word	0x08005091
 80050e8:	08005245 	.word	0x08005245
 80050ec:	08005091 	.word	0x08005091
 80050f0:	08005145 	.word	0x08005145
 80050f4:	08005091 	.word	0x08005091
 80050f8:	08005091 	.word	0x08005091
 80050fc:	0800520d 	.word	0x0800520d
 8005100:	680b      	ldr	r3, [r1, #0]
 8005102:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	600a      	str	r2, [r1, #0]
 800510c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005110:	2301      	movs	r3, #1
 8005112:	e0a4      	b.n	800525e <_printf_i+0x1f6>
 8005114:	6825      	ldr	r5, [r4, #0]
 8005116:	6808      	ldr	r0, [r1, #0]
 8005118:	062e      	lsls	r6, r5, #24
 800511a:	f100 0304 	add.w	r3, r0, #4
 800511e:	d50a      	bpl.n	8005136 <_printf_i+0xce>
 8005120:	6805      	ldr	r5, [r0, #0]
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	2d00      	cmp	r5, #0
 8005126:	da03      	bge.n	8005130 <_printf_i+0xc8>
 8005128:	232d      	movs	r3, #45	; 0x2d
 800512a:	426d      	negs	r5, r5
 800512c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005130:	230a      	movs	r3, #10
 8005132:	485e      	ldr	r0, [pc, #376]	; (80052ac <_printf_i+0x244>)
 8005134:	e019      	b.n	800516a <_printf_i+0x102>
 8005136:	f015 0f40 	tst.w	r5, #64	; 0x40
 800513a:	6805      	ldr	r5, [r0, #0]
 800513c:	600b      	str	r3, [r1, #0]
 800513e:	bf18      	it	ne
 8005140:	b22d      	sxthne	r5, r5
 8005142:	e7ef      	b.n	8005124 <_printf_i+0xbc>
 8005144:	680b      	ldr	r3, [r1, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	1d18      	adds	r0, r3, #4
 800514a:	6008      	str	r0, [r1, #0]
 800514c:	0628      	lsls	r0, r5, #24
 800514e:	d501      	bpl.n	8005154 <_printf_i+0xec>
 8005150:	681d      	ldr	r5, [r3, #0]
 8005152:	e002      	b.n	800515a <_printf_i+0xf2>
 8005154:	0669      	lsls	r1, r5, #25
 8005156:	d5fb      	bpl.n	8005150 <_printf_i+0xe8>
 8005158:	881d      	ldrh	r5, [r3, #0]
 800515a:	2f6f      	cmp	r7, #111	; 0x6f
 800515c:	bf0c      	ite	eq
 800515e:	2308      	moveq	r3, #8
 8005160:	230a      	movne	r3, #10
 8005162:	4852      	ldr	r0, [pc, #328]	; (80052ac <_printf_i+0x244>)
 8005164:	2100      	movs	r1, #0
 8005166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800516a:	6866      	ldr	r6, [r4, #4]
 800516c:	2e00      	cmp	r6, #0
 800516e:	bfa8      	it	ge
 8005170:	6821      	ldrge	r1, [r4, #0]
 8005172:	60a6      	str	r6, [r4, #8]
 8005174:	bfa4      	itt	ge
 8005176:	f021 0104 	bicge.w	r1, r1, #4
 800517a:	6021      	strge	r1, [r4, #0]
 800517c:	b90d      	cbnz	r5, 8005182 <_printf_i+0x11a>
 800517e:	2e00      	cmp	r6, #0
 8005180:	d04d      	beq.n	800521e <_printf_i+0x1b6>
 8005182:	4616      	mov	r6, r2
 8005184:	fbb5 f1f3 	udiv	r1, r5, r3
 8005188:	fb03 5711 	mls	r7, r3, r1, r5
 800518c:	5dc7      	ldrb	r7, [r0, r7]
 800518e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005192:	462f      	mov	r7, r5
 8005194:	42bb      	cmp	r3, r7
 8005196:	460d      	mov	r5, r1
 8005198:	d9f4      	bls.n	8005184 <_printf_i+0x11c>
 800519a:	2b08      	cmp	r3, #8
 800519c:	d10b      	bne.n	80051b6 <_printf_i+0x14e>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	07df      	lsls	r7, r3, #31
 80051a2:	d508      	bpl.n	80051b6 <_printf_i+0x14e>
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	6861      	ldr	r1, [r4, #4]
 80051a8:	4299      	cmp	r1, r3
 80051aa:	bfde      	ittt	le
 80051ac:	2330      	movle	r3, #48	; 0x30
 80051ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051b2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80051b6:	1b92      	subs	r2, r2, r6
 80051b8:	6122      	str	r2, [r4, #16]
 80051ba:	464b      	mov	r3, r9
 80051bc:	4621      	mov	r1, r4
 80051be:	4640      	mov	r0, r8
 80051c0:	f8cd a000 	str.w	sl, [sp]
 80051c4:	aa03      	add	r2, sp, #12
 80051c6:	f7ff fedf 	bl	8004f88 <_printf_common>
 80051ca:	3001      	adds	r0, #1
 80051cc:	d14c      	bne.n	8005268 <_printf_i+0x200>
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d2:	b004      	add	sp, #16
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	4834      	ldr	r0, [pc, #208]	; (80052ac <_printf_i+0x244>)
 80051da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051de:	680e      	ldr	r6, [r1, #0]
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80051e6:	061f      	lsls	r7, r3, #24
 80051e8:	600e      	str	r6, [r1, #0]
 80051ea:	d514      	bpl.n	8005216 <_printf_i+0x1ae>
 80051ec:	07d9      	lsls	r1, r3, #31
 80051ee:	bf44      	itt	mi
 80051f0:	f043 0320 	orrmi.w	r3, r3, #32
 80051f4:	6023      	strmi	r3, [r4, #0]
 80051f6:	b91d      	cbnz	r5, 8005200 <_printf_i+0x198>
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	f023 0320 	bic.w	r3, r3, #32
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	2310      	movs	r3, #16
 8005202:	e7af      	b.n	8005164 <_printf_i+0xfc>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	f043 0320 	orr.w	r3, r3, #32
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	2378      	movs	r3, #120	; 0x78
 800520e:	4828      	ldr	r0, [pc, #160]	; (80052b0 <_printf_i+0x248>)
 8005210:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005214:	e7e3      	b.n	80051de <_printf_i+0x176>
 8005216:	065e      	lsls	r6, r3, #25
 8005218:	bf48      	it	mi
 800521a:	b2ad      	uxthmi	r5, r5
 800521c:	e7e6      	b.n	80051ec <_printf_i+0x184>
 800521e:	4616      	mov	r6, r2
 8005220:	e7bb      	b.n	800519a <_printf_i+0x132>
 8005222:	680b      	ldr	r3, [r1, #0]
 8005224:	6826      	ldr	r6, [r4, #0]
 8005226:	1d1d      	adds	r5, r3, #4
 8005228:	6960      	ldr	r0, [r4, #20]
 800522a:	600d      	str	r5, [r1, #0]
 800522c:	0635      	lsls	r5, r6, #24
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	d501      	bpl.n	8005236 <_printf_i+0x1ce>
 8005232:	6018      	str	r0, [r3, #0]
 8005234:	e002      	b.n	800523c <_printf_i+0x1d4>
 8005236:	0671      	lsls	r1, r6, #25
 8005238:	d5fb      	bpl.n	8005232 <_printf_i+0x1ca>
 800523a:	8018      	strh	r0, [r3, #0]
 800523c:	2300      	movs	r3, #0
 800523e:	4616      	mov	r6, r2
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	e7ba      	b.n	80051ba <_printf_i+0x152>
 8005244:	680b      	ldr	r3, [r1, #0]
 8005246:	1d1a      	adds	r2, r3, #4
 8005248:	600a      	str	r2, [r1, #0]
 800524a:	681e      	ldr	r6, [r3, #0]
 800524c:	2100      	movs	r1, #0
 800524e:	4630      	mov	r0, r6
 8005250:	6862      	ldr	r2, [r4, #4]
 8005252:	f000 fa9d 	bl	8005790 <memchr>
 8005256:	b108      	cbz	r0, 800525c <_printf_i+0x1f4>
 8005258:	1b80      	subs	r0, r0, r6
 800525a:	6060      	str	r0, [r4, #4]
 800525c:	6863      	ldr	r3, [r4, #4]
 800525e:	6123      	str	r3, [r4, #16]
 8005260:	2300      	movs	r3, #0
 8005262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005266:	e7a8      	b.n	80051ba <_printf_i+0x152>
 8005268:	4632      	mov	r2, r6
 800526a:	4649      	mov	r1, r9
 800526c:	4640      	mov	r0, r8
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	47d0      	blx	sl
 8005272:	3001      	adds	r0, #1
 8005274:	d0ab      	beq.n	80051ce <_printf_i+0x166>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	079b      	lsls	r3, r3, #30
 800527a:	d413      	bmi.n	80052a4 <_printf_i+0x23c>
 800527c:	68e0      	ldr	r0, [r4, #12]
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	4298      	cmp	r0, r3
 8005282:	bfb8      	it	lt
 8005284:	4618      	movlt	r0, r3
 8005286:	e7a4      	b.n	80051d2 <_printf_i+0x16a>
 8005288:	2301      	movs	r3, #1
 800528a:	4632      	mov	r2, r6
 800528c:	4649      	mov	r1, r9
 800528e:	4640      	mov	r0, r8
 8005290:	47d0      	blx	sl
 8005292:	3001      	adds	r0, #1
 8005294:	d09b      	beq.n	80051ce <_printf_i+0x166>
 8005296:	3501      	adds	r5, #1
 8005298:	68e3      	ldr	r3, [r4, #12]
 800529a:	9903      	ldr	r1, [sp, #12]
 800529c:	1a5b      	subs	r3, r3, r1
 800529e:	42ab      	cmp	r3, r5
 80052a0:	dcf2      	bgt.n	8005288 <_printf_i+0x220>
 80052a2:	e7eb      	b.n	800527c <_printf_i+0x214>
 80052a4:	2500      	movs	r5, #0
 80052a6:	f104 0619 	add.w	r6, r4, #25
 80052aa:	e7f5      	b.n	8005298 <_printf_i+0x230>
 80052ac:	080059a1 	.word	0x080059a1
 80052b0:	080059b2 	.word	0x080059b2

080052b4 <_sbrk_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	2300      	movs	r3, #0
 80052b8:	4d05      	ldr	r5, [pc, #20]	; (80052d0 <_sbrk_r+0x1c>)
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	f7fc fa6a 	bl	8001798 <_sbrk>
 80052c4:	1c43      	adds	r3, r0, #1
 80052c6:	d102      	bne.n	80052ce <_sbrk_r+0x1a>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	b103      	cbz	r3, 80052ce <_sbrk_r+0x1a>
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	2000027c 	.word	0x2000027c

080052d4 <__sread>:
 80052d4:	b510      	push	{r4, lr}
 80052d6:	460c      	mov	r4, r1
 80052d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052dc:	f000 fabe 	bl	800585c <_read_r>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	bfab      	itete	ge
 80052e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052e6:	89a3      	ldrhlt	r3, [r4, #12]
 80052e8:	181b      	addge	r3, r3, r0
 80052ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ee:	bfac      	ite	ge
 80052f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052f2:	81a3      	strhlt	r3, [r4, #12]
 80052f4:	bd10      	pop	{r4, pc}

080052f6 <__swrite>:
 80052f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052fa:	461f      	mov	r7, r3
 80052fc:	898b      	ldrh	r3, [r1, #12]
 80052fe:	4605      	mov	r5, r0
 8005300:	05db      	lsls	r3, r3, #23
 8005302:	460c      	mov	r4, r1
 8005304:	4616      	mov	r6, r2
 8005306:	d505      	bpl.n	8005314 <__swrite+0x1e>
 8005308:	2302      	movs	r3, #2
 800530a:	2200      	movs	r2, #0
 800530c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005310:	f000 f9c8 	bl	80056a4 <_lseek_r>
 8005314:	89a3      	ldrh	r3, [r4, #12]
 8005316:	4632      	mov	r2, r6
 8005318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	4628      	mov	r0, r5
 8005320:	463b      	mov	r3, r7
 8005322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800532a:	f000 b869 	b.w	8005400 <_write_r>

0800532e <__sseek>:
 800532e:	b510      	push	{r4, lr}
 8005330:	460c      	mov	r4, r1
 8005332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005336:	f000 f9b5 	bl	80056a4 <_lseek_r>
 800533a:	1c43      	adds	r3, r0, #1
 800533c:	89a3      	ldrh	r3, [r4, #12]
 800533e:	bf15      	itete	ne
 8005340:	6560      	strne	r0, [r4, #84]	; 0x54
 8005342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800534a:	81a3      	strheq	r3, [r4, #12]
 800534c:	bf18      	it	ne
 800534e:	81a3      	strhne	r3, [r4, #12]
 8005350:	bd10      	pop	{r4, pc}

08005352 <__sclose>:
 8005352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005356:	f000 b8d3 	b.w	8005500 <_close_r>
	...

0800535c <__swbuf_r>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	460e      	mov	r6, r1
 8005360:	4614      	mov	r4, r2
 8005362:	4605      	mov	r5, r0
 8005364:	b118      	cbz	r0, 800536e <__swbuf_r+0x12>
 8005366:	6983      	ldr	r3, [r0, #24]
 8005368:	b90b      	cbnz	r3, 800536e <__swbuf_r+0x12>
 800536a:	f7ff fbbb 	bl	8004ae4 <__sinit>
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <__swbuf_r+0x98>)
 8005370:	429c      	cmp	r4, r3
 8005372:	d12b      	bne.n	80053cc <__swbuf_r+0x70>
 8005374:	686c      	ldr	r4, [r5, #4]
 8005376:	69a3      	ldr	r3, [r4, #24]
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	071a      	lsls	r2, r3, #28
 800537e:	d52f      	bpl.n	80053e0 <__swbuf_r+0x84>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	b36b      	cbz	r3, 80053e0 <__swbuf_r+0x84>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	6820      	ldr	r0, [r4, #0]
 8005388:	b2f6      	uxtb	r6, r6
 800538a:	1ac0      	subs	r0, r0, r3
 800538c:	6963      	ldr	r3, [r4, #20]
 800538e:	4637      	mov	r7, r6
 8005390:	4283      	cmp	r3, r0
 8005392:	dc04      	bgt.n	800539e <__swbuf_r+0x42>
 8005394:	4621      	mov	r1, r4
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f948 	bl	800562c <_fflush_r>
 800539c:	bb30      	cbnz	r0, 80053ec <__swbuf_r+0x90>
 800539e:	68a3      	ldr	r3, [r4, #8]
 80053a0:	3001      	adds	r0, #1
 80053a2:	3b01      	subs	r3, #1
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	701e      	strb	r6, [r3, #0]
 80053ae:	6963      	ldr	r3, [r4, #20]
 80053b0:	4283      	cmp	r3, r0
 80053b2:	d004      	beq.n	80053be <__swbuf_r+0x62>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	07db      	lsls	r3, r3, #31
 80053b8:	d506      	bpl.n	80053c8 <__swbuf_r+0x6c>
 80053ba:	2e0a      	cmp	r6, #10
 80053bc:	d104      	bne.n	80053c8 <__swbuf_r+0x6c>
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 f933 	bl	800562c <_fflush_r>
 80053c6:	b988      	cbnz	r0, 80053ec <__swbuf_r+0x90>
 80053c8:	4638      	mov	r0, r7
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <__swbuf_r+0x9c>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d101      	bne.n	80053d6 <__swbuf_r+0x7a>
 80053d2:	68ac      	ldr	r4, [r5, #8]
 80053d4:	e7cf      	b.n	8005376 <__swbuf_r+0x1a>
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <__swbuf_r+0xa0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	bf08      	it	eq
 80053dc:	68ec      	ldreq	r4, [r5, #12]
 80053de:	e7ca      	b.n	8005376 <__swbuf_r+0x1a>
 80053e0:	4621      	mov	r1, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f81e 	bl	8005424 <__swsetup_r>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d0cb      	beq.n	8005384 <__swbuf_r+0x28>
 80053ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053f0:	e7ea      	b.n	80053c8 <__swbuf_r+0x6c>
 80053f2:	bf00      	nop
 80053f4:	08005950 	.word	0x08005950
 80053f8:	08005970 	.word	0x08005970
 80053fc:	08005930 	.word	0x08005930

08005400 <_write_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	2200      	movs	r2, #0
 800540a:	4d05      	ldr	r5, [pc, #20]	; (8005420 <_write_r+0x20>)
 800540c:	602a      	str	r2, [r5, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f7fc f975 	bl	80016fe <_write>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_write_r+0x1e>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_write_r+0x1e>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	2000027c 	.word	0x2000027c

08005424 <__swsetup_r>:
 8005424:	4b32      	ldr	r3, [pc, #200]	; (80054f0 <__swsetup_r+0xcc>)
 8005426:	b570      	push	{r4, r5, r6, lr}
 8005428:	681d      	ldr	r5, [r3, #0]
 800542a:	4606      	mov	r6, r0
 800542c:	460c      	mov	r4, r1
 800542e:	b125      	cbz	r5, 800543a <__swsetup_r+0x16>
 8005430:	69ab      	ldr	r3, [r5, #24]
 8005432:	b913      	cbnz	r3, 800543a <__swsetup_r+0x16>
 8005434:	4628      	mov	r0, r5
 8005436:	f7ff fb55 	bl	8004ae4 <__sinit>
 800543a:	4b2e      	ldr	r3, [pc, #184]	; (80054f4 <__swsetup_r+0xd0>)
 800543c:	429c      	cmp	r4, r3
 800543e:	d10f      	bne.n	8005460 <__swsetup_r+0x3c>
 8005440:	686c      	ldr	r4, [r5, #4]
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005448:	0719      	lsls	r1, r3, #28
 800544a:	d42c      	bmi.n	80054a6 <__swsetup_r+0x82>
 800544c:	06dd      	lsls	r5, r3, #27
 800544e:	d411      	bmi.n	8005474 <__swsetup_r+0x50>
 8005450:	2309      	movs	r3, #9
 8005452:	6033      	str	r3, [r6, #0]
 8005454:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e03e      	b.n	80054de <__swsetup_r+0xba>
 8005460:	4b25      	ldr	r3, [pc, #148]	; (80054f8 <__swsetup_r+0xd4>)
 8005462:	429c      	cmp	r4, r3
 8005464:	d101      	bne.n	800546a <__swsetup_r+0x46>
 8005466:	68ac      	ldr	r4, [r5, #8]
 8005468:	e7eb      	b.n	8005442 <__swsetup_r+0x1e>
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <__swsetup_r+0xd8>)
 800546c:	429c      	cmp	r4, r3
 800546e:	bf08      	it	eq
 8005470:	68ec      	ldreq	r4, [r5, #12]
 8005472:	e7e6      	b.n	8005442 <__swsetup_r+0x1e>
 8005474:	0758      	lsls	r0, r3, #29
 8005476:	d512      	bpl.n	800549e <__swsetup_r+0x7a>
 8005478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800547a:	b141      	cbz	r1, 800548e <__swsetup_r+0x6a>
 800547c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005480:	4299      	cmp	r1, r3
 8005482:	d002      	beq.n	800548a <__swsetup_r+0x66>
 8005484:	4630      	mov	r0, r6
 8005486:	f000 f99d 	bl	80057c4 <_free_r>
 800548a:	2300      	movs	r3, #0
 800548c:	6363      	str	r3, [r4, #52]	; 0x34
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005494:	81a3      	strh	r3, [r4, #12]
 8005496:	2300      	movs	r3, #0
 8005498:	6063      	str	r3, [r4, #4]
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f043 0308 	orr.w	r3, r3, #8
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	b94b      	cbnz	r3, 80054be <__swsetup_r+0x9a>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b4:	d003      	beq.n	80054be <__swsetup_r+0x9a>
 80054b6:	4621      	mov	r1, r4
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 f929 	bl	8005710 <__smakebuf_r>
 80054be:	89a0      	ldrh	r0, [r4, #12]
 80054c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054c4:	f010 0301 	ands.w	r3, r0, #1
 80054c8:	d00a      	beq.n	80054e0 <__swsetup_r+0xbc>
 80054ca:	2300      	movs	r3, #0
 80054cc:	60a3      	str	r3, [r4, #8]
 80054ce:	6963      	ldr	r3, [r4, #20]
 80054d0:	425b      	negs	r3, r3
 80054d2:	61a3      	str	r3, [r4, #24]
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	b943      	cbnz	r3, 80054ea <__swsetup_r+0xc6>
 80054d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054dc:	d1ba      	bne.n	8005454 <__swsetup_r+0x30>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	0781      	lsls	r1, r0, #30
 80054e2:	bf58      	it	pl
 80054e4:	6963      	ldrpl	r3, [r4, #20]
 80054e6:	60a3      	str	r3, [r4, #8]
 80054e8:	e7f4      	b.n	80054d4 <__swsetup_r+0xb0>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e7f7      	b.n	80054de <__swsetup_r+0xba>
 80054ee:	bf00      	nop
 80054f0:	2000000c 	.word	0x2000000c
 80054f4:	08005950 	.word	0x08005950
 80054f8:	08005970 	.word	0x08005970
 80054fc:	08005930 	.word	0x08005930

08005500 <_close_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	2300      	movs	r3, #0
 8005504:	4d05      	ldr	r5, [pc, #20]	; (800551c <_close_r+0x1c>)
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fc f913 	bl	8001736 <_close>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_close_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_close_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	2000027c 	.word	0x2000027c

08005520 <__sflush_r>:
 8005520:	898a      	ldrh	r2, [r1, #12]
 8005522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005526:	4605      	mov	r5, r0
 8005528:	0710      	lsls	r0, r2, #28
 800552a:	460c      	mov	r4, r1
 800552c:	d458      	bmi.n	80055e0 <__sflush_r+0xc0>
 800552e:	684b      	ldr	r3, [r1, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	dc05      	bgt.n	8005540 <__sflush_r+0x20>
 8005534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	dc02      	bgt.n	8005540 <__sflush_r+0x20>
 800553a:	2000      	movs	r0, #0
 800553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005542:	2e00      	cmp	r6, #0
 8005544:	d0f9      	beq.n	800553a <__sflush_r+0x1a>
 8005546:	2300      	movs	r3, #0
 8005548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800554c:	682f      	ldr	r7, [r5, #0]
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	d032      	beq.n	80055b8 <__sflush_r+0x98>
 8005552:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	075a      	lsls	r2, r3, #29
 8005558:	d505      	bpl.n	8005566 <__sflush_r+0x46>
 800555a:	6863      	ldr	r3, [r4, #4]
 800555c:	1ac0      	subs	r0, r0, r3
 800555e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005560:	b10b      	cbz	r3, 8005566 <__sflush_r+0x46>
 8005562:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005564:	1ac0      	subs	r0, r0, r3
 8005566:	2300      	movs	r3, #0
 8005568:	4602      	mov	r2, r0
 800556a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800556c:	4628      	mov	r0, r5
 800556e:	6a21      	ldr	r1, [r4, #32]
 8005570:	47b0      	blx	r6
 8005572:	1c43      	adds	r3, r0, #1
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	d106      	bne.n	8005586 <__sflush_r+0x66>
 8005578:	6829      	ldr	r1, [r5, #0]
 800557a:	291d      	cmp	r1, #29
 800557c:	d82c      	bhi.n	80055d8 <__sflush_r+0xb8>
 800557e:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <__sflush_r+0x108>)
 8005580:	40ca      	lsrs	r2, r1
 8005582:	07d6      	lsls	r6, r2, #31
 8005584:	d528      	bpl.n	80055d8 <__sflush_r+0xb8>
 8005586:	2200      	movs	r2, #0
 8005588:	6062      	str	r2, [r4, #4]
 800558a:	6922      	ldr	r2, [r4, #16]
 800558c:	04d9      	lsls	r1, r3, #19
 800558e:	6022      	str	r2, [r4, #0]
 8005590:	d504      	bpl.n	800559c <__sflush_r+0x7c>
 8005592:	1c42      	adds	r2, r0, #1
 8005594:	d101      	bne.n	800559a <__sflush_r+0x7a>
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	b903      	cbnz	r3, 800559c <__sflush_r+0x7c>
 800559a:	6560      	str	r0, [r4, #84]	; 0x54
 800559c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800559e:	602f      	str	r7, [r5, #0]
 80055a0:	2900      	cmp	r1, #0
 80055a2:	d0ca      	beq.n	800553a <__sflush_r+0x1a>
 80055a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a8:	4299      	cmp	r1, r3
 80055aa:	d002      	beq.n	80055b2 <__sflush_r+0x92>
 80055ac:	4628      	mov	r0, r5
 80055ae:	f000 f909 	bl	80057c4 <_free_r>
 80055b2:	2000      	movs	r0, #0
 80055b4:	6360      	str	r0, [r4, #52]	; 0x34
 80055b6:	e7c1      	b.n	800553c <__sflush_r+0x1c>
 80055b8:	6a21      	ldr	r1, [r4, #32]
 80055ba:	2301      	movs	r3, #1
 80055bc:	4628      	mov	r0, r5
 80055be:	47b0      	blx	r6
 80055c0:	1c41      	adds	r1, r0, #1
 80055c2:	d1c7      	bne.n	8005554 <__sflush_r+0x34>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0c4      	beq.n	8005554 <__sflush_r+0x34>
 80055ca:	2b1d      	cmp	r3, #29
 80055cc:	d001      	beq.n	80055d2 <__sflush_r+0xb2>
 80055ce:	2b16      	cmp	r3, #22
 80055d0:	d101      	bne.n	80055d6 <__sflush_r+0xb6>
 80055d2:	602f      	str	r7, [r5, #0]
 80055d4:	e7b1      	b.n	800553a <__sflush_r+0x1a>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055dc:	81a3      	strh	r3, [r4, #12]
 80055de:	e7ad      	b.n	800553c <__sflush_r+0x1c>
 80055e0:	690f      	ldr	r7, [r1, #16]
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d0a9      	beq.n	800553a <__sflush_r+0x1a>
 80055e6:	0793      	lsls	r3, r2, #30
 80055e8:	bf18      	it	ne
 80055ea:	2300      	movne	r3, #0
 80055ec:	680e      	ldr	r6, [r1, #0]
 80055ee:	bf08      	it	eq
 80055f0:	694b      	ldreq	r3, [r1, #20]
 80055f2:	eba6 0807 	sub.w	r8, r6, r7
 80055f6:	600f      	str	r7, [r1, #0]
 80055f8:	608b      	str	r3, [r1, #8]
 80055fa:	f1b8 0f00 	cmp.w	r8, #0
 80055fe:	dd9c      	ble.n	800553a <__sflush_r+0x1a>
 8005600:	4643      	mov	r3, r8
 8005602:	463a      	mov	r2, r7
 8005604:	4628      	mov	r0, r5
 8005606:	6a21      	ldr	r1, [r4, #32]
 8005608:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800560a:	47b0      	blx	r6
 800560c:	2800      	cmp	r0, #0
 800560e:	dc06      	bgt.n	800561e <__sflush_r+0xfe>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	e78e      	b.n	800553c <__sflush_r+0x1c>
 800561e:	4407      	add	r7, r0
 8005620:	eba8 0800 	sub.w	r8, r8, r0
 8005624:	e7e9      	b.n	80055fa <__sflush_r+0xda>
 8005626:	bf00      	nop
 8005628:	20400001 	.word	0x20400001

0800562c <_fflush_r>:
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	690b      	ldr	r3, [r1, #16]
 8005630:	4605      	mov	r5, r0
 8005632:	460c      	mov	r4, r1
 8005634:	b913      	cbnz	r3, 800563c <_fflush_r+0x10>
 8005636:	2500      	movs	r5, #0
 8005638:	4628      	mov	r0, r5
 800563a:	bd38      	pop	{r3, r4, r5, pc}
 800563c:	b118      	cbz	r0, 8005646 <_fflush_r+0x1a>
 800563e:	6983      	ldr	r3, [r0, #24]
 8005640:	b90b      	cbnz	r3, 8005646 <_fflush_r+0x1a>
 8005642:	f7ff fa4f 	bl	8004ae4 <__sinit>
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <_fflush_r+0x6c>)
 8005648:	429c      	cmp	r4, r3
 800564a:	d11b      	bne.n	8005684 <_fflush_r+0x58>
 800564c:	686c      	ldr	r4, [r5, #4]
 800564e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0ef      	beq.n	8005636 <_fflush_r+0xa>
 8005656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005658:	07d0      	lsls	r0, r2, #31
 800565a:	d404      	bmi.n	8005666 <_fflush_r+0x3a>
 800565c:	0599      	lsls	r1, r3, #22
 800565e:	d402      	bmi.n	8005666 <_fflush_r+0x3a>
 8005660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005662:	f7ff fadd 	bl	8004c20 <__retarget_lock_acquire_recursive>
 8005666:	4628      	mov	r0, r5
 8005668:	4621      	mov	r1, r4
 800566a:	f7ff ff59 	bl	8005520 <__sflush_r>
 800566e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005670:	4605      	mov	r5, r0
 8005672:	07da      	lsls	r2, r3, #31
 8005674:	d4e0      	bmi.n	8005638 <_fflush_r+0xc>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	059b      	lsls	r3, r3, #22
 800567a:	d4dd      	bmi.n	8005638 <_fflush_r+0xc>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f7ff fad0 	bl	8004c22 <__retarget_lock_release_recursive>
 8005682:	e7d9      	b.n	8005638 <_fflush_r+0xc>
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <_fflush_r+0x70>)
 8005686:	429c      	cmp	r4, r3
 8005688:	d101      	bne.n	800568e <_fflush_r+0x62>
 800568a:	68ac      	ldr	r4, [r5, #8]
 800568c:	e7df      	b.n	800564e <_fflush_r+0x22>
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <_fflush_r+0x74>)
 8005690:	429c      	cmp	r4, r3
 8005692:	bf08      	it	eq
 8005694:	68ec      	ldreq	r4, [r5, #12]
 8005696:	e7da      	b.n	800564e <_fflush_r+0x22>
 8005698:	08005950 	.word	0x08005950
 800569c:	08005970 	.word	0x08005970
 80056a0:	08005930 	.word	0x08005930

080056a4 <_lseek_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	2200      	movs	r2, #0
 80056ae:	4d05      	ldr	r5, [pc, #20]	; (80056c4 <_lseek_r+0x20>)
 80056b0:	602a      	str	r2, [r5, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7fc f863 	bl	800177e <_lseek>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d102      	bne.n	80056c2 <_lseek_r+0x1e>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	b103      	cbz	r3, 80056c2 <_lseek_r+0x1e>
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	bd38      	pop	{r3, r4, r5, pc}
 80056c4:	2000027c 	.word	0x2000027c

080056c8 <__swhatbuf_r>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	460e      	mov	r6, r1
 80056cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d0:	4614      	mov	r4, r2
 80056d2:	2900      	cmp	r1, #0
 80056d4:	461d      	mov	r5, r3
 80056d6:	b096      	sub	sp, #88	; 0x58
 80056d8:	da07      	bge.n	80056ea <__swhatbuf_r+0x22>
 80056da:	2300      	movs	r3, #0
 80056dc:	602b      	str	r3, [r5, #0]
 80056de:	89b3      	ldrh	r3, [r6, #12]
 80056e0:	061a      	lsls	r2, r3, #24
 80056e2:	d410      	bmi.n	8005706 <__swhatbuf_r+0x3e>
 80056e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e8:	e00e      	b.n	8005708 <__swhatbuf_r+0x40>
 80056ea:	466a      	mov	r2, sp
 80056ec:	f000 f8c8 	bl	8005880 <_fstat_r>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	dbf2      	blt.n	80056da <__swhatbuf_r+0x12>
 80056f4:	9a01      	ldr	r2, [sp, #4]
 80056f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056fe:	425a      	negs	r2, r3
 8005700:	415a      	adcs	r2, r3
 8005702:	602a      	str	r2, [r5, #0]
 8005704:	e7ee      	b.n	80056e4 <__swhatbuf_r+0x1c>
 8005706:	2340      	movs	r3, #64	; 0x40
 8005708:	2000      	movs	r0, #0
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	b016      	add	sp, #88	; 0x58
 800570e:	bd70      	pop	{r4, r5, r6, pc}

08005710 <__smakebuf_r>:
 8005710:	898b      	ldrh	r3, [r1, #12]
 8005712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005714:	079d      	lsls	r5, r3, #30
 8005716:	4606      	mov	r6, r0
 8005718:	460c      	mov	r4, r1
 800571a:	d507      	bpl.n	800572c <__smakebuf_r+0x1c>
 800571c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	6123      	str	r3, [r4, #16]
 8005724:	2301      	movs	r3, #1
 8005726:	6163      	str	r3, [r4, #20]
 8005728:	b002      	add	sp, #8
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	466a      	mov	r2, sp
 800572e:	ab01      	add	r3, sp, #4
 8005730:	f7ff ffca 	bl	80056c8 <__swhatbuf_r>
 8005734:	9900      	ldr	r1, [sp, #0]
 8005736:	4605      	mov	r5, r0
 8005738:	4630      	mov	r0, r6
 800573a:	f7ff fa73 	bl	8004c24 <_malloc_r>
 800573e:	b948      	cbnz	r0, 8005754 <__smakebuf_r+0x44>
 8005740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005744:	059a      	lsls	r2, r3, #22
 8005746:	d4ef      	bmi.n	8005728 <__smakebuf_r+0x18>
 8005748:	f023 0303 	bic.w	r3, r3, #3
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	e7e3      	b.n	800571c <__smakebuf_r+0xc>
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <__smakebuf_r+0x7c>)
 8005756:	62b3      	str	r3, [r6, #40]	; 0x28
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	6020      	str	r0, [r4, #0]
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	9b00      	ldr	r3, [sp, #0]
 8005764:	6120      	str	r0, [r4, #16]
 8005766:	6163      	str	r3, [r4, #20]
 8005768:	9b01      	ldr	r3, [sp, #4]
 800576a:	b15b      	cbz	r3, 8005784 <__smakebuf_r+0x74>
 800576c:	4630      	mov	r0, r6
 800576e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005772:	f000 f897 	bl	80058a4 <_isatty_r>
 8005776:	b128      	cbz	r0, 8005784 <__smakebuf_r+0x74>
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	81a3      	strh	r3, [r4, #12]
 8005784:	89a0      	ldrh	r0, [r4, #12]
 8005786:	4305      	orrs	r5, r0
 8005788:	81a5      	strh	r5, [r4, #12]
 800578a:	e7cd      	b.n	8005728 <__smakebuf_r+0x18>
 800578c:	08004a7d 	.word	0x08004a7d

08005790 <memchr>:
 8005790:	4603      	mov	r3, r0
 8005792:	b510      	push	{r4, lr}
 8005794:	b2c9      	uxtb	r1, r1
 8005796:	4402      	add	r2, r0
 8005798:	4293      	cmp	r3, r2
 800579a:	4618      	mov	r0, r3
 800579c:	d101      	bne.n	80057a2 <memchr+0x12>
 800579e:	2000      	movs	r0, #0
 80057a0:	e003      	b.n	80057aa <memchr+0x1a>
 80057a2:	7804      	ldrb	r4, [r0, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	428c      	cmp	r4, r1
 80057a8:	d1f6      	bne.n	8005798 <memchr+0x8>
 80057aa:	bd10      	pop	{r4, pc}

080057ac <__malloc_lock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	; (80057b4 <__malloc_lock+0x8>)
 80057ae:	f7ff ba37 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	20000274 	.word	0x20000274

080057b8 <__malloc_unlock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	; (80057c0 <__malloc_unlock+0x8>)
 80057ba:	f7ff ba32 	b.w	8004c22 <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	20000274 	.word	0x20000274

080057c4 <_free_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4605      	mov	r5, r0
 80057c8:	2900      	cmp	r1, #0
 80057ca:	d043      	beq.n	8005854 <_free_r+0x90>
 80057cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057d0:	1f0c      	subs	r4, r1, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bfb8      	it	lt
 80057d6:	18e4      	addlt	r4, r4, r3
 80057d8:	f7ff ffe8 	bl	80057ac <__malloc_lock>
 80057dc:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <_free_r+0x94>)
 80057de:	6813      	ldr	r3, [r2, #0]
 80057e0:	4610      	mov	r0, r2
 80057e2:	b933      	cbnz	r3, 80057f2 <_free_r+0x2e>
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	6014      	str	r4, [r2, #0]
 80057e8:	4628      	mov	r0, r5
 80057ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057ee:	f7ff bfe3 	b.w	80057b8 <__malloc_unlock>
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	d90a      	bls.n	800580c <_free_r+0x48>
 80057f6:	6821      	ldr	r1, [r4, #0]
 80057f8:	1862      	adds	r2, r4, r1
 80057fa:	4293      	cmp	r3, r2
 80057fc:	bf01      	itttt	eq
 80057fe:	681a      	ldreq	r2, [r3, #0]
 8005800:	685b      	ldreq	r3, [r3, #4]
 8005802:	1852      	addeq	r2, r2, r1
 8005804:	6022      	streq	r2, [r4, #0]
 8005806:	6063      	str	r3, [r4, #4]
 8005808:	6004      	str	r4, [r0, #0]
 800580a:	e7ed      	b.n	80057e8 <_free_r+0x24>
 800580c:	461a      	mov	r2, r3
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	b10b      	cbz	r3, 8005816 <_free_r+0x52>
 8005812:	42a3      	cmp	r3, r4
 8005814:	d9fa      	bls.n	800580c <_free_r+0x48>
 8005816:	6811      	ldr	r1, [r2, #0]
 8005818:	1850      	adds	r0, r2, r1
 800581a:	42a0      	cmp	r0, r4
 800581c:	d10b      	bne.n	8005836 <_free_r+0x72>
 800581e:	6820      	ldr	r0, [r4, #0]
 8005820:	4401      	add	r1, r0
 8005822:	1850      	adds	r0, r2, r1
 8005824:	4283      	cmp	r3, r0
 8005826:	6011      	str	r1, [r2, #0]
 8005828:	d1de      	bne.n	80057e8 <_free_r+0x24>
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4401      	add	r1, r0
 8005830:	6011      	str	r1, [r2, #0]
 8005832:	6053      	str	r3, [r2, #4]
 8005834:	e7d8      	b.n	80057e8 <_free_r+0x24>
 8005836:	d902      	bls.n	800583e <_free_r+0x7a>
 8005838:	230c      	movs	r3, #12
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	e7d4      	b.n	80057e8 <_free_r+0x24>
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	1821      	adds	r1, r4, r0
 8005842:	428b      	cmp	r3, r1
 8005844:	bf01      	itttt	eq
 8005846:	6819      	ldreq	r1, [r3, #0]
 8005848:	685b      	ldreq	r3, [r3, #4]
 800584a:	1809      	addeq	r1, r1, r0
 800584c:	6021      	streq	r1, [r4, #0]
 800584e:	6063      	str	r3, [r4, #4]
 8005850:	6054      	str	r4, [r2, #4]
 8005852:	e7c9      	b.n	80057e8 <_free_r+0x24>
 8005854:	bd38      	pop	{r3, r4, r5, pc}
 8005856:	bf00      	nop
 8005858:	200000b0 	.word	0x200000b0

0800585c <_read_r>:
 800585c:	b538      	push	{r3, r4, r5, lr}
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	2200      	movs	r2, #0
 8005866:	4d05      	ldr	r5, [pc, #20]	; (800587c <_read_r+0x20>)
 8005868:	602a      	str	r2, [r5, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	f7fb ff2a 	bl	80016c4 <_read>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_read_r+0x1e>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	b103      	cbz	r3, 800587a <_read_r+0x1e>
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	2000027c 	.word	0x2000027c

08005880 <_fstat_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	2300      	movs	r3, #0
 8005884:	4d06      	ldr	r5, [pc, #24]	; (80058a0 <_fstat_r+0x20>)
 8005886:	4604      	mov	r4, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	f7fb ff5d 	bl	800174c <_fstat>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d102      	bne.n	800589c <_fstat_r+0x1c>
 8005896:	682b      	ldr	r3, [r5, #0]
 8005898:	b103      	cbz	r3, 800589c <_fstat_r+0x1c>
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	2000027c 	.word	0x2000027c

080058a4 <_isatty_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	2300      	movs	r3, #0
 80058a8:	4d05      	ldr	r5, [pc, #20]	; (80058c0 <_isatty_r+0x1c>)
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fb ff5b 	bl	800176a <_isatty>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_isatty_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_isatty_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	2000027c 	.word	0x2000027c

080058c4 <_init>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	bf00      	nop
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr

080058d0 <_fini>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	bf00      	nop
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr
