
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009290  08009290  00019290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f0  080093f0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f8  080093f8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f8  080093f8  000193f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08009400  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000110  0800950c  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  0800950c  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f221  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae9  00000000  00000000  0002f356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00031e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00032a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021412  00000000  00000000  00033500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101c0  00000000  00000000  00054912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7f26  00000000  00000000  00064ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c9f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac0  00000000  00000000  0011ca4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000110 	.word	0x20000110
 8000204:	00000000 	.word	0x00000000
 8000208:	08009274 	.word	0x08009274

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000114 	.word	0x20000114
 8000224:	08009274 	.word	0x08009274

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_uldivmod>:
 800100c:	b953      	cbnz	r3, 8001024 <__aeabi_uldivmod+0x18>
 800100e:	b94a      	cbnz	r2, 8001024 <__aeabi_uldivmod+0x18>
 8001010:	2900      	cmp	r1, #0
 8001012:	bf08      	it	eq
 8001014:	2800      	cmpeq	r0, #0
 8001016:	bf1c      	itt	ne
 8001018:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800101c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 b96e 	b.w	8001300 <__aeabi_idiv0>
 8001024:	f1ad 0c08 	sub.w	ip, sp, #8
 8001028:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800102c:	f000 f806 	bl	800103c <__udivmoddi4>
 8001030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr

0800103c <__udivmoddi4>:
 800103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	9e08      	ldr	r6, [sp, #32]
 8001042:	460d      	mov	r5, r1
 8001044:	4604      	mov	r4, r0
 8001046:	468e      	mov	lr, r1
 8001048:	2b00      	cmp	r3, #0
 800104a:	f040 8083 	bne.w	8001154 <__udivmoddi4+0x118>
 800104e:	428a      	cmp	r2, r1
 8001050:	4617      	mov	r7, r2
 8001052:	d947      	bls.n	80010e4 <__udivmoddi4+0xa8>
 8001054:	fab2 f382 	clz	r3, r2
 8001058:	b14b      	cbz	r3, 800106e <__udivmoddi4+0x32>
 800105a:	f1c3 0120 	rsb	r1, r3, #32
 800105e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001062:	fa20 f101 	lsr.w	r1, r0, r1
 8001066:	409f      	lsls	r7, r3
 8001068:	ea41 0e0e 	orr.w	lr, r1, lr
 800106c:	409c      	lsls	r4, r3
 800106e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001072:	fbbe fcf8 	udiv	ip, lr, r8
 8001076:	fa1f f987 	uxth.w	r9, r7
 800107a:	fb08 e21c 	mls	r2, r8, ip, lr
 800107e:	fb0c f009 	mul.w	r0, ip, r9
 8001082:	0c21      	lsrs	r1, r4, #16
 8001084:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001088:	4290      	cmp	r0, r2
 800108a:	d90a      	bls.n	80010a2 <__udivmoddi4+0x66>
 800108c:	18ba      	adds	r2, r7, r2
 800108e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001092:	f080 8118 	bcs.w	80012c6 <__udivmoddi4+0x28a>
 8001096:	4290      	cmp	r0, r2
 8001098:	f240 8115 	bls.w	80012c6 <__udivmoddi4+0x28a>
 800109c:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a0:	443a      	add	r2, r7
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	fbb2 f0f8 	udiv	r0, r2, r8
 80010a8:	fb08 2210 	mls	r2, r8, r0, r2
 80010ac:	fb00 f109 	mul.w	r1, r0, r9
 80010b0:	b2a4      	uxth	r4, r4
 80010b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010b6:	42a1      	cmp	r1, r4
 80010b8:	d909      	bls.n	80010ce <__udivmoddi4+0x92>
 80010ba:	193c      	adds	r4, r7, r4
 80010bc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010c0:	f080 8103 	bcs.w	80012ca <__udivmoddi4+0x28e>
 80010c4:	42a1      	cmp	r1, r4
 80010c6:	f240 8100 	bls.w	80012ca <__udivmoddi4+0x28e>
 80010ca:	3802      	subs	r0, #2
 80010cc:	443c      	add	r4, r7
 80010ce:	1a64      	subs	r4, r4, r1
 80010d0:	2100      	movs	r1, #0
 80010d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010d6:	b11e      	cbz	r6, 80010e0 <__udivmoddi4+0xa4>
 80010d8:	2200      	movs	r2, #0
 80010da:	40dc      	lsrs	r4, r3
 80010dc:	e9c6 4200 	strd	r4, r2, [r6]
 80010e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e4:	b902      	cbnz	r2, 80010e8 <__udivmoddi4+0xac>
 80010e6:	deff      	udf	#255	; 0xff
 80010e8:	fab2 f382 	clz	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d14f      	bne.n	8001190 <__udivmoddi4+0x154>
 80010f0:	1a8d      	subs	r5, r1, r2
 80010f2:	2101      	movs	r1, #1
 80010f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010f8:	fa1f f882 	uxth.w	r8, r2
 80010fc:	fbb5 fcfe 	udiv	ip, r5, lr
 8001100:	fb0e 551c 	mls	r5, lr, ip, r5
 8001104:	fb08 f00c 	mul.w	r0, r8, ip
 8001108:	0c22      	lsrs	r2, r4, #16
 800110a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800110e:	42a8      	cmp	r0, r5
 8001110:	d907      	bls.n	8001122 <__udivmoddi4+0xe6>
 8001112:	197d      	adds	r5, r7, r5
 8001114:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001118:	d202      	bcs.n	8001120 <__udivmoddi4+0xe4>
 800111a:	42a8      	cmp	r0, r5
 800111c:	f200 80e9 	bhi.w	80012f2 <__udivmoddi4+0x2b6>
 8001120:	4694      	mov	ip, r2
 8001122:	1a2d      	subs	r5, r5, r0
 8001124:	fbb5 f0fe 	udiv	r0, r5, lr
 8001128:	fb0e 5510 	mls	r5, lr, r0, r5
 800112c:	fb08 f800 	mul.w	r8, r8, r0
 8001130:	b2a4      	uxth	r4, r4
 8001132:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001136:	45a0      	cmp	r8, r4
 8001138:	d907      	bls.n	800114a <__udivmoddi4+0x10e>
 800113a:	193c      	adds	r4, r7, r4
 800113c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x10c>
 8001142:	45a0      	cmp	r8, r4
 8001144:	f200 80d9 	bhi.w	80012fa <__udivmoddi4+0x2be>
 8001148:	4610      	mov	r0, r2
 800114a:	eba4 0408 	sub.w	r4, r4, r8
 800114e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001152:	e7c0      	b.n	80010d6 <__udivmoddi4+0x9a>
 8001154:	428b      	cmp	r3, r1
 8001156:	d908      	bls.n	800116a <__udivmoddi4+0x12e>
 8001158:	2e00      	cmp	r6, #0
 800115a:	f000 80b1 	beq.w	80012c0 <__udivmoddi4+0x284>
 800115e:	2100      	movs	r1, #0
 8001160:	e9c6 0500 	strd	r0, r5, [r6]
 8001164:	4608      	mov	r0, r1
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d14b      	bne.n	800120a <__udivmoddi4+0x1ce>
 8001172:	42ab      	cmp	r3, r5
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0x140>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 80b9 	bhi.w	80012ee <__udivmoddi4+0x2b2>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb65 0303 	sbc.w	r3, r5, r3
 8001182:	2001      	movs	r0, #1
 8001184:	469e      	mov	lr, r3
 8001186:	2e00      	cmp	r6, #0
 8001188:	d0aa      	beq.n	80010e0 <__udivmoddi4+0xa4>
 800118a:	e9c6 4e00 	strd	r4, lr, [r6]
 800118e:	e7a7      	b.n	80010e0 <__udivmoddi4+0xa4>
 8001190:	409f      	lsls	r7, r3
 8001192:	f1c3 0220 	rsb	r2, r3, #32
 8001196:	40d1      	lsrs	r1, r2
 8001198:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800119c:	fbb1 f0fe 	udiv	r0, r1, lr
 80011a0:	fa1f f887 	uxth.w	r8, r7
 80011a4:	fb0e 1110 	mls	r1, lr, r0, r1
 80011a8:	fa24 f202 	lsr.w	r2, r4, r2
 80011ac:	409d      	lsls	r5, r3
 80011ae:	fb00 fc08 	mul.w	ip, r0, r8
 80011b2:	432a      	orrs	r2, r5
 80011b4:	0c15      	lsrs	r5, r2, #16
 80011b6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011ba:	45ac      	cmp	ip, r5
 80011bc:	fa04 f403 	lsl.w	r4, r4, r3
 80011c0:	d909      	bls.n	80011d6 <__udivmoddi4+0x19a>
 80011c2:	197d      	adds	r5, r7, r5
 80011c4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80011c8:	f080 808f 	bcs.w	80012ea <__udivmoddi4+0x2ae>
 80011cc:	45ac      	cmp	ip, r5
 80011ce:	f240 808c 	bls.w	80012ea <__udivmoddi4+0x2ae>
 80011d2:	3802      	subs	r0, #2
 80011d4:	443d      	add	r5, r7
 80011d6:	eba5 050c 	sub.w	r5, r5, ip
 80011da:	fbb5 f1fe 	udiv	r1, r5, lr
 80011de:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011e2:	fb01 f908 	mul.w	r9, r1, r8
 80011e6:	b295      	uxth	r5, r2
 80011e8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011ec:	45a9      	cmp	r9, r5
 80011ee:	d907      	bls.n	8001200 <__udivmoddi4+0x1c4>
 80011f0:	197d      	adds	r5, r7, r5
 80011f2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80011f6:	d274      	bcs.n	80012e2 <__udivmoddi4+0x2a6>
 80011f8:	45a9      	cmp	r9, r5
 80011fa:	d972      	bls.n	80012e2 <__udivmoddi4+0x2a6>
 80011fc:	3902      	subs	r1, #2
 80011fe:	443d      	add	r5, r7
 8001200:	eba5 0509 	sub.w	r5, r5, r9
 8001204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001208:	e778      	b.n	80010fc <__udivmoddi4+0xc0>
 800120a:	f1c1 0720 	rsb	r7, r1, #32
 800120e:	408b      	lsls	r3, r1
 8001210:	fa22 fc07 	lsr.w	ip, r2, r7
 8001214:	ea4c 0c03 	orr.w	ip, ip, r3
 8001218:	fa25 f407 	lsr.w	r4, r5, r7
 800121c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001220:	fbb4 f9fe 	udiv	r9, r4, lr
 8001224:	fa1f f88c 	uxth.w	r8, ip
 8001228:	fb0e 4419 	mls	r4, lr, r9, r4
 800122c:	fa20 f307 	lsr.w	r3, r0, r7
 8001230:	fb09 fa08 	mul.w	sl, r9, r8
 8001234:	408d      	lsls	r5, r1
 8001236:	431d      	orrs	r5, r3
 8001238:	0c2b      	lsrs	r3, r5, #16
 800123a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800123e:	45a2      	cmp	sl, r4
 8001240:	fa02 f201 	lsl.w	r2, r2, r1
 8001244:	fa00 f301 	lsl.w	r3, r0, r1
 8001248:	d909      	bls.n	800125e <__udivmoddi4+0x222>
 800124a:	eb1c 0404 	adds.w	r4, ip, r4
 800124e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001252:	d248      	bcs.n	80012e6 <__udivmoddi4+0x2aa>
 8001254:	45a2      	cmp	sl, r4
 8001256:	d946      	bls.n	80012e6 <__udivmoddi4+0x2aa>
 8001258:	f1a9 0902 	sub.w	r9, r9, #2
 800125c:	4464      	add	r4, ip
 800125e:	eba4 040a 	sub.w	r4, r4, sl
 8001262:	fbb4 f0fe 	udiv	r0, r4, lr
 8001266:	fb0e 4410 	mls	r4, lr, r0, r4
 800126a:	fb00 fa08 	mul.w	sl, r0, r8
 800126e:	b2ad      	uxth	r5, r5
 8001270:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001274:	45a2      	cmp	sl, r4
 8001276:	d908      	bls.n	800128a <__udivmoddi4+0x24e>
 8001278:	eb1c 0404 	adds.w	r4, ip, r4
 800127c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001280:	d22d      	bcs.n	80012de <__udivmoddi4+0x2a2>
 8001282:	45a2      	cmp	sl, r4
 8001284:	d92b      	bls.n	80012de <__udivmoddi4+0x2a2>
 8001286:	3802      	subs	r0, #2
 8001288:	4464      	add	r4, ip
 800128a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800128e:	fba0 8902 	umull	r8, r9, r0, r2
 8001292:	eba4 040a 	sub.w	r4, r4, sl
 8001296:	454c      	cmp	r4, r9
 8001298:	46c6      	mov	lr, r8
 800129a:	464d      	mov	r5, r9
 800129c:	d319      	bcc.n	80012d2 <__udivmoddi4+0x296>
 800129e:	d016      	beq.n	80012ce <__udivmoddi4+0x292>
 80012a0:	b15e      	cbz	r6, 80012ba <__udivmoddi4+0x27e>
 80012a2:	ebb3 020e 	subs.w	r2, r3, lr
 80012a6:	eb64 0405 	sbc.w	r4, r4, r5
 80012aa:	fa04 f707 	lsl.w	r7, r4, r7
 80012ae:	fa22 f301 	lsr.w	r3, r2, r1
 80012b2:	431f      	orrs	r7, r3
 80012b4:	40cc      	lsrs	r4, r1
 80012b6:	e9c6 7400 	strd	r7, r4, [r6]
 80012ba:	2100      	movs	r1, #0
 80012bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c0:	4631      	mov	r1, r6
 80012c2:	4630      	mov	r0, r6
 80012c4:	e70c      	b.n	80010e0 <__udivmoddi4+0xa4>
 80012c6:	468c      	mov	ip, r1
 80012c8:	e6eb      	b.n	80010a2 <__udivmoddi4+0x66>
 80012ca:	4610      	mov	r0, r2
 80012cc:	e6ff      	b.n	80010ce <__udivmoddi4+0x92>
 80012ce:	4543      	cmp	r3, r8
 80012d0:	d2e6      	bcs.n	80012a0 <__udivmoddi4+0x264>
 80012d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80012d6:	eb69 050c 	sbc.w	r5, r9, ip
 80012da:	3801      	subs	r0, #1
 80012dc:	e7e0      	b.n	80012a0 <__udivmoddi4+0x264>
 80012de:	4628      	mov	r0, r5
 80012e0:	e7d3      	b.n	800128a <__udivmoddi4+0x24e>
 80012e2:	4611      	mov	r1, r2
 80012e4:	e78c      	b.n	8001200 <__udivmoddi4+0x1c4>
 80012e6:	4681      	mov	r9, r0
 80012e8:	e7b9      	b.n	800125e <__udivmoddi4+0x222>
 80012ea:	4608      	mov	r0, r1
 80012ec:	e773      	b.n	80011d6 <__udivmoddi4+0x19a>
 80012ee:	4608      	mov	r0, r1
 80012f0:	e749      	b.n	8001186 <__udivmoddi4+0x14a>
 80012f2:	f1ac 0c02 	sub.w	ip, ip, #2
 80012f6:	443d      	add	r5, r7
 80012f8:	e713      	b.n	8001122 <__udivmoddi4+0xe6>
 80012fa:	3802      	subs	r0, #2
 80012fc:	443c      	add	r4, r7
 80012fe:	e724      	b.n	800114a <__udivmoddi4+0x10e>

08001300 <__aeabi_idiv0>:
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <BUTTON_STATE>:
#include "stm32f1xx_hal_gpio.h"
#include "button.h"

enum BUTTON num;

uint8_t BUTTON_STATE(uint8_t num) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d112      	bne.n	800133a <BUTTON_STATE+0x36>

	case CALIBRATE_MPU_BUTTON:

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001314:	2101      	movs	r1, #1
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <BUTTON_STATE+0x40>)
 8001318:	f003 fafc 	bl	8004914 <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <BUTTON_STATE+0x22>
			return 1;
 8001322:	2301      	movs	r3, #1
 8001324:	e009      	b.n	800133a <BUTTON_STATE+0x36>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001326:	2101      	movs	r1, #1
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <BUTTON_STATE+0x40>)
 800132a:	f003 faf3 	bl	8004914 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <BUTTON_STATE+0x34>
			return 0;
 8001334:	2300      	movs	r3, #0
 8001336:	e000      	b.n	800133a <BUTTON_STATE+0x36>
		}
		break;
 8001338:	bf00      	nop
	}
};
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40011000 	.word	0x40011000

08001348 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001350:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <MX_CAN1_Init+0xac>)
 8001352:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 4;
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001356:	2204      	movs	r2, #4
 8001358:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <MX_CAN1_Init+0xa8>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001368:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800136c:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001370:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001374:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001378:	2200      	movs	r2, #0
 800137a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_CAN1_Init+0xa8>)
 800137e:	2201      	movs	r2, #1
 8001380:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_CAN1_Init+0xa8>)
 800138a:	2200      	movs	r2, #0
 800138c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_CAN1_Init+0xa8>)
 8001396:	2201      	movs	r2, #1
 8001398:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800139a:	4815      	ldr	r0, [pc, #84]	; (80013f0 <MX_CAN1_Init+0xa8>)
 800139c:	f001 fe5e 	bl	800305c <HAL_CAN_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_CAN1_Init+0x62>
		Error_Handler();
 80013a6:	f001 f8bf 	bl	8002528 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80013ce:	230e      	movs	r3, #14
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80013d2:	463b      	mov	r3, r7
 80013d4:	4619      	mov	r1, r3
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <MX_CAN1_Init+0xa8>)
 80013d8:	f001 ff3c 	bl	8003254 <HAL_CAN_ConfigFilter>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_CAN1_Init+0x9e>
		Error_Handler();
 80013e2:	f001 f8a1 	bl	8002528 <Error_Handler>
	}
}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000180 	.word	0x20000180
 80013f4:	40006400 	.word	0x40006400

080013f8 <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001400:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <MX_CAN2_Init+0xac>)
 8001402:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 4;
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001406:	2204      	movs	r2, #4
 8001408:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <MX_CAN2_Init+0xa8>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001418:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800141c:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001420:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001424:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001428:	2200      	movs	r2, #0
 800142a:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_CAN2_Init+0xa8>)
 800142e:	2201      	movs	r2, #1
 8001430:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001434:	2200      	movs	r2, #0
 8001436:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_CAN2_Init+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001440:	2200      	movs	r2, #0
 8001442:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001446:	2201      	movs	r2, #1
 8001448:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 800144a:	4815      	ldr	r0, [pc, #84]	; (80014a0 <MX_CAN2_Init+0xa8>)
 800144c:	f001 fe06 	bl	800305c <HAL_CAN_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_CAN2_Init+0x62>
		Error_Handler();
 8001456:	f001 f867 	bl	8002528 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 14;
 800145a:	230e      	movs	r3, #14
 800145c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x000;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001476:	2301      	movs	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800147a:	2301      	movs	r3, #1
 800147c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800147e:	230e      	movs	r3, #14
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_CAN2_Init+0xa8>)
 8001488:	f001 fee4 	bl	8003254 <HAL_CAN_ConfigFilter>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_CAN2_Init+0x9e>
		Error_Handler();
 8001492:	f001 f849 	bl	8002528 <Error_Handler>
	}

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000158 	.word	0x20000158
 80014a4:	40006800 	.word	0x40006800

080014a8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6d      	ldr	r2, [pc, #436]	; (8001678 <HAL_CAN_MspInit+0x1d0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d15b      	bne.n	8001580 <HAL_CAN_MspInit+0xd8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80014c8:	4b6c      	ldr	r3, [pc, #432]	; (800167c <HAL_CAN_MspInit+0x1d4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a6b      	ldr	r2, [pc, #428]	; (800167c <HAL_CAN_MspInit+0x1d4>)
 80014d0:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80014d2:	4b6a      	ldr	r3, [pc, #424]	; (800167c <HAL_CAN_MspInit+0x1d4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10b      	bne.n	80014f2 <HAL_CAN_MspInit+0x4a>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80014da:	4b69      	ldr	r3, [pc, #420]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a68      	ldr	r2, [pc, #416]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80014e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b66      	ldr	r3, [pc, #408]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ee:	61bb      	str	r3, [r7, #24]
 80014f0:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a62      	ldr	r2, [pc, #392]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b60      	ldr	r3, [pc, #384]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800150e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4859      	ldr	r0, [pc, #356]	; (8001684 <HAL_CAN_MspInit+0x1dc>)
 8001520:	f003 f874 	bl	800460c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4852      	ldr	r0, [pc, #328]	; (8001684 <HAL_CAN_MspInit+0x1dc>)
 800153a:	f003 f867 	bl	800460c <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2013      	movs	r0, #19
 8001544:	f002 fd27 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001548:	2013      	movs	r0, #19
 800154a:	f002 fd40 	bl	8003fce <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2014      	movs	r0, #20
 8001554:	f002 fd1f 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001558:	2014      	movs	r0, #20
 800155a:	f002 fd38 	bl	8003fce <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2015      	movs	r0, #21
 8001564:	f002 fd17 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001568:	2015      	movs	r0, #21
 800156a:	f002 fd30 	bl	8003fce <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2016      	movs	r0, #22
 8001574:	f002 fd0f 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001578:	2016      	movs	r0, #22
 800157a:	f002 fd28 	bl	8003fce <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
	}
}
 800157e:	e077      	b.n	8001670 <HAL_CAN_MspInit+0x1c8>
	} else if (canHandle->Instance == CAN2) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a40      	ldr	r2, [pc, #256]	; (8001688 <HAL_CAN_MspInit+0x1e0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d172      	bne.n	8001670 <HAL_CAN_MspInit+0x1c8>
		__HAL_RCC_CAN2_CLK_ENABLE();
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a3c      	ldr	r2, [pc, #240]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 8001590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <HAL_CAN_MspInit+0x1d4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	4a34      	ldr	r2, [pc, #208]	; (800167c <HAL_CAN_MspInit+0x1d4>)
 80015aa:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80015ac:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_CAN_MspInit+0x1d4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d10b      	bne.n	80015cc <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a31      	ldr	r2, [pc, #196]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80015ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015be:	61d3      	str	r3, [r2, #28]
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80015d2:	f043 0308 	orr.w	r3, r3, #8
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <HAL_CAN_MspInit+0x1d8>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e4:	2320      	movs	r3, #32
 80015e6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4825      	ldr	r0, [pc, #148]	; (800168c <HAL_CAN_MspInit+0x1e4>)
 80015f8:	f003 f808 	bl	800460c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015fc:	2340      	movs	r3, #64	; 0x40
 80015fe:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	481f      	ldr	r0, [pc, #124]	; (800168c <HAL_CAN_MspInit+0x1e4>)
 8001610:	f002 fffc 	bl	800460c <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_CAN2_ENABLE();
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_CAN_MspInit+0x1e8>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162a:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_CAN_MspInit+0x1e8>)
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	6053      	str	r3, [r2, #4]
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	203f      	movs	r0, #63	; 0x3f
 8001636:	f002 fcae 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800163a:	203f      	movs	r0, #63	; 0x3f
 800163c:	f002 fcc7 	bl	8003fce <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2040      	movs	r0, #64	; 0x40
 8001646:	f002 fca6 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800164a:	2040      	movs	r0, #64	; 0x40
 800164c:	f002 fcbf 	bl	8003fce <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	2041      	movs	r0, #65	; 0x41
 8001656:	f002 fc9e 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800165a:	2041      	movs	r0, #65	; 0x41
 800165c:	f002 fcb7 	bl	8003fce <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2042      	movs	r0, #66	; 0x42
 8001666:	f002 fc96 	bl	8003f96 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800166a:	2042      	movs	r0, #66	; 0x42
 800166c:	f002 fcaf 	bl	8003fce <HAL_NVIC_EnableIRQ>
}
 8001670:	bf00      	nop
 8001672:	3730      	adds	r7, #48	; 0x30
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40006400 	.word	0x40006400
 800167c:	2000012c 	.word	0x2000012c
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800
 8001688:	40006800 	.word	0x40006800
 800168c:	40010c00 	.word	0x40010c00
 8001690:	40010000 	.word	0x40010000

08001694 <EEPROM_Init>:
// - set global variables ValidPage, ReceivingPage and ErasedPage
// - build address index
// - resume page transfer if needed
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_Init() {
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
	EEPROM_Result result;

	//unlock the flash memory
	HAL_FLASH_Unlock();
 800169a:	f002 fe37 	bl	800430c <HAL_FLASH_Unlock>

	//read each page status and check if valid
	EEPROM_PageStatus PageStatus0 = *((__IO uint16_t*) EEPROM_PAGE0);
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <EEPROM_Init+0x17c>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	83fb      	strh	r3, [r7, #30]
	EEPROM_PageStatus PageStatus1 = *((__IO uint16_t*) EEPROM_PAGE1);
 80016a4:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <EEPROM_Init+0x180>)
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	83bb      	strh	r3, [r7, #28]
	uint8_t InvalidState = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 != EEPROM_VALID && PageStatus0 != EEPROM_RECEIVING
 80016ae:	8bfb      	ldrh	r3, [r7, #30]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00b      	beq.n	80016cc <EEPROM_Init+0x38>
 80016b4:	8bfb      	ldrh	r3, [r7, #30]
 80016b6:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d006      	beq.n	80016cc <EEPROM_Init+0x38>
			&& PageStatus0 != EEPROM_ERASED)
 80016be:	8bfb      	ldrh	r3, [r7, #30]
 80016c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d001      	beq.n	80016cc <EEPROM_Init+0x38>
		InvalidState = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	76fb      	strb	r3, [r7, #27]
	if (PageStatus1 != EEPROM_VALID && PageStatus1 != EEPROM_RECEIVING
 80016cc:	8bbb      	ldrh	r3, [r7, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <EEPROM_Init+0x56>
 80016d2:	8bbb      	ldrh	r3, [r7, #28]
 80016d4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016d8:	4293      	cmp	r3, r2
 80016da:	d006      	beq.n	80016ea <EEPROM_Init+0x56>
			&& PageStatus1 != EEPROM_ERASED)
 80016dc:	8bbb      	ldrh	r3, [r7, #28]
 80016de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d001      	beq.n	80016ea <EEPROM_Init+0x56>
		InvalidState = 1;
 80016e6:	2301      	movs	r3, #1
 80016e8:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 == PageStatus1)
 80016ea:	8bfa      	ldrh	r2, [r7, #30]
 80016ec:	8bbb      	ldrh	r3, [r7, #28]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d101      	bne.n	80016f6 <EEPROM_Init+0x62>
		InvalidState = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	76fb      	strb	r3, [r7, #27]

	// if invalid page status, format EEPROM (erase both pages and set page0 as valid)
	if (InvalidState) {
 80016f6:	7efb      	ldrb	r3, [r7, #27]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d029      	beq.n	8001750 <EEPROM_Init+0xbc>
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8001700:	2301      	movs	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
		EraseDefinitions.PageAddress = EEPROM_PAGE0;
 8001704:	4b42      	ldr	r3, [pc, #264]	; (8001810 <EEPROM_Init+0x17c>)
 8001706:	613b      	str	r3, [r7, #16]
		EraseDefinitions.NbPages = 2;
 8001708:	2302      	movs	r3, #2
 800170a:	617b      	str	r3, [r7, #20]
		uint32_t PageError;

		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 800170c:	1d3a      	adds	r2, r7, #4
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fed1 	bl	80044bc <HAL_FLASHEx_Erase>
 800171a:	4603      	mov	r3, r0
 800171c:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 800171e:	7ebb      	ldrb	r3, [r7, #26]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <EEPROM_Init+0x94>
			return result;
 8001724:	7ebb      	ldrb	r3, [r7, #26]
 8001726:	e06e      	b.n	8001806 <EEPROM_Init+0x172>

		result = HAL_FLASH_Program(EEPROM_SIZE16, EEPROM_PAGE0, EEPROM_VALID);
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	4937      	ldr	r1, [pc, #220]	; (8001810 <EEPROM_Init+0x17c>)
 8001732:	2001      	movs	r0, #1
 8001734:	f002 fd7a 	bl	800422c <HAL_FLASH_Program>
 8001738:	4603      	mov	r3, r0
 800173a:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 800173c:	7ebb      	ldrb	r3, [r7, #26]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <EEPROM_Init+0xb2>
			return result;
 8001742:	7ebb      	ldrb	r3, [r7, #26]
 8001744:	e05f      	b.n	8001806 <EEPROM_Init+0x172>

		PageStatus0 = EEPROM_VALID;
 8001746:	2300      	movs	r3, #0
 8001748:	83fb      	strh	r3, [r7, #30]
		PageStatus1 = EEPROM_ERASED;
 800174a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174e:	83bb      	strh	r3, [r7, #28]
	}

	//set global variables ValidPage, ReceivingPage and ErasedPage (one stays EEPROM_PAGE_NONE)
	if (PageStatus0 == EEPROM_VALID)
 8001750:	8bfb      	ldrh	r3, [r7, #30]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <EEPROM_Init+0xc8>
		EEPROM_ValidPage = EEPROM_PAGE0;
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <EEPROM_Init+0x184>)
 8001758:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <EEPROM_Init+0x17c>)
 800175a:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_VALID)
 800175c:	8bbb      	ldrh	r3, [r7, #28]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <EEPROM_Init+0xd4>
		EEPROM_ValidPage = EEPROM_PAGE1;
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <EEPROM_Init+0x184>)
 8001764:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <EEPROM_Init+0x180>)
 8001766:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_RECEIVING)
 8001768:	8bfb      	ldrh	r3, [r7, #30]
 800176a:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800176e:	4293      	cmp	r3, r2
 8001770:	d102      	bne.n	8001778 <EEPROM_Init+0xe4>
		EEPROM_ReceivingPage = EEPROM_PAGE0;
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <EEPROM_Init+0x188>)
 8001774:	4a26      	ldr	r2, [pc, #152]	; (8001810 <EEPROM_Init+0x17c>)
 8001776:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_RECEIVING)
 8001778:	8bbb      	ldrh	r3, [r7, #28]
 800177a:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800177e:	4293      	cmp	r3, r2
 8001780:	d102      	bne.n	8001788 <EEPROM_Init+0xf4>
		EEPROM_ReceivingPage = EEPROM_PAGE1;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <EEPROM_Init+0x188>)
 8001784:	4a23      	ldr	r2, [pc, #140]	; (8001814 <EEPROM_Init+0x180>)
 8001786:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_ERASED)
 8001788:	8bfb      	ldrh	r3, [r7, #30]
 800178a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800178e:	4293      	cmp	r3, r2
 8001790:	d102      	bne.n	8001798 <EEPROM_Init+0x104>
		EEPROM_ErasedPage = EEPROM_PAGE0;
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <EEPROM_Init+0x18c>)
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <EEPROM_Init+0x17c>)
 8001796:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_ERASED)
 8001798:	8bbb      	ldrh	r3, [r7, #28]
 800179a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800179e:	4293      	cmp	r3, r2
 80017a0:	d102      	bne.n	80017a8 <EEPROM_Init+0x114>
		EEPROM_ErasedPage = EEPROM_PAGE1;
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <EEPROM_Init+0x18c>)
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <EEPROM_Init+0x180>)
 80017a6:	601a      	str	r2, [r3, #0]

	//build address index (addresses from receiving page are dominant)
	EEPROM_PageToIndex(EEPROM_ValidPage);
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <EEPROM_Init+0x184>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fa93 	bl	8001cd8 <EEPROM_PageToIndex>
	EEPROM_PageToIndex(EEPROM_ReceivingPage);
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <EEPROM_Init+0x188>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 fa8e 	bl	8001cd8 <EEPROM_PageToIndex>

	//if needed, resume page transfer or just mark receiving page as valid
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE) {
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <EEPROM_Init+0x188>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01f      	beq.n	8001804 <EEPROM_Init+0x170>
		if (EEPROM_ValidPage == EEPROM_PAGE_NONE) {
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <EEPROM_Init+0x184>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10c      	bne.n	80017e6 <EEPROM_Init+0x152>
			result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <EEPROM_Init+0x188>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f9e4 	bl	8001ba0 <EEPROM_SetPageStatus>
 80017d8:	4603      	mov	r3, r0
 80017da:	76bb      	strb	r3, [r7, #26]
			if (result != EEPROM_SUCCESS)
 80017dc:	7ebb      	ldrb	r3, [r7, #26]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d010      	beq.n	8001804 <EEPROM_Init+0x170>
				return result;
 80017e2:	7ebb      	ldrb	r3, [r7, #26]
 80017e4:	e00f      	b.n	8001806 <EEPROM_Init+0x172>
		} else {
			result = EEPROM_PageTransfer(EEPROM_ValidPage,
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <EEPROM_Init+0x184>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <EEPROM_Init+0x188>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f96d 	bl	8001ad0 <EEPROM_PageTransfer>
 80017f6:	4603      	mov	r3, r0
 80017f8:	76bb      	strb	r3, [r7, #26]
					EEPROM_ReceivingPage);
			if (result != EEPROM_SUCCESS)
 80017fa:	7ebb      	ldrb	r3, [r7, #26]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <EEPROM_Init+0x170>
				return result;
 8001800:	7ebb      	ldrb	r3, [r7, #26]
 8001802:	e000      	b.n	8001806 <EEPROM_Init+0x172>
		}
	}

	return EEPROM_SUCCESS;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	0800f000 	.word	0x0800f000
 8001814:	0800f800 	.word	0x0800f800
 8001818:	20000138 	.word	0x20000138
 800181c:	2000013c 	.word	0x2000013c
 8001820:	20000140 	.word	0x20000140

08001824 <EEPROM_ReadVariable>:
// - read variable value from physical address with right size
//
// VariableName:	name (number) of the variable to read
// Value:			outputs the variable value
// return:			EEPROM_SUCCESS, EEPROM_INVALID_NAME, EEPROM_NOT_ASSIGNED
EEPROM_Result EEPROM_ReadVariable(uint16_t VariableName, EEPROM_Value *Value) {
 8001824:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	6039      	str	r1, [r7, #0]
 8001830:	80fb      	strh	r3, [r7, #6]
	//check if variable name exists
	if (VariableName >= EEPROM_VARIABLE_COUNT)
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d901      	bls.n	800183c <EEPROM_ReadVariable+0x18>
		return EEPROM_INVALID_NAME;
 8001838:	2306      	movs	r3, #6
 800183a:	e041      	b.n	80018c0 <EEPROM_ReadVariable+0x9c>

	//check if variable was assigned
	uint32_t Address = EEPROM_START_ADDRESS + EEPROM_Index[VariableName];
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4a23      	ldr	r2, [pc, #140]	; (80018cc <EEPROM_ReadVariable+0xa8>)
 8001840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001844:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001848:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 800184c:	60fb      	str	r3, [r7, #12]
	if (Address == EEPROM_PAGE0)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <EEPROM_ReadVariable+0xac>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <EEPROM_ReadVariable+0x36>
		return EEPROM_NOT_ASSIGNED;
 8001856:	2305      	movs	r3, #5
 8001858:	e032      	b.n	80018c0 <EEPROM_ReadVariable+0x9c>

	//read variable value from physical address with right size
	switch (EEPROM_SizeTable[VariableName]) {
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <EEPROM_ReadVariable+0xb0>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d011      	beq.n	8001888 <EEPROM_ReadVariable+0x64>
 8001864:	2b03      	cmp	r3, #3
 8001866:	dc28      	bgt.n	80018ba <EEPROM_ReadVariable+0x96>
 8001868:	2b01      	cmp	r3, #1
 800186a:	d002      	beq.n	8001872 <EEPROM_ReadVariable+0x4e>
 800186c:	2b02      	cmp	r3, #2
 800186e:	d006      	beq.n	800187e <EEPROM_ReadVariable+0x5a>
 8001870:	e023      	b.n	80018ba <EEPROM_ReadVariable+0x96>
	case EEPROM_SIZE16:
		(*Value).uInt16 = *((__IO uint16_t*) Address);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b29a      	uxth	r2, r3
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	801a      	strh	r2, [r3, #0]
		break;
 800187c:	e01f      	b.n	80018be <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE32:
		(*Value).uInt32 = *((__IO uint32_t*) Address);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	601a      	str	r2, [r3, #0]
		break;
 8001886:	e01a      	b.n	80018be <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE64:
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f04f 0100 	mov.w	r1, #0
				| ((uint64_t) *((__IO uint32_t*) (Address + 4)) << 32);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4698      	mov	r8, r3
 800189a:	f04f 0900 	mov.w	r9, #0
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	4643      	mov	r3, r8
 80018a8:	2200      	movs	r2, #0
 80018aa:	ea40 0402 	orr.w	r4, r0, r2
 80018ae:	ea41 0503 	orr.w	r5, r1, r3
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 80018b8:	e001      	b.n	80018be <EEPROM_ReadVariable+0x9a>
	default:
		return EEPROM_NOT_ASSIGNED;
 80018ba:	2305      	movs	r3, #5
 80018bc:	e000      	b.n	80018c0 <EEPROM_ReadVariable+0x9c>
	}

	return EEPROM_SUCCESS;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80018ca:	4770      	bx	lr
 80018cc:	20000134 	.word	0x20000134
 80018d0:	0800f000 	.word	0x0800f000
 80018d4:	20000130 	.word	0x20000130

080018d8 <EEPROM_WriteVariable>:
// VariableName:	name (number) of the variable to write
// Value:			value to be written
// Size:			size of "Value" as EEPROM_Size
// return:			EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_WriteVariable(uint16_t VariableName, EEPROM_Value Value,
		uint8_t Size) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08c      	sub	sp, #48	; 0x30
 80018dc:	af02      	add	r7, sp, #8
 80018de:	4601      	mov	r1, r0
 80018e0:	e9c7 2300 	strd	r2, r3, [r7]
 80018e4:	460b      	mov	r3, r1
 80018e6:	81fb      	strh	r3, [r7, #14]
	EEPROM_Result result;

	//get writing page's end address (prefer writing to receiving page)
	EEPROM_Page WritingPage = EEPROM_ValidPage;
 80018e8:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <EEPROM_WriteVariable+0x1e0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE)
 80018ee:	4b73      	ldr	r3, [pc, #460]	; (8001abc <EEPROM_WriteVariable+0x1e4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <EEPROM_WriteVariable+0x24>
		WritingPage = EEPROM_ReceivingPage;
 80018f6:	4b71      	ldr	r3, [pc, #452]	; (8001abc <EEPROM_WriteVariable+0x1e4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
	if (WritingPage == EEPROM_PAGE_NONE)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <EEPROM_WriteVariable+0x2e>
		return EEPROM_NO_VALID_PAGE;
 8001902:	2304      	movs	r3, #4
 8001904:	e0d3      	b.n	8001aae <EEPROM_WriteVariable+0x1d6>
	uint32_t PageEndAddress = WritingPage + FLASH_PAGE_SIZE;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800190c:	61bb      	str	r3, [r7, #24]

	//calculate memory usage of variable
	uint8_t Bytes = 2 + (1 << Size);
 800190e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001912:	2201      	movs	r2, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3302      	adds	r3, #2
 800191c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (Size == EEPROM_SIZE_DELETED)
 8001920:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <EEPROM_WriteVariable+0x56>
		Bytes = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//check if enough free space or page full
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <EEPROM_WriteVariable+0x6e>
 8001936:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	1ad2      	subs	r2, r2, r3
 800193e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001942:	429a      	cmp	r2, r3
 8001944:	d25d      	bcs.n	8001a02 <EEPROM_WriteVariable+0x12a>
		//check if data is too much to store on one page
		uint16_t RequiredMemory = 2;
 8001946:	2302      	movs	r3, #2
 8001948:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 800194a:	2300      	movs	r3, #0
 800194c:	83fb      	strh	r3, [r7, #30]
 800194e:	e023      	b.n	8001998 <EEPROM_WriteVariable+0xc0>
			if (i == VariableName)
 8001950:	8bfa      	ldrh	r2, [r7, #30]
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	429a      	cmp	r2, r3
 8001956:	d10b      	bne.n	8001970 <EEPROM_WriteVariable+0x98>
				RequiredMemory += 2 + (1 << Size);
 8001958:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800195c:	2201      	movs	r2, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	b29a      	uxth	r2, r3
 8001964:	8c3b      	ldrh	r3, [r7, #32]
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	3302      	adds	r3, #2
 800196c:	843b      	strh	r3, [r7, #32]
 800196e:	e010      	b.n	8001992 <EEPROM_WriteVariable+0xba>
			else if (EEPROM_SizeTable[i] != EEPROM_SIZE_DELETED)
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <EEPROM_WriteVariable+0x1ec>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <EEPROM_WriteVariable+0xba>
				RequiredMemory += 2 + (1 << EEPROM_SizeTable[i]);
 800197a:	8bfb      	ldrh	r3, [r7, #30]
 800197c:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <EEPROM_WriteVariable+0x1ec>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	461a      	mov	r2, r3
 8001982:	2301      	movs	r3, #1
 8001984:	4093      	lsls	r3, r2
 8001986:	b29a      	uxth	r2, r3
 8001988:	8c3b      	ldrh	r3, [r7, #32]
 800198a:	4413      	add	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	3302      	adds	r3, #2
 8001990:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001992:	8bfb      	ldrh	r3, [r7, #30]
 8001994:	3301      	adds	r3, #1
 8001996:	83fb      	strh	r3, [r7, #30]
 8001998:	8bfb      	ldrh	r3, [r7, #30]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d9d8      	bls.n	8001950 <EEPROM_WriteVariable+0x78>
		}
		if (RequiredMemory > FLASH_PAGE_SIZE)
 800199e:	8c3b      	ldrh	r3, [r7, #32]
 80019a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a4:	d901      	bls.n	80019aa <EEPROM_WriteVariable+0xd2>
			return EEPROM_FULL;
 80019a6:	2307      	movs	r3, #7
 80019a8:	e081      	b.n	8001aae <EEPROM_WriteVariable+0x1d6>

		//mark the empty page as receiving
		result = EEPROM_SetPageStatus(EEPROM_ErasedPage, EEPROM_RECEIVING);
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <EEPROM_WriteVariable+0x1f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f8f4 	bl	8001ba0 <EEPROM_SetPageStatus>
 80019b8:	4603      	mov	r3, r0
 80019ba:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <EEPROM_WriteVariable+0xee>
			return result;
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	e073      	b.n	8001aae <EEPROM_WriteVariable+0x1d6>

		//change next index to receiving page
		EEPROM_NextIndex = EEPROM_ReceivingPage + 2;
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <EEPROM_WriteVariable+0x1e4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3302      	adds	r3, #2
 80019cc:	4a3c      	ldr	r2, [pc, #240]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 80019ce:	6013      	str	r3, [r2, #0]

		//write the variable to receiving page (by calling this function again)
		result = EEPROM_WriteVariable(VariableName, Value, Size);
 80019d0:	89f9      	ldrh	r1, [r7, #14]
 80019d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019dc:	4608      	mov	r0, r1
 80019de:	f7ff ff7b 	bl	80018d8 <EEPROM_WriteVariable>
 80019e2:	4603      	mov	r3, r0
 80019e4:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <EEPROM_WriteVariable+0x118>
			return result;
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	e05e      	b.n	8001aae <EEPROM_WriteVariable+0x1d6>

		//do page transfer
		result = EEPROM_PageTransfer();
 80019f0:	f000 f86e 	bl	8001ad0 <EEPROM_PageTransfer>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d055      	beq.n	8001aaa <EEPROM_WriteVariable+0x1d2>
			return result;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	e055      	b.n	8001aae <EEPROM_WriteVariable+0x1d6>
	}

	//else (if enough space)
	else {
		//write variable value
		if (Size != EEPROM_SIZE_DELETED) {
 8001a02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00f      	beq.n	8001a2a <EEPROM_WriteVariable+0x152>
			result = HAL_FLASH_Program(Size, EEPROM_NextIndex + 2,
 8001a0a:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1c99      	adds	r1, r3, #2
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	f002 fc08 	bl	800422c <HAL_FLASH_Program>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	75fb      	strb	r3, [r7, #23]
					Value.uInt64);
			if (result != EEPROM_SUCCESS)
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <EEPROM_WriteVariable+0x152>
				return result;
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	e041      	b.n	8001aae <EEPROM_WriteVariable+0x1d6>
		}

		//create and write variable header (size and name)
		uint16_t VariableHeader = VariableName + (Size << 14);
 8001a2a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	039b      	lsls	r3, r3, #14
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	4413      	add	r3, r2
 8001a38:	82bb      	strh	r3, [r7, #20]
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, EEPROM_NextIndex,
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	8aba      	ldrh	r2, [r7, #20]
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	2001      	movs	r0, #1
 8001a46:	f002 fbf1 	bl	800422c <HAL_FLASH_Program>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
				VariableHeader);
		if (result != EEPROM_SUCCESS)
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <EEPROM_WriteVariable+0x180>
			return result;
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	e02a      	b.n	8001aae <EEPROM_WriteVariable+0x1d6>

		//update index & size table
		EEPROM_Index[VariableName] =
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
		EEPROM_Index[VariableName] =
 8001a5e:	89fa      	ldrh	r2, [r7, #14]
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	3302      	adds	r3, #2
 8001a66:	b299      	uxth	r1, r3
		EEPROM_Index[VariableName] =
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <EEPROM_WriteVariable+0x1f4>)
 8001a6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		EEPROM_SizeTable[VariableName] = Size;
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	4914      	ldr	r1, [pc, #80]	; (8001ac4 <EEPROM_WriteVariable+0x1ec>)
 8001a72:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a76:	54ca      	strb	r2, [r1, r3]
		if (Size == EEPROM_SIZE_DELETED)
 8001a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d104      	bne.n	8001a8a <EEPROM_WriteVariable+0x1b2>
			EEPROM_Index[VariableName] = 0;
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <EEPROM_WriteVariable+0x1f4>)
 8001a84:	2100      	movs	r1, #0
 8001a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//update next index
		EEPROM_NextIndex += Bytes;
 8001a8a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001a96:	6013      	str	r3, [r2, #0]
		if (EEPROM_NextIndex >= PageEndAddress)
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d804      	bhi.n	8001aac <EEPROM_WriteVariable+0x1d4>
			EEPROM_NextIndex = 0;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <EEPROM_WriteVariable+0x1e8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e000      	b.n	8001aac <EEPROM_WriteVariable+0x1d4>
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8001aaa:	bf00      	nop
	}

	return EEPROM_SUCCESS;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3728      	adds	r7, #40	; 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000138 	.word	0x20000138
 8001abc:	2000013c 	.word	0x2000013c
 8001ac0:	20000144 	.word	0x20000144
 8001ac4:	20000130 	.word	0x20000130
 8001ac8:	20000140 	.word	0x20000140
 8001acc:	20000134 	.word	0x20000134

08001ad0 <EEPROM_PageTransfer>:
//		- write variable to receiving page
// - erase source page
// - mark receiving page as valid
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
static EEPROM_Result EEPROM_PageTransfer() {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
	EEPROM_Result result;
	EEPROM_Value Value;

	//get start & end address of valid page (source) (as offset to EEPROM start)
	uint16_t StartAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <EEPROM_PageTransfer+0xc0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae0:	81bb      	strh	r3, [r7, #12]
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
			+ FLASH_PAGE_SIZE;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <EEPROM_PageTransfer+0xc0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
 8001ae8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001aec:	817b      	strh	r3, [r7, #10]

	//copy each variable
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	81fb      	strh	r3, [r7, #14]
 8001af2:	e02a      	b.n	8001b4a <EEPROM_PageTransfer+0x7a>
		//check if is stored on the source page
		if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress) {
 8001af4:	89fb      	ldrh	r3, [r7, #14]
 8001af6:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <EEPROM_PageTransfer+0xc4>)
 8001af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001afc:	89ba      	ldrh	r2, [r7, #12]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d220      	bcs.n	8001b44 <EEPROM_PageTransfer+0x74>
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <EEPROM_PageTransfer+0xc4>)
 8001b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0a:	897a      	ldrh	r2, [r7, #10]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d919      	bls.n	8001b44 <EEPROM_PageTransfer+0x74>
			//read variable value (if possible)
			if (EEPROM_ReadVariable(i, &Value) == EEPROM_SUCCESS) {
 8001b10:	463a      	mov	r2, r7
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fe84 	bl	8001824 <EEPROM_ReadVariable>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d110      	bne.n	8001b44 <EEPROM_PageTransfer+0x74>
				//write variable to receiving page
				result = EEPROM_WriteVariable(i, Value, EEPROM_SizeTable[i]);
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <EEPROM_PageTransfer+0xc8>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	89f9      	ldrh	r1, [r7, #14]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b30:	4608      	mov	r0, r1
 8001b32:	f7ff fed1 	bl	80018d8 <EEPROM_WriteVariable>
 8001b36:	4603      	mov	r3, r0
 8001b38:	727b      	strb	r3, [r7, #9]
				if (result != EEPROM_SUCCESS)
 8001b3a:	7a7b      	ldrb	r3, [r7, #9]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <EEPROM_PageTransfer+0x74>
					return result;
 8001b40:	7a7b      	ldrb	r3, [r7, #9]
 8001b42:	e021      	b.n	8001b88 <EEPROM_PageTransfer+0xb8>
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	3301      	adds	r3, #1
 8001b48:	81fb      	strh	r3, [r7, #14]
 8001b4a:	89fb      	ldrh	r3, [r7, #14]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d9d1      	bls.n	8001af4 <EEPROM_PageTransfer+0x24>
			}
		}
	}

	//erase source page
	result = EEPROM_SetPageStatus(EEPROM_ValidPage, EEPROM_ERASED);
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <EEPROM_PageTransfer+0xc0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f821 	bl	8001ba0 <EEPROM_SetPageStatus>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b62:	7a7b      	ldrb	r3, [r7, #9]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <EEPROM_PageTransfer+0x9c>
		return result;
 8001b68:	7a7b      	ldrb	r3, [r7, #9]
 8001b6a:	e00d      	b.n	8001b88 <EEPROM_PageTransfer+0xb8>

	//mark receiving page as valid
	result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <EEPROM_PageTransfer+0xcc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f814 	bl	8001ba0 <EEPROM_SetPageStatus>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b7c:	7a7b      	ldrb	r3, [r7, #9]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <EEPROM_PageTransfer+0xb6>
		return result;
 8001b82:	7a7b      	ldrb	r3, [r7, #9]
 8001b84:	e000      	b.n	8001b88 <EEPROM_PageTransfer+0xb8>

	return EEPROM_SUCCESS;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000138 	.word	0x20000138
 8001b94:	20000134 	.word	0x20000134
 8001b98:	20000130 	.word	0x20000130
 8001b9c:	2000013c 	.word	0x2000013c

08001ba0 <EEPROM_SetPageStatus>:
//
// Page:		page to change the status (as EEPROM_Page)
// PageStatus:	page status to set for page (as EEPROM_PageStatus)
// return:		EEPROM_SUCCESS, EEPROM_ERROR, EEPROM_BUSY or EEPROM_TIMEOUT
static EEPROM_Result EEPROM_SetPageStatus(EEPROM_Page Page,
		EEPROM_PageStatus PageStatus) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
	EEPROM_Result result;

	//check if erase operation required
	if (PageStatus == EEPROM_ERASED) {
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d13f      	bne.n	8001c36 <EEPROM_SetPageStatus+0x96>
		//remove every variable from index, that is stored on erase page
		uint16_t StartAddress = Page - EEPROM_START_ADDRESS;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t EndAddress = Page - EEPROM_START_ADDRESS + FLASH_PAGE_SIZE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001bc8:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bce:	e015      	b.n	8001bfc <EEPROM_SetPageStatus+0x5c>
			if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress)
 8001bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd2:	4a3d      	ldr	r2, [pc, #244]	; (8001cc8 <EEPROM_SetPageStatus+0x128>)
 8001bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bd8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20b      	bcs.n	8001bf6 <EEPROM_SetPageStatus+0x56>
 8001bde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be0:	4a39      	ldr	r2, [pc, #228]	; (8001cc8 <EEPROM_SetPageStatus+0x128>)
 8001be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be6:	8c3a      	ldrh	r2, [r7, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d904      	bls.n	8001bf6 <EEPROM_SetPageStatus+0x56>
				EEPROM_Index[i] = 0;
 8001bec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bee:	4a36      	ldr	r2, [pc, #216]	; (8001cc8 <EEPROM_SetPageStatus+0x128>)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001bf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d9e6      	bls.n	8001bd0 <EEPROM_SetPageStatus+0x30>
		}

		//setup erase definitions
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
		EraseDefinitions.PageAddress = Page;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	61bb      	str	r3, [r7, #24]
		EraseDefinitions.NbPages = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
		uint32_t PageError;

		//erase page
		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 8001c12:	f107 020c 	add.w	r2, r7, #12
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fc4d 	bl	80044bc <HAL_FLASHEx_Erase>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (result != EEPROM_SUCCESS)
 8001c28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c34:	e043      	b.n	8001cbe <EEPROM_SetPageStatus+0x11e>
	}

	//else write status to flash
	else {
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page,
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f002 faf4 	bl	800422c <HAL_FLASH_Program>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				PageStatus);
		if (result != EEPROM_SUCCESS)
 8001c4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c56:	e032      	b.n	8001cbe <EEPROM_SetPageStatus+0x11e>
	}

	//update global page status variables (remove page from old status and attach to new status)
	if (EEPROM_ValidPage == Page)
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <EEPROM_SetPageStatus+0x12c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d103      	bne.n	8001c6a <EEPROM_SetPageStatus+0xca>
		EEPROM_ValidPage = EEPROM_PAGE_NONE;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <EEPROM_SetPageStatus+0x12c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e010      	b.n	8001c8c <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ReceivingPage == Page)
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <EEPROM_SetPageStatus+0x130>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d103      	bne.n	8001c7c <EEPROM_SetPageStatus+0xdc>
		EEPROM_ReceivingPage = EEPROM_PAGE_NONE;
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <EEPROM_SetPageStatus+0x130>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e007      	b.n	8001c8c <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ErasedPage == Page)
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <EEPROM_SetPageStatus+0x134>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d102      	bne.n	8001c8c <EEPROM_SetPageStatus+0xec>
		EEPROM_ErasedPage = EEPROM_PAGE_NONE;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <EEPROM_SetPageStatus+0x134>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

	if (PageStatus == EEPROM_VALID)
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <EEPROM_SetPageStatus+0xfa>
		EEPROM_ValidPage = Page;
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <EEPROM_SetPageStatus+0x12c>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	e010      	b.n	8001cbc <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_RECEIVING)
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d103      	bne.n	8001cac <EEPROM_SetPageStatus+0x10c>
		EEPROM_ReceivingPage = Page;
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <EEPROM_SetPageStatus+0x130>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e007      	b.n	8001cbc <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_ERASED)
 8001cac:	887b      	ldrh	r3, [r7, #2]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d102      	bne.n	8001cbc <EEPROM_SetPageStatus+0x11c>
		EEPROM_ErasedPage = Page;
 8001cb6:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <EEPROM_SetPageStatus+0x134>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6013      	str	r3, [r2, #0]

	return EEPROM_SUCCESS;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000134 	.word	0x20000134
 8001ccc:	20000138 	.word	0x20000138
 8001cd0:	2000013c 	.word	0x2000013c
 8001cd4:	20000140 	.word	0x20000140

08001cd8 <EEPROM_PageToIndex>:
// - set next free flash address
// - return on loop end
//
// Page:	page to search for variables
// return:	EEPROM_SUCCESS
static EEPROM_Result EEPROM_PageToIndex(EEPROM_Page Page) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	uint8_t SizeCode;					//size of current variable as Size code
	uint8_t Size;							//size of current variable in bytes
	uint16_t Name;									//name of current variable

	//ignore call when Page is PAGE_NONE
	if (Page == EEPROM_PAGE_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <EEPROM_PageToIndex+0x12>
		return EEPROM_SUCCESS;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e070      	b.n	8001dcc <EEPROM_PageToIndex+0xf4>

	//get page addresses
	uint32_t Address = Page + 2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3302      	adds	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
	uint32_t PageEndAddress = Page + FLASH_PAGE_SIZE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf6:	613b      	str	r3, [r7, #16]

	//loop through page starting after page header
	while (Address < PageEndAddress) {
 8001cf8:	e059      	b.n	8001dae <EEPROM_PageToIndex+0xd6>
		//read potential variable header
		VariableHeader = *((__IO uint16_t*) Address);
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	81fb      	strh	r3, [r7, #14]

		//if no header written (causes: end of data reached or reset while writing)
		if (VariableHeader == 0xFFFF) {
 8001d00:	89fb      	ldrh	r3, [r7, #14]
 8001d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d121      	bne.n	8001d4e <EEPROM_PageToIndex+0x76>
			//loop through next 4 halfword and check if there is anything written
			Size = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001d0e:	2302      	movs	r3, #2
 8001d10:	75fb      	strb	r3, [r7, #23]
 8001d12:	e013      	b.n	8001d3c <EEPROM_PageToIndex+0x64>
				if (Address + i >= PageEndAddress)
 8001d14:	7dfa      	ldrb	r2, [r7, #23]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d911      	bls.n	8001d44 <EEPROM_PageToIndex+0x6c>
					break;
				//while looping count the size of written data (resulting from reset while writing)
				if (*((__IO uint16_t*) (Address + i)) != 0xFFFF)
 8001d20:	7dfa      	ldrb	r2, [r7, #23]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4413      	add	r3, r2
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d001      	beq.n	8001d36 <EEPROM_PageToIndex+0x5e>
					Size = i;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	3302      	adds	r3, #2
 8001d3a:	75fb      	strb	r3, [r7, #23]
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d9e8      	bls.n	8001d14 <EEPROM_PageToIndex+0x3c>
 8001d42:	e000      	b.n	8001d46 <EEPROM_PageToIndex+0x6e>
					break;
 8001d44:	bf00      	nop
			}
			//if no data found, last variable of page was reached (end loop)
			if (Size == 0)
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d12b      	bne.n	8001da4 <EEPROM_PageToIndex+0xcc>
				break;
 8001d4c:	e033      	b.n	8001db6 <EEPROM_PageToIndex+0xde>
		}

		//else (if header written, proper variable value is following)
		else {
			//get size code
			SizeCode = VariableHeader >> 14;
 8001d4e:	89fb      	ldrh	r3, [r7, #14]
 8001d50:	0b9b      	lsrs	r3, r3, #14
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	737b      	strb	r3, [r7, #13]

			//check for valid name (VARIABLE_COUNT might have been reduced between builds, but old variables are still in flash)
			Name = VariableHeader & 0b0011111111111111;
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d5c:	817b      	strh	r3, [r7, #10]
			if (Name < EEPROM_VARIABLE_COUNT) {
 8001d5e:	897b      	ldrh	r3, [r7, #10]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d815      	bhi.n	8001d90 <EEPROM_PageToIndex+0xb8>
				//if everything valid, update the index and the size table
				EEPROM_Index[Name] = Address + 2 - EEPROM_START_ADDRESS;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	897a      	ldrh	r2, [r7, #10]
 8001d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d6e:	3302      	adds	r3, #2
 8001d70:	b299      	uxth	r1, r3
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <EEPROM_PageToIndex+0x100>)
 8001d74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				EEPROM_SizeTable[Name] = SizeCode;
 8001d78:	897b      	ldrh	r3, [r7, #10]
 8001d7a:	4918      	ldr	r1, [pc, #96]	; (8001ddc <EEPROM_PageToIndex+0x104>)
 8001d7c:	7b7a      	ldrb	r2, [r7, #13]
 8001d7e:	54ca      	strb	r2, [r1, r3]
				if (SizeCode == EEPROM_SIZE_DELETED)
 8001d80:	7b7b      	ldrb	r3, [r7, #13]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d104      	bne.n	8001d90 <EEPROM_PageToIndex+0xb8>
					EEPROM_Index[Name] = 0;
 8001d86:	897b      	ldrh	r3, [r7, #10]
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <EEPROM_PageToIndex+0x100>)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			//calculate size in bytes from size code
			Size = 1 << SizeCode;
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	2201      	movs	r2, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	77fb      	strb	r3, [r7, #31]
			if (SizeCode == EEPROM_SIZE_DELETED)
 8001d9a:	7b7b      	ldrb	r3, [r7, #13]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <EEPROM_PageToIndex+0xcc>
				Size = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	77fb      	strb	r3, [r7, #31]
		}

		//go to next address on page
		Address = Address + 2 + Size;
 8001da4:	7ffa      	ldrb	r2, [r7, #31]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4413      	add	r3, r2
 8001daa:	3302      	adds	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
	while (Address < PageEndAddress) {
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3a1      	bcc.n	8001cfa <EEPROM_PageToIndex+0x22>
	}

	//set next free flash address
	EEPROM_NextIndex = Address;
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <EEPROM_PageToIndex+0x108>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6013      	str	r3, [r2, #0]
	if (Address >= PageEndAddress)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d302      	bcc.n	8001dca <EEPROM_PageToIndex+0xf2>
		EEPROM_NextIndex = 0;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <EEPROM_PageToIndex+0x108>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]

	//return on loop end
	return EEPROM_SUCCESS;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3724      	adds	r7, #36	; 0x24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000134 	.word	0x20000134
 8001ddc:	20000130 	.word	0x20000130
 8001de0:	20000144 	.word	0x20000144

08001de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a19      	ldr	r2, [pc, #100]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001dfe:	f043 0320 	orr.w	r3, r3, #32
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <MX_GPIO_Init+0x80>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_GPIO_Init+0x84>)
 8001e56:	f002 fbd9 	bl	800460c <HAL_GPIO_Init>

}
 8001e5a:	bf00      	nop
 8001e5c:	3720      	adds	r7, #32
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010800 	.word	0x40010800

08001e6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <MX_I2C1_Init+0x54>)
 8001e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <MX_I2C1_Init+0x58>)
 8001e7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <MX_I2C1_Init+0x50>)
 8001eaa:	f002 fd4b 	bl	8004944 <HAL_I2C_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb4:	f000 fb38 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200001a8 	.word	0x200001a8
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	00061a80 	.word	0x00061a80

08001ec8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <HAL_I2C_MspInit+0x90>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d132      	bne.n	8001f4e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_I2C_MspInit+0x94>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a1b      	ldr	r2, [pc, #108]	; (8001f5c <HAL_I2C_MspInit+0x94>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_I2C_MspInit+0x94>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4812      	ldr	r0, [pc, #72]	; (8001f60 <HAL_I2C_MspInit+0x98>)
 8001f16:	f002 fb79 	bl	800460c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_I2C_MspInit+0x9c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_I2C_MspInit+0x9c>)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_I2C_MspInit+0x94>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_I2C_MspInit+0x94>)
 8001f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f40:	61d3      	str	r3, [r2, #28]
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_I2C_MspInit+0x94>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010c00 	.word	0x40010c00
 8001f64:	40010000 	.word	0x40010000

08001f68 <flashMemoryInit>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint16_t address);
void writeFlash(uint32_t address, double data);

void flashMemoryInit() {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af02      	add	r7, sp, #8
	//initialize EEPROM
	EEPROM_Init();
 8001f6e:	f7ff fb91 	bl	8001694 <EEPROM_Init>

	//set default value if variable not assigned
	EEPROM_Value value;
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	81fb      	strh	r3, [r7, #14]
 8001f76:	e02b      	b.n	8001fd0 <flashMemoryInit+0x68>
		if (EEPROM_ReadVariable(i, &value) == EEPROM_NOT_ASSIGNED) {
 8001f78:	463a      	mov	r2, r7
 8001f7a:	89fb      	ldrh	r3, [r7, #14]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fc50 	bl	8001824 <EEPROM_ReadVariable>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d11c      	bne.n	8001fc4 <flashMemoryInit+0x5c>
			isCorrectionAssign = false;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <flashMemoryInit+0x80>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]

			switch (i) {
 8001f90:	89fb      	ldrh	r3, [r7, #14]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <flashMemoryInit+0x34>
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d00a      	beq.n	8001fb0 <flashMemoryInit+0x48>
 8001f9a:	e016      	b.n	8001fca <flashMemoryInit+0x62>
			case 0:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001f9c:	a310      	add	r3, pc, #64	; (adr r3, 8001fe0 <flashMemoryInit+0x78>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	89f9      	ldrh	r1, [r7, #14]
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	9000      	str	r0, [sp, #0]
 8001fa8:	4608      	mov	r0, r1
 8001faa:	f7ff fc95 	bl	80018d8 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fae:	e00c      	b.n	8001fca <flashMemoryInit+0x62>
			case 1:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001fb0:	a30b      	add	r3, pc, #44	; (adr r3, 8001fe0 <flashMemoryInit+0x78>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	89f9      	ldrh	r1, [r7, #14]
 8001fb8:	2003      	movs	r0, #3
 8001fba:	9000      	str	r0, [sp, #0]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	f7ff fc8b 	bl	80018d8 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fc2:	e002      	b.n	8001fca <flashMemoryInit+0x62>
			}
		} else {
			isCorrectionAssign = true;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <flashMemoryInit+0x80>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001fca:	89fb      	ldrh	r3, [r7, #14]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	81fb      	strh	r3, [r7, #14]
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d9d0      	bls.n	8001f78 <flashMemoryInit+0x10>
		}
	}
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	88e368f1 	.word	0x88e368f1
 8001fe4:	3ee4f8b5 	.word	0x3ee4f8b5
 8001fe8:	20000148 	.word	0x20000148

08001fec <saveGyroData>:

void saveGyroData(double x, double y) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ff6:	e9c7 2300 	strd	r2, r3, [r7]
	isCorrectionAssign = true;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <saveGyroData+0x3c>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
	writeFlash(xAddress, x);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <saveGyroData+0x40>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	4608      	mov	r0, r1
 800200c:	f000 f82e 	bl	800206c <writeFlash>
	writeFlash(yAddress, y);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <saveGyroData+0x44>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800201a:	4608      	mov	r0, r1
 800201c:	f000 f826 	bl	800206c <writeFlash>
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000148 	.word	0x20000148
 800202c:	2000014a 	.word	0x2000014a
 8002030:	20000000 	.word	0x20000000

08002034 <readXFromFlash>:

double readXFromFlash() {
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	return readFlash(xAddress);
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <readXFromFlash+0x18>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f82c 	bl	800209a <readFlash>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
}
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000014a 	.word	0x2000014a

08002050 <readYFromFlash>:

double readYFromFlash() {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	return readFlash(yAddress);
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <readYFromFlash+0x18>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f81e 	bl	800209a <readFlash>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
}
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000000 	.word	0x20000000

0800206c <writeFlash>:

void writeFlash(uint32_t address, double data) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	e9c7 2300 	strd	r2, r3, [r7]
	EEPROM_Value value;
	value.Double = data;
 8002078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800207c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	EEPROM_WriteVariable(address, value, EEPROM_SIZE64);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	b299      	uxth	r1, r3
 8002084:	2303      	movs	r3, #3
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800208c:	4608      	mov	r0, r1
 800208e:	f7ff fc23 	bl	80018d8 <EEPROM_WriteVariable>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <readFlash>:

double readFlash(uint16_t address) {
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	80fb      	strh	r3, [r7, #6]
	EEPROM_Value value;
	EEPROM_ReadVariable(address, &value);
 80020a4:	f107 0208 	add.w	r2, r7, #8
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fbb9 	bl	8001824 <EEPROM_ReadVariable>
	return value.Double;
 80020b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <main>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int main(void) {
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b08d      	sub	sp, #52	; 0x34
 80020c4:	af00      	add	r7, sp, #0

	HAL_Init();
 80020c6:	f000 ff43 	bl	8002f50 <HAL_Init>

	SystemClock_Config();
 80020ca:	f000 f8ef 	bl	80022ac <SystemClock_Config>

	MX_GPIO_Init();
 80020ce:	f7ff fe89 	bl	8001de4 <MX_GPIO_Init>
	MX_CAN1_Init();
 80020d2:	f7ff f939 	bl	8001348 <MX_CAN1_Init>
	MX_CAN2_Init();
 80020d6:	f7ff f98f 	bl	80013f8 <MX_CAN2_Init>
	MX_I2C1_Init();
 80020da:	f7ff fec7 	bl	8001e6c <MX_I2C1_Init>
	flashMemoryInit();
 80020de:	f7ff ff43 	bl	8001f68 <flashMemoryInit>

	//MPU initialize
	while (MPU6050_Init(&hi2c1) == 1) {
 80020e2:	bf00      	nop
 80020e4:	4867      	ldr	r0, [pc, #412]	; (8002284 <main+0x1c4>)
 80020e6:	f000 fa24 	bl	8002532 <MPU6050_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d0f9      	beq.n	80020e4 <main+0x24>

	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80020f0:	4865      	ldr	r0, [pc, #404]	; (8002288 <main+0x1c8>)
 80020f2:	f001 f98f 	bl	8003414 <HAL_CAN_Start>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <main+0x40>
		Error_Handler();
 80020fc:	f000 fa14 	bl	8002528 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 8002100:	f648 4102 	movw	r1, #35842	; 0x8c02
 8002104:	4860      	ldr	r0, [pc, #384]	; (8002288 <main+0x1c8>)
 8002106:	f001 fc0b 	bl	8003920 <HAL_CAN_ActivateNotification>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <main+0x54>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 8002110:	f000 fa0a 	bl	8002528 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8002114:	485d      	ldr	r0, [pc, #372]	; (800228c <main+0x1cc>)
 8002116:	f001 f97d 	bl	8003414 <HAL_CAN_Start>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <main+0x64>
		Error_Handler();
 8002120:	f000 fa02 	bl	8002528 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 8002124:	f648 4110 	movw	r1, #35856	; 0x8c10
 8002128:	4858      	ldr	r0, [pc, #352]	; (800228c <main+0x1cc>)
 800212a:	f001 fbf9 	bl	8003920 <HAL_CAN_ActivateNotification>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <main+0x78>
			CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 8002134:	f000 f9f8 	bl	8002528 <Error_Handler>
	}

	//loop
	while (1) {
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8002138:	4955      	ldr	r1, [pc, #340]	; (8002290 <main+0x1d0>)
 800213a:	4852      	ldr	r0, [pc, #328]	; (8002284 <main+0x1c4>)
 800213c:	f000 fa50 	bl	80025e0 <MPU6050_Read_All>

		double realX = MPU6050.KalmanAngleX;
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <main+0x1d0>)
 8002142:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002146:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double realY = MPU6050.KalmanAngleY;
 800214a:	4b51      	ldr	r3, [pc, #324]	; (8002290 <main+0x1d0>)
 800214c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002150:	e9c7 2304 	strd	r2, r3, [r7, #16]

		double storedX = readXFromFlash();
 8002154:	f7ff ff6e 	bl	8002034 <readXFromFlash>
 8002158:	e9c7 0102 	strd	r0, r1, [r7, #8]
		double storedY = readYFromFlash();
 800215c:	f7ff ff78 	bl	8002050 <readYFromFlash>
 8002160:	e9c7 0100 	strd	r0, r1, [r7]

		double pitch = storedX - realX;
 8002164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002168:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800216c:	f7fe f860 	bl	8000230 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double roll = storedY - realY;
 8002178:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800217c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002180:	f7fe f856 	bl	8000230 <__aeabi_dsub>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (pitch > 40) {
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	4b40      	ldr	r3, [pc, #256]	; (8002294 <main+0x1d4>)
 8002192:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002196:	f7fe fc93 	bl	8000ac0 <__aeabi_dcmpgt>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <main+0xea>
			pitch = 40;
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <main+0x1d4>)
 80021a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (pitch < -40) {
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <main+0x1d8>)
 80021b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021b4:	f7fe fc66 	bl	8000a84 <__aeabi_dcmplt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <main+0x108>
			pitch = -40;
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b35      	ldr	r3, [pc, #212]	; (8002298 <main+0x1d8>)
 80021c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (roll > 60) {
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <main+0x1dc>)
 80021ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021d2:	f7fe fc75 	bl	8000ac0 <__aeabi_dcmpgt>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <main+0x126>
			roll = 60;
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <main+0x1dc>)
 80021e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}
		if (roll < -60) {
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <main+0x1e0>)
 80021ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021f0:	f7fe fc48 	bl	8000a84 <__aeabi_dcmplt>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <main+0x144>
			roll = -60;
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <main+0x1e0>)
 8002200:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

		//20 & -20 degree max
		pitch += 0x78;
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <main+0x1e4>)
 800220a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800220e:	f7fe f811 	bl	8000234 <__adddf3>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		//29 & -29 degree max
		roll += 0x78;
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <main+0x1e4>)
 8002220:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002224:	f7fe f806 	bl	8000234 <__adddf3>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (isCorrectionAssign) {
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <main+0x1e8>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00d      	beq.n	8002254 <main+0x194>
			sendGyroData(pitch, roll);
 8002238:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800223c:	f7fe fc60 	bl	8000b00 <__aeabi_d2iz>
 8002240:	4604      	mov	r4, r0
 8002242:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002246:	f7fe fc5b 	bl	8000b00 <__aeabi_d2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	4619      	mov	r1, r3
 800224e:	4620      	mov	r0, r4
 8002250:	f000 f928 	bl	80024a4 <sendGyroData>
		}

		if (BUTTON_STATE(CALIBRATE_MPU_BUTTON) == 1 || !isCorrectionAssign) {
 8002254:	2000      	movs	r0, #0
 8002256:	f7ff f855 	bl	8001304 <BUTTON_STATE>
 800225a:	4603      	mov	r3, r0
 800225c:	2b01      	cmp	r3, #1
 800225e:	d006      	beq.n	800226e <main+0x1ae>
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <main+0x1e8>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <main+0x1ba>
			saveGyroData(realX, realY);
 800226e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002272:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002276:	f7ff feb9 	bl	8001fec <saveGyroData>
		}

		HAL_Delay(200);
 800227a:	20c8      	movs	r0, #200	; 0xc8
 800227c:	f000 feca 	bl	8003014 <HAL_Delay>
	while (1) {
 8002280:	e75a      	b.n	8002138 <main+0x78>
 8002282:	bf00      	nop
 8002284:	200001a8 	.word	0x200001a8
 8002288:	20000180 	.word	0x20000180
 800228c:	20000158 	.word	0x20000158
 8002290:	20000200 	.word	0x20000200
 8002294:	40440000 	.word	0x40440000
 8002298:	c0440000 	.word	0xc0440000
 800229c:	404e0000 	.word	0x404e0000
 80022a0:	c04e0000 	.word	0xc04e0000
 80022a4:	405e0000 	.word	0x405e0000
 80022a8:	20000148 	.word	0x20000148

080022ac <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b094      	sub	sp, #80	; 0x50
 80022b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	2238      	movs	r2, #56	; 0x38
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f005 fd38 	bl	8007d30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80022d8:	2304      	movs	r3, #4
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022dc:	2301      	movs	r3, #1
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80022e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e4:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e6:	2302      	movs	r3, #2
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80022f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80022f6:	2302      	movs	r3, #2
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80022fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002300:	2340      	movs	r3, #64	; 0x40
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4618      	mov	r0, r3
 800230a:	f004 ffef 	bl	80072ec <HAL_RCC_OscConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0x6c>
		Error_Handler();
 8002314:	f000 f908 	bl	8002528 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002318:	230f      	movs	r3, #15
 800231a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231c:	2302      	movs	r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f005 faf1 	bl	8007918 <HAL_RCC_ClockConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0x94>
		Error_Handler();
 800233c:	f000 f8f4 	bl	8002528 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <SystemClock_Config+0xa4>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3750      	adds	r7, #80	; 0x50
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	42420070 	.word	0x42420070

08002354 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo0 can1 callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan1, RxDataCan1)
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002360:	2100      	movs	r1, #0
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f001 f9cb 	bl	80036fe <HAL_CAN_GetRxMessage>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			== HAL_OK) {
		if (RxHeaderCan1.StdId == 0x350 && RxDataCan1[0] == 0xc7) {
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002376:	d106      	bne.n	8002386 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2bc7      	cmp	r3, #199	; 0xc7
 800237e:	d102      	bne.n	8002386 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			RxDataCan1[0] = 0xc6;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002382:	22c6      	movs	r2, #198	; 0xc6
 8002384:	701a      	strb	r2, [r3, #0]
		}

		if (RxHeaderCan1.StdId == 0x685){
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f240 6285 	movw	r2, #1669	; 0x685
 800238e:	4293      	cmp	r3, r2
 8002390:	d102      	bne.n	8002398 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			printf("wawdaw");
 8002392:	4805      	ldr	r0, [pc, #20]	; (80023a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002394:	f005 fcd4 	bl	8007d40 <iprintf>
		}

//		CAN2_Transmit_manual(RxHeaderCan1.StdId, RxHeaderCan1.DLC, RxDataCan1);
	}
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200002e0 	.word	0x200002e0
 80023a4:	2000025c 	.word	0x2000025c
 80023a8:	08009290 	.word	0x08009290

080023ac <HAL_CAN_RxFifo1MsgPendingCallback>:

// can fifo1 for can2 callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan2, RxDataCan2)
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80023b8:	2100      	movs	r1, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f001 f99f 	bl	80036fe <HAL_CAN_GetRxMessage>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
			== HAL_OK) {
		CAN1_Transmit_manual(RxHeaderCan2.StdId, RxHeaderCan2.DLC, RxDataCan2);
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80023ce:	6912      	ldr	r2, [r2, #16]
 80023d0:	b2d1      	uxtb	r1, r2
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f809 	bl	80023ec <CAN1_Transmit_manual>
	}
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200002d0 	.word	0x200002d0
 80023e8:	2000029c 	.word	0x2000029c

080023ec <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	603a      	str	r2, [r7, #0]
 80023f6:	80fb      	strh	r3, [r7, #6]
 80023f8:	460b      	mov	r3, r1
 80023fa:	717b      	strb	r3, [r7, #5]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 80023fc:	bf00      	nop
 80023fe:	4824      	ldr	r0, [pc, #144]	; (8002490 <CAN1_Transmit_manual+0xa4>)
 8002400:	f001 f926 	bl	8003650 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f9      	beq.n	80023fe <CAN1_Transmit_manual+0x12>

	}

	TxHeaderCan1.StdId = ID_CAN;
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <CAN1_Transmit_manual+0xa8>)
 800240e:	6013      	str	r3, [r2, #0]
	TxHeaderCan1.DLC = DLC_CAN;
 8002410:	797b      	ldrb	r3, [r7, #5]
 8002412:	4a20      	ldr	r2, [pc, #128]	; (8002494 <CAN1_Transmit_manual+0xa8>)
 8002414:	6113      	str	r3, [r2, #16]
	TxDataCan1[0] = DATA_CAN[0];
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <CAN1_Transmit_manual+0xac>)
 800241c:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = DATA_CAN[1];
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	785a      	ldrb	r2, [r3, #1]
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <CAN1_Transmit_manual+0xac>)
 8002424:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = DATA_CAN[2];
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	789a      	ldrb	r2, [r3, #2]
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <CAN1_Transmit_manual+0xac>)
 800242c:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = DATA_CAN[3];
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	78da      	ldrb	r2, [r3, #3]
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <CAN1_Transmit_manual+0xac>)
 8002434:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = DATA_CAN[4];
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	791a      	ldrb	r2, [r3, #4]
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <CAN1_Transmit_manual+0xac>)
 800243c:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = DATA_CAN[5];
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	795a      	ldrb	r2, [r3, #5]
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <CAN1_Transmit_manual+0xac>)
 8002444:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = DATA_CAN[6];
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	799a      	ldrb	r2, [r3, #6]
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <CAN1_Transmit_manual+0xac>)
 800244c:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = DATA_CAN[7];
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	79da      	ldrb	r2, [r3, #7]
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <CAN1_Transmit_manual+0xac>)
 8002454:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeaderCan1, TxDataCan1, &TxMailboxCan1)
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <CAN1_Transmit_manual+0xb0>)
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <CAN1_Transmit_manual+0xac>)
 800245a:	490e      	ldr	r1, [pc, #56]	; (8002494 <CAN1_Transmit_manual+0xa8>)
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <CAN1_Transmit_manual+0xa4>)
 800245e:	f001 f81d 	bl	800349c <HAL_CAN_AddTxMessage>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <CAN1_Transmit_manual+0x88>
			!= HAL_OK) {
		Error_Handler();
 8002468:	f000 f85e 	bl	8002528 <Error_Handler>
	}

	//wait while message will sent
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailboxCan1)) {
 800246c:	e002      	b.n	8002474 <CAN1_Transmit_manual+0x88>
		printf("pending can1");
 800246e:	480c      	ldr	r0, [pc, #48]	; (80024a0 <CAN1_Transmit_manual+0xb4>)
 8002470:	f005 fc66 	bl	8007d40 <iprintf>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailboxCan1)) {
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <CAN1_Transmit_manual+0xb0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4619      	mov	r1, r3
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <CAN1_Transmit_manual+0xa4>)
 800247c:	f001 f91c 	bl	80036b8 <HAL_CAN_IsTxMessagePending>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f3      	bne.n	800246e <CAN1_Transmit_manual+0x82>
	}
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000180 	.word	0x20000180
 8002494:	2000027c 	.word	0x2000027c
 8002498:	200002d8 	.word	0x200002d8
 800249c:	20000258 	.word	0x20000258
 80024a0:	08009298 	.word	0x08009298

080024a4 <sendGyroData>:

	//wait while message will sent
	while (HAL_CAN_IsTxMessagePending(&hcan2, TxMailboxCan2)) {
	}
}
void sendGyroData(int x, int y) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	TxDataCan1[0] = y;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <sendGyroData+0x54>)
 80024b4:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = x;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <sendGyroData+0x54>)
 80024bc:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = 0x00;
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <sendGyroData+0x54>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = 0x00;
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <sendGyroData+0x54>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = 0x00;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <sendGyroData+0x54>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = 0x00;
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <sendGyroData+0x54>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = 0x00;
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <sendGyroData+0x54>)
 80024d8:	2200      	movs	r2, #0
 80024da:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = 0x00;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <sendGyroData+0x54>)
 80024de:	2200      	movs	r2, #0
 80024e0:	71da      	strb	r2, [r3, #7]

	CAN1_Transmit_manual(0x685, 8, TxDataCan1);
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <sendGyroData+0x54>)
 80024e4:	2108      	movs	r1, #8
 80024e6:	f240 6085 	movw	r0, #1669	; 0x685
 80024ea:	f7ff ff7f 	bl	80023ec <CAN1_Transmit_manual>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200002d8 	.word	0x200002d8

080024fc <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_CAN_GetError(hcan);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fc40 	bl	8003d8c <HAL_CAN_GetError>
 800250c:	60f8      	str	r0, [r7, #12]
	printf("error");
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <HAL_CAN_ErrorCallback+0x28>)
 8002510:	f005 fc16 	bl	8007d40 <iprintf>

	HAL_CAN_ResetError(&hcan);
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f001 fc43 	bl	8003da2 <HAL_CAN_ResetError>
}
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	080092a8 	.word	0x080092a8

08002528 <Error_Handler>:

void Error_Handler(void) {
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
}
 800252e:	bf00      	nop
	__disable_irq();

	while (1) {
 8002530:	e7fe      	b.n	8002530 <Error_Handler+0x8>

08002532 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002532:	b580      	push	{r7, lr}
 8002534:	b088      	sub	sp, #32
 8002536:	af04      	add	r7, sp, #16
 8002538:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 800253a:	2364      	movs	r3, #100	; 0x64
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	2301      	movs	r3, #1
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	f107 030f 	add.w	r3, r7, #15
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2301      	movs	r3, #1
 800254a:	2275      	movs	r2, #117	; 0x75
 800254c:	21d0      	movs	r1, #208	; 0xd0
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f002 fc36 	bl	8004dc0 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b68      	cmp	r3, #104	; 0x68
 8002558:	d13d      	bne.n	80025d6 <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 800255e:	2364      	movs	r3, #100	; 0x64
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	2301      	movs	r3, #1
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	f107 030e 	add.w	r3, r7, #14
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	226b      	movs	r2, #107	; 0x6b
 8002570:	21d0      	movs	r1, #208	; 0xd0
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f002 fb2a 	bl	8004bcc <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002578:	2307      	movs	r3, #7
 800257a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 800257c:	2364      	movs	r3, #100	; 0x64
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	2301      	movs	r3, #1
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	f107 030e 	add.w	r3, r7, #14
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	2219      	movs	r2, #25
 800258e:	21d0      	movs	r1, #208	; 0xd0
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f002 fb1b 	bl	8004bcc <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8002596:	2300      	movs	r3, #0
 8002598:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 800259a:	2364      	movs	r3, #100	; 0x64
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	2301      	movs	r3, #1
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	f107 030e 	add.w	r3, r7, #14
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2301      	movs	r3, #1
 80025aa:	221c      	movs	r2, #28
 80025ac:	21d0      	movs	r1, #208	; 0xd0
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f002 fb0c 	bl	8004bcc <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 80025b8:	2364      	movs	r3, #100	; 0x64
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	2301      	movs	r3, #1
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	f107 030e 	add.w	r3, r7, #14
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	221b      	movs	r2, #27
 80025ca:	21d0      	movs	r1, #208	; 0xd0
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f002 fafd 	bl	8004bcc <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <MPU6050_Init+0xa6>
	}
	return 1;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <MPU6050_Read_All>:
	temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
			+ (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80025e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e4:	b094      	sub	sp, #80	; 0x50
 80025e6:	af04      	add	r7, sp, #16
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14,
 80025ec:	2364      	movs	r3, #100	; 0x64
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	230e      	movs	r3, #14
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	223b      	movs	r2, #59	; 0x3b
 80025fe:	21d0      	movs	r1, #208	; 0xd0
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f002 fbdd 	bl	8004dc0 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002606:	7a3b      	ldrb	r3, [r7, #8]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	b21a      	sxth	r2, r3
 800260c:	7a7b      	ldrb	r3, [r7, #9]
 800260e:	b21b      	sxth	r3, r3
 8002610:	4313      	orrs	r3, r2
 8002612:	b21a      	sxth	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002618:	7abb      	ldrb	r3, [r7, #10]
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	b21a      	sxth	r2, r3
 800261e:	7afb      	ldrb	r3, [r7, #11]
 8002620:	b21b      	sxth	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b21a      	sxth	r2, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800262a:	7b3b      	ldrb	r3, [r7, #12]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	b21a      	sxth	r2, r3
 8002630:	7b7b      	ldrb	r3, [r7, #13]
 8002632:	b21b      	sxth	r3, r3
 8002634:	4313      	orrs	r3, r2
 8002636:	b21a      	sxth	r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	809a      	strh	r2, [r3, #4]
	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	021b      	lsls	r3, r3, #8
 8002640:	b21a      	sxth	r2, r3
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	86fb      	strh	r3, [r7, #54]	; 0x36
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800264a:	7c3b      	ldrb	r3, [r7, #16]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	b21a      	sxth	r2, r3
 8002650:	7c7b      	ldrb	r3, [r7, #17]
 8002652:	b21b      	sxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	b21a      	sxth	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800265c:	7cbb      	ldrb	r3, [r7, #18]
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	b21a      	sxth	r2, r3
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	b21b      	sxth	r3, r3
 8002666:	4313      	orrs	r3, r2
 8002668:	b21a      	sxth	r2, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800266e:	7d3b      	ldrb	r3, [r7, #20]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b21a      	sxth	r2, r3
 8002674:	7d7b      	ldrb	r3, [r7, #21]
 8002676:	b21b      	sxth	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	b21a      	sxth	r2, r3
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ff20 	bl	80004cc <__aeabi_i2d>
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	4bb7      	ldr	r3, [pc, #732]	; (8002970 <MPU6050_Read_All+0x390>)
 8002692:	f7fe f8af 	bl	80007f4 <__aeabi_ddiv>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	6839      	ldr	r1, [r7, #0]
 800269c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fd ff10 	bl	80004cc <__aeabi_i2d>
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	4baf      	ldr	r3, [pc, #700]	; (8002970 <MPU6050_Read_All+0x390>)
 80026b2:	f7fe f89f 	bl	80007f4 <__aeabi_ddiv>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd ff00 	bl	80004cc <__aeabi_i2d>
 80026cc:	a3a2      	add	r3, pc, #648	; (adr r3, 8002958 <MPU6050_Read_All+0x378>)
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	f7fe f88f 	bl	80007f4 <__aeabi_ddiv>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
 80026e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe faed 	bl	8000cc4 <__aeabi_i2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	49a1      	ldr	r1, [pc, #644]	; (8002974 <MPU6050_Read_All+0x394>)
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fbf0 	bl	8000ed4 <__aeabi_fdiv>
 80026f4:	4603      	mov	r3, r0
 80026f6:	49a0      	ldr	r1, [pc, #640]	; (8002978 <MPU6050_Read_All+0x398>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fa2f 	bl	8000b5c <__addsf3>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
			+ (float) 36.53);
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fedd 	bl	80004cc <__aeabi_i2d>
 8002712:	a393      	add	r3, pc, #588	; (adr r3, 8002960 <MPU6050_Read_All+0x380>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fe f86c 	bl	80007f4 <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fecd 	bl	80004cc <__aeabi_i2d>
 8002732:	a38b      	add	r3, pc, #556	; (adr r3, 8002960 <MPU6050_Read_All+0x380>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	f7fe f85c 	bl	80007f4 <__aeabi_ddiv>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	6839      	ldr	r1, [r7, #0]
 8002742:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd febd 	bl	80004cc <__aeabi_i2d>
 8002752:	a383      	add	r3, pc, #524	; (adr r3, 8002960 <MPU6050_Read_All+0x380>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fe f84c 	bl	80007f4 <__aeabi_ddiv>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002766:	f000 fc4b 	bl	8003000 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	4b83      	ldr	r3, [pc, #524]	; (800297c <MPU6050_Read_All+0x39c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fe9a 	bl	80004ac <__aeabi_ui2d>
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	4b80      	ldr	r3, [pc, #512]	; (8002980 <MPU6050_Read_All+0x3a0>)
 800277e:	f7fe f839 	bl	80007f4 <__aeabi_ddiv>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 800278a:	f000 fc39 	bl	8003000 <HAL_GetTick>
 800278e:	4603      	mov	r3, r0
 8002790:	4a7a      	ldr	r2, [pc, #488]	; (800297c <MPU6050_Read_All+0x39c>)
 8002792:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279a:	461a      	mov	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a2:	fb03 f202 	mul.w	r2, r3, r2
					+ DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027ac:	4619      	mov	r1, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027b4:	fb03 f301 	mul.w	r3, r3, r1
 80027b8:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fe86 	bl	80004cc <__aeabi_i2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f006 fbaa 	bl	8008f20 <sqrt>
 80027cc:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if (roll_sqrt != 0.0) {
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027dc:	f7fe f948 	bl	8000a70 <__aeabi_dcmpeq>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d119      	bne.n	800281a <MPU6050_Read_All+0x23a>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fe6d 	bl	80004cc <__aeabi_i2d>
 80027f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027f6:	f7fd fffd 	bl	80007f4 <__aeabi_ddiv>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	f006 f9fd 	bl	8008c00 <atan>
 8002806:	a358      	add	r3, pc, #352	; (adr r3, 8002968 <MPU6050_Read_All+0x388>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fd fec8 	bl	80005a0 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002818:	e005      	b.n	8002826 <MPU6050_Read_All+0x246>
	} else {
		roll = 0.0;
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800282c:	425b      	negs	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe4c 	bl	80004cc <__aeabi_i2d>
 8002834:	4682      	mov	sl, r0
 8002836:	468b      	mov	fp, r1
			DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe44 	bl	80004cc <__aeabi_i2d>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4650      	mov	r0, sl
 800284a:	4659      	mov	r1, fp
 800284c:	f006 fb65 	bl	8008f1a <atan2>
 8002850:	a345      	add	r3, pc, #276	; (adr r3, 8002968 <MPU6050_Read_All+0x388>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fea3 	bl	80005a0 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90)
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <MPU6050_Read_All+0x3a4>)
 8002868:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800286c:	f7fe f90a 	bl	8000a84 <__aeabi_dcmplt>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <MPU6050_Read_All+0x2ac>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <MPU6050_Read_All+0x3a8>)
 8002882:	f7fe f91d 	bl	8000ac0 <__aeabi_dcmpgt>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d114      	bne.n	80028b6 <MPU6050_Read_All+0x2d6>
			|| (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <MPU6050_Read_All+0x3a8>)
 8002892:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002896:	f7fe f913 	bl	8000ac0 <__aeabi_dcmpgt>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <MPU6050_Read_All+0x2ec>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b36      	ldr	r3, [pc, #216]	; (8002984 <MPU6050_Read_All+0x3a4>)
 80028ac:	f7fe f8ea 	bl	8000a84 <__aeabi_dcmplt>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <MPU6050_Read_All+0x2ec>
		KalmanY.angle = pitch;
 80028b6:	4935      	ldr	r1, [pc, #212]	; (800298c <MPU6050_Read_All+0x3ac>)
 80028b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80028ca:	e012      	b.n	80028f2 <MPU6050_Read_All+0x312>
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80028d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028da:	e9cd 2300 	strd	r2, r3, [sp]
 80028de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e2:	482a      	ldr	r0, [pc, #168]	; (800298c <MPU6050_Read_All+0x3ac>)
 80028e4:	f000 f856 	bl	8002994 <Kalman_getAngle>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	6839      	ldr	r1, [r7, #0]
 80028ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				DataStruct->Gy, dt);
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80028f8:	4690      	mov	r8, r2
 80028fa:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <MPU6050_Read_All+0x3a8>)
 8002904:	4640      	mov	r0, r8
 8002906:	4649      	mov	r1, r9
 8002908:	f7fe f8da 	bl	8000ac0 <__aeabi_dcmpgt>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <MPU6050_Read_All+0x344>
		DataStruct->Gx = -DataStruct->Gx;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002918:	4614      	mov	r4, r2
 800291a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800292a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800292e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002932:	e9cd 2300 	strd	r2, r3, [sp]
 8002936:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <MPU6050_Read_All+0x3b0>)
 800293c:	f000 f82a 	bl	8002994 <Kalman_getAngle>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			dt);
}
 800294a:	bf00      	nop
 800294c:	3740      	adds	r7, #64	; 0x40
 800294e:	46bd      	mov	sp, r7
 8002950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002954:	f3af 8000 	nop.w
 8002958:	00000000 	.word	0x00000000
 800295c:	40cc2900 	.word	0x40cc2900
 8002960:	00000000 	.word	0x00000000
 8002964:	40606000 	.word	0x40606000
 8002968:	1a63c1f8 	.word	0x1a63c1f8
 800296c:	404ca5dc 	.word	0x404ca5dc
 8002970:	40d00000 	.word	0x40d00000
 8002974:	43aa0000 	.word	0x43aa0000
 8002978:	42121eb8 	.word	0x42121eb8
 800297c:	200002e8 	.word	0x200002e8
 8002980:	408f4000 	.word	0x408f4000
 8002984:	c0568000 	.word	0xc0568000
 8002988:	40568000 	.word	0x40568000
 800298c:	20000050 	.word	0x20000050
 8002990:	20000008 	.word	0x20000008

08002994 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b092      	sub	sp, #72	; 0x48
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80029a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80029aa:	f7fd fc41 	bl	8000230 <__aeabi_dsub>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80029bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80029c4:	f7fd fdec 	bl	80005a0 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fc30 	bl	8000234 <__adddf3>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80029ea:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80029ee:	f7fd fdd7 	bl	80005a0 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a00:	f7fd fc16 	bl	8000230 <__aeabi_dsub>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a12:	f7fd fc0d 	bl	8000230 <__aeabi_dsub>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd fc06 	bl	8000234 <__adddf3>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002a30:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a34:	f7fd fdb4 	bl	80005a0 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fbf8 	bl	8000234 <__adddf3>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	68f9      	ldr	r1, [r7, #12]
 8002a4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a5a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a5e:	f7fd fd9f 	bl	80005a0 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4620      	mov	r0, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f7fd fbe1 	bl	8000230 <__aeabi_dsub>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a84:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a88:	f7fd fd8a 	bl	80005a0 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4620      	mov	r0, r4
 8002a92:	4629      	mov	r1, r5
 8002a94:	f7fd fbcc 	bl	8000230 <__aeabi_dsub>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	68f9      	ldr	r1, [r7, #12]
 8002a9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002aae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ab2:	f7fd fd75 	bl	80005a0 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4620      	mov	r0, r4
 8002abc:	4629      	mov	r1, r5
 8002abe:	f7fd fbb9 	bl	8000234 <__adddf3>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	68f9      	ldr	r1, [r7, #12]
 8002ac8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ad8:	f7fd fbac 	bl	8000234 <__adddf3>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002aea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002aee:	f7fd fe81 	bl	80007f4 <__aeabi_ddiv>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b04:	f7fd fe76 	bl	80007f4 <__aeabi_ddiv>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b1a:	f7fd fb89 	bl	8000230 <__aeabi_dsub>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b34:	f7fd fd34 	bl	80005a0 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	4629      	mov	r1, r5
 8002b40:	f7fd fb78 	bl	8000234 <__adddf3>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	68f9      	ldr	r1, [r7, #12]
 8002b4a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002b54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b5c:	f7fd fd20 	bl	80005a0 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4620      	mov	r0, r4
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7fd fb64 	bl	8000234 <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b7c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002b86:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002b90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b98:	f7fd fd02 	bl	80005a0 <__aeabi_dmul>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	f7fd fb44 	bl	8000230 <__aeabi_dsub>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002bb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bbc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bc0:	f7fd fcee 	bl	80005a0 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fd fb30 	bl	8000230 <__aeabi_dsub>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	68f9      	ldr	r1, [r7, #12]
 8002bd6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002be0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be8:	f7fd fcda 	bl	80005a0 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd fb1c 	bl	8000230 <__aeabi_dsub>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	68f9      	ldr	r1, [r7, #12]
 8002bfe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002c08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c10:	f7fd fcc6 	bl	80005a0 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4620      	mov	r0, r4
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f7fd fb08 	bl	8000230 <__aeabi_dsub>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	3748      	adds	r7, #72	; 0x48
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_MspInit+0x5c>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_MspInit+0x5c>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6193      	str	r3, [r2, #24]
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_MspInit+0x5c>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_MspInit+0x5c>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_MspInit+0x5c>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	61d3      	str	r3, [r2, #28]
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_MspInit+0x5c>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_MspInit+0x60>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_MspInit+0x60>)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010000 	.word	0x40010000

08002ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <NMI_Handler+0x4>

08002ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002caa:	e7fe      	b.n	8002caa <HardFault_Handler+0x4>

08002cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <MemManage_Handler+0x4>

08002cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <BusFault_Handler+0x4>

08002cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <UsageFault_Handler+0x4>

08002cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce6:	f000 f979 	bl	8002fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <CAN1_TX_IRQHandler+0x10>)
 8002cf6:	f000 fe38 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000180 	.word	0x20000180

08002d04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <CAN1_RX0_IRQHandler+0x10>)
 8002d0a:	f000 fe2e 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000180 	.word	0x20000180

08002d18 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <CAN1_RX1_IRQHandler+0x10>)
 8002d1e:	f000 fe24 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000180 	.word	0x20000180

08002d2c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <CAN1_SCE_IRQHandler+0x10>)
 8002d32:	f000 fe1a 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000180 	.word	0x20000180

08002d40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <I2C1_EV_IRQHandler+0x10>)
 8002d46:	f002 faa3 	bl	8005290 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200001a8 	.word	0x200001a8

08002d54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <I2C1_ER_IRQHandler+0x10>)
 8002d5a:	f002 fc0a 	bl	8005572 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200001a8 	.word	0x200001a8

08002d68 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <CAN2_TX_IRQHandler+0x10>)
 8002d6e:	f000 fdfc 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000158 	.word	0x20000158

08002d7c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <CAN2_RX0_IRQHandler+0x10>)
 8002d82:	f000 fdf2 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000158 	.word	0x20000158

08002d90 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <CAN2_RX1_IRQHandler+0x10>)
 8002d96:	f000 fde8 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000158 	.word	0x20000158

08002da4 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <CAN2_SCE_IRQHandler+0x10>)
 8002daa:	f000 fdde 	bl	800396a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000158 	.word	0x20000158

08002db8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e00a      	b.n	8002de0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dca:	f3af 8000 	nop.w
 8002dce:	4601      	mov	r1, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	60ba      	str	r2, [r7, #8]
 8002dd6:	b2ca      	uxtb	r2, r1
 8002dd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dbf0      	blt.n	8002dca <_read+0x12>
	}

return len;
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e009      	b.n	8002e18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	60ba      	str	r2, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dbf1      	blt.n	8002e04 <_write+0x12>
	}
	return len;
 8002e20:	687b      	ldr	r3, [r7, #4]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_close>:

int _close(int file)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
	return -1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e50:	605a      	str	r2, [r3, #4]
	return 0;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <_isatty>:

int _isatty(int file)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
	return 1;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
	return 0;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <_sbrk+0x5c>)
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <_sbrk+0x60>)
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <_sbrk+0x64>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <_sbrk+0x64>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <_sbrk+0x68>)
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <_sbrk+0x64>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d207      	bcs.n	8002ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ebc:	f004 ff0e 	bl	8007cdc <__errno>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eca:	e009      	b.n	8002ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <_sbrk+0x64>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <_sbrk+0x64>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <_sbrk+0x64>)
 8002edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20010000 	.word	0x20010000
 8002eec:	00000400 	.word	0x00000400
 8002ef0:	2000014c 	.word	0x2000014c
 8002ef4:	20000320 	.word	0x20000320

08002ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f06:	490d      	ldr	r1, [pc, #52]	; (8002f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	; (8002f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f2a:	f7ff ffe5 	bl	8002ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f004 fedb 	bl	8007ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f32:	f7ff f8c5 	bl	80020c0 <main>
  bx lr
 8002f36:	4770      	bx	lr
  ldr r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f3c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002f40:	08009400 	.word	0x08009400
  ldr r2, =_sbss
 8002f44:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002f48:	20000320 	.word	0x20000320

08002f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_2_IRQHandler>
	...

08002f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_Init+0x28>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_Init+0x28>)
 8002f5a:	f043 0310 	orr.w	r3, r3, #16
 8002f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f60:	2003      	movs	r0, #3
 8002f62:	f001 f80d 	bl	8003f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f66:	200f      	movs	r0, #15
 8002f68:	f000 f808 	bl	8002f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f6c:	f7ff fe66 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_InitTick+0x54>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_InitTick+0x58>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 f825 	bl	8003fea <HAL_SYSTICK_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00e      	b.n	8002fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d80a      	bhi.n	8002fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb8:	f000 ffed 	bl	8003f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <HAL_InitTick+0x5c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000098 	.word	0x20000098
 8002fd4:	200000a0 	.word	0x200000a0
 8002fd8:	2000009c 	.word	0x2000009c

08002fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_IncTick+0x1c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_IncTick+0x20>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <HAL_IncTick+0x20>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	200000a0 	.word	0x200000a0
 8002ffc:	200002ec 	.word	0x200002ec

08003000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <HAL_GetTick+0x10>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	200002ec 	.word	0x200002ec

08003014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff fff0 	bl	8003000 <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302c:	d005      	beq.n	800303a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_Delay+0x44>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800303a:	bf00      	nop
 800303c:	f7ff ffe0 	bl	8003000 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d8f7      	bhi.n	800303c <HAL_Delay+0x28>
  {
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200000a0 	.word	0x200000a0

0800305c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0ed      	b.n	800324a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fa14 	bl	80014a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003090:	f7ff ffb6 	bl	8003000 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003096:	e012      	b.n	80030be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003098:	f7ff ffb2 	bl	8003000 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b0a      	cmp	r3, #10
 80030a4:	d90b      	bls.n	80030be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2205      	movs	r2, #5
 80030b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0c5      	b.n	800324a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0e5      	beq.n	8003098 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0202 	bic.w	r2, r2, #2
 80030da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7ff ff90 	bl	8003000 <HAL_GetTick>
 80030e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030e2:	e012      	b.n	800310a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030e4:	f7ff ff8c 	bl	8003000 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b0a      	cmp	r3, #10
 80030f0:	d90b      	bls.n	800310a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2205      	movs	r2, #5
 8003102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e09f      	b.n	800324a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7e1b      	ldrb	r3, [r3, #24]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d108      	bne.n	8003132 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e007      	b.n	8003142 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003140:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7e5b      	ldrb	r3, [r3, #25]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e007      	b.n	800316c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7e9b      	ldrb	r3, [r3, #26]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0220 	orr.w	r2, r2, #32
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e007      	b.n	8003196 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0220 	bic.w	r2, r2, #32
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7edb      	ldrb	r3, [r3, #27]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0210 	bic.w	r2, r2, #16
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e007      	b.n	80031c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0210 	orr.w	r2, r2, #16
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7f1b      	ldrb	r3, [r3, #28]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0208 	orr.w	r2, r2, #8
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e007      	b.n	80031ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0208 	bic.w	r2, r2, #8
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7f5b      	ldrb	r3, [r3, #29]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d108      	bne.n	8003204 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0204 	orr.w	r2, r2, #4
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e007      	b.n	8003214 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0204 	bic.w	r2, r2, #4
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	ea42 0103 	orr.w	r1, r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3020 	ldrb.w	r3, [r3, #32]
 800326a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d003      	beq.n	800327a <HAL_CAN_ConfigFilter+0x26>
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b02      	cmp	r3, #2
 8003276:	f040 80be 	bne.w	80033f6 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800327a:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_CAN_ConfigFilter+0x1bc>)
 800327c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003294:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	431a      	orrs	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	2201      	movs	r2, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	401a      	ands	r2, r3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d123      	bne.n	8003324 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3248      	adds	r2, #72	; 0x48
 8003304:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003318:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	3348      	adds	r3, #72	; 0x48
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d122      	bne.n	8003372 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	431a      	orrs	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800334c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3248      	adds	r2, #72	; 0x48
 8003352:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003366:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003368:	6979      	ldr	r1, [r7, #20]
 800336a:	3348      	adds	r3, #72	; 0x48
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	401a      	ands	r2, r3
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800338c:	e007      	b.n	800339e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	431a      	orrs	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	401a      	ands	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033b8:	e007      	b.n	80033ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	431a      	orrs	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033e8:	f023 0201 	bic.w	r2, r3, #1
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e006      	b.n	8003404 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40006400 	.word	0x40006400

08003414 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d12e      	bne.n	8003486 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003440:	f7ff fdde 	bl	8003000 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003446:	e012      	b.n	800346e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003448:	f7ff fdda 	bl	8003000 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b0a      	cmp	r3, #10
 8003454:	d90b      	bls.n	800346e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2205      	movs	r2, #5
 8003466:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e012      	b.n	8003494 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e5      	bne.n	8003448 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e006      	b.n	8003494 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034ba:	7ffb      	ldrb	r3, [r7, #31]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d003      	beq.n	80034c8 <HAL_CAN_AddTxMessage+0x2c>
 80034c0:	7ffb      	ldrb	r3, [r7, #31]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	f040 80b8 	bne.w	8003638 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10a      	bne.n	80034e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80a0 	beq.w	8003628 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	0e1b      	lsrs	r3, r3, #24
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d907      	bls.n	8003508 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e09e      	b.n	8003646 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003508:	2201      	movs	r2, #1
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	409a      	lsls	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10d      	bne.n	8003536 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	6809      	ldr	r1, [r1, #0]
 8003528:	431a      	orrs	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	3318      	adds	r3, #24
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	440b      	add	r3, r1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e00f      	b.n	8003556 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003540:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800354a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3318      	adds	r3, #24
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	440b      	add	r3, r1
 8003554:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3318      	adds	r3, #24
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	440b      	add	r3, r1
 8003566:	3304      	adds	r3, #4
 8003568:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	7d1b      	ldrb	r3, [r3, #20]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d111      	bne.n	8003596 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	3318      	adds	r3, #24
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4413      	add	r3, r2
 800357e:	3304      	adds	r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	6811      	ldr	r1, [r2, #0]
 8003586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3318      	adds	r3, #24
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	440b      	add	r3, r1
 8003592:	3304      	adds	r3, #4
 8003594:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3307      	adds	r3, #7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	061a      	lsls	r2, r3, #24
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3306      	adds	r3, #6
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	041b      	lsls	r3, r3, #16
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3305      	adds	r3, #5
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	4313      	orrs	r3, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	3204      	adds	r2, #4
 80035b6:	7812      	ldrb	r2, [r2, #0]
 80035b8:	4610      	mov	r0, r2
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6811      	ldr	r1, [r2, #0]
 80035be:	ea43 0200 	orr.w	r2, r3, r0
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3303      	adds	r3, #3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	061a      	lsls	r2, r3, #24
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3302      	adds	r3, #2
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3301      	adds	r3, #1
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	4313      	orrs	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	4610      	mov	r0, r2
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	6811      	ldr	r1, [r2, #0]
 80035f4:	ea43 0200 	orr.w	r2, r3, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003602:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3318      	adds	r3, #24
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	4413      	add	r3, r2
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	6811      	ldr	r1, [r2, #0]
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3318      	adds	r3, #24
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	440b      	add	r3, r1
 8003622:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e00e      	b.n	8003646 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e006      	b.n	8003646 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003662:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003664:	7afb      	ldrb	r3, [r7, #11]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d002      	beq.n	8003670 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d11d      	bne.n	80036ac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3301      	adds	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	3301      	adds	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80036ac:	68fb      	ldr	r3, [r7, #12]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036cc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80036ce:	7afb      	ldrb	r3, [r7, #11]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d002      	beq.n	80036da <HAL_CAN_IsTxMessagePending+0x22>
 80036d4:	7afb      	ldrb	r3, [r7, #11]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d10b      	bne.n	80036f2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	069b      	lsls	r3, r3, #26
 80036e4:	401a      	ands	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	069b      	lsls	r3, r3, #26
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80036ee:	2301      	movs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80036f2:	68fb      	ldr	r3, [r7, #12]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003712:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d003      	beq.n	8003722 <HAL_CAN_GetRxMessage+0x24>
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	2b02      	cmp	r3, #2
 800371e:	f040 80f3 	bne.w	8003908 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10e      	bne.n	8003746 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d116      	bne.n	8003764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0e7      	b.n	8003916 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0d8      	b.n	8003916 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	331b      	adds	r3, #27
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	4413      	add	r3, r2
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0204 	and.w	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	331b      	adds	r3, #27
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	4413      	add	r3, r2
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0d5b      	lsrs	r3, r3, #21
 8003792:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	331b      	adds	r3, #27
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	4413      	add	r3, r2
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	08db      	lsrs	r3, r3, #3
 80037ac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	331b      	adds	r3, #27
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0202 	and.w	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	331b      	adds	r3, #27
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	4413      	add	r3, r2
 80037d6:	3304      	adds	r3, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	331b      	adds	r3, #27
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	331b      	adds	r3, #27
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4413      	add	r3, r2
 800381c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b2da      	uxtb	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4413      	add	r3, r2
 8003832:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0a1a      	lsrs	r2, r3, #8
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	4413      	add	r3, r2
 800384c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0c1a      	lsrs	r2, r3, #16
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3302      	adds	r3, #2
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4413      	add	r3, r2
 8003866:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0e1a      	lsrs	r2, r3, #24
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	3303      	adds	r3, #3
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4413      	add	r3, r2
 8003880:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	3304      	adds	r3, #4
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	4413      	add	r3, r2
 8003898:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	0a1a      	lsrs	r2, r3, #8
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	3305      	adds	r3, #5
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0c1a      	lsrs	r2, r3, #16
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	3306      	adds	r3, #6
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0e1a      	lsrs	r2, r3, #24
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	3307      	adds	r3, #7
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0220 	orr.w	r2, r2, #32
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	e007      	b.n	8003904 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e006      	b.n	8003916 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003930:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d002      	beq.n	800393e <HAL_CAN_ActivateNotification+0x1e>
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d109      	bne.n	8003952 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6959      	ldr	r1, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e006      	b.n	8003960 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b08a      	sub	sp, #40	; 0x28
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d07c      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d023      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f983 	bl	8003cd8 <HAL_CAN_TxMailbox0CompleteCallback>
 80039d2:	e016      	b.n	8003a02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
 80039e6:	e00c      	b.n	8003a02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e002      	b.n	8003a02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f986 	bl	8003d0e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d024      	beq.n	8003a56 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f962 	bl	8003cea <HAL_CAN_TxMailbox1CompleteCallback>
 8003a26:	e016      	b.n	8003a56 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e00c      	b.n	8003a56 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	e002      	b.n	8003a56 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f965 	bl	8003d20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d024      	beq.n	8003aaa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f941 	bl	8003cfc <HAL_CAN_TxMailbox2CompleteCallback>
 8003a7a:	e016      	b.n	8003aaa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	e00c      	b.n	8003aaa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	e002      	b.n	8003aaa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f944 	bl	8003d32 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d007      	beq.n	8003ace <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2210      	movs	r2, #16
 8003acc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00b      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d006      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f92a 	bl	8003d44 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7fe fc23 	bl	8002354 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00c      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2210      	movs	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f901 	bl	8003d56 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fe fc1d 	bl	80023ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8ea 	bl	8003d68 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d006      	beq.n	8003bb6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8e2 	bl	8003d7a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d07b      	beq.n	8003cb8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d072      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d043      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d03e      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c38:	2b60      	cmp	r3, #96	; 0x60
 8003c3a:	d02b      	beq.n	8003c94 <HAL_CAN_IRQHandler+0x32a>
 8003c3c:	2b60      	cmp	r3, #96	; 0x60
 8003c3e:	d82e      	bhi.n	8003c9e <HAL_CAN_IRQHandler+0x334>
 8003c40:	2b50      	cmp	r3, #80	; 0x50
 8003c42:	d022      	beq.n	8003c8a <HAL_CAN_IRQHandler+0x320>
 8003c44:	2b50      	cmp	r3, #80	; 0x50
 8003c46:	d82a      	bhi.n	8003c9e <HAL_CAN_IRQHandler+0x334>
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d019      	beq.n	8003c80 <HAL_CAN_IRQHandler+0x316>
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d826      	bhi.n	8003c9e <HAL_CAN_IRQHandler+0x334>
 8003c50:	2b30      	cmp	r3, #48	; 0x30
 8003c52:	d010      	beq.n	8003c76 <HAL_CAN_IRQHandler+0x30c>
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	d822      	bhi.n	8003c9e <HAL_CAN_IRQHandler+0x334>
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d002      	beq.n	8003c62 <HAL_CAN_IRQHandler+0x2f8>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d005      	beq.n	8003c6c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c60:	e01d      	b.n	8003c9e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	f043 0308 	orr.w	r3, r3, #8
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c6a:	e019      	b.n	8003ca0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f043 0310 	orr.w	r3, r3, #16
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c74:	e014      	b.n	8003ca0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	f043 0320 	orr.w	r3, r3, #32
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c7e:	e00f      	b.n	8003ca0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c88:	e00a      	b.n	8003ca0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c92:	e005      	b.n	8003ca0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c9c:	e000      	b.n	8003ca0 <HAL_CAN_IRQHandler+0x336>
            break;
 8003c9e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fe fc16 	bl	80024fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003db4:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003db6:	7bbb      	ldrb	r3, [r7, #14]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d002      	beq.n	8003dc2 <HAL_CAN_ResetError+0x20>
 8003dbc:	7bbb      	ldrb	r3, [r7, #14]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d103      	bne.n	8003dca <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8003dc8:	e007      	b.n	8003dda <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
	...

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	db0b      	blt.n	8003e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	4906      	ldr	r1, [pc, #24]	; (8003e80 <__NVIC_EnableIRQ+0x34>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100

08003e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	db0a      	blt.n	8003eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	490c      	ldr	r1, [pc, #48]	; (8003ed0 <__NVIC_SetPriority+0x4c>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eac:	e00a      	b.n	8003ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <__NVIC_SetPriority+0x50>)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	761a      	strb	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e100 	.word	0xe000e100
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f1c3 0307 	rsb	r3, r3, #7
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	bf28      	it	cs
 8003ef6:	2304      	movcs	r3, #4
 8003ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d902      	bls.n	8003f08 <NVIC_EncodePriority+0x30>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3b03      	subs	r3, #3
 8003f06:	e000      	b.n	8003f0a <NVIC_EncodePriority+0x32>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	4313      	orrs	r3, r2
         );
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	; 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f4c:	d301      	bcc.n	8003f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e00f      	b.n	8003f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <SysTick_Config+0x40>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f5a:	210f      	movs	r1, #15
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f60:	f7ff ff90 	bl	8003e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <SysTick_Config+0x40>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <SysTick_Config+0x40>)
 8003f6c:	2207      	movs	r2, #7
 8003f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	e000e010 	.word	0xe000e010

08003f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff2d 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa8:	f7ff ff42 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	6978      	ldr	r0, [r7, #20]
 8003fb4:	f7ff ff90 	bl	8003ed8 <NVIC_EncodePriority>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff5f 	bl	8003e84 <__NVIC_SetPriority>
}
 8003fc6:	bf00      	nop
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff35 	bl	8003e4c <__NVIC_EnableIRQ>
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff ffa2 	bl	8003f3c <SysTick_Config>
 8003ff8:	4603      	mov	r3, r0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004016:	2b02      	cmp	r3, #2
 8004018:	d005      	beq.n	8004026 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e0d6      	b.n	80041d4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 020e 	bic.w	r2, r2, #14
 8004034:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	4b64      	ldr	r3, [pc, #400]	; (80041e0 <HAL_DMA_Abort_IT+0x1dc>)
 800404e:	429a      	cmp	r2, r3
 8004050:	d958      	bls.n	8004104 <HAL_DMA_Abort_IT+0x100>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a63      	ldr	r2, [pc, #396]	; (80041e4 <HAL_DMA_Abort_IT+0x1e0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d04f      	beq.n	80040fc <HAL_DMA_Abort_IT+0xf8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a61      	ldr	r2, [pc, #388]	; (80041e8 <HAL_DMA_Abort_IT+0x1e4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d048      	beq.n	80040f8 <HAL_DMA_Abort_IT+0xf4>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a60      	ldr	r2, [pc, #384]	; (80041ec <HAL_DMA_Abort_IT+0x1e8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d040      	beq.n	80040f2 <HAL_DMA_Abort_IT+0xee>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a5e      	ldr	r2, [pc, #376]	; (80041f0 <HAL_DMA_Abort_IT+0x1ec>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d038      	beq.n	80040ec <HAL_DMA_Abort_IT+0xe8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a5d      	ldr	r2, [pc, #372]	; (80041f4 <HAL_DMA_Abort_IT+0x1f0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d030      	beq.n	80040e6 <HAL_DMA_Abort_IT+0xe2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a5b      	ldr	r2, [pc, #364]	; (80041f8 <HAL_DMA_Abort_IT+0x1f4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d028      	beq.n	80040e0 <HAL_DMA_Abort_IT+0xdc>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a53      	ldr	r2, [pc, #332]	; (80041e0 <HAL_DMA_Abort_IT+0x1dc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d020      	beq.n	80040da <HAL_DMA_Abort_IT+0xd6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a57      	ldr	r2, [pc, #348]	; (80041fc <HAL_DMA_Abort_IT+0x1f8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d019      	beq.n	80040d6 <HAL_DMA_Abort_IT+0xd2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a56      	ldr	r2, [pc, #344]	; (8004200 <HAL_DMA_Abort_IT+0x1fc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d012      	beq.n	80040d2 <HAL_DMA_Abort_IT+0xce>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a54      	ldr	r2, [pc, #336]	; (8004204 <HAL_DMA_Abort_IT+0x200>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00a      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a53      	ldr	r2, [pc, #332]	; (8004208 <HAL_DMA_Abort_IT+0x204>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d102      	bne.n	80040c6 <HAL_DMA_Abort_IT+0xc2>
 80040c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c4:	e01b      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ca:	e018      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d0:	e015      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040d2:	2310      	movs	r3, #16
 80040d4:	e013      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e011      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040de:	e00e      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040e4:	e00b      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ea:	e008      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f0:	e005      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040f6:	e002      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040f8:	2310      	movs	r3, #16
 80040fa:	e000      	b.n	80040fe <HAL_DMA_Abort_IT+0xfa>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4a43      	ldr	r2, [pc, #268]	; (800420c <HAL_DMA_Abort_IT+0x208>)
 8004100:	6053      	str	r3, [r2, #4]
 8004102:	e057      	b.n	80041b4 <HAL_DMA_Abort_IT+0x1b0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a36      	ldr	r2, [pc, #216]	; (80041e4 <HAL_DMA_Abort_IT+0x1e0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d04f      	beq.n	80041ae <HAL_DMA_Abort_IT+0x1aa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a35      	ldr	r2, [pc, #212]	; (80041e8 <HAL_DMA_Abort_IT+0x1e4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d048      	beq.n	80041aa <HAL_DMA_Abort_IT+0x1a6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a33      	ldr	r2, [pc, #204]	; (80041ec <HAL_DMA_Abort_IT+0x1e8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d040      	beq.n	80041a4 <HAL_DMA_Abort_IT+0x1a0>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a32      	ldr	r2, [pc, #200]	; (80041f0 <HAL_DMA_Abort_IT+0x1ec>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d038      	beq.n	800419e <HAL_DMA_Abort_IT+0x19a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a30      	ldr	r2, [pc, #192]	; (80041f4 <HAL_DMA_Abort_IT+0x1f0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d030      	beq.n	8004198 <HAL_DMA_Abort_IT+0x194>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <HAL_DMA_Abort_IT+0x1f4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d028      	beq.n	8004192 <HAL_DMA_Abort_IT+0x18e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <HAL_DMA_Abort_IT+0x1dc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d020      	beq.n	800418c <HAL_DMA_Abort_IT+0x188>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <HAL_DMA_Abort_IT+0x1f8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d019      	beq.n	8004188 <HAL_DMA_Abort_IT+0x184>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a29      	ldr	r2, [pc, #164]	; (8004200 <HAL_DMA_Abort_IT+0x1fc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d012      	beq.n	8004184 <HAL_DMA_Abort_IT+0x180>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a28      	ldr	r2, [pc, #160]	; (8004204 <HAL_DMA_Abort_IT+0x200>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00a      	beq.n	800417e <HAL_DMA_Abort_IT+0x17a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_DMA_Abort_IT+0x204>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d102      	bne.n	8004178 <HAL_DMA_Abort_IT+0x174>
 8004172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004176:	e01b      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 8004178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800417c:	e018      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 800417e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004182:	e015      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 8004184:	2310      	movs	r3, #16
 8004186:	e013      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 8004188:	2301      	movs	r3, #1
 800418a:	e011      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 800418c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004190:	e00e      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 8004192:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004196:	e00b      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 8004198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800419c:	e008      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 800419e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a2:	e005      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 80041a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a8:	e002      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 80041aa:	2310      	movs	r3, #16
 80041ac:	e000      	b.n	80041b0 <HAL_DMA_Abort_IT+0x1ac>
 80041ae:	2301      	movs	r3, #1
 80041b0:	4a17      	ldr	r2, [pc, #92]	; (8004210 <HAL_DMA_Abort_IT+0x20c>)
 80041b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
    } 
  }
  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40020080 	.word	0x40020080
 80041e4:	40020008 	.word	0x40020008
 80041e8:	4002001c 	.word	0x4002001c
 80041ec:	40020030 	.word	0x40020030
 80041f0:	40020044 	.word	0x40020044
 80041f4:	40020058 	.word	0x40020058
 80041f8:	4002006c 	.word	0x4002006c
 80041fc:	40020408 	.word	0x40020408
 8004200:	4002041c 	.word	0x4002041c
 8004204:	40020430 	.word	0x40020430
 8004208:	40020444 	.word	0x40020444
 800420c:	40020400 	.word	0x40020400
 8004210:	40020000 	.word	0x40020000

08004214 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800422c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <HAL_FLASH_Program+0xd8>)
 8004248:	7e1b      	ldrb	r3, [r3, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_FLASH_Program+0x26>
 800424e:	2302      	movs	r3, #2
 8004250:	e054      	b.n	80042fc <HAL_FLASH_Program+0xd0>
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_FLASH_Program+0xd8>)
 8004254:	2201      	movs	r2, #1
 8004256:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004258:	f24c 3050 	movw	r0, #50000	; 0xc350
 800425c:	f000 f898 	bl	8004390 <FLASH_WaitForLastOperation>
 8004260:	4603      	mov	r3, r0
 8004262:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d144      	bne.n	80042f4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	757b      	strb	r3, [r7, #21]
 8004274:	e007      	b.n	8004286 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d102      	bne.n	8004282 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800427c:	2302      	movs	r3, #2
 800427e:	757b      	strb	r3, [r7, #21]
 8004280:	e001      	b.n	8004286 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004282:	2304      	movs	r3, #4
 8004284:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004286:	2300      	movs	r3, #0
 8004288:	75bb      	strb	r3, [r7, #22]
 800428a:	e02d      	b.n	80042e8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800428c:	7dbb      	ldrb	r3, [r7, #22]
 800428e:	005a      	lsls	r2, r3, #1
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	eb02 0c03 	add.w	ip, r2, r3
 8004296:	7dbb      	ldrb	r3, [r7, #22]
 8004298:	0119      	lsls	r1, r3, #4
 800429a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800429e:	f1c1 0620 	rsb	r6, r1, #32
 80042a2:	f1a1 0020 	sub.w	r0, r1, #32
 80042a6:	fa22 f401 	lsr.w	r4, r2, r1
 80042aa:	fa03 f606 	lsl.w	r6, r3, r6
 80042ae:	4334      	orrs	r4, r6
 80042b0:	fa23 f000 	lsr.w	r0, r3, r0
 80042b4:	4304      	orrs	r4, r0
 80042b6:	fa23 f501 	lsr.w	r5, r3, r1
 80042ba:	b2a3      	uxth	r3, r4
 80042bc:	4619      	mov	r1, r3
 80042be:	4660      	mov	r0, ip
 80042c0:	f000 f84a 	bl	8004358 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80042c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042c8:	f000 f862 	bl	8004390 <FLASH_WaitForLastOperation>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_FLASH_Program+0xdc>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <HAL_FLASH_Program+0xdc>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d107      	bne.n	80042f2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80042e2:	7dbb      	ldrb	r3, [r7, #22]
 80042e4:	3301      	adds	r3, #1
 80042e6:	75bb      	strb	r3, [r7, #22]
 80042e8:	7dba      	ldrb	r2, [r7, #22]
 80042ea:	7d7b      	ldrb	r3, [r7, #21]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d3cd      	bcc.n	800428c <HAL_FLASH_Program+0x60>
 80042f0:	e000      	b.n	80042f4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80042f2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <HAL_FLASH_Program+0xd8>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	761a      	strb	r2, [r3, #24]

  return status;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004304:	200002f0 	.word	0x200002f0
 8004308:	40022000 	.word	0x40022000

0800430c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <HAL_FLASH_Unlock+0x40>)
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_FLASH_Unlock+0x40>)
 8004324:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <HAL_FLASH_Unlock+0x44>)
 8004326:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_FLASH_Unlock+0x40>)
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <HAL_FLASH_Unlock+0x48>)
 800432c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <HAL_FLASH_Unlock+0x40>)
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800433e:	79fb      	ldrb	r3, [r7, #7]
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40022000 	.word	0x40022000
 8004350:	45670123 	.word	0x45670123
 8004354:	cdef89ab 	.word	0xcdef89ab

08004358 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <FLASH_Program_HalfWord+0x30>)
 8004366:	2200      	movs	r2, #0
 8004368:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <FLASH_Program_HalfWord+0x34>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4a07      	ldr	r2, [pc, #28]	; (800438c <FLASH_Program_HalfWord+0x34>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	887a      	ldrh	r2, [r7, #2]
 800437a:	801a      	strh	r2, [r3, #0]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	200002f0 	.word	0x200002f0
 800438c:	40022000 	.word	0x40022000

08004390 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7fe fe32 	bl	8003000 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800439e:	e010      	b.n	80043c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a6:	d00c      	beq.n	80043c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <FLASH_WaitForLastOperation+0x2e>
 80043ae:	f7fe fe27 	bl	8003000 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d201      	bcs.n	80043c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e025      	b.n	800440e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <FLASH_WaitForLastOperation+0x88>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e8      	bne.n	80043a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <FLASH_WaitForLastOperation+0x88>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <FLASH_WaitForLastOperation+0x88>)
 80043dc:	2220      	movs	r2, #32
 80043de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <FLASH_WaitForLastOperation+0x88>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <FLASH_WaitForLastOperation+0x88>)
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d105      	bne.n	8004404 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <FLASH_WaitForLastOperation+0x88>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004404:	f000 f80a 	bl	800441c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40022000 	.word	0x40022000

0800441c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004432:	4b21      	ldr	r3, [pc, #132]	; (80044b8 <FLASH_SetErrorCode+0x9c>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f043 0302 	orr.w	r3, r3, #2
 800443a:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <FLASH_SetErrorCode+0x9c>)
 800443c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f043 0310 	orr.w	r3, r3, #16
 8004444:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004446:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <FLASH_SetErrorCode+0x9c>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <FLASH_SetErrorCode+0x9c>)
 800445c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00b      	beq.n	800448a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <FLASH_SetErrorCode+0x9c>)
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	f043 0304 	orr.w	r3, r3, #4
 800447a:	4a0f      	ldr	r2, [pc, #60]	; (80044b8 <FLASH_SetErrorCode+0x9c>)
 800447c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800447e:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	4a0c      	ldr	r2, [pc, #48]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f240 1201 	movw	r2, #257	; 0x101
 8004490:	4293      	cmp	r3, r2
 8004492:	d106      	bne.n	80044a2 <FLASH_SetErrorCode+0x86>
 8004494:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4a06      	ldr	r2, [pc, #24]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	61d3      	str	r3, [r2, #28]
}  
 80044a0:	e002      	b.n	80044a8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <FLASH_SetErrorCode+0x98>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60d3      	str	r3, [r2, #12]
}  
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40022000 	.word	0x40022000
 80044b8:	200002f0 	.word	0x200002f0

080044bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044ce:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_FLASHEx_Erase+0xd0>)
 80044d0:	7e1b      	ldrb	r3, [r3, #24]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_FLASHEx_Erase+0x1e>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e053      	b.n	8004582 <HAL_FLASHEx_Erase+0xc6>
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_FLASHEx_Erase+0xd0>)
 80044dc:	2201      	movs	r2, #1
 80044de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d116      	bne.n	8004516 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80044e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044ec:	f7ff ff50 	bl	8004390 <FLASH_WaitForLastOperation>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d141      	bne.n	800457a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f000 f84c 	bl	8004594 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004500:	f7ff ff46 	bl	8004390 <FLASH_WaitForLastOperation>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004508:	4b21      	ldr	r3, [pc, #132]	; (8004590 <HAL_FLASHEx_Erase+0xd4>)
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	4a20      	ldr	r2, [pc, #128]	; (8004590 <HAL_FLASHEx_Erase+0xd4>)
 800450e:	f023 0304 	bic.w	r3, r3, #4
 8004512:	6113      	str	r3, [r2, #16]
 8004514:	e031      	b.n	800457a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004516:	f24c 3050 	movw	r0, #50000	; 0xc350
 800451a:	f7ff ff39 	bl	8004390 <FLASH_WaitForLastOperation>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d12a      	bne.n	800457a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800452a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	e019      	b.n	8004568 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004534:	68b8      	ldr	r0, [r7, #8]
 8004536:	f000 f849 	bl	80045cc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800453a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800453e:	f7ff ff27 	bl	8004390 <FLASH_WaitForLastOperation>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <HAL_FLASHEx_Erase+0xd4>)
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	4a11      	ldr	r2, [pc, #68]	; (8004590 <HAL_FLASHEx_Erase+0xd4>)
 800454c:	f023 0302 	bic.w	r3, r3, #2
 8004550:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	601a      	str	r2, [r3, #0]
            break;
 800455e:	e00c      	b.n	800457a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	02da      	lsls	r2, r3, #11
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	d3dc      	bcc.n	8004534 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <HAL_FLASHEx_Erase+0xd0>)
 800457c:	2200      	movs	r2, #0
 800457e:	761a      	strb	r2, [r3, #24]

  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	200002f0 	.word	0x200002f0
 8004590:	40022000 	.word	0x40022000

08004594 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800459c:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <FLASH_MassErase+0x30>)
 800459e:	2200      	movs	r2, #0
 80045a0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <FLASH_MassErase+0x34>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <FLASH_MassErase+0x34>)
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <FLASH_MassErase+0x34>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4a05      	ldr	r2, [pc, #20]	; (80045c8 <FLASH_MassErase+0x34>)
 80045b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045b8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	200002f0 	.word	0x200002f0
 80045c8:	40022000 	.word	0x40022000

080045cc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <FLASH_PageErase+0x38>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <FLASH_PageErase+0x3c>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <FLASH_PageErase+0x3c>)
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <FLASH_PageErase+0x3c>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <FLASH_PageErase+0x3c>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <FLASH_PageErase+0x3c>)
 80045f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200002f0 	.word	0x200002f0
 8004608:	40022000 	.word	0x40022000

0800460c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800460c:	b480      	push	{r7}
 800460e:	b08b      	sub	sp, #44	; 0x2c
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800461a:	2300      	movs	r3, #0
 800461c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461e:	e169      	b.n	80048f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004620:	2201      	movs	r2, #1
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	429a      	cmp	r2, r3
 800463a:	f040 8158 	bne.w	80048ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a9a      	ldr	r2, [pc, #616]	; (80048ac <HAL_GPIO_Init+0x2a0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d05e      	beq.n	8004706 <HAL_GPIO_Init+0xfa>
 8004648:	4a98      	ldr	r2, [pc, #608]	; (80048ac <HAL_GPIO_Init+0x2a0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d875      	bhi.n	800473a <HAL_GPIO_Init+0x12e>
 800464e:	4a98      	ldr	r2, [pc, #608]	; (80048b0 <HAL_GPIO_Init+0x2a4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d058      	beq.n	8004706 <HAL_GPIO_Init+0xfa>
 8004654:	4a96      	ldr	r2, [pc, #600]	; (80048b0 <HAL_GPIO_Init+0x2a4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d86f      	bhi.n	800473a <HAL_GPIO_Init+0x12e>
 800465a:	4a96      	ldr	r2, [pc, #600]	; (80048b4 <HAL_GPIO_Init+0x2a8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d052      	beq.n	8004706 <HAL_GPIO_Init+0xfa>
 8004660:	4a94      	ldr	r2, [pc, #592]	; (80048b4 <HAL_GPIO_Init+0x2a8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d869      	bhi.n	800473a <HAL_GPIO_Init+0x12e>
 8004666:	4a94      	ldr	r2, [pc, #592]	; (80048b8 <HAL_GPIO_Init+0x2ac>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04c      	beq.n	8004706 <HAL_GPIO_Init+0xfa>
 800466c:	4a92      	ldr	r2, [pc, #584]	; (80048b8 <HAL_GPIO_Init+0x2ac>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d863      	bhi.n	800473a <HAL_GPIO_Init+0x12e>
 8004672:	4a92      	ldr	r2, [pc, #584]	; (80048bc <HAL_GPIO_Init+0x2b0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d046      	beq.n	8004706 <HAL_GPIO_Init+0xfa>
 8004678:	4a90      	ldr	r2, [pc, #576]	; (80048bc <HAL_GPIO_Init+0x2b0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d85d      	bhi.n	800473a <HAL_GPIO_Init+0x12e>
 800467e:	2b12      	cmp	r3, #18
 8004680:	d82a      	bhi.n	80046d8 <HAL_GPIO_Init+0xcc>
 8004682:	2b12      	cmp	r3, #18
 8004684:	d859      	bhi.n	800473a <HAL_GPIO_Init+0x12e>
 8004686:	a201      	add	r2, pc, #4	; (adr r2, 800468c <HAL_GPIO_Init+0x80>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	08004707 	.word	0x08004707
 8004690:	080046e1 	.word	0x080046e1
 8004694:	080046f3 	.word	0x080046f3
 8004698:	08004735 	.word	0x08004735
 800469c:	0800473b 	.word	0x0800473b
 80046a0:	0800473b 	.word	0x0800473b
 80046a4:	0800473b 	.word	0x0800473b
 80046a8:	0800473b 	.word	0x0800473b
 80046ac:	0800473b 	.word	0x0800473b
 80046b0:	0800473b 	.word	0x0800473b
 80046b4:	0800473b 	.word	0x0800473b
 80046b8:	0800473b 	.word	0x0800473b
 80046bc:	0800473b 	.word	0x0800473b
 80046c0:	0800473b 	.word	0x0800473b
 80046c4:	0800473b 	.word	0x0800473b
 80046c8:	0800473b 	.word	0x0800473b
 80046cc:	0800473b 	.word	0x0800473b
 80046d0:	080046e9 	.word	0x080046e9
 80046d4:	080046fd 	.word	0x080046fd
 80046d8:	4a79      	ldr	r2, [pc, #484]	; (80048c0 <HAL_GPIO_Init+0x2b4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80046de:	e02c      	b.n	800473a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	623b      	str	r3, [r7, #32]
          break;
 80046e6:	e029      	b.n	800473c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	3304      	adds	r3, #4
 80046ee:	623b      	str	r3, [r7, #32]
          break;
 80046f0:	e024      	b.n	800473c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	3308      	adds	r3, #8
 80046f8:	623b      	str	r3, [r7, #32]
          break;
 80046fa:	e01f      	b.n	800473c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	330c      	adds	r3, #12
 8004702:	623b      	str	r3, [r7, #32]
          break;
 8004704:	e01a      	b.n	800473c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800470e:	2304      	movs	r3, #4
 8004710:	623b      	str	r3, [r7, #32]
          break;
 8004712:	e013      	b.n	800473c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800471c:	2308      	movs	r3, #8
 800471e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	611a      	str	r2, [r3, #16]
          break;
 8004726:	e009      	b.n	800473c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004728:	2308      	movs	r3, #8
 800472a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	615a      	str	r2, [r3, #20]
          break;
 8004732:	e003      	b.n	800473c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004734:	2300      	movs	r3, #0
 8004736:	623b      	str	r3, [r7, #32]
          break;
 8004738:	e000      	b.n	800473c <HAL_GPIO_Init+0x130>
          break;
 800473a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2bff      	cmp	r3, #255	; 0xff
 8004740:	d801      	bhi.n	8004746 <HAL_GPIO_Init+0x13a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	e001      	b.n	800474a <HAL_GPIO_Init+0x13e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2bff      	cmp	r3, #255	; 0xff
 8004750:	d802      	bhi.n	8004758 <HAL_GPIO_Init+0x14c>
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	e002      	b.n	800475e <HAL_GPIO_Init+0x152>
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	3b08      	subs	r3, #8
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	210f      	movs	r1, #15
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	401a      	ands	r2, r3
 8004770:	6a39      	ldr	r1, [r7, #32]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	431a      	orrs	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80b1 	beq.w	80048ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800478c:	4b4d      	ldr	r3, [pc, #308]	; (80048c4 <HAL_GPIO_Init+0x2b8>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	4a4c      	ldr	r2, [pc, #304]	; (80048c4 <HAL_GPIO_Init+0x2b8>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	6193      	str	r3, [r2, #24]
 8004798:	4b4a      	ldr	r3, [pc, #296]	; (80048c4 <HAL_GPIO_Init+0x2b8>)
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047a4:	4a48      	ldr	r2, [pc, #288]	; (80048c8 <HAL_GPIO_Init+0x2bc>)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	089b      	lsrs	r3, r3, #2
 80047aa:	3302      	adds	r3, #2
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	220f      	movs	r2, #15
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a40      	ldr	r2, [pc, #256]	; (80048cc <HAL_GPIO_Init+0x2c0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_GPIO_Init+0x1ec>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a3f      	ldr	r2, [pc, #252]	; (80048d0 <HAL_GPIO_Init+0x2c4>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00d      	beq.n	80047f4 <HAL_GPIO_Init+0x1e8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a3e      	ldr	r2, [pc, #248]	; (80048d4 <HAL_GPIO_Init+0x2c8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d007      	beq.n	80047f0 <HAL_GPIO_Init+0x1e4>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3d      	ldr	r2, [pc, #244]	; (80048d8 <HAL_GPIO_Init+0x2cc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_GPIO_Init+0x1e0>
 80047e8:	2303      	movs	r3, #3
 80047ea:	e006      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047ec:	2304      	movs	r3, #4
 80047ee:	e004      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e002      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_GPIO_Init+0x1ee>
 80047f8:	2300      	movs	r3, #0
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	f002 0203 	and.w	r2, r2, #3
 8004800:	0092      	lsls	r2, r2, #2
 8004802:	4093      	lsls	r3, r2
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800480a:	492f      	ldr	r1, [pc, #188]	; (80048c8 <HAL_GPIO_Init+0x2bc>)
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	089b      	lsrs	r3, r3, #2
 8004810:	3302      	adds	r3, #2
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d006      	beq.n	8004832 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004824:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	492c      	ldr	r1, [pc, #176]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
 8004830:	e006      	b.n	8004840 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004832:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	43db      	mvns	r3, r3
 800483a:	4928      	ldr	r1, [pc, #160]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 800483c:	4013      	ands	r3, r2
 800483e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d006      	beq.n	800485a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	4922      	ldr	r1, [pc, #136]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
 8004858:	e006      	b.n	8004868 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	43db      	mvns	r3, r3
 8004862:	491e      	ldr	r1, [pc, #120]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 8004864:	4013      	ands	r3, r2
 8004866:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4918      	ldr	r1, [pc, #96]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	608b      	str	r3, [r1, #8]
 8004880:	e006      	b.n	8004890 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	43db      	mvns	r3, r3
 800488a:	4914      	ldr	r1, [pc, #80]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 800488c:	4013      	ands	r3, r2
 800488e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d021      	beq.n	80048e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_GPIO_Init+0x2d0>)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60cb      	str	r3, [r1, #12]
 80048a8:	e021      	b.n	80048ee <HAL_GPIO_Init+0x2e2>
 80048aa:	bf00      	nop
 80048ac:	10320000 	.word	0x10320000
 80048b0:	10310000 	.word	0x10310000
 80048b4:	10220000 	.word	0x10220000
 80048b8:	10210000 	.word	0x10210000
 80048bc:	10120000 	.word	0x10120000
 80048c0:	10110000 	.word	0x10110000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40010000 	.word	0x40010000
 80048cc:	40010800 	.word	0x40010800
 80048d0:	40010c00 	.word	0x40010c00
 80048d4:	40011000 	.word	0x40011000
 80048d8:	40011400 	.word	0x40011400
 80048dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_GPIO_Init+0x304>)
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	4909      	ldr	r1, [pc, #36]	; (8004910 <HAL_GPIO_Init+0x304>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	fa22 f303 	lsr.w	r3, r2, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f47f ae8e 	bne.w	8004620 <HAL_GPIO_Init+0x14>
  }
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	372c      	adds	r7, #44	; 0x2c
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	40010400 	.word	0x40010400

08004914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	887b      	ldrh	r3, [r7, #2]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e001      	b.n	8004936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr
	...

08004944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e12b      	b.n	8004bae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d106      	bne.n	8004970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fd faac 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2224      	movs	r2, #36	; 0x24
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0201 	bic.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004996:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049a8:	f003 f966 	bl	8007c78 <HAL_RCC_GetPCLK1Freq>
 80049ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	4a81      	ldr	r2, [pc, #516]	; (8004bb8 <HAL_I2C_Init+0x274>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d807      	bhi.n	80049c8 <HAL_I2C_Init+0x84>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4a80      	ldr	r2, [pc, #512]	; (8004bbc <HAL_I2C_Init+0x278>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	bf94      	ite	ls
 80049c0:	2301      	movls	r3, #1
 80049c2:	2300      	movhi	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	e006      	b.n	80049d6 <HAL_I2C_Init+0x92>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a7d      	ldr	r2, [pc, #500]	; (8004bc0 <HAL_I2C_Init+0x27c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	bf94      	ite	ls
 80049d0:	2301      	movls	r3, #1
 80049d2:	2300      	movhi	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0e7      	b.n	8004bae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4a78      	ldr	r2, [pc, #480]	; (8004bc4 <HAL_I2C_Init+0x280>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	0c9b      	lsrs	r3, r3, #18
 80049e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4a6a      	ldr	r2, [pc, #424]	; (8004bb8 <HAL_I2C_Init+0x274>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d802      	bhi.n	8004a18 <HAL_I2C_Init+0xd4>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	3301      	adds	r3, #1
 8004a16:	e009      	b.n	8004a2c <HAL_I2C_Init+0xe8>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	4a69      	ldr	r2, [pc, #420]	; (8004bc8 <HAL_I2C_Init+0x284>)
 8004a24:	fba2 2303 	umull	r2, r3, r2, r3
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	495c      	ldr	r1, [pc, #368]	; (8004bb8 <HAL_I2C_Init+0x274>)
 8004a48:	428b      	cmp	r3, r1
 8004a4a:	d819      	bhi.n	8004a80 <HAL_I2C_Init+0x13c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1e59      	subs	r1, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a60:	400b      	ands	r3, r1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_I2C_Init+0x138>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1e59      	subs	r1, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a74:	3301      	adds	r3, #1
 8004a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7a:	e051      	b.n	8004b20 <HAL_I2C_Init+0x1dc>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	e04f      	b.n	8004b20 <HAL_I2C_Init+0x1dc>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d111      	bne.n	8004aac <HAL_I2C_Init+0x168>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1e58      	subs	r0, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	440b      	add	r3, r1
 8004a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e012      	b.n	8004ad2 <HAL_I2C_Init+0x18e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1e58      	subs	r0, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	0099      	lsls	r1, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Init+0x196>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e022      	b.n	8004b20 <HAL_I2C_Init+0x1dc>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10e      	bne.n	8004b00 <HAL_I2C_Init+0x1bc>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1e58      	subs	r0, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	440b      	add	r3, r1
 8004af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afe:	e00f      	b.n	8004b20 <HAL_I2C_Init+0x1dc>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1e58      	subs	r0, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	0099      	lsls	r1, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	6809      	ldr	r1, [r1, #0]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6911      	ldr	r1, [r2, #16]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68d2      	ldr	r2, [r2, #12]
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	000186a0 	.word	0x000186a0
 8004bbc:	001e847f 	.word	0x001e847f
 8004bc0:	003d08ff 	.word	0x003d08ff
 8004bc4:	431bde83 	.word	0x431bde83
 8004bc8:	10624dd3 	.word	0x10624dd3

08004bcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	4611      	mov	r1, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	817b      	strh	r3, [r7, #10]
 8004bde:	460b      	mov	r3, r1
 8004be0:	813b      	strh	r3, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004be6:	f7fe fa0b 	bl	8003000 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	f040 80d9 	bne.w	8004dac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	2319      	movs	r3, #25
 8004c00:	2201      	movs	r2, #1
 8004c02:	496d      	ldr	r1, [pc, #436]	; (8004db8 <HAL_I2C_Mem_Write+0x1ec>)
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f002 f949 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
 8004c12:	e0cc      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Mem_Write+0x56>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	e0c5      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d007      	beq.n	8004c48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2221      	movs	r2, #33	; 0x21
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2240      	movs	r2, #64	; 0x40
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a3a      	ldr	r2, [r7, #32]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a4d      	ldr	r2, [pc, #308]	; (8004dbc <HAL_I2C_Mem_Write+0x1f0>)
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c8a:	88f8      	ldrh	r0, [r7, #6]
 8004c8c:	893a      	ldrh	r2, [r7, #8]
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4603      	mov	r3, r0
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f001 fed8 	bl	8006a50 <I2C_RequestMemoryWrite>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d052      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e081      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f002 f9ca 	bl	8007048 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00d      	beq.n	8004cd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06b      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d11b      	bne.n	8004d4c <HAL_I2C_Mem_Write+0x180>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d017      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1aa      	bne.n	8004caa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f002 f9b6 	bl	80070ca <I2C_WaitOnBTFFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d107      	bne.n	8004d7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e016      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00100002 	.word	0x00100002
 8004dbc:	ffff0000 	.word	0xffff0000

08004dc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4611      	mov	r1, r2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	817b      	strh	r3, [r7, #10]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	813b      	strh	r3, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dde:	f7fe f90f 	bl	8003000 <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	f040 8244 	bne.w	800527a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2319      	movs	r3, #25
 8004df8:	2201      	movs	r2, #1
 8004dfa:	4982      	ldr	r1, [pc, #520]	; (8005004 <HAL_I2C_Mem_Read+0x244>)
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f002 f84d 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e237      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_I2C_Mem_Read+0x5a>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e230      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d007      	beq.n	8004e40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2222      	movs	r2, #34	; 0x22
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a62      	ldr	r2, [pc, #392]	; (8005008 <HAL_I2C_Mem_Read+0x248>)
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e82:	88f8      	ldrh	r0, [r7, #6]
 8004e84:	893a      	ldrh	r2, [r7, #8]
 8004e86:	8979      	ldrh	r1, [r7, #10]
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4603      	mov	r3, r0
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f001 fe72 	bl	8006b7c <I2C_RequestMemoryRead>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e1ec      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d113      	bne.n	8004ed2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e1c0      	b.n	8005254 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d11e      	bne.n	8004f18 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004eea:	b672      	cpsid	i
}
 8004eec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f14:	b662      	cpsie	i
}
 8004f16:	e035      	b.n	8004f84 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d11e      	bne.n	8004f5e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f30:	b672      	cpsid	i
}
 8004f32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f5a:	b662      	cpsie	i
}
 8004f5c:	e012      	b.n	8004f84 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f6c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004f84:	e166      	b.n	8005254 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	f200 811f 	bhi.w	80051ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d123      	bne.n	8004fe0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f002 f907 	bl	80071b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e167      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fde:	e139      	b.n	8005254 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d152      	bne.n	800508e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	2200      	movs	r2, #0
 8004ff0:	4906      	ldr	r1, [pc, #24]	; (800500c <HAL_I2C_Mem_Read+0x24c>)
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f001 ff52 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e13c      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
 8005002:	bf00      	nop
 8005004:	00100002 	.word	0x00100002
 8005008:	ffff0000 	.word	0xffff0000
 800500c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005010:	b672      	cpsid	i
}
 8005012:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005056:	b662      	cpsie	i
}
 8005058:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800508c:	e0e2      	b.n	8005254 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2200      	movs	r2, #0
 8005096:	497b      	ldr	r1, [pc, #492]	; (8005284 <HAL_I2C_Mem_Read+0x4c4>)
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f001 feff 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0e9      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80050b8:	b672      	cpsid	i
}
 80050ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050ee:	4b66      	ldr	r3, [pc, #408]	; (8005288 <HAL_I2C_Mem_Read+0x4c8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	08db      	lsrs	r3, r3, #3
 80050f4:	4a65      	ldr	r2, [pc, #404]	; (800528c <HAL_I2C_Mem_Read+0x4cc>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0a1a      	lsrs	r2, r3, #8
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	00da      	lsls	r2, r3, #3
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	3b01      	subs	r3, #1
 800510c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d118      	bne.n	8005146 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f043 0220 	orr.w	r2, r3, #32
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005136:	b662      	cpsie	i
}
 8005138:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e09a      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d1d9      	bne.n	8005108 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005196:	b662      	cpsie	i
}
 8005198:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051cc:	e042      	b.n	8005254 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f001 ffec 	bl	80071b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e04c      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b04      	cmp	r3, #4
 8005220:	d118      	bne.n	8005254 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	f47f ae94 	bne.w	8004f86 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	00010004 	.word	0x00010004
 8005288:	20000098 	.word	0x20000098
 800528c:	14f8b589 	.word	0x14f8b589

08005290 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d003      	beq.n	80052c8 <HAL_I2C_EV_IRQHandler+0x38>
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	f040 80c1 	bne.w	800544a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10d      	bne.n	80052fe <HAL_I2C_EV_IRQHandler+0x6e>
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052e8:	d003      	beq.n	80052f2 <HAL_I2C_EV_IRQHandler+0x62>
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052f0:	d101      	bne.n	80052f6 <HAL_I2C_EV_IRQHandler+0x66>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_I2C_EV_IRQHandler+0x68>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	f000 8132 	beq.w	8005562 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00c      	beq.n	8005322 <HAL_I2C_EV_IRQHandler+0x92>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	0a5b      	lsrs	r3, r3, #9
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d006      	beq.n	8005322 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 ffcf 	bl	80072b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fd77 	bl	8005e0e <I2C_Master_SB>
 8005320:	e092      	b.n	8005448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_I2C_EV_IRQHandler+0xb2>
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	0a5b      	lsrs	r3, r3, #9
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fdec 	bl	8005f18 <I2C_Master_ADD10>
 8005340:	e082      	b.n	8005448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <HAL_I2C_EV_IRQHandler+0xd2>
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	0a5b      	lsrs	r3, r3, #9
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fe05 	bl	8005f6a <I2C_Master_ADDR>
 8005360:	e072      	b.n	8005448 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d03b      	beq.n	80053e6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537c:	f000 80f3 	beq.w	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	09db      	lsrs	r3, r3, #7
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00f      	beq.n	80053ac <HAL_I2C_EV_IRQHandler+0x11c>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	0a9b      	lsrs	r3, r3, #10
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <HAL_I2C_EV_IRQHandler+0x11c>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	089b      	lsrs	r3, r3, #2
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9f1 	bl	800578c <I2C_MasterTransmit_TXE>
 80053aa:	e04d      	b.n	8005448 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	089b      	lsrs	r3, r3, #2
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80d6 	beq.w	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	0a5b      	lsrs	r3, r3, #9
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80cf 	beq.w	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	2b21      	cmp	r3, #33	; 0x21
 80053cc:	d103      	bne.n	80053d6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa78 	bl	80058c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d4:	e0c7      	b.n	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	f040 80c4 	bne.w	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fae6 	bl	80059b0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053e4:	e0bf      	b.n	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f4:	f000 80b7 	beq.w	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	099b      	lsrs	r3, r3, #6
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00f      	beq.n	8005424 <HAL_I2C_EV_IRQHandler+0x194>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	0a9b      	lsrs	r3, r3, #10
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <HAL_I2C_EV_IRQHandler+0x194>
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fb5b 	bl	8005ad8 <I2C_MasterReceive_RXNE>
 8005422:	e011      	b.n	8005448 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 809a 	beq.w	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	0a5b      	lsrs	r3, r3, #9
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 8093 	beq.w	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fbfa 	bl	8005c3a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005446:	e08e      	b.n	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005448:	e08d      	b.n	8005566 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d004      	beq.n	800545c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e007      	b.n	800546c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d012      	beq.n	800549e <HAL_I2C_EV_IRQHandler+0x20e>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	0a5b      	lsrs	r3, r3, #9
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00c      	beq.n	800549e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 ffbe 	bl	8006418 <I2C_Slave_ADDR>
 800549c:	e066      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0x22e>
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	0a5b      	lsrs	r3, r3, #9
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fff8 	bl	80064ac <I2C_Slave_STOPF>
 80054bc:	e056      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054be:	7bbb      	ldrb	r3, [r7, #14]
 80054c0:	2b21      	cmp	r3, #33	; 0x21
 80054c2:	d002      	beq.n	80054ca <HAL_I2C_EV_IRQHandler+0x23a>
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	2b29      	cmp	r3, #41	; 0x29
 80054c8:	d125      	bne.n	8005516 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00f      	beq.n	80054f6 <HAL_I2C_EV_IRQHandler+0x266>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	0a9b      	lsrs	r3, r3, #10
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_I2C_EV_IRQHandler+0x266>
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	089b      	lsrs	r3, r3, #2
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fed6 	bl	80062a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054f4:	e039      	b.n	800556a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d033      	beq.n	800556a <HAL_I2C_EV_IRQHandler+0x2da>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	0a5b      	lsrs	r3, r3, #9
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d02d      	beq.n	800556a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 ff03 	bl	800631a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005514:	e029      	b.n	800556a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	099b      	lsrs	r3, r3, #6
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00f      	beq.n	8005542 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	0a9b      	lsrs	r3, r3, #10
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_I2C_EV_IRQHandler+0x2b2>
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	089b      	lsrs	r3, r3, #2
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 ff0d 	bl	800635a <I2C_SlaveReceive_RXNE>
 8005540:	e014      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00e      	beq.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	0a5b      	lsrs	r3, r3, #9
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d008      	beq.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 ff3b 	bl	80063d6 <I2C_SlaveReceive_BTF>
 8005560:	e004      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800556a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b08a      	sub	sp, #40	; 0x28
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005594:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	0a1b      	lsrs	r3, r3, #8
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d016      	beq.n	80055d0 <HAL_I2C_ER_IRQHandler+0x5e>
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d010      	beq.n	80055d0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055be:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	0a5b      	lsrs	r3, r3, #9
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00e      	beq.n	80055fa <HAL_I2C_ER_IRQHandler+0x88>
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f043 0302 	orr.w	r3, r3, #2
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80055f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	0a9b      	lsrs	r3, r3, #10
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d03f      	beq.n	8005686 <HAL_I2C_ER_IRQHandler+0x114>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	0a1b      	lsrs	r3, r3, #8
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d039      	beq.n	8005686 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005612:	7efb      	ldrb	r3, [r7, #27]
 8005614:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005624:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800562c:	7ebb      	ldrb	r3, [r7, #26]
 800562e:	2b20      	cmp	r3, #32
 8005630:	d112      	bne.n	8005658 <HAL_I2C_ER_IRQHandler+0xe6>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10f      	bne.n	8005658 <HAL_I2C_ER_IRQHandler+0xe6>
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	2b21      	cmp	r3, #33	; 0x21
 800563c:	d008      	beq.n	8005650 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	2b29      	cmp	r3, #41	; 0x29
 8005642:	d005      	beq.n	8005650 <HAL_I2C_ER_IRQHandler+0xde>
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	2b28      	cmp	r3, #40	; 0x28
 8005648:	d106      	bne.n	8005658 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b21      	cmp	r3, #33	; 0x21
 800564e:	d103      	bne.n	8005658 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 f85b 	bl	800670c <I2C_Slave_AF>
 8005656:	e016      	b.n	8005686 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005660:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	f043 0304 	orr.w	r3, r3, #4
 8005668:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800566a:	7efb      	ldrb	r3, [r7, #27]
 800566c:	2b10      	cmp	r3, #16
 800566e:	d002      	beq.n	8005676 <HAL_I2C_ER_IRQHandler+0x104>
 8005670:	7efb      	ldrb	r3, [r7, #27]
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d107      	bne.n	8005686 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005684:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	0adb      	lsrs	r3, r3, #11
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <HAL_I2C_ER_IRQHandler+0x13e>
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f043 0308 	orr.w	r3, r3, #8
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80056ae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 f892 	bl	80067ec <I2C_ITError>
  }
}
 80056c8:	bf00      	nop
 80056ca:	3728      	adds	r7, #40	; 0x28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr

08005706 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
 8005724:	4613      	mov	r3, r2
 8005726:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr

08005756 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr

0800577a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	bc80      	pop	{r7}
 800578a:	4770      	bx	lr

0800578c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d150      	bne.n	8005854 <I2C_MasterTransmit_TXE+0xc8>
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b21      	cmp	r3, #33	; 0x21
 80057b6:	d14d      	bne.n	8005854 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b08      	cmp	r3, #8
 80057bc:	d01d      	beq.n	80057fa <I2C_MasterTransmit_TXE+0x6e>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d01a      	beq.n	80057fa <I2C_MasterTransmit_TXE+0x6e>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057ca:	d016      	beq.n	80057fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2211      	movs	r2, #17
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff ff6c 	bl	80056d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057f8:	e060      	b.n	80058bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005808:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005818:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d107      	bne.n	8005844 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ff81 	bl	8005744 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005842:	e03b      	b.n	80058bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ff3f 	bl	80056d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005852:	e033      	b.n	80058bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b21      	cmp	r3, #33	; 0x21
 8005858:	d005      	beq.n	8005866 <I2C_MasterTransmit_TXE+0xda>
 800585a:	7bbb      	ldrb	r3, [r7, #14]
 800585c:	2b40      	cmp	r3, #64	; 0x40
 800585e:	d12d      	bne.n	80058bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b22      	cmp	r3, #34	; 0x22
 8005864:	d12a      	bne.n	80058bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005880:	e01c      	b.n	80058bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d103      	bne.n	8005896 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f88e 	bl	80059b0 <I2C_MemoryTransmit_TXE_BTF>
}
 8005894:	e012      	b.n	80058bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058ba:	e7ff      	b.n	80058bc <I2C_MasterTransmit_TXE+0x130>
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b21      	cmp	r3, #33	; 0x21
 80058dc:	d164      	bne.n	80059a8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d012      	beq.n	800590e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	781a      	ldrb	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800590c:	e04c      	b.n	80059a8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b08      	cmp	r3, #8
 8005912:	d01d      	beq.n	8005950 <I2C_MasterTransmit_BTF+0x8c>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b20      	cmp	r3, #32
 8005918:	d01a      	beq.n	8005950 <I2C_MasterTransmit_BTF+0x8c>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005920:	d016      	beq.n	8005950 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005930:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2211      	movs	r2, #17
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff fec1 	bl	80056d0 <HAL_I2C_MasterTxCpltCallback>
}
 800594e:	e02b      	b.n	80059a8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800595e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b40      	cmp	r3, #64	; 0x40
 8005988:	d107      	bne.n	800599a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fed6 	bl	8005744 <HAL_I2C_MemTxCpltCallback>
}
 8005998:	e006      	b.n	80059a8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fe94 	bl	80056d0 <HAL_I2C_MasterTxCpltCallback>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11d      	bne.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10b      	bne.n	80059e8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	1c9a      	adds	r2, r3, #2
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80059e6:	e073      	b.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	121b      	asrs	r3, r3, #8
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a02:	e065      	b.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d10b      	bne.n	8005a24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a22:	e055      	b.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d151      	bne.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b22      	cmp	r3, #34	; 0x22
 8005a30:	d10d      	bne.n	8005a4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a4c:	e040      	b.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b21      	cmp	r3, #33	; 0x21
 8005a5c:	d112      	bne.n	8005a84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a82:	e025      	b.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d120      	bne.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b21      	cmp	r3, #33	; 0x21
 8005a92:	d11d      	bne.n	8005ad0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aa2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fe3a 	bl	8005744 <HAL_I2C_MemTxCpltCallback>
}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b22      	cmp	r3, #34	; 0x22
 8005aea:	f040 80a2 	bne.w	8005c32 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d921      	bls.n	8005b40 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	f040 8082 	bne.w	8005c32 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005b3e:	e078      	b.n	8005c32 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d074      	beq.n	8005c32 <I2C_MasterReceive_RXNE+0x15a>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d002      	beq.n	8005b54 <I2C_MasterReceive_RXNE+0x7c>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d16e      	bne.n	8005c32 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 faf9 	bl	800714c <I2C_WaitOnSTOPRequestThroughIT>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d142      	bne.n	8005be6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d10a      	bne.n	8005bd0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff fdc4 	bl	8005756 <HAL_I2C_MemRxCpltCallback>
}
 8005bce:	e030      	b.n	8005c32 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2212      	movs	r2, #18
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fd7f 	bl	80056e2 <HAL_I2C_MasterRxCpltCallback>
}
 8005be4:	e025      	b.n	8005c32 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bf4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff fd9b 	bl	8005768 <HAL_I2C_ErrorCallback>
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d11b      	bne.n	8005c8a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c60:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c88:	e0bd      	b.n	8005e06 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d129      	bne.n	8005ce8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d00a      	beq.n	8005cc0 <I2C_MasterReceive_BTF+0x86>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d007      	beq.n	8005cc0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691a      	ldr	r2, [r3, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ce6:	e08e      	b.n	8005e06 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d176      	bne.n	8005de0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d002      	beq.n	8005cfe <I2C_MasterReceive_BTF+0xc4>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d108      	bne.n	8005d10 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e019      	b.n	8005d44 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d002      	beq.n	8005d1c <I2C_MasterReceive_BTF+0xe2>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d108      	bne.n	8005d2e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e00a      	b.n	8005d44 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d007      	beq.n	8005d44 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d9e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b40      	cmp	r3, #64	; 0x40
 8005db2:	d10a      	bne.n	8005dca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fcc7 	bl	8005756 <HAL_I2C_MemRxCpltCallback>
}
 8005dc8:	e01d      	b.n	8005e06 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2212      	movs	r2, #18
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fc82 	bl	80056e2 <HAL_I2C_MasterRxCpltCallback>
}
 8005dde:	e012      	b.n	8005e06 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b40      	cmp	r3, #64	; 0x40
 8005e20:	d117      	bne.n	8005e52 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e3a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005e3c:	e067      	b.n	8005f0e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	611a      	str	r2, [r3, #16]
}
 8005e50:	e05d      	b.n	8005f0e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5a:	d133      	bne.n	8005ec4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b21      	cmp	r3, #33	; 0x21
 8005e66:	d109      	bne.n	8005e7c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e78:	611a      	str	r2, [r3, #16]
 8005e7a:	e008      	b.n	8005e8e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d004      	beq.n	8005ea0 <I2C_Master_SB+0x92>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d108      	bne.n	8005eb2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d032      	beq.n	8005f0e <I2C_Master_SB+0x100>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d02d      	beq.n	8005f0e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ec0:	605a      	str	r2, [r3, #4]
}
 8005ec2:	e024      	b.n	8005f0e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10e      	bne.n	8005eea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	11db      	asrs	r3, r3, #7
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	f003 0306 	and.w	r3, r3, #6
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f063 030f 	orn	r3, r3, #15
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	611a      	str	r2, [r3, #16]
}
 8005ee8:	e011      	b.n	8005f0e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d10d      	bne.n	8005f0e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	11db      	asrs	r3, r3, #7
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f003 0306 	and.w	r3, r3, #6
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f063 030e 	orn	r3, r3, #14
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	611a      	str	r2, [r3, #16]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <I2C_Master_ADD10+0x26>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d108      	bne.n	8005f50 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00c      	beq.n	8005f60 <I2C_Master_ADD10+0x48>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d007      	beq.n	8005f60 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f5e:	605a      	str	r2, [r3, #4]
  }
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b091      	sub	sp, #68	; 0x44
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b22      	cmp	r3, #34	; 0x22
 8005f92:	f040 8174 	bne.w	800627e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10f      	bne.n	8005fbe <I2C_Master_ADDR+0x54>
 8005f9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d10b      	bne.n	8005fbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	e16b      	b.n	8006296 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d11d      	bne.n	8006002 <I2C_Master_ADDR+0x98>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fce:	d118      	bne.n	8006002 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	651a      	str	r2, [r3, #80]	; 0x50
 8006000:	e149      	b.n	8006296 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d113      	bne.n	8006034 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600c:	2300      	movs	r3, #0
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e120      	b.n	8006276 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	f040 808a 	bne.w	8006154 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006046:	d137      	bne.n	80060b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006056:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006066:	d113      	bne.n	8006090 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006076:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006078:	2300      	movs	r3, #0
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	e0f2      	b.n	8006276 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006090:	2300      	movs	r3, #0
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e0de      	b.n	8006276 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d02e      	beq.n	800611c <I2C_Master_ADDR+0x1b2>
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d02b      	beq.n	800611c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c6:	2b12      	cmp	r3, #18
 80060c8:	d102      	bne.n	80060d0 <I2C_Master_ADDR+0x166>
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d125      	bne.n	800611c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d00e      	beq.n	80060f4 <I2C_Master_ADDR+0x18a>
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d00b      	beq.n	80060f4 <I2C_Master_ADDR+0x18a>
 80060dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d008      	beq.n	80060f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	e007      	b.n	8006104 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006102:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	e0ac      	b.n	8006276 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e090      	b.n	8006276 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d158      	bne.n	8006210 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b04      	cmp	r3, #4
 8006162:	d021      	beq.n	80061a8 <I2C_Master_ADDR+0x23e>
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	2b02      	cmp	r3, #2
 8006168:	d01e      	beq.n	80061a8 <I2C_Master_ADDR+0x23e>
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	2b10      	cmp	r3, #16
 800616e:	d01b      	beq.n	80061a8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e012      	b.n	80061ce <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061dc:	d14b      	bne.n	8006276 <I2C_Master_ADDR+0x30c>
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061e4:	d00b      	beq.n	80061fe <I2C_Master_ADDR+0x294>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d008      	beq.n	80061fe <I2C_Master_ADDR+0x294>
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d005      	beq.n	80061fe <I2C_Master_ADDR+0x294>
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d002      	beq.n	80061fe <I2C_Master_ADDR+0x294>
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d13b      	bne.n	8006276 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	e032      	b.n	8006276 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800621e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622e:	d117      	bne.n	8006260 <I2C_Master_ADDR+0x2f6>
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006236:	d00b      	beq.n	8006250 <I2C_Master_ADDR+0x2e6>
 8006238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623a:	2b01      	cmp	r3, #1
 800623c:	d008      	beq.n	8006250 <I2C_Master_ADDR+0x2e6>
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2b08      	cmp	r3, #8
 8006242:	d005      	beq.n	8006250 <I2C_Master_ADDR+0x2e6>
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	2b10      	cmp	r3, #16
 8006248:	d002      	beq.n	8006250 <I2C_Master_ADDR+0x2e6>
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	2b20      	cmp	r3, #32
 800624e:	d107      	bne.n	8006260 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800625e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800627c:	e00b      	b.n	8006296 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627e:	2300      	movs	r3, #0
 8006280:	60bb      	str	r3, [r7, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	60bb      	str	r3, [r7, #8]
 8006292:	68bb      	ldr	r3, [r7, #8]
}
 8006294:	e7ff      	b.n	8006296 <I2C_Master_ADDR+0x32c>
 8006296:	bf00      	nop
 8006298:	3744      	adds	r7, #68	; 0x44
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d02b      	beq.n	8006312 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	781a      	ldrb	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d114      	bne.n	8006312 <I2C_SlaveTransmit_TXE+0x72>
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	2b29      	cmp	r3, #41	; 0x29
 80062ec:	d111      	bne.n	8006312 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2221      	movs	r2, #33	; 0x21
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2228      	movs	r2, #40	; 0x28
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff f9f1 	bl	80056f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d011      	beq.n	8006350 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	1c5a      	adds	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d02c      	beq.n	80063ce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d114      	bne.n	80063ce <I2C_SlaveReceive_RXNE+0x74>
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	2b2a      	cmp	r3, #42	; 0x2a
 80063a8:	d111      	bne.n	80063ce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2222      	movs	r2, #34	; 0x22
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2228      	movs	r2, #40	; 0x28
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff f99c 	bl	8005706 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d012      	beq.n	800640e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691a      	ldr	r2, [r3, #16]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr

08006418 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006432:	2b28      	cmp	r3, #40	; 0x28
 8006434:	d127      	bne.n	8006486 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006444:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006452:	2301      	movs	r3, #1
 8006454:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	09db      	lsrs	r3, r3, #7
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d103      	bne.n	800646a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	81bb      	strh	r3, [r7, #12]
 8006468:	e002      	b.n	8006470 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006478:	89ba      	ldrh	r2, [r7, #12]
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff f94a 	bl	8005718 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006484:	e00e      	b.n	80064a4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006486:	2300      	movs	r3, #0
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	60bb      	str	r3, [r7, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006508:	d172      	bne.n	80065f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	2b22      	cmp	r3, #34	; 0x22
 800650e:	d002      	beq.n	8006516 <I2C_Slave_STOPF+0x6a>
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b2a      	cmp	r3, #42	; 0x2a
 8006514:	d135      	bne.n	8006582 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0204 	orr.w	r2, r3, #4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006548:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd fe60 	bl	8004214 <HAL_DMA_GetState>
 8006554:	4603      	mov	r3, r0
 8006556:	2b01      	cmp	r3, #1
 8006558:	d049      	beq.n	80065ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	4a69      	ldr	r2, [pc, #420]	; (8006704 <I2C_Slave_STOPF+0x258>)
 8006560:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	4618      	mov	r0, r3
 8006568:	f7fd fd4c 	bl	8004004 <HAL_DMA_Abort_IT>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d03d      	beq.n	80065ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006580:	e035      	b.n	80065ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fd fe2a 	bl	8004214 <HAL_DMA_GetState>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d014      	beq.n	80065f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	4a4e      	ldr	r2, [pc, #312]	; (8006704 <I2C_Slave_STOPF+0x258>)
 80065cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fd16 	bl	8004004 <HAL_DMA_Abort_IT>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	e000      	b.n	80065f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d03e      	beq.n	8006678 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b04      	cmp	r3, #4
 8006606:	d112      	bne.n	800662e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006624:	b29b      	uxth	r3, r3
 8006626:	3b01      	subs	r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d112      	bne.n	8006662 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	f043 0204 	orr.w	r2, r3, #4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8b3 	bl	80067ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006686:	e039      	b.n	80066fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b2a      	cmp	r3, #42	; 0x2a
 800668c:	d109      	bne.n	80066a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2228      	movs	r2, #40	; 0x28
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff f832 	bl	8005706 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b28      	cmp	r3, #40	; 0x28
 80066ac:	d111      	bne.n	80066d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a15      	ldr	r2, [pc, #84]	; (8006708 <I2C_Slave_STOPF+0x25c>)
 80066b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff f831 	bl	8005732 <HAL_I2C_ListenCpltCallback>
}
 80066d0:	e014      	b.n	80066fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	2b22      	cmp	r3, #34	; 0x22
 80066d8:	d002      	beq.n	80066e0 <I2C_Slave_STOPF+0x234>
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b22      	cmp	r3, #34	; 0x22
 80066de:	d10d      	bne.n	80066fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff f805 	bl	8005706 <HAL_I2C_SlaveRxCpltCallback>
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	08006d4d 	.word	0x08006d4d
 8006708:	ffff0000 	.word	0xffff0000

0800670c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b08      	cmp	r3, #8
 8006726:	d002      	beq.n	800672e <I2C_Slave_AF+0x22>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b20      	cmp	r3, #32
 800672c:	d129      	bne.n	8006782 <I2C_Slave_AF+0x76>
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b28      	cmp	r3, #40	; 0x28
 8006732:	d126      	bne.n	8006782 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <I2C_Slave_AF+0xdc>)
 8006738:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006748:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006752:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006762:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fe ffd9 	bl	8005732 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006780:	e02e      	b.n	80067e0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	2b21      	cmp	r3, #33	; 0x21
 8006786:	d126      	bne.n	80067d6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <I2C_Slave_AF+0xdc>)
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2221      	movs	r2, #33	; 0x21
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067bc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067cc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fe ff90 	bl	80056f4 <HAL_I2C_SlaveTxCpltCallback>
}
 80067d4:	e004      	b.n	80067e0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067de:	615a      	str	r2, [r3, #20]
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	ffff0000 	.word	0xffff0000

080067ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006802:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b10      	cmp	r3, #16
 8006808:	d002      	beq.n	8006810 <I2C_ITError+0x24>
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	d10a      	bne.n	8006826 <I2C_ITError+0x3a>
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	2b22      	cmp	r3, #34	; 0x22
 8006814:	d107      	bne.n	8006826 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006824:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800682c:	2b28      	cmp	r3, #40	; 0x28
 800682e:	d107      	bne.n	8006840 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2228      	movs	r2, #40	; 0x28
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800683e:	e015      	b.n	800686c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800684a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800684e:	d00a      	beq.n	8006866 <I2C_ITError+0x7a>
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b60      	cmp	r3, #96	; 0x60
 8006854:	d007      	beq.n	8006866 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800687a:	d161      	bne.n	8006940 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800688a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006894:	2b01      	cmp	r3, #1
 8006896:	d020      	beq.n	80068da <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	4a6a      	ldr	r2, [pc, #424]	; (8006a48 <I2C_ITError+0x25c>)
 800689e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fd fbad 	bl	8004004 <HAL_DMA_Abort_IT>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8089 	beq.w	80069c4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0201 	bic.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068d4:	4610      	mov	r0, r2
 80068d6:	4798      	blx	r3
 80068d8:	e074      	b.n	80069c4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	4a5a      	ldr	r2, [pc, #360]	; (8006a48 <I2C_ITError+0x25c>)
 80068e0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd fb8c 	bl	8004004 <HAL_DMA_Abort_IT>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d068      	beq.n	80069c4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d10b      	bne.n	8006918 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691a      	ldr	r2, [r3, #16]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0201 	bic.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800693a:	4610      	mov	r0, r2
 800693c:	4798      	blx	r3
 800693e:	e041      	b.n	80069c4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b60      	cmp	r3, #96	; 0x60
 800694a:	d125      	bne.n	8006998 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d10b      	bne.n	8006980 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691a      	ldr	r2, [r3, #16]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe fef2 	bl	800577a <HAL_I2C_AbortCpltCallback>
 8006996:	e015      	b.n	80069c4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d10b      	bne.n	80069be <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fe fed2 	bl	8005768 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10e      	bne.n	80069f2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a00:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d113      	bne.n	8006a3e <I2C_ITError+0x252>
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	2b28      	cmp	r3, #40	; 0x28
 8006a1a:	d110      	bne.n	8006a3e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a0b      	ldr	r2, [pc, #44]	; (8006a4c <I2C_ITError+0x260>)
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7fe fe7a 	bl	8005732 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	08006d4d 	.word	0x08006d4d
 8006a4c:	ffff0000 	.word	0xffff0000

08006a50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	817b      	strh	r3, [r7, #10]
 8006a62:	460b      	mov	r3, r1
 8006a64:	813b      	strh	r3, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fa08 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aa0:	d103      	bne.n	8006aaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e05f      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aae:	897b      	ldrh	r3, [r7, #10]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006abc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	492d      	ldr	r1, [pc, #180]	; (8006b78 <I2C_RequestMemoryWrite+0x128>)
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fa40 	bl	8006f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e04c      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aec:	6a39      	ldr	r1, [r7, #32]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 faaa 	bl	8007048 <I2C_WaitOnTXEFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d107      	bne.n	8006b12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e02b      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d105      	bne.n	8006b28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b1c:	893b      	ldrh	r3, [r7, #8]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	611a      	str	r2, [r3, #16]
 8006b26:	e021      	b.n	8006b6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b28:	893b      	ldrh	r3, [r7, #8]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b2da      	uxtb	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b38:	6a39      	ldr	r1, [r7, #32]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fa84 	bl	8007048 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d107      	bne.n	8006b5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e005      	b.n	8006b6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b62:	893b      	ldrh	r3, [r7, #8]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	00010002 	.word	0x00010002

08006b7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	817b      	strh	r3, [r7, #10]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	813b      	strh	r3, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f96a 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00d      	beq.n	8006bea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bdc:	d103      	bne.n	8006be6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e0aa      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bea:	897b      	ldrh	r3, [r7, #10]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	4952      	ldr	r1, [pc, #328]	; (8006d48 <I2C_RequestMemoryRead+0x1cc>)
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f9a2 	bl	8006f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e097      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c28:	6a39      	ldr	r1, [r7, #32]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fa0c 	bl	8007048 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00d      	beq.n	8006c52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d107      	bne.n	8006c4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e076      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d105      	bne.n	8006c64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	611a      	str	r2, [r3, #16]
 8006c62:	e021      	b.n	8006ca8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c64:	893b      	ldrh	r3, [r7, #8]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c74:	6a39      	ldr	r1, [r7, #32]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f9e6 	bl	8007048 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d107      	bne.n	8006c9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e050      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c9e:	893b      	ldrh	r3, [r7, #8]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	6a39      	ldr	r1, [r7, #32]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f9cb 	bl	8007048 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00d      	beq.n	8006cd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d107      	bne.n	8006cd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e035      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 f8d3 	bl	8006e9c <I2C_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00d      	beq.n	8006d18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d103      	bne.n	8006d14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e013      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d18:	897b      	ldrh	r3, [r7, #10]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f043 0301 	orr.w	r3, r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	4906      	ldr	r1, [pc, #24]	; (8006d48 <I2C_RequestMemoryRead+0x1cc>)
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f90b 	bl	8006f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	00010002 	.word	0x00010002

08006d4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d66:	4b4b      	ldr	r3, [pc, #300]	; (8006e94 <I2C_DMAAbort+0x148>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	08db      	lsrs	r3, r3, #3
 8006d6c:	4a4a      	ldr	r2, [pc, #296]	; (8006e98 <I2C_DMAAbort+0x14c>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	0a1a      	lsrs	r2, r3, #8
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	00da      	lsls	r2, r3, #3
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f043 0220 	orr.w	r2, r3, #32
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006d92:	e00a      	b.n	8006daa <I2C_DMAAbort+0x5e>
    }
    count--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da8:	d0ea      	beq.n	8006d80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db6:	2200      	movs	r2, #0
 8006db8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dec:	2200      	movs	r2, #0
 8006dee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b60      	cmp	r3, #96	; 0x60
 8006e1a:	d10e      	bne.n	8006e3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f7fe fca1 	bl	800577a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e38:	e027      	b.n	8006e8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e40:	2b28      	cmp	r3, #40	; 0x28
 8006e42:	d117      	bne.n	8006e74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2200      	movs	r2, #0
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2228      	movs	r2, #40	; 0x28
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e72:	e007      	b.n	8006e84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006e84:	6978      	ldr	r0, [r7, #20]
 8006e86:	f7fe fc6f 	bl	8005768 <HAL_I2C_ErrorCallback>
}
 8006e8a:	bf00      	nop
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000098 	.word	0x20000098
 8006e98:	14f8b589 	.word	0x14f8b589

08006e9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eac:	e025      	b.n	8006efa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb4:	d021      	beq.n	8006efa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb6:	f7fc f8a3 	bl	8003000 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d302      	bcc.n	8006ecc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d116      	bne.n	8006efa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	f043 0220 	orr.w	r2, r3, #32
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e023      	b.n	8006f42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10d      	bne.n	8006f20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	43da      	mvns	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bf0c      	ite	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	2300      	movne	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	e00c      	b.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	43da      	mvns	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf0c      	ite	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	2300      	movne	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d0b6      	beq.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f58:	e051      	b.n	8006ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f68:	d123      	bne.n	8006fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f043 0204 	orr.w	r2, r3, #4
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e046      	b.n	8007040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb8:	d021      	beq.n	8006ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fba:	f7fc f821 	bl	8003000 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d302      	bcc.n	8006fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d116      	bne.n	8006ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	f043 0220 	orr.w	r2, r3, #32
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e020      	b.n	8007040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	0c1b      	lsrs	r3, r3, #16
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b01      	cmp	r3, #1
 8007006:	d10c      	bne.n	8007022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	43da      	mvns	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4013      	ands	r3, r2
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf14      	ite	ne
 800701a:	2301      	movne	r3, #1
 800701c:	2300      	moveq	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	e00b      	b.n	800703a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	43da      	mvns	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d18d      	bne.n	8006f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007054:	e02d      	b.n	80070b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f900 	bl	800725c <I2C_IsAcknowledgeFailed>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e02d      	b.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706c:	d021      	beq.n	80070b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800706e:	f7fb ffc7 	bl	8003000 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	d302      	bcc.n	8007084 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d116      	bne.n	80070b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	f043 0220 	orr.w	r2, r3, #32
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e007      	b.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070bc:	2b80      	cmp	r3, #128	; 0x80
 80070be:	d1ca      	bne.n	8007056 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070d6:	e02d      	b.n	8007134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f8bf 	bl	800725c <I2C_IsAcknowledgeFailed>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e02d      	b.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ee:	d021      	beq.n	8007134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070f0:	f7fb ff86 	bl	8003000 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d302      	bcc.n	8007106 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d116      	bne.n	8007134 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e007      	b.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f003 0304 	and.w	r3, r3, #4
 800713e:	2b04      	cmp	r3, #4
 8007140:	d1ca      	bne.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007158:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	08db      	lsrs	r3, r3, #3
 800715e:	4a13      	ldr	r2, [pc, #76]	; (80071ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007160:	fba2 2303 	umull	r2, r3, r2, r3
 8007164:	0a1a      	lsrs	r2, r3, #8
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3b01      	subs	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d107      	bne.n	800718a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e008      	b.n	800719c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007198:	d0e9      	beq.n	800716e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	20000098 	.word	0x20000098
 80071ac:	14f8b589 	.word	0x14f8b589

080071b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071bc:	e042      	b.n	8007244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d119      	bne.n	8007200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f06f 0210 	mvn.w	r2, #16
 80071d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e029      	b.n	8007254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007200:	f7fb fefe 	bl	8003000 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	d302      	bcc.n	8007216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d116      	bne.n	8007244 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	f043 0220 	orr.w	r2, r3, #32
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e007      	b.n	8007254 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d1b5      	bne.n	80071be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800726e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007272:	d11b      	bne.n	80072ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800727c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	f043 0204 	orr.w	r2, r3, #4
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80072c8:	d103      	bne.n	80072d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80072d0:	e007      	b.n	80072e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80072da:	d102      	bne.n	80072e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2208      	movs	r2, #8
 80072e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80072e2:	bf00      	nop
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e304      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8087 	beq.w	800741a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800730c:	4b92      	ldr	r3, [pc, #584]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b04      	cmp	r3, #4
 8007316:	d00c      	beq.n	8007332 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007318:	4b8f      	ldr	r3, [pc, #572]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 030c 	and.w	r3, r3, #12
 8007320:	2b08      	cmp	r3, #8
 8007322:	d112      	bne.n	800734a <HAL_RCC_OscConfig+0x5e>
 8007324:	4b8c      	ldr	r3, [pc, #560]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007330:	d10b      	bne.n	800734a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007332:	4b89      	ldr	r3, [pc, #548]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d06c      	beq.n	8007418 <HAL_RCC_OscConfig+0x12c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d168      	bne.n	8007418 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e2de      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007352:	d106      	bne.n	8007362 <HAL_RCC_OscConfig+0x76>
 8007354:	4b80      	ldr	r3, [pc, #512]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a7f      	ldr	r2, [pc, #508]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800735a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	e02e      	b.n	80073c0 <HAL_RCC_OscConfig+0xd4>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10c      	bne.n	8007384 <HAL_RCC_OscConfig+0x98>
 800736a:	4b7b      	ldr	r3, [pc, #492]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a7a      	ldr	r2, [pc, #488]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4b78      	ldr	r3, [pc, #480]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a77      	ldr	r2, [pc, #476]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800737c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e01d      	b.n	80073c0 <HAL_RCC_OscConfig+0xd4>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800738c:	d10c      	bne.n	80073a8 <HAL_RCC_OscConfig+0xbc>
 800738e:	4b72      	ldr	r3, [pc, #456]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a71      	ldr	r2, [pc, #452]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	4b6f      	ldr	r3, [pc, #444]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a6e      	ldr	r2, [pc, #440]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	e00b      	b.n	80073c0 <HAL_RCC_OscConfig+0xd4>
 80073a8:	4b6b      	ldr	r3, [pc, #428]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a6a      	ldr	r2, [pc, #424]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4b68      	ldr	r3, [pc, #416]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a67      	ldr	r2, [pc, #412]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d013      	beq.n	80073f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c8:	f7fb fe1a 	bl	8003000 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073d0:	f7fb fe16 	bl	8003000 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b64      	cmp	r3, #100	; 0x64
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e292      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	4b5d      	ldr	r3, [pc, #372]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0xe4>
 80073ee:	e014      	b.n	800741a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f0:	f7fb fe06 	bl	8003000 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073f8:	f7fb fe02 	bl	8003000 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b64      	cmp	r3, #100	; 0x64
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e27e      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800740a:	4b53      	ldr	r3, [pc, #332]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f0      	bne.n	80073f8 <HAL_RCC_OscConfig+0x10c>
 8007416:	e000      	b.n	800741a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d063      	beq.n	80074ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007426:	4b4c      	ldr	r3, [pc, #304]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f003 030c 	and.w	r3, r3, #12
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007432:	4b49      	ldr	r3, [pc, #292]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 030c 	and.w	r3, r3, #12
 800743a:	2b08      	cmp	r3, #8
 800743c:	d11c      	bne.n	8007478 <HAL_RCC_OscConfig+0x18c>
 800743e:	4b46      	ldr	r3, [pc, #280]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d116      	bne.n	8007478 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800744a:	4b43      	ldr	r3, [pc, #268]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_RCC_OscConfig+0x176>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d001      	beq.n	8007462 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e252      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007462:	4b3d      	ldr	r3, [pc, #244]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	4939      	ldr	r1, [pc, #228]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007472:	4313      	orrs	r3, r2
 8007474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007476:	e03a      	b.n	80074ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d020      	beq.n	80074c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007480:	4b36      	ldr	r3, [pc, #216]	; (800755c <HAL_RCC_OscConfig+0x270>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007486:	f7fb fdbb 	bl	8003000 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800748e:	f7fb fdb7 	bl	8003000 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e233      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a0:	4b2d      	ldr	r3, [pc, #180]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ac:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	4927      	ldr	r1, [pc, #156]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	600b      	str	r3, [r1, #0]
 80074c0:	e015      	b.n	80074ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <HAL_RCC_OscConfig+0x270>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c8:	f7fb fd9a 	bl	8003000 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074d0:	f7fb fd96 	bl	8003000 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e212      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f0      	bne.n	80074d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d03a      	beq.n	8007570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d019      	beq.n	8007536 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007502:	4b17      	ldr	r3, [pc, #92]	; (8007560 <HAL_RCC_OscConfig+0x274>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007508:	f7fb fd7a 	bl	8003000 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007510:	f7fb fd76 	bl	8003000 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e1f2      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007522:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <HAL_RCC_OscConfig+0x26c>)
 8007524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800752e:	2001      	movs	r0, #1
 8007530:	f000 fbb6 	bl	8007ca0 <RCC_Delay>
 8007534:	e01c      	b.n	8007570 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007536:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <HAL_RCC_OscConfig+0x274>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800753c:	f7fb fd60 	bl	8003000 <HAL_GetTick>
 8007540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007542:	e00f      	b.n	8007564 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007544:	f7fb fd5c 	bl	8003000 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b02      	cmp	r3, #2
 8007550:	d908      	bls.n	8007564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e1d8      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
 8007556:	bf00      	nop
 8007558:	40021000 	.word	0x40021000
 800755c:	42420000 	.word	0x42420000
 8007560:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007564:	4b9b      	ldr	r3, [pc, #620]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e9      	bne.n	8007544 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 80a6 	beq.w	80076ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007582:	4b94      	ldr	r3, [pc, #592]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10d      	bne.n	80075aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800758e:	4b91      	ldr	r3, [pc, #580]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4a90      	ldr	r2, [pc, #576]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007598:	61d3      	str	r3, [r2, #28]
 800759a:	4b8e      	ldr	r3, [pc, #568]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a2:	60bb      	str	r3, [r7, #8]
 80075a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075a6:	2301      	movs	r3, #1
 80075a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075aa:	4b8b      	ldr	r3, [pc, #556]	; (80077d8 <HAL_RCC_OscConfig+0x4ec>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d118      	bne.n	80075e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075b6:	4b88      	ldr	r3, [pc, #544]	; (80077d8 <HAL_RCC_OscConfig+0x4ec>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a87      	ldr	r2, [pc, #540]	; (80077d8 <HAL_RCC_OscConfig+0x4ec>)
 80075bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075c2:	f7fb fd1d 	bl	8003000 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c8:	e008      	b.n	80075dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ca:	f7fb fd19 	bl	8003000 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b64      	cmp	r3, #100	; 0x64
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e195      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075dc:	4b7e      	ldr	r3, [pc, #504]	; (80077d8 <HAL_RCC_OscConfig+0x4ec>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0f0      	beq.n	80075ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x312>
 80075f0:	4b78      	ldr	r3, [pc, #480]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	4a77      	ldr	r2, [pc, #476]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	6213      	str	r3, [r2, #32]
 80075fc:	e02d      	b.n	800765a <HAL_RCC_OscConfig+0x36e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x334>
 8007606:	4b73      	ldr	r3, [pc, #460]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	4a72      	ldr	r2, [pc, #456]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	6213      	str	r3, [r2, #32]
 8007612:	4b70      	ldr	r3, [pc, #448]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	4a6f      	ldr	r2, [pc, #444]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007618:	f023 0304 	bic.w	r3, r3, #4
 800761c:	6213      	str	r3, [r2, #32]
 800761e:	e01c      	b.n	800765a <HAL_RCC_OscConfig+0x36e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b05      	cmp	r3, #5
 8007626:	d10c      	bne.n	8007642 <HAL_RCC_OscConfig+0x356>
 8007628:	4b6a      	ldr	r3, [pc, #424]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	4a69      	ldr	r2, [pc, #420]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800762e:	f043 0304 	orr.w	r3, r3, #4
 8007632:	6213      	str	r3, [r2, #32]
 8007634:	4b67      	ldr	r3, [pc, #412]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	4a66      	ldr	r2, [pc, #408]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6213      	str	r3, [r2, #32]
 8007640:	e00b      	b.n	800765a <HAL_RCC_OscConfig+0x36e>
 8007642:	4b64      	ldr	r3, [pc, #400]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	4a63      	ldr	r2, [pc, #396]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007648:	f023 0301 	bic.w	r3, r3, #1
 800764c:	6213      	str	r3, [r2, #32]
 800764e:	4b61      	ldr	r3, [pc, #388]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	4a60      	ldr	r2, [pc, #384]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007654:	f023 0304 	bic.w	r3, r3, #4
 8007658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d015      	beq.n	800768e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007662:	f7fb fccd 	bl	8003000 <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007668:	e00a      	b.n	8007680 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7fb fcc9 	bl	8003000 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f241 3288 	movw	r2, #5000	; 0x1388
 8007678:	4293      	cmp	r3, r2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e143      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007680:	4b54      	ldr	r3, [pc, #336]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0ee      	beq.n	800766a <HAL_RCC_OscConfig+0x37e>
 800768c:	e014      	b.n	80076b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7fb fcb7 	bl	8003000 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007694:	e00a      	b.n	80076ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007696:	f7fb fcb3 	bl	8003000 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e12d      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ac:	4b49      	ldr	r3, [pc, #292]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ee      	bne.n	8007696 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d105      	bne.n	80076ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076be:	4b45      	ldr	r3, [pc, #276]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4a44      	ldr	r2, [pc, #272]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 808c 	beq.w	80077ec <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80076d4:	4b3f      	ldr	r3, [pc, #252]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e0:	d10e      	bne.n	8007700 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80076e2:	4b3c      	ldr	r3, [pc, #240]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80076ea:	2b08      	cmp	r3, #8
 80076ec:	d108      	bne.n	8007700 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80076ee:	4b39      	ldr	r3, [pc, #228]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80076f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fa:	d101      	bne.n	8007700 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e103      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	2b02      	cmp	r3, #2
 8007706:	d14e      	bne.n	80077a6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007708:	4b32      	ldr	r3, [pc, #200]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d009      	beq.n	8007728 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007714:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007720:	429a      	cmp	r2, r3
 8007722:	d001      	beq.n	8007728 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e0ef      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007728:	4b2c      	ldr	r3, [pc, #176]	; (80077dc <HAL_RCC_OscConfig+0x4f0>)
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772e:	f7fb fc67 	bl	8003000 <HAL_GetTick>
 8007732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007734:	e008      	b.n	8007748 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007736:	f7fb fc63 	bl	8003000 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b64      	cmp	r3, #100	; 0x64
 8007742:	d901      	bls.n	8007748 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e0df      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007748:	4b22      	ldr	r3, [pc, #136]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f0      	bne.n	8007736 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8007754:	4b1f      	ldr	r3, [pc, #124]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007760:	491c      	ldr	r1, [pc, #112]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007762:	4313      	orrs	r3, r2
 8007764:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8007766:	4b1b      	ldr	r3, [pc, #108]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	4918      	ldr	r1, [pc, #96]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 8007774:	4313      	orrs	r3, r2
 8007776:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8007778:	4b18      	ldr	r3, [pc, #96]	; (80077dc <HAL_RCC_OscConfig+0x4f0>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800777e:	f7fb fc3f 	bl	8003000 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007786:	f7fb fc3b 	bl	8003000 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b64      	cmp	r3, #100	; 0x64
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e0b7      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007798:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x49a>
 80077a4:	e022      	b.n	80077ec <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	4a0a      	ldr	r2, [pc, #40]	; (80077d4 <HAL_RCC_OscConfig+0x4e8>)
 80077ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80077b2:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <HAL_RCC_OscConfig+0x4f0>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b8:	f7fb fc22 	bl	8003000 <HAL_GetTick>
 80077bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80077be:	e00f      	b.n	80077e0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077c0:	f7fb fc1e 	bl	8003000 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b64      	cmp	r3, #100	; 0x64
 80077cc:	d908      	bls.n	80077e0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e09a      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
 80077d2:	bf00      	nop
 80077d4:	40021000 	.word	0x40021000
 80077d8:	40007000 	.word	0x40007000
 80077dc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80077e0:	4b4b      	ldr	r3, [pc, #300]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e9      	bne.n	80077c0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8088 	beq.w	8007906 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80077f6:	4b46      	ldr	r3, [pc, #280]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f003 030c 	and.w	r3, r3, #12
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d068      	beq.n	80078d4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d14d      	bne.n	80078a6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780a:	4b42      	ldr	r3, [pc, #264]	; (8007914 <HAL_RCC_OscConfig+0x628>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fb fbf6 	bl	8003000 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007818:	f7fb fbf2 	bl	8003000 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e06e      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800782a:	4b39      	ldr	r3, [pc, #228]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783e:	d10f      	bne.n	8007860 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007840:	4b33      	ldr	r3, [pc, #204]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4931      	ldr	r1, [pc, #196]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 800784a:	4313      	orrs	r3, r2
 800784c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800784e:	4b30      	ldr	r3, [pc, #192]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	f023 020f 	bic.w	r2, r3, #15
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	492d      	ldr	r1, [pc, #180]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 800785c:	4313      	orrs	r3, r2
 800785e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007860:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007870:	430b      	orrs	r3, r1
 8007872:	4927      	ldr	r1, [pc, #156]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 8007874:	4313      	orrs	r3, r2
 8007876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007878:	4b26      	ldr	r3, [pc, #152]	; (8007914 <HAL_RCC_OscConfig+0x628>)
 800787a:	2201      	movs	r2, #1
 800787c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787e:	f7fb fbbf 	bl	8003000 <HAL_GetTick>
 8007882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007884:	e008      	b.n	8007898 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007886:	f7fb fbbb 	bl	8003000 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e037      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007898:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0f0      	beq.n	8007886 <HAL_RCC_OscConfig+0x59a>
 80078a4:	e02f      	b.n	8007906 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078a6:	4b1b      	ldr	r3, [pc, #108]	; (8007914 <HAL_RCC_OscConfig+0x628>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ac:	f7fb fba8 	bl	8003000 <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078b2:	e008      	b.n	80078c6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078b4:	f7fb fba4 	bl	8003000 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d901      	bls.n	80078c6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e020      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078c6:	4b12      	ldr	r3, [pc, #72]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f0      	bne.n	80078b4 <HAL_RCC_OscConfig+0x5c8>
 80078d2:	e018      	b.n	8007906 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e013      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_RCC_OscConfig+0x624>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d106      	bne.n	8007902 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078fe:	429a      	cmp	r2, r3
 8007900:	d001      	beq.n	8007906 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e000      	b.n	8007908 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	40021000 	.word	0x40021000
 8007914:	42420060 	.word	0x42420060

08007918 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e0d0      	b.n	8007ace <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800792c:	4b6a      	ldr	r3, [pc, #424]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0307 	and.w	r3, r3, #7
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d910      	bls.n	800795c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800793a:	4b67      	ldr	r3, [pc, #412]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f023 0207 	bic.w	r2, r3, #7
 8007942:	4965      	ldr	r1, [pc, #404]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	4313      	orrs	r3, r2
 8007948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800794a:	4b63      	ldr	r3, [pc, #396]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d001      	beq.n	800795c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e0b8      	b.n	8007ace <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d020      	beq.n	80079aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007974:	4b59      	ldr	r3, [pc, #356]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4a58      	ldr	r2, [pc, #352]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 800797a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800797e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800798c:	4b53      	ldr	r3, [pc, #332]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4a52      	ldr	r2, [pc, #328]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007992:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007996:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007998:	4b50      	ldr	r3, [pc, #320]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	494d      	ldr	r1, [pc, #308]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d040      	beq.n	8007a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d107      	bne.n	80079ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079be:	4b47      	ldr	r3, [pc, #284]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d115      	bne.n	80079f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e07f      	b.n	8007ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d107      	bne.n	80079e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079d6:	4b41      	ldr	r3, [pc, #260]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e073      	b.n	8007ace <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e6:	4b3d      	ldr	r3, [pc, #244]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e06b      	b.n	8007ace <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079f6:	4b39      	ldr	r3, [pc, #228]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f023 0203 	bic.w	r2, r3, #3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4936      	ldr	r1, [pc, #216]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a08:	f7fb fafa 	bl	8003000 <HAL_GetTick>
 8007a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a0e:	e00a      	b.n	8007a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a10:	f7fb faf6 	bl	8003000 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e053      	b.n	8007ace <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a26:	4b2d      	ldr	r3, [pc, #180]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f003 020c 	and.w	r2, r3, #12
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d1eb      	bne.n	8007a10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a38:	4b27      	ldr	r3, [pc, #156]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d210      	bcs.n	8007a68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a46:	4b24      	ldr	r3, [pc, #144]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f023 0207 	bic.w	r2, r3, #7
 8007a4e:	4922      	ldr	r1, [pc, #136]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a56:	4b20      	ldr	r3, [pc, #128]	; (8007ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d001      	beq.n	8007a68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e032      	b.n	8007ace <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d008      	beq.n	8007a86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a74:	4b19      	ldr	r3, [pc, #100]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	4916      	ldr	r1, [pc, #88]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007a92:	4b12      	ldr	r3, [pc, #72]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	490e      	ldr	r1, [pc, #56]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007aa6:	f000 f821 	bl	8007aec <HAL_RCC_GetSysClockFreq>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	4b0b      	ldr	r3, [pc, #44]	; (8007adc <HAL_RCC_ClockConfig+0x1c4>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	091b      	lsrs	r3, r3, #4
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	490a      	ldr	r1, [pc, #40]	; (8007ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ab8:	5ccb      	ldrb	r3, [r1, r3]
 8007aba:	fa22 f303 	lsr.w	r3, r2, r3
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <HAL_RCC_ClockConfig+0x1cc>)
 8007ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ac2:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <HAL_RCC_ClockConfig+0x1d0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fb fa58 	bl	8002f7c <HAL_InitTick>

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40022000 	.word	0x40022000
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	080092d0 	.word	0x080092d0
 8007ae4:	20000098 	.word	0x20000098
 8007ae8:	2000009c 	.word	0x2000009c

08007aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aee:	b091      	sub	sp, #68	; 0x44
 8007af0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8007af2:	4b56      	ldr	r3, [pc, #344]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x160>)
 8007af4:	f107 0414 	add.w	r4, r7, #20
 8007af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007afa:	c407      	stmia	r4!, {r0, r1, r2}
 8007afc:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8007afe:	4b54      	ldr	r3, [pc, #336]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x164>)
 8007b00:	1d3c      	adds	r4, r7, #4
 8007b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b10:	2300      	movs	r3, #0
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b14:	2300      	movs	r3, #0
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b20:	2300      	movs	r3, #0
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007b24:	4b4b      	ldr	r3, [pc, #300]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x168>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	f003 030c 	and.w	r3, r3, #12
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d002      	beq.n	8007b3a <HAL_RCC_GetSysClockFreq+0x4e>
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d003      	beq.n	8007b40 <HAL_RCC_GetSysClockFreq+0x54>
 8007b38:	e080      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b3a:	4b47      	ldr	r3, [pc, #284]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b3e:	e080      	b.n	8007c42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	0c9b      	lsrs	r3, r3, #18
 8007b44:	f003 030f 	and.w	r3, r3, #15
 8007b48:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d066      	beq.n	8007c2c <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007b5e:	4b3d      	ldr	r3, [pc, #244]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x168>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007b70:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007b72:	4b38      	ldr	r3, [pc, #224]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x168>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d044      	beq.n	8007c08 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007b7e:	4b35      	ldr	r3, [pc, #212]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x168>)
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	091b      	lsrs	r3, r3, #4
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	3301      	adds	r3, #1
 8007b8a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007b8c:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x168>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	3302      	adds	r3, #2
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f04f 0100 	mov.w	r1, #0
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	fb02 f501 	mul.w	r5, r2, r1
 8007bae:	fb00 f403 	mul.w	r4, r0, r3
 8007bb2:	442c      	add	r4, r5
 8007bb4:	fba0 2302 	umull	r2, r3, r0, r2
 8007bb8:	18e1      	adds	r1, r4, r3
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4926      	ldr	r1, [pc, #152]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007bbe:	fb01 f003 	mul.w	r0, r1, r3
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	fb01 f102 	mul.w	r1, r1, r2
 8007bc8:	4401      	add	r1, r0
 8007bca:	4823      	ldr	r0, [pc, #140]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007bcc:	fba2 4500 	umull	r4, r5, r2, r0
 8007bd0:	194b      	adds	r3, r1, r5
 8007bd2:	461d      	mov	r5, r3
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f04f 0100 	mov.w	r1, #0
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	461a      	mov	r2, r3
 8007be0:	f04f 0300 	mov.w	r3, #0
 8007be4:	fb02 fc01 	mul.w	ip, r2, r1
 8007be8:	fb00 f603 	mul.w	r6, r0, r3
 8007bec:	4466      	add	r6, ip
 8007bee:	fba0 2302 	umull	r2, r3, r0, r2
 8007bf2:	18f1      	adds	r1, r6, r3
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f7f9 fa07 	bl	800100c <__aeabi_uldivmod>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	4613      	mov	r3, r2
 8007c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c06:	e007      	b.n	8007c18 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	4a13      	ldr	r2, [pc, #76]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007c0c:	fb02 f203 	mul.w	r2, r2, r3
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007c18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d108      	bne.n	8007c36 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8007c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c2a:	e004      	b.n	8007c36 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	4a0b      	ldr	r2, [pc, #44]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x170>)
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8007c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c3a:	e002      	b.n	8007c42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c3c:	4b08      	ldr	r3, [pc, #32]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x174>)
 8007c3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3744      	adds	r7, #68	; 0x44
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c4c:	080092b0 	.word	0x080092b0
 8007c50:	080092c0 	.word	0x080092c0
 8007c54:	40021000 	.word	0x40021000
 8007c58:	017d7840 	.word	0x017d7840
 8007c5c:	003d0900 	.word	0x003d0900
 8007c60:	007a1200 	.word	0x007a1200

08007c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c68:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <HAL_RCC_GetHCLKFreq+0x10>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bc80      	pop	{r7}
 8007c72:	4770      	bx	lr
 8007c74:	20000098 	.word	0x20000098

08007c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c7c:	f7ff fff2 	bl	8007c64 <HAL_RCC_GetHCLKFreq>
 8007c80:	4602      	mov	r2, r0
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	4903      	ldr	r1, [pc, #12]	; (8007c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c8e:	5ccb      	ldrb	r3, [r1, r3]
 8007c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	080092e0 	.word	0x080092e0

08007ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <RCC_Delay+0x34>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a0a      	ldr	r2, [pc, #40]	; (8007cd8 <RCC_Delay+0x38>)
 8007cae:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb2:	0a5b      	lsrs	r3, r3, #9
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007cbc:	bf00      	nop
  }
  while (Delay --);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1e5a      	subs	r2, r3, #1
 8007cc2:	60fa      	str	r2, [r7, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f9      	bne.n	8007cbc <RCC_Delay+0x1c>
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr
 8007cd4:	20000098 	.word	0x20000098
 8007cd8:	10624dd3 	.word	0x10624dd3

08007cdc <__errno>:
 8007cdc:	4b01      	ldr	r3, [pc, #4]	; (8007ce4 <__errno+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	200000a4 	.word	0x200000a4

08007ce8 <__libc_init_array>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	2600      	movs	r6, #0
 8007cec:	4d0c      	ldr	r5, [pc, #48]	; (8007d20 <__libc_init_array+0x38>)
 8007cee:	4c0d      	ldr	r4, [pc, #52]	; (8007d24 <__libc_init_array+0x3c>)
 8007cf0:	1b64      	subs	r4, r4, r5
 8007cf2:	10a4      	asrs	r4, r4, #2
 8007cf4:	42a6      	cmp	r6, r4
 8007cf6:	d109      	bne.n	8007d0c <__libc_init_array+0x24>
 8007cf8:	f001 fabc 	bl	8009274 <_init>
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	4d0a      	ldr	r5, [pc, #40]	; (8007d28 <__libc_init_array+0x40>)
 8007d00:	4c0a      	ldr	r4, [pc, #40]	; (8007d2c <__libc_init_array+0x44>)
 8007d02:	1b64      	subs	r4, r4, r5
 8007d04:	10a4      	asrs	r4, r4, #2
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	d105      	bne.n	8007d16 <__libc_init_array+0x2e>
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d10:	4798      	blx	r3
 8007d12:	3601      	adds	r6, #1
 8007d14:	e7ee      	b.n	8007cf4 <__libc_init_array+0xc>
 8007d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1a:	4798      	blx	r3
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	e7f2      	b.n	8007d06 <__libc_init_array+0x1e>
 8007d20:	080093f8 	.word	0x080093f8
 8007d24:	080093f8 	.word	0x080093f8
 8007d28:	080093f8 	.word	0x080093f8
 8007d2c:	080093fc 	.word	0x080093fc

08007d30 <memset>:
 8007d30:	4603      	mov	r3, r0
 8007d32:	4402      	add	r2, r0
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d100      	bne.n	8007d3a <memset+0xa>
 8007d38:	4770      	bx	lr
 8007d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d3e:	e7f9      	b.n	8007d34 <memset+0x4>

08007d40 <iprintf>:
 8007d40:	b40f      	push	{r0, r1, r2, r3}
 8007d42:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <iprintf+0x2c>)
 8007d44:	b513      	push	{r0, r1, r4, lr}
 8007d46:	681c      	ldr	r4, [r3, #0]
 8007d48:	b124      	cbz	r4, 8007d54 <iprintf+0x14>
 8007d4a:	69a3      	ldr	r3, [r4, #24]
 8007d4c:	b913      	cbnz	r3, 8007d54 <iprintf+0x14>
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 f866 	bl	8007e20 <__sinit>
 8007d54:	ab05      	add	r3, sp, #20
 8007d56:	4620      	mov	r0, r4
 8007d58:	9a04      	ldr	r2, [sp, #16]
 8007d5a:	68a1      	ldr	r1, [r4, #8]
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	f000 f981 	bl	8008064 <_vfiprintf_r>
 8007d62:	b002      	add	sp, #8
 8007d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d68:	b004      	add	sp, #16
 8007d6a:	4770      	bx	lr
 8007d6c:	200000a4 	.word	0x200000a4

08007d70 <std>:
 8007d70:	2300      	movs	r3, #0
 8007d72:	b510      	push	{r4, lr}
 8007d74:	4604      	mov	r4, r0
 8007d76:	e9c0 3300 	strd	r3, r3, [r0]
 8007d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d7e:	6083      	str	r3, [r0, #8]
 8007d80:	8181      	strh	r1, [r0, #12]
 8007d82:	6643      	str	r3, [r0, #100]	; 0x64
 8007d84:	81c2      	strh	r2, [r0, #14]
 8007d86:	6183      	str	r3, [r0, #24]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	2208      	movs	r2, #8
 8007d8c:	305c      	adds	r0, #92	; 0x5c
 8007d8e:	f7ff ffcf 	bl	8007d30 <memset>
 8007d92:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <std+0x38>)
 8007d94:	6224      	str	r4, [r4, #32]
 8007d96:	6263      	str	r3, [r4, #36]	; 0x24
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <std+0x3c>)
 8007d9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <std+0x40>)
 8007d9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <std+0x44>)
 8007da2:	6323      	str	r3, [r4, #48]	; 0x30
 8007da4:	bd10      	pop	{r4, pc}
 8007da6:	bf00      	nop
 8007da8:	08008611 	.word	0x08008611
 8007dac:	08008633 	.word	0x08008633
 8007db0:	0800866b 	.word	0x0800866b
 8007db4:	0800868f 	.word	0x0800868f

08007db8 <_cleanup_r>:
 8007db8:	4901      	ldr	r1, [pc, #4]	; (8007dc0 <_cleanup_r+0x8>)
 8007dba:	f000 b8af 	b.w	8007f1c <_fwalk_reent>
 8007dbe:	bf00      	nop
 8007dc0:	08008969 	.word	0x08008969

08007dc4 <__sfmoreglue>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	2568      	movs	r5, #104	; 0x68
 8007dc8:	1e4a      	subs	r2, r1, #1
 8007dca:	4355      	muls	r5, r2
 8007dcc:	460e      	mov	r6, r1
 8007dce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dd2:	f000 f8c5 	bl	8007f60 <_malloc_r>
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	b140      	cbz	r0, 8007dec <__sfmoreglue+0x28>
 8007dda:	2100      	movs	r1, #0
 8007ddc:	e9c0 1600 	strd	r1, r6, [r0]
 8007de0:	300c      	adds	r0, #12
 8007de2:	60a0      	str	r0, [r4, #8]
 8007de4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007de8:	f7ff ffa2 	bl	8007d30 <memset>
 8007dec:	4620      	mov	r0, r4
 8007dee:	bd70      	pop	{r4, r5, r6, pc}

08007df0 <__sfp_lock_acquire>:
 8007df0:	4801      	ldr	r0, [pc, #4]	; (8007df8 <__sfp_lock_acquire+0x8>)
 8007df2:	f000 b8b3 	b.w	8007f5c <__retarget_lock_acquire_recursive>
 8007df6:	bf00      	nop
 8007df8:	20000318 	.word	0x20000318

08007dfc <__sfp_lock_release>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	; (8007e04 <__sfp_lock_release+0x8>)
 8007dfe:	f000 b8ae 	b.w	8007f5e <__retarget_lock_release_recursive>
 8007e02:	bf00      	nop
 8007e04:	20000318 	.word	0x20000318

08007e08 <__sinit_lock_acquire>:
 8007e08:	4801      	ldr	r0, [pc, #4]	; (8007e10 <__sinit_lock_acquire+0x8>)
 8007e0a:	f000 b8a7 	b.w	8007f5c <__retarget_lock_acquire_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20000313 	.word	0x20000313

08007e14 <__sinit_lock_release>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__sinit_lock_release+0x8>)
 8007e16:	f000 b8a2 	b.w	8007f5e <__retarget_lock_release_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	20000313 	.word	0x20000313

08007e20 <__sinit>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4604      	mov	r4, r0
 8007e24:	f7ff fff0 	bl	8007e08 <__sinit_lock_acquire>
 8007e28:	69a3      	ldr	r3, [r4, #24]
 8007e2a:	b11b      	cbz	r3, 8007e34 <__sinit+0x14>
 8007e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e30:	f7ff bff0 	b.w	8007e14 <__sinit_lock_release>
 8007e34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e38:	6523      	str	r3, [r4, #80]	; 0x50
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <__sinit+0x68>)
 8007e3c:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <__sinit+0x6c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	bf08      	it	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	bf08      	it	eq
 8007e4c:	61a3      	streq	r3, [r4, #24]
 8007e4e:	f000 f81f 	bl	8007e90 <__sfp>
 8007e52:	6060      	str	r0, [r4, #4]
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f81b 	bl	8007e90 <__sfp>
 8007e5a:	60a0      	str	r0, [r4, #8]
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 f817 	bl	8007e90 <__sfp>
 8007e62:	2200      	movs	r2, #0
 8007e64:	2104      	movs	r1, #4
 8007e66:	60e0      	str	r0, [r4, #12]
 8007e68:	6860      	ldr	r0, [r4, #4]
 8007e6a:	f7ff ff81 	bl	8007d70 <std>
 8007e6e:	2201      	movs	r2, #1
 8007e70:	2109      	movs	r1, #9
 8007e72:	68a0      	ldr	r0, [r4, #8]
 8007e74:	f7ff ff7c 	bl	8007d70 <std>
 8007e78:	2202      	movs	r2, #2
 8007e7a:	2112      	movs	r1, #18
 8007e7c:	68e0      	ldr	r0, [r4, #12]
 8007e7e:	f7ff ff77 	bl	8007d70 <std>
 8007e82:	2301      	movs	r3, #1
 8007e84:	61a3      	str	r3, [r4, #24]
 8007e86:	e7d1      	b.n	8007e2c <__sinit+0xc>
 8007e88:	080092e8 	.word	0x080092e8
 8007e8c:	08007db9 	.word	0x08007db9

08007e90 <__sfp>:
 8007e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e92:	4607      	mov	r7, r0
 8007e94:	f7ff ffac 	bl	8007df0 <__sfp_lock_acquire>
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <__sfp+0x84>)
 8007e9a:	681e      	ldr	r6, [r3, #0]
 8007e9c:	69b3      	ldr	r3, [r6, #24]
 8007e9e:	b913      	cbnz	r3, 8007ea6 <__sfp+0x16>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff ffbd 	bl	8007e20 <__sinit>
 8007ea6:	3648      	adds	r6, #72	; 0x48
 8007ea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	d503      	bpl.n	8007eb8 <__sfp+0x28>
 8007eb0:	6833      	ldr	r3, [r6, #0]
 8007eb2:	b30b      	cbz	r3, 8007ef8 <__sfp+0x68>
 8007eb4:	6836      	ldr	r6, [r6, #0]
 8007eb6:	e7f7      	b.n	8007ea8 <__sfp+0x18>
 8007eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ebc:	b9d5      	cbnz	r5, 8007ef4 <__sfp+0x64>
 8007ebe:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <__sfp+0x88>)
 8007ec0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ec4:	60e3      	str	r3, [r4, #12]
 8007ec6:	6665      	str	r5, [r4, #100]	; 0x64
 8007ec8:	f000 f847 	bl	8007f5a <__retarget_lock_init_recursive>
 8007ecc:	f7ff ff96 	bl	8007dfc <__sfp_lock_release>
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ed8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007edc:	6025      	str	r5, [r4, #0]
 8007ede:	61a5      	str	r5, [r4, #24]
 8007ee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ee4:	f7ff ff24 	bl	8007d30 <memset>
 8007ee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007eec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef4:	3468      	adds	r4, #104	; 0x68
 8007ef6:	e7d9      	b.n	8007eac <__sfp+0x1c>
 8007ef8:	2104      	movs	r1, #4
 8007efa:	4638      	mov	r0, r7
 8007efc:	f7ff ff62 	bl	8007dc4 <__sfmoreglue>
 8007f00:	4604      	mov	r4, r0
 8007f02:	6030      	str	r0, [r6, #0]
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d1d5      	bne.n	8007eb4 <__sfp+0x24>
 8007f08:	f7ff ff78 	bl	8007dfc <__sfp_lock_release>
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	e7ee      	b.n	8007ef0 <__sfp+0x60>
 8007f12:	bf00      	nop
 8007f14:	080092e8 	.word	0x080092e8
 8007f18:	ffff0001 	.word	0xffff0001

08007f1c <_fwalk_reent>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	4606      	mov	r6, r0
 8007f22:	4688      	mov	r8, r1
 8007f24:	2700      	movs	r7, #0
 8007f26:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f2e:	f1b9 0901 	subs.w	r9, r9, #1
 8007f32:	d505      	bpl.n	8007f40 <_fwalk_reent+0x24>
 8007f34:	6824      	ldr	r4, [r4, #0]
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d1f7      	bne.n	8007f2a <_fwalk_reent+0xe>
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f40:	89ab      	ldrh	r3, [r5, #12]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d907      	bls.n	8007f56 <_fwalk_reent+0x3a>
 8007f46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	d003      	beq.n	8007f56 <_fwalk_reent+0x3a>
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4630      	mov	r0, r6
 8007f52:	47c0      	blx	r8
 8007f54:	4307      	orrs	r7, r0
 8007f56:	3568      	adds	r5, #104	; 0x68
 8007f58:	e7e9      	b.n	8007f2e <_fwalk_reent+0x12>

08007f5a <__retarget_lock_init_recursive>:
 8007f5a:	4770      	bx	lr

08007f5c <__retarget_lock_acquire_recursive>:
 8007f5c:	4770      	bx	lr

08007f5e <__retarget_lock_release_recursive>:
 8007f5e:	4770      	bx	lr

08007f60 <_malloc_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	1ccd      	adds	r5, r1, #3
 8007f64:	f025 0503 	bic.w	r5, r5, #3
 8007f68:	3508      	adds	r5, #8
 8007f6a:	2d0c      	cmp	r5, #12
 8007f6c:	bf38      	it	cc
 8007f6e:	250c      	movcc	r5, #12
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	4606      	mov	r6, r0
 8007f74:	db01      	blt.n	8007f7a <_malloc_r+0x1a>
 8007f76:	42a9      	cmp	r1, r5
 8007f78:	d903      	bls.n	8007f82 <_malloc_r+0x22>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	2000      	movs	r0, #0
 8007f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f82:	f000 fdb1 	bl	8008ae8 <__malloc_lock>
 8007f86:	4921      	ldr	r1, [pc, #132]	; (800800c <_malloc_r+0xac>)
 8007f88:	680a      	ldr	r2, [r1, #0]
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	b99c      	cbnz	r4, 8007fb6 <_malloc_r+0x56>
 8007f8e:	4f20      	ldr	r7, [pc, #128]	; (8008010 <_malloc_r+0xb0>)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	b923      	cbnz	r3, 8007f9e <_malloc_r+0x3e>
 8007f94:	4621      	mov	r1, r4
 8007f96:	4630      	mov	r0, r6
 8007f98:	f000 fb2a 	bl	80085f0 <_sbrk_r>
 8007f9c:	6038      	str	r0, [r7, #0]
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 fb25 	bl	80085f0 <_sbrk_r>
 8007fa6:	1c43      	adds	r3, r0, #1
 8007fa8:	d123      	bne.n	8007ff2 <_malloc_r+0x92>
 8007faa:	230c      	movs	r3, #12
 8007fac:	4630      	mov	r0, r6
 8007fae:	6033      	str	r3, [r6, #0]
 8007fb0:	f000 fda0 	bl	8008af4 <__malloc_unlock>
 8007fb4:	e7e3      	b.n	8007f7e <_malloc_r+0x1e>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	1b5b      	subs	r3, r3, r5
 8007fba:	d417      	bmi.n	8007fec <_malloc_r+0x8c>
 8007fbc:	2b0b      	cmp	r3, #11
 8007fbe:	d903      	bls.n	8007fc8 <_malloc_r+0x68>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	441c      	add	r4, r3
 8007fc4:	6025      	str	r5, [r4, #0]
 8007fc6:	e004      	b.n	8007fd2 <_malloc_r+0x72>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	42a2      	cmp	r2, r4
 8007fcc:	bf0c      	ite	eq
 8007fce:	600b      	streq	r3, [r1, #0]
 8007fd0:	6053      	strne	r3, [r2, #4]
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 fd8e 	bl	8008af4 <__malloc_unlock>
 8007fd8:	f104 000b 	add.w	r0, r4, #11
 8007fdc:	1d23      	adds	r3, r4, #4
 8007fde:	f020 0007 	bic.w	r0, r0, #7
 8007fe2:	1ac2      	subs	r2, r0, r3
 8007fe4:	d0cc      	beq.n	8007f80 <_malloc_r+0x20>
 8007fe6:	1a1b      	subs	r3, r3, r0
 8007fe8:	50a3      	str	r3, [r4, r2]
 8007fea:	e7c9      	b.n	8007f80 <_malloc_r+0x20>
 8007fec:	4622      	mov	r2, r4
 8007fee:	6864      	ldr	r4, [r4, #4]
 8007ff0:	e7cc      	b.n	8007f8c <_malloc_r+0x2c>
 8007ff2:	1cc4      	adds	r4, r0, #3
 8007ff4:	f024 0403 	bic.w	r4, r4, #3
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d0e3      	beq.n	8007fc4 <_malloc_r+0x64>
 8007ffc:	1a21      	subs	r1, r4, r0
 8007ffe:	4630      	mov	r0, r6
 8008000:	f000 faf6 	bl	80085f0 <_sbrk_r>
 8008004:	3001      	adds	r0, #1
 8008006:	d1dd      	bne.n	8007fc4 <_malloc_r+0x64>
 8008008:	e7cf      	b.n	8007faa <_malloc_r+0x4a>
 800800a:	bf00      	nop
 800800c:	20000150 	.word	0x20000150
 8008010:	20000154 	.word	0x20000154

08008014 <__sfputc_r>:
 8008014:	6893      	ldr	r3, [r2, #8]
 8008016:	b410      	push	{r4}
 8008018:	3b01      	subs	r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	6093      	str	r3, [r2, #8]
 800801e:	da07      	bge.n	8008030 <__sfputc_r+0x1c>
 8008020:	6994      	ldr	r4, [r2, #24]
 8008022:	42a3      	cmp	r3, r4
 8008024:	db01      	blt.n	800802a <__sfputc_r+0x16>
 8008026:	290a      	cmp	r1, #10
 8008028:	d102      	bne.n	8008030 <__sfputc_r+0x1c>
 800802a:	bc10      	pop	{r4}
 800802c:	f000 bb34 	b.w	8008698 <__swbuf_r>
 8008030:	6813      	ldr	r3, [r2, #0]
 8008032:	1c58      	adds	r0, r3, #1
 8008034:	6010      	str	r0, [r2, #0]
 8008036:	7019      	strb	r1, [r3, #0]
 8008038:	4608      	mov	r0, r1
 800803a:	bc10      	pop	{r4}
 800803c:	4770      	bx	lr

0800803e <__sfputs_r>:
 800803e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008040:	4606      	mov	r6, r0
 8008042:	460f      	mov	r7, r1
 8008044:	4614      	mov	r4, r2
 8008046:	18d5      	adds	r5, r2, r3
 8008048:	42ac      	cmp	r4, r5
 800804a:	d101      	bne.n	8008050 <__sfputs_r+0x12>
 800804c:	2000      	movs	r0, #0
 800804e:	e007      	b.n	8008060 <__sfputs_r+0x22>
 8008050:	463a      	mov	r2, r7
 8008052:	4630      	mov	r0, r6
 8008054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008058:	f7ff ffdc 	bl	8008014 <__sfputc_r>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d1f3      	bne.n	8008048 <__sfputs_r+0xa>
 8008060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008064 <_vfiprintf_r>:
 8008064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	460d      	mov	r5, r1
 800806a:	4614      	mov	r4, r2
 800806c:	4698      	mov	r8, r3
 800806e:	4606      	mov	r6, r0
 8008070:	b09d      	sub	sp, #116	; 0x74
 8008072:	b118      	cbz	r0, 800807c <_vfiprintf_r+0x18>
 8008074:	6983      	ldr	r3, [r0, #24]
 8008076:	b90b      	cbnz	r3, 800807c <_vfiprintf_r+0x18>
 8008078:	f7ff fed2 	bl	8007e20 <__sinit>
 800807c:	4b89      	ldr	r3, [pc, #548]	; (80082a4 <_vfiprintf_r+0x240>)
 800807e:	429d      	cmp	r5, r3
 8008080:	d11b      	bne.n	80080ba <_vfiprintf_r+0x56>
 8008082:	6875      	ldr	r5, [r6, #4]
 8008084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008086:	07d9      	lsls	r1, r3, #31
 8008088:	d405      	bmi.n	8008096 <_vfiprintf_r+0x32>
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	059a      	lsls	r2, r3, #22
 800808e:	d402      	bmi.n	8008096 <_vfiprintf_r+0x32>
 8008090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008092:	f7ff ff63 	bl	8007f5c <__retarget_lock_acquire_recursive>
 8008096:	89ab      	ldrh	r3, [r5, #12]
 8008098:	071b      	lsls	r3, r3, #28
 800809a:	d501      	bpl.n	80080a0 <_vfiprintf_r+0x3c>
 800809c:	692b      	ldr	r3, [r5, #16]
 800809e:	b9eb      	cbnz	r3, 80080dc <_vfiprintf_r+0x78>
 80080a0:	4629      	mov	r1, r5
 80080a2:	4630      	mov	r0, r6
 80080a4:	f000 fb5c 	bl	8008760 <__swsetup_r>
 80080a8:	b1c0      	cbz	r0, 80080dc <_vfiprintf_r+0x78>
 80080aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ac:	07dc      	lsls	r4, r3, #31
 80080ae:	d50e      	bpl.n	80080ce <_vfiprintf_r+0x6a>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080b4:	b01d      	add	sp, #116	; 0x74
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	4b7b      	ldr	r3, [pc, #492]	; (80082a8 <_vfiprintf_r+0x244>)
 80080bc:	429d      	cmp	r5, r3
 80080be:	d101      	bne.n	80080c4 <_vfiprintf_r+0x60>
 80080c0:	68b5      	ldr	r5, [r6, #8]
 80080c2:	e7df      	b.n	8008084 <_vfiprintf_r+0x20>
 80080c4:	4b79      	ldr	r3, [pc, #484]	; (80082ac <_vfiprintf_r+0x248>)
 80080c6:	429d      	cmp	r5, r3
 80080c8:	bf08      	it	eq
 80080ca:	68f5      	ldreq	r5, [r6, #12]
 80080cc:	e7da      	b.n	8008084 <_vfiprintf_r+0x20>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	0598      	lsls	r0, r3, #22
 80080d2:	d4ed      	bmi.n	80080b0 <_vfiprintf_r+0x4c>
 80080d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d6:	f7ff ff42 	bl	8007f5e <__retarget_lock_release_recursive>
 80080da:	e7e9      	b.n	80080b0 <_vfiprintf_r+0x4c>
 80080dc:	2300      	movs	r3, #0
 80080de:	9309      	str	r3, [sp, #36]	; 0x24
 80080e0:	2320      	movs	r3, #32
 80080e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e6:	2330      	movs	r3, #48	; 0x30
 80080e8:	f04f 0901 	mov.w	r9, #1
 80080ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80082b0 <_vfiprintf_r+0x24c>
 80080f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f8:	4623      	mov	r3, r4
 80080fa:	469a      	mov	sl, r3
 80080fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008100:	b10a      	cbz	r2, 8008106 <_vfiprintf_r+0xa2>
 8008102:	2a25      	cmp	r2, #37	; 0x25
 8008104:	d1f9      	bne.n	80080fa <_vfiprintf_r+0x96>
 8008106:	ebba 0b04 	subs.w	fp, sl, r4
 800810a:	d00b      	beq.n	8008124 <_vfiprintf_r+0xc0>
 800810c:	465b      	mov	r3, fp
 800810e:	4622      	mov	r2, r4
 8008110:	4629      	mov	r1, r5
 8008112:	4630      	mov	r0, r6
 8008114:	f7ff ff93 	bl	800803e <__sfputs_r>
 8008118:	3001      	adds	r0, #1
 800811a:	f000 80aa 	beq.w	8008272 <_vfiprintf_r+0x20e>
 800811e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008120:	445a      	add	r2, fp
 8008122:	9209      	str	r2, [sp, #36]	; 0x24
 8008124:	f89a 3000 	ldrb.w	r3, [sl]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80a2 	beq.w	8008272 <_vfiprintf_r+0x20e>
 800812e:	2300      	movs	r3, #0
 8008130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008138:	f10a 0a01 	add.w	sl, sl, #1
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008144:	931a      	str	r3, [sp, #104]	; 0x68
 8008146:	4654      	mov	r4, sl
 8008148:	2205      	movs	r2, #5
 800814a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814e:	4858      	ldr	r0, [pc, #352]	; (80082b0 <_vfiprintf_r+0x24c>)
 8008150:	f000 fcbc 	bl	8008acc <memchr>
 8008154:	9a04      	ldr	r2, [sp, #16]
 8008156:	b9d8      	cbnz	r0, 8008190 <_vfiprintf_r+0x12c>
 8008158:	06d1      	lsls	r1, r2, #27
 800815a:	bf44      	itt	mi
 800815c:	2320      	movmi	r3, #32
 800815e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008162:	0713      	lsls	r3, r2, #28
 8008164:	bf44      	itt	mi
 8008166:	232b      	movmi	r3, #43	; 0x2b
 8008168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816c:	f89a 3000 	ldrb.w	r3, [sl]
 8008170:	2b2a      	cmp	r3, #42	; 0x2a
 8008172:	d015      	beq.n	80081a0 <_vfiprintf_r+0x13c>
 8008174:	4654      	mov	r4, sl
 8008176:	2000      	movs	r0, #0
 8008178:	f04f 0c0a 	mov.w	ip, #10
 800817c:	9a07      	ldr	r2, [sp, #28]
 800817e:	4621      	mov	r1, r4
 8008180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008184:	3b30      	subs	r3, #48	; 0x30
 8008186:	2b09      	cmp	r3, #9
 8008188:	d94e      	bls.n	8008228 <_vfiprintf_r+0x1c4>
 800818a:	b1b0      	cbz	r0, 80081ba <_vfiprintf_r+0x156>
 800818c:	9207      	str	r2, [sp, #28]
 800818e:	e014      	b.n	80081ba <_vfiprintf_r+0x156>
 8008190:	eba0 0308 	sub.w	r3, r0, r8
 8008194:	fa09 f303 	lsl.w	r3, r9, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	46a2      	mov	sl, r4
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	e7d2      	b.n	8008146 <_vfiprintf_r+0xe2>
 80081a0:	9b03      	ldr	r3, [sp, #12]
 80081a2:	1d19      	adds	r1, r3, #4
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	9103      	str	r1, [sp, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	bfbb      	ittet	lt
 80081ac:	425b      	neglt	r3, r3
 80081ae:	f042 0202 	orrlt.w	r2, r2, #2
 80081b2:	9307      	strge	r3, [sp, #28]
 80081b4:	9307      	strlt	r3, [sp, #28]
 80081b6:	bfb8      	it	lt
 80081b8:	9204      	strlt	r2, [sp, #16]
 80081ba:	7823      	ldrb	r3, [r4, #0]
 80081bc:	2b2e      	cmp	r3, #46	; 0x2e
 80081be:	d10c      	bne.n	80081da <_vfiprintf_r+0x176>
 80081c0:	7863      	ldrb	r3, [r4, #1]
 80081c2:	2b2a      	cmp	r3, #42	; 0x2a
 80081c4:	d135      	bne.n	8008232 <_vfiprintf_r+0x1ce>
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	3402      	adds	r4, #2
 80081ca:	1d1a      	adds	r2, r3, #4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	9203      	str	r2, [sp, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	bfb8      	it	lt
 80081d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081d8:	9305      	str	r3, [sp, #20]
 80081da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082c0 <_vfiprintf_r+0x25c>
 80081de:	2203      	movs	r2, #3
 80081e0:	4650      	mov	r0, sl
 80081e2:	7821      	ldrb	r1, [r4, #0]
 80081e4:	f000 fc72 	bl	8008acc <memchr>
 80081e8:	b140      	cbz	r0, 80081fc <_vfiprintf_r+0x198>
 80081ea:	2340      	movs	r3, #64	; 0x40
 80081ec:	eba0 000a 	sub.w	r0, r0, sl
 80081f0:	fa03 f000 	lsl.w	r0, r3, r0
 80081f4:	9b04      	ldr	r3, [sp, #16]
 80081f6:	3401      	adds	r4, #1
 80081f8:	4303      	orrs	r3, r0
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008200:	2206      	movs	r2, #6
 8008202:	482c      	ldr	r0, [pc, #176]	; (80082b4 <_vfiprintf_r+0x250>)
 8008204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008208:	f000 fc60 	bl	8008acc <memchr>
 800820c:	2800      	cmp	r0, #0
 800820e:	d03f      	beq.n	8008290 <_vfiprintf_r+0x22c>
 8008210:	4b29      	ldr	r3, [pc, #164]	; (80082b8 <_vfiprintf_r+0x254>)
 8008212:	bb1b      	cbnz	r3, 800825c <_vfiprintf_r+0x1f8>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	3307      	adds	r3, #7
 8008218:	f023 0307 	bic.w	r3, r3, #7
 800821c:	3308      	adds	r3, #8
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008222:	443b      	add	r3, r7
 8008224:	9309      	str	r3, [sp, #36]	; 0x24
 8008226:	e767      	b.n	80080f8 <_vfiprintf_r+0x94>
 8008228:	460c      	mov	r4, r1
 800822a:	2001      	movs	r0, #1
 800822c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008230:	e7a5      	b.n	800817e <_vfiprintf_r+0x11a>
 8008232:	2300      	movs	r3, #0
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	4619      	mov	r1, r3
 800823a:	3401      	adds	r4, #1
 800823c:	9305      	str	r3, [sp, #20]
 800823e:	4620      	mov	r0, r4
 8008240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008244:	3a30      	subs	r2, #48	; 0x30
 8008246:	2a09      	cmp	r2, #9
 8008248:	d903      	bls.n	8008252 <_vfiprintf_r+0x1ee>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0c5      	beq.n	80081da <_vfiprintf_r+0x176>
 800824e:	9105      	str	r1, [sp, #20]
 8008250:	e7c3      	b.n	80081da <_vfiprintf_r+0x176>
 8008252:	4604      	mov	r4, r0
 8008254:	2301      	movs	r3, #1
 8008256:	fb0c 2101 	mla	r1, ip, r1, r2
 800825a:	e7f0      	b.n	800823e <_vfiprintf_r+0x1da>
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4630      	mov	r0, r6
 8008264:	4b15      	ldr	r3, [pc, #84]	; (80082bc <_vfiprintf_r+0x258>)
 8008266:	a904      	add	r1, sp, #16
 8008268:	f3af 8000 	nop.w
 800826c:	4607      	mov	r7, r0
 800826e:	1c78      	adds	r0, r7, #1
 8008270:	d1d6      	bne.n	8008220 <_vfiprintf_r+0x1bc>
 8008272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008274:	07d9      	lsls	r1, r3, #31
 8008276:	d405      	bmi.n	8008284 <_vfiprintf_r+0x220>
 8008278:	89ab      	ldrh	r3, [r5, #12]
 800827a:	059a      	lsls	r2, r3, #22
 800827c:	d402      	bmi.n	8008284 <_vfiprintf_r+0x220>
 800827e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008280:	f7ff fe6d 	bl	8007f5e <__retarget_lock_release_recursive>
 8008284:	89ab      	ldrh	r3, [r5, #12]
 8008286:	065b      	lsls	r3, r3, #25
 8008288:	f53f af12 	bmi.w	80080b0 <_vfiprintf_r+0x4c>
 800828c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800828e:	e711      	b.n	80080b4 <_vfiprintf_r+0x50>
 8008290:	ab03      	add	r3, sp, #12
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	462a      	mov	r2, r5
 8008296:	4630      	mov	r0, r6
 8008298:	4b08      	ldr	r3, [pc, #32]	; (80082bc <_vfiprintf_r+0x258>)
 800829a:	a904      	add	r1, sp, #16
 800829c:	f000 f882 	bl	80083a4 <_printf_i>
 80082a0:	e7e4      	b.n	800826c <_vfiprintf_r+0x208>
 80082a2:	bf00      	nop
 80082a4:	0800930c 	.word	0x0800930c
 80082a8:	0800932c 	.word	0x0800932c
 80082ac:	080092ec 	.word	0x080092ec
 80082b0:	0800934c 	.word	0x0800934c
 80082b4:	08009356 	.word	0x08009356
 80082b8:	00000000 	.word	0x00000000
 80082bc:	0800803f 	.word	0x0800803f
 80082c0:	08009352 	.word	0x08009352

080082c4 <_printf_common>:
 80082c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	4616      	mov	r6, r2
 80082ca:	4699      	mov	r9, r3
 80082cc:	688a      	ldr	r2, [r1, #8]
 80082ce:	690b      	ldr	r3, [r1, #16]
 80082d0:	4607      	mov	r7, r0
 80082d2:	4293      	cmp	r3, r2
 80082d4:	bfb8      	it	lt
 80082d6:	4613      	movlt	r3, r2
 80082d8:	6033      	str	r3, [r6, #0]
 80082da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082de:	460c      	mov	r4, r1
 80082e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082e4:	b10a      	cbz	r2, 80082ea <_printf_common+0x26>
 80082e6:	3301      	adds	r3, #1
 80082e8:	6033      	str	r3, [r6, #0]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	0699      	lsls	r1, r3, #26
 80082ee:	bf42      	ittt	mi
 80082f0:	6833      	ldrmi	r3, [r6, #0]
 80082f2:	3302      	addmi	r3, #2
 80082f4:	6033      	strmi	r3, [r6, #0]
 80082f6:	6825      	ldr	r5, [r4, #0]
 80082f8:	f015 0506 	ands.w	r5, r5, #6
 80082fc:	d106      	bne.n	800830c <_printf_common+0x48>
 80082fe:	f104 0a19 	add.w	sl, r4, #25
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	6832      	ldr	r2, [r6, #0]
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	42ab      	cmp	r3, r5
 800830a:	dc28      	bgt.n	800835e <_printf_common+0x9a>
 800830c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008310:	1e13      	subs	r3, r2, #0
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	bf18      	it	ne
 8008316:	2301      	movne	r3, #1
 8008318:	0692      	lsls	r2, r2, #26
 800831a:	d42d      	bmi.n	8008378 <_printf_common+0xb4>
 800831c:	4649      	mov	r1, r9
 800831e:	4638      	mov	r0, r7
 8008320:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008324:	47c0      	blx	r8
 8008326:	3001      	adds	r0, #1
 8008328:	d020      	beq.n	800836c <_printf_common+0xa8>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	68e5      	ldr	r5, [r4, #12]
 800832e:	f003 0306 	and.w	r3, r3, #6
 8008332:	2b04      	cmp	r3, #4
 8008334:	bf18      	it	ne
 8008336:	2500      	movne	r5, #0
 8008338:	6832      	ldr	r2, [r6, #0]
 800833a:	f04f 0600 	mov.w	r6, #0
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	bf08      	it	eq
 8008342:	1aad      	subeq	r5, r5, r2
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	bf08      	it	eq
 8008348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800834c:	4293      	cmp	r3, r2
 800834e:	bfc4      	itt	gt
 8008350:	1a9b      	subgt	r3, r3, r2
 8008352:	18ed      	addgt	r5, r5, r3
 8008354:	341a      	adds	r4, #26
 8008356:	42b5      	cmp	r5, r6
 8008358:	d11a      	bne.n	8008390 <_printf_common+0xcc>
 800835a:	2000      	movs	r0, #0
 800835c:	e008      	b.n	8008370 <_printf_common+0xac>
 800835e:	2301      	movs	r3, #1
 8008360:	4652      	mov	r2, sl
 8008362:	4649      	mov	r1, r9
 8008364:	4638      	mov	r0, r7
 8008366:	47c0      	blx	r8
 8008368:	3001      	adds	r0, #1
 800836a:	d103      	bne.n	8008374 <_printf_common+0xb0>
 800836c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008374:	3501      	adds	r5, #1
 8008376:	e7c4      	b.n	8008302 <_printf_common+0x3e>
 8008378:	2030      	movs	r0, #48	; 0x30
 800837a:	18e1      	adds	r1, r4, r3
 800837c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008386:	4422      	add	r2, r4
 8008388:	3302      	adds	r3, #2
 800838a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800838e:	e7c5      	b.n	800831c <_printf_common+0x58>
 8008390:	2301      	movs	r3, #1
 8008392:	4622      	mov	r2, r4
 8008394:	4649      	mov	r1, r9
 8008396:	4638      	mov	r0, r7
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d0e6      	beq.n	800836c <_printf_common+0xa8>
 800839e:	3601      	adds	r6, #1
 80083a0:	e7d9      	b.n	8008356 <_printf_common+0x92>
	...

080083a4 <_printf_i>:
 80083a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	460c      	mov	r4, r1
 80083aa:	7e27      	ldrb	r7, [r4, #24]
 80083ac:	4691      	mov	r9, r2
 80083ae:	2f78      	cmp	r7, #120	; 0x78
 80083b0:	4680      	mov	r8, r0
 80083b2:	469a      	mov	sl, r3
 80083b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ba:	d807      	bhi.n	80083cc <_printf_i+0x28>
 80083bc:	2f62      	cmp	r7, #98	; 0x62
 80083be:	d80a      	bhi.n	80083d6 <_printf_i+0x32>
 80083c0:	2f00      	cmp	r7, #0
 80083c2:	f000 80d9 	beq.w	8008578 <_printf_i+0x1d4>
 80083c6:	2f58      	cmp	r7, #88	; 0x58
 80083c8:	f000 80a4 	beq.w	8008514 <_printf_i+0x170>
 80083cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083d4:	e03a      	b.n	800844c <_printf_i+0xa8>
 80083d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083da:	2b15      	cmp	r3, #21
 80083dc:	d8f6      	bhi.n	80083cc <_printf_i+0x28>
 80083de:	a001      	add	r0, pc, #4	; (adr r0, 80083e4 <_printf_i+0x40>)
 80083e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083e4:	0800843d 	.word	0x0800843d
 80083e8:	08008451 	.word	0x08008451
 80083ec:	080083cd 	.word	0x080083cd
 80083f0:	080083cd 	.word	0x080083cd
 80083f4:	080083cd 	.word	0x080083cd
 80083f8:	080083cd 	.word	0x080083cd
 80083fc:	08008451 	.word	0x08008451
 8008400:	080083cd 	.word	0x080083cd
 8008404:	080083cd 	.word	0x080083cd
 8008408:	080083cd 	.word	0x080083cd
 800840c:	080083cd 	.word	0x080083cd
 8008410:	0800855f 	.word	0x0800855f
 8008414:	08008481 	.word	0x08008481
 8008418:	08008541 	.word	0x08008541
 800841c:	080083cd 	.word	0x080083cd
 8008420:	080083cd 	.word	0x080083cd
 8008424:	08008581 	.word	0x08008581
 8008428:	080083cd 	.word	0x080083cd
 800842c:	08008481 	.word	0x08008481
 8008430:	080083cd 	.word	0x080083cd
 8008434:	080083cd 	.word	0x080083cd
 8008438:	08008549 	.word	0x08008549
 800843c:	680b      	ldr	r3, [r1, #0]
 800843e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	600a      	str	r2, [r1, #0]
 8008448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800844c:	2301      	movs	r3, #1
 800844e:	e0a4      	b.n	800859a <_printf_i+0x1f6>
 8008450:	6825      	ldr	r5, [r4, #0]
 8008452:	6808      	ldr	r0, [r1, #0]
 8008454:	062e      	lsls	r6, r5, #24
 8008456:	f100 0304 	add.w	r3, r0, #4
 800845a:	d50a      	bpl.n	8008472 <_printf_i+0xce>
 800845c:	6805      	ldr	r5, [r0, #0]
 800845e:	600b      	str	r3, [r1, #0]
 8008460:	2d00      	cmp	r5, #0
 8008462:	da03      	bge.n	800846c <_printf_i+0xc8>
 8008464:	232d      	movs	r3, #45	; 0x2d
 8008466:	426d      	negs	r5, r5
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800846c:	230a      	movs	r3, #10
 800846e:	485e      	ldr	r0, [pc, #376]	; (80085e8 <_printf_i+0x244>)
 8008470:	e019      	b.n	80084a6 <_printf_i+0x102>
 8008472:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008476:	6805      	ldr	r5, [r0, #0]
 8008478:	600b      	str	r3, [r1, #0]
 800847a:	bf18      	it	ne
 800847c:	b22d      	sxthne	r5, r5
 800847e:	e7ef      	b.n	8008460 <_printf_i+0xbc>
 8008480:	680b      	ldr	r3, [r1, #0]
 8008482:	6825      	ldr	r5, [r4, #0]
 8008484:	1d18      	adds	r0, r3, #4
 8008486:	6008      	str	r0, [r1, #0]
 8008488:	0628      	lsls	r0, r5, #24
 800848a:	d501      	bpl.n	8008490 <_printf_i+0xec>
 800848c:	681d      	ldr	r5, [r3, #0]
 800848e:	e002      	b.n	8008496 <_printf_i+0xf2>
 8008490:	0669      	lsls	r1, r5, #25
 8008492:	d5fb      	bpl.n	800848c <_printf_i+0xe8>
 8008494:	881d      	ldrh	r5, [r3, #0]
 8008496:	2f6f      	cmp	r7, #111	; 0x6f
 8008498:	bf0c      	ite	eq
 800849a:	2308      	moveq	r3, #8
 800849c:	230a      	movne	r3, #10
 800849e:	4852      	ldr	r0, [pc, #328]	; (80085e8 <_printf_i+0x244>)
 80084a0:	2100      	movs	r1, #0
 80084a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084a6:	6866      	ldr	r6, [r4, #4]
 80084a8:	2e00      	cmp	r6, #0
 80084aa:	bfa8      	it	ge
 80084ac:	6821      	ldrge	r1, [r4, #0]
 80084ae:	60a6      	str	r6, [r4, #8]
 80084b0:	bfa4      	itt	ge
 80084b2:	f021 0104 	bicge.w	r1, r1, #4
 80084b6:	6021      	strge	r1, [r4, #0]
 80084b8:	b90d      	cbnz	r5, 80084be <_printf_i+0x11a>
 80084ba:	2e00      	cmp	r6, #0
 80084bc:	d04d      	beq.n	800855a <_printf_i+0x1b6>
 80084be:	4616      	mov	r6, r2
 80084c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80084c4:	fb03 5711 	mls	r7, r3, r1, r5
 80084c8:	5dc7      	ldrb	r7, [r0, r7]
 80084ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084ce:	462f      	mov	r7, r5
 80084d0:	42bb      	cmp	r3, r7
 80084d2:	460d      	mov	r5, r1
 80084d4:	d9f4      	bls.n	80084c0 <_printf_i+0x11c>
 80084d6:	2b08      	cmp	r3, #8
 80084d8:	d10b      	bne.n	80084f2 <_printf_i+0x14e>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	07df      	lsls	r7, r3, #31
 80084de:	d508      	bpl.n	80084f2 <_printf_i+0x14e>
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	6861      	ldr	r1, [r4, #4]
 80084e4:	4299      	cmp	r1, r3
 80084e6:	bfde      	ittt	le
 80084e8:	2330      	movle	r3, #48	; 0x30
 80084ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084ee:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80084f2:	1b92      	subs	r2, r2, r6
 80084f4:	6122      	str	r2, [r4, #16]
 80084f6:	464b      	mov	r3, r9
 80084f8:	4621      	mov	r1, r4
 80084fa:	4640      	mov	r0, r8
 80084fc:	f8cd a000 	str.w	sl, [sp]
 8008500:	aa03      	add	r2, sp, #12
 8008502:	f7ff fedf 	bl	80082c4 <_printf_common>
 8008506:	3001      	adds	r0, #1
 8008508:	d14c      	bne.n	80085a4 <_printf_i+0x200>
 800850a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800850e:	b004      	add	sp, #16
 8008510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008514:	4834      	ldr	r0, [pc, #208]	; (80085e8 <_printf_i+0x244>)
 8008516:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800851a:	680e      	ldr	r6, [r1, #0]
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008522:	061f      	lsls	r7, r3, #24
 8008524:	600e      	str	r6, [r1, #0]
 8008526:	d514      	bpl.n	8008552 <_printf_i+0x1ae>
 8008528:	07d9      	lsls	r1, r3, #31
 800852a:	bf44      	itt	mi
 800852c:	f043 0320 	orrmi.w	r3, r3, #32
 8008530:	6023      	strmi	r3, [r4, #0]
 8008532:	b91d      	cbnz	r5, 800853c <_printf_i+0x198>
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	f023 0320 	bic.w	r3, r3, #32
 800853a:	6023      	str	r3, [r4, #0]
 800853c:	2310      	movs	r3, #16
 800853e:	e7af      	b.n	80084a0 <_printf_i+0xfc>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	f043 0320 	orr.w	r3, r3, #32
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	2378      	movs	r3, #120	; 0x78
 800854a:	4828      	ldr	r0, [pc, #160]	; (80085ec <_printf_i+0x248>)
 800854c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008550:	e7e3      	b.n	800851a <_printf_i+0x176>
 8008552:	065e      	lsls	r6, r3, #25
 8008554:	bf48      	it	mi
 8008556:	b2ad      	uxthmi	r5, r5
 8008558:	e7e6      	b.n	8008528 <_printf_i+0x184>
 800855a:	4616      	mov	r6, r2
 800855c:	e7bb      	b.n	80084d6 <_printf_i+0x132>
 800855e:	680b      	ldr	r3, [r1, #0]
 8008560:	6826      	ldr	r6, [r4, #0]
 8008562:	1d1d      	adds	r5, r3, #4
 8008564:	6960      	ldr	r0, [r4, #20]
 8008566:	600d      	str	r5, [r1, #0]
 8008568:	0635      	lsls	r5, r6, #24
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	d501      	bpl.n	8008572 <_printf_i+0x1ce>
 800856e:	6018      	str	r0, [r3, #0]
 8008570:	e002      	b.n	8008578 <_printf_i+0x1d4>
 8008572:	0671      	lsls	r1, r6, #25
 8008574:	d5fb      	bpl.n	800856e <_printf_i+0x1ca>
 8008576:	8018      	strh	r0, [r3, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	4616      	mov	r6, r2
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	e7ba      	b.n	80084f6 <_printf_i+0x152>
 8008580:	680b      	ldr	r3, [r1, #0]
 8008582:	1d1a      	adds	r2, r3, #4
 8008584:	600a      	str	r2, [r1, #0]
 8008586:	681e      	ldr	r6, [r3, #0]
 8008588:	2100      	movs	r1, #0
 800858a:	4630      	mov	r0, r6
 800858c:	6862      	ldr	r2, [r4, #4]
 800858e:	f000 fa9d 	bl	8008acc <memchr>
 8008592:	b108      	cbz	r0, 8008598 <_printf_i+0x1f4>
 8008594:	1b80      	subs	r0, r0, r6
 8008596:	6060      	str	r0, [r4, #4]
 8008598:	6863      	ldr	r3, [r4, #4]
 800859a:	6123      	str	r3, [r4, #16]
 800859c:	2300      	movs	r3, #0
 800859e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a2:	e7a8      	b.n	80084f6 <_printf_i+0x152>
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	47d0      	blx	sl
 80085ae:	3001      	adds	r0, #1
 80085b0:	d0ab      	beq.n	800850a <_printf_i+0x166>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	079b      	lsls	r3, r3, #30
 80085b6:	d413      	bmi.n	80085e0 <_printf_i+0x23c>
 80085b8:	68e0      	ldr	r0, [r4, #12]
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	4298      	cmp	r0, r3
 80085be:	bfb8      	it	lt
 80085c0:	4618      	movlt	r0, r3
 80085c2:	e7a4      	b.n	800850e <_printf_i+0x16a>
 80085c4:	2301      	movs	r3, #1
 80085c6:	4632      	mov	r2, r6
 80085c8:	4649      	mov	r1, r9
 80085ca:	4640      	mov	r0, r8
 80085cc:	47d0      	blx	sl
 80085ce:	3001      	adds	r0, #1
 80085d0:	d09b      	beq.n	800850a <_printf_i+0x166>
 80085d2:	3501      	adds	r5, #1
 80085d4:	68e3      	ldr	r3, [r4, #12]
 80085d6:	9903      	ldr	r1, [sp, #12]
 80085d8:	1a5b      	subs	r3, r3, r1
 80085da:	42ab      	cmp	r3, r5
 80085dc:	dcf2      	bgt.n	80085c4 <_printf_i+0x220>
 80085de:	e7eb      	b.n	80085b8 <_printf_i+0x214>
 80085e0:	2500      	movs	r5, #0
 80085e2:	f104 0619 	add.w	r6, r4, #25
 80085e6:	e7f5      	b.n	80085d4 <_printf_i+0x230>
 80085e8:	0800935d 	.word	0x0800935d
 80085ec:	0800936e 	.word	0x0800936e

080085f0 <_sbrk_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	2300      	movs	r3, #0
 80085f4:	4d05      	ldr	r5, [pc, #20]	; (800860c <_sbrk_r+0x1c>)
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	602b      	str	r3, [r5, #0]
 80085fc:	f7fa fc46 	bl	8002e8c <_sbrk>
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	d102      	bne.n	800860a <_sbrk_r+0x1a>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	b103      	cbz	r3, 800860a <_sbrk_r+0x1a>
 8008608:	6023      	str	r3, [r4, #0]
 800860a:	bd38      	pop	{r3, r4, r5, pc}
 800860c:	2000031c 	.word	0x2000031c

08008610 <__sread>:
 8008610:	b510      	push	{r4, lr}
 8008612:	460c      	mov	r4, r1
 8008614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008618:	f000 fabe 	bl	8008b98 <_read_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	bfab      	itete	ge
 8008620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008622:	89a3      	ldrhlt	r3, [r4, #12]
 8008624:	181b      	addge	r3, r3, r0
 8008626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800862a:	bfac      	ite	ge
 800862c:	6563      	strge	r3, [r4, #84]	; 0x54
 800862e:	81a3      	strhlt	r3, [r4, #12]
 8008630:	bd10      	pop	{r4, pc}

08008632 <__swrite>:
 8008632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	461f      	mov	r7, r3
 8008638:	898b      	ldrh	r3, [r1, #12]
 800863a:	4605      	mov	r5, r0
 800863c:	05db      	lsls	r3, r3, #23
 800863e:	460c      	mov	r4, r1
 8008640:	4616      	mov	r6, r2
 8008642:	d505      	bpl.n	8008650 <__swrite+0x1e>
 8008644:	2302      	movs	r3, #2
 8008646:	2200      	movs	r2, #0
 8008648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800864c:	f000 f9c8 	bl	80089e0 <_lseek_r>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	4632      	mov	r2, r6
 8008654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	4628      	mov	r0, r5
 800865c:	463b      	mov	r3, r7
 800865e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008666:	f000 b869 	b.w	800873c <_write_r>

0800866a <__sseek>:
 800866a:	b510      	push	{r4, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008672:	f000 f9b5 	bl	80089e0 <_lseek_r>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	bf15      	itete	ne
 800867c:	6560      	strne	r0, [r4, #84]	; 0x54
 800867e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008686:	81a3      	strheq	r3, [r4, #12]
 8008688:	bf18      	it	ne
 800868a:	81a3      	strhne	r3, [r4, #12]
 800868c:	bd10      	pop	{r4, pc}

0800868e <__sclose>:
 800868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008692:	f000 b8d3 	b.w	800883c <_close_r>
	...

08008698 <__swbuf_r>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	460e      	mov	r6, r1
 800869c:	4614      	mov	r4, r2
 800869e:	4605      	mov	r5, r0
 80086a0:	b118      	cbz	r0, 80086aa <__swbuf_r+0x12>
 80086a2:	6983      	ldr	r3, [r0, #24]
 80086a4:	b90b      	cbnz	r3, 80086aa <__swbuf_r+0x12>
 80086a6:	f7ff fbbb 	bl	8007e20 <__sinit>
 80086aa:	4b21      	ldr	r3, [pc, #132]	; (8008730 <__swbuf_r+0x98>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	d12b      	bne.n	8008708 <__swbuf_r+0x70>
 80086b0:	686c      	ldr	r4, [r5, #4]
 80086b2:	69a3      	ldr	r3, [r4, #24]
 80086b4:	60a3      	str	r3, [r4, #8]
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	071a      	lsls	r2, r3, #28
 80086ba:	d52f      	bpl.n	800871c <__swbuf_r+0x84>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	b36b      	cbz	r3, 800871c <__swbuf_r+0x84>
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	6820      	ldr	r0, [r4, #0]
 80086c4:	b2f6      	uxtb	r6, r6
 80086c6:	1ac0      	subs	r0, r0, r3
 80086c8:	6963      	ldr	r3, [r4, #20]
 80086ca:	4637      	mov	r7, r6
 80086cc:	4283      	cmp	r3, r0
 80086ce:	dc04      	bgt.n	80086da <__swbuf_r+0x42>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f948 	bl	8008968 <_fflush_r>
 80086d8:	bb30      	cbnz	r0, 8008728 <__swbuf_r+0x90>
 80086da:	68a3      	ldr	r3, [r4, #8]
 80086dc:	3001      	adds	r0, #1
 80086de:	3b01      	subs	r3, #1
 80086e0:	60a3      	str	r3, [r4, #8]
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	1c5a      	adds	r2, r3, #1
 80086e6:	6022      	str	r2, [r4, #0]
 80086e8:	701e      	strb	r6, [r3, #0]
 80086ea:	6963      	ldr	r3, [r4, #20]
 80086ec:	4283      	cmp	r3, r0
 80086ee:	d004      	beq.n	80086fa <__swbuf_r+0x62>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	07db      	lsls	r3, r3, #31
 80086f4:	d506      	bpl.n	8008704 <__swbuf_r+0x6c>
 80086f6:	2e0a      	cmp	r6, #10
 80086f8:	d104      	bne.n	8008704 <__swbuf_r+0x6c>
 80086fa:	4621      	mov	r1, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 f933 	bl	8008968 <_fflush_r>
 8008702:	b988      	cbnz	r0, 8008728 <__swbuf_r+0x90>
 8008704:	4638      	mov	r0, r7
 8008706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <__swbuf_r+0x9c>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d101      	bne.n	8008712 <__swbuf_r+0x7a>
 800870e:	68ac      	ldr	r4, [r5, #8]
 8008710:	e7cf      	b.n	80086b2 <__swbuf_r+0x1a>
 8008712:	4b09      	ldr	r3, [pc, #36]	; (8008738 <__swbuf_r+0xa0>)
 8008714:	429c      	cmp	r4, r3
 8008716:	bf08      	it	eq
 8008718:	68ec      	ldreq	r4, [r5, #12]
 800871a:	e7ca      	b.n	80086b2 <__swbuf_r+0x1a>
 800871c:	4621      	mov	r1, r4
 800871e:	4628      	mov	r0, r5
 8008720:	f000 f81e 	bl	8008760 <__swsetup_r>
 8008724:	2800      	cmp	r0, #0
 8008726:	d0cb      	beq.n	80086c0 <__swbuf_r+0x28>
 8008728:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800872c:	e7ea      	b.n	8008704 <__swbuf_r+0x6c>
 800872e:	bf00      	nop
 8008730:	0800930c 	.word	0x0800930c
 8008734:	0800932c 	.word	0x0800932c
 8008738:	080092ec 	.word	0x080092ec

0800873c <_write_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	4611      	mov	r1, r2
 8008744:	2200      	movs	r2, #0
 8008746:	4d05      	ldr	r5, [pc, #20]	; (800875c <_write_r+0x20>)
 8008748:	602a      	str	r2, [r5, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	f7fa fb51 	bl	8002df2 <_write>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_write_r+0x1e>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_write_r+0x1e>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	2000031c 	.word	0x2000031c

08008760 <__swsetup_r>:
 8008760:	4b32      	ldr	r3, [pc, #200]	; (800882c <__swsetup_r+0xcc>)
 8008762:	b570      	push	{r4, r5, r6, lr}
 8008764:	681d      	ldr	r5, [r3, #0]
 8008766:	4606      	mov	r6, r0
 8008768:	460c      	mov	r4, r1
 800876a:	b125      	cbz	r5, 8008776 <__swsetup_r+0x16>
 800876c:	69ab      	ldr	r3, [r5, #24]
 800876e:	b913      	cbnz	r3, 8008776 <__swsetup_r+0x16>
 8008770:	4628      	mov	r0, r5
 8008772:	f7ff fb55 	bl	8007e20 <__sinit>
 8008776:	4b2e      	ldr	r3, [pc, #184]	; (8008830 <__swsetup_r+0xd0>)
 8008778:	429c      	cmp	r4, r3
 800877a:	d10f      	bne.n	800879c <__swsetup_r+0x3c>
 800877c:	686c      	ldr	r4, [r5, #4]
 800877e:	89a3      	ldrh	r3, [r4, #12]
 8008780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008784:	0719      	lsls	r1, r3, #28
 8008786:	d42c      	bmi.n	80087e2 <__swsetup_r+0x82>
 8008788:	06dd      	lsls	r5, r3, #27
 800878a:	d411      	bmi.n	80087b0 <__swsetup_r+0x50>
 800878c:	2309      	movs	r3, #9
 800878e:	6033      	str	r3, [r6, #0]
 8008790:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008798:	81a3      	strh	r3, [r4, #12]
 800879a:	e03e      	b.n	800881a <__swsetup_r+0xba>
 800879c:	4b25      	ldr	r3, [pc, #148]	; (8008834 <__swsetup_r+0xd4>)
 800879e:	429c      	cmp	r4, r3
 80087a0:	d101      	bne.n	80087a6 <__swsetup_r+0x46>
 80087a2:	68ac      	ldr	r4, [r5, #8]
 80087a4:	e7eb      	b.n	800877e <__swsetup_r+0x1e>
 80087a6:	4b24      	ldr	r3, [pc, #144]	; (8008838 <__swsetup_r+0xd8>)
 80087a8:	429c      	cmp	r4, r3
 80087aa:	bf08      	it	eq
 80087ac:	68ec      	ldreq	r4, [r5, #12]
 80087ae:	e7e6      	b.n	800877e <__swsetup_r+0x1e>
 80087b0:	0758      	lsls	r0, r3, #29
 80087b2:	d512      	bpl.n	80087da <__swsetup_r+0x7a>
 80087b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087b6:	b141      	cbz	r1, 80087ca <__swsetup_r+0x6a>
 80087b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087bc:	4299      	cmp	r1, r3
 80087be:	d002      	beq.n	80087c6 <__swsetup_r+0x66>
 80087c0:	4630      	mov	r0, r6
 80087c2:	f000 f99d 	bl	8008b00 <_free_r>
 80087c6:	2300      	movs	r3, #0
 80087c8:	6363      	str	r3, [r4, #52]	; 0x34
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	2300      	movs	r3, #0
 80087d4:	6063      	str	r3, [r4, #4]
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f043 0308 	orr.w	r3, r3, #8
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	b94b      	cbnz	r3, 80087fa <__swsetup_r+0x9a>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f0:	d003      	beq.n	80087fa <__swsetup_r+0x9a>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 f929 	bl	8008a4c <__smakebuf_r>
 80087fa:	89a0      	ldrh	r0, [r4, #12]
 80087fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008800:	f010 0301 	ands.w	r3, r0, #1
 8008804:	d00a      	beq.n	800881c <__swsetup_r+0xbc>
 8008806:	2300      	movs	r3, #0
 8008808:	60a3      	str	r3, [r4, #8]
 800880a:	6963      	ldr	r3, [r4, #20]
 800880c:	425b      	negs	r3, r3
 800880e:	61a3      	str	r3, [r4, #24]
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	b943      	cbnz	r3, 8008826 <__swsetup_r+0xc6>
 8008814:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008818:	d1ba      	bne.n	8008790 <__swsetup_r+0x30>
 800881a:	bd70      	pop	{r4, r5, r6, pc}
 800881c:	0781      	lsls	r1, r0, #30
 800881e:	bf58      	it	pl
 8008820:	6963      	ldrpl	r3, [r4, #20]
 8008822:	60a3      	str	r3, [r4, #8]
 8008824:	e7f4      	b.n	8008810 <__swsetup_r+0xb0>
 8008826:	2000      	movs	r0, #0
 8008828:	e7f7      	b.n	800881a <__swsetup_r+0xba>
 800882a:	bf00      	nop
 800882c:	200000a4 	.word	0x200000a4
 8008830:	0800930c 	.word	0x0800930c
 8008834:	0800932c 	.word	0x0800932c
 8008838:	080092ec 	.word	0x080092ec

0800883c <_close_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	2300      	movs	r3, #0
 8008840:	4d05      	ldr	r5, [pc, #20]	; (8008858 <_close_r+0x1c>)
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7fa faef 	bl	8002e2a <_close>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_close_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_close_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	2000031c 	.word	0x2000031c

0800885c <__sflush_r>:
 800885c:	898a      	ldrh	r2, [r1, #12]
 800885e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008862:	4605      	mov	r5, r0
 8008864:	0710      	lsls	r0, r2, #28
 8008866:	460c      	mov	r4, r1
 8008868:	d458      	bmi.n	800891c <__sflush_r+0xc0>
 800886a:	684b      	ldr	r3, [r1, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	dc05      	bgt.n	800887c <__sflush_r+0x20>
 8008870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008872:	2b00      	cmp	r3, #0
 8008874:	dc02      	bgt.n	800887c <__sflush_r+0x20>
 8008876:	2000      	movs	r0, #0
 8008878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800887c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800887e:	2e00      	cmp	r6, #0
 8008880:	d0f9      	beq.n	8008876 <__sflush_r+0x1a>
 8008882:	2300      	movs	r3, #0
 8008884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008888:	682f      	ldr	r7, [r5, #0]
 800888a:	602b      	str	r3, [r5, #0]
 800888c:	d032      	beq.n	80088f4 <__sflush_r+0x98>
 800888e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	075a      	lsls	r2, r3, #29
 8008894:	d505      	bpl.n	80088a2 <__sflush_r+0x46>
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	1ac0      	subs	r0, r0, r3
 800889a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800889c:	b10b      	cbz	r3, 80088a2 <__sflush_r+0x46>
 800889e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088a0:	1ac0      	subs	r0, r0, r3
 80088a2:	2300      	movs	r3, #0
 80088a4:	4602      	mov	r2, r0
 80088a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a8:	4628      	mov	r0, r5
 80088aa:	6a21      	ldr	r1, [r4, #32]
 80088ac:	47b0      	blx	r6
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	d106      	bne.n	80088c2 <__sflush_r+0x66>
 80088b4:	6829      	ldr	r1, [r5, #0]
 80088b6:	291d      	cmp	r1, #29
 80088b8:	d82c      	bhi.n	8008914 <__sflush_r+0xb8>
 80088ba:	4a2a      	ldr	r2, [pc, #168]	; (8008964 <__sflush_r+0x108>)
 80088bc:	40ca      	lsrs	r2, r1
 80088be:	07d6      	lsls	r6, r2, #31
 80088c0:	d528      	bpl.n	8008914 <__sflush_r+0xb8>
 80088c2:	2200      	movs	r2, #0
 80088c4:	6062      	str	r2, [r4, #4]
 80088c6:	6922      	ldr	r2, [r4, #16]
 80088c8:	04d9      	lsls	r1, r3, #19
 80088ca:	6022      	str	r2, [r4, #0]
 80088cc:	d504      	bpl.n	80088d8 <__sflush_r+0x7c>
 80088ce:	1c42      	adds	r2, r0, #1
 80088d0:	d101      	bne.n	80088d6 <__sflush_r+0x7a>
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	b903      	cbnz	r3, 80088d8 <__sflush_r+0x7c>
 80088d6:	6560      	str	r0, [r4, #84]	; 0x54
 80088d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088da:	602f      	str	r7, [r5, #0]
 80088dc:	2900      	cmp	r1, #0
 80088de:	d0ca      	beq.n	8008876 <__sflush_r+0x1a>
 80088e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e4:	4299      	cmp	r1, r3
 80088e6:	d002      	beq.n	80088ee <__sflush_r+0x92>
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 f909 	bl	8008b00 <_free_r>
 80088ee:	2000      	movs	r0, #0
 80088f0:	6360      	str	r0, [r4, #52]	; 0x34
 80088f2:	e7c1      	b.n	8008878 <__sflush_r+0x1c>
 80088f4:	6a21      	ldr	r1, [r4, #32]
 80088f6:	2301      	movs	r3, #1
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b0      	blx	r6
 80088fc:	1c41      	adds	r1, r0, #1
 80088fe:	d1c7      	bne.n	8008890 <__sflush_r+0x34>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0c4      	beq.n	8008890 <__sflush_r+0x34>
 8008906:	2b1d      	cmp	r3, #29
 8008908:	d001      	beq.n	800890e <__sflush_r+0xb2>
 800890a:	2b16      	cmp	r3, #22
 800890c:	d101      	bne.n	8008912 <__sflush_r+0xb6>
 800890e:	602f      	str	r7, [r5, #0]
 8008910:	e7b1      	b.n	8008876 <__sflush_r+0x1a>
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	e7ad      	b.n	8008878 <__sflush_r+0x1c>
 800891c:	690f      	ldr	r7, [r1, #16]
 800891e:	2f00      	cmp	r7, #0
 8008920:	d0a9      	beq.n	8008876 <__sflush_r+0x1a>
 8008922:	0793      	lsls	r3, r2, #30
 8008924:	bf18      	it	ne
 8008926:	2300      	movne	r3, #0
 8008928:	680e      	ldr	r6, [r1, #0]
 800892a:	bf08      	it	eq
 800892c:	694b      	ldreq	r3, [r1, #20]
 800892e:	eba6 0807 	sub.w	r8, r6, r7
 8008932:	600f      	str	r7, [r1, #0]
 8008934:	608b      	str	r3, [r1, #8]
 8008936:	f1b8 0f00 	cmp.w	r8, #0
 800893a:	dd9c      	ble.n	8008876 <__sflush_r+0x1a>
 800893c:	4643      	mov	r3, r8
 800893e:	463a      	mov	r2, r7
 8008940:	4628      	mov	r0, r5
 8008942:	6a21      	ldr	r1, [r4, #32]
 8008944:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008946:	47b0      	blx	r6
 8008948:	2800      	cmp	r0, #0
 800894a:	dc06      	bgt.n	800895a <__sflush_r+0xfe>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	e78e      	b.n	8008878 <__sflush_r+0x1c>
 800895a:	4407      	add	r7, r0
 800895c:	eba8 0800 	sub.w	r8, r8, r0
 8008960:	e7e9      	b.n	8008936 <__sflush_r+0xda>
 8008962:	bf00      	nop
 8008964:	20400001 	.word	0x20400001

08008968 <_fflush_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	690b      	ldr	r3, [r1, #16]
 800896c:	4605      	mov	r5, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b913      	cbnz	r3, 8008978 <_fflush_r+0x10>
 8008972:	2500      	movs	r5, #0
 8008974:	4628      	mov	r0, r5
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	b118      	cbz	r0, 8008982 <_fflush_r+0x1a>
 800897a:	6983      	ldr	r3, [r0, #24]
 800897c:	b90b      	cbnz	r3, 8008982 <_fflush_r+0x1a>
 800897e:	f7ff fa4f 	bl	8007e20 <__sinit>
 8008982:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <_fflush_r+0x6c>)
 8008984:	429c      	cmp	r4, r3
 8008986:	d11b      	bne.n	80089c0 <_fflush_r+0x58>
 8008988:	686c      	ldr	r4, [r5, #4]
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0ef      	beq.n	8008972 <_fflush_r+0xa>
 8008992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008994:	07d0      	lsls	r0, r2, #31
 8008996:	d404      	bmi.n	80089a2 <_fflush_r+0x3a>
 8008998:	0599      	lsls	r1, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_fflush_r+0x3a>
 800899c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800899e:	f7ff fadd 	bl	8007f5c <__retarget_lock_acquire_recursive>
 80089a2:	4628      	mov	r0, r5
 80089a4:	4621      	mov	r1, r4
 80089a6:	f7ff ff59 	bl	800885c <__sflush_r>
 80089aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ac:	4605      	mov	r5, r0
 80089ae:	07da      	lsls	r2, r3, #31
 80089b0:	d4e0      	bmi.n	8008974 <_fflush_r+0xc>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	059b      	lsls	r3, r3, #22
 80089b6:	d4dd      	bmi.n	8008974 <_fflush_r+0xc>
 80089b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ba:	f7ff fad0 	bl	8007f5e <__retarget_lock_release_recursive>
 80089be:	e7d9      	b.n	8008974 <_fflush_r+0xc>
 80089c0:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <_fflush_r+0x70>)
 80089c2:	429c      	cmp	r4, r3
 80089c4:	d101      	bne.n	80089ca <_fflush_r+0x62>
 80089c6:	68ac      	ldr	r4, [r5, #8]
 80089c8:	e7df      	b.n	800898a <_fflush_r+0x22>
 80089ca:	4b04      	ldr	r3, [pc, #16]	; (80089dc <_fflush_r+0x74>)
 80089cc:	429c      	cmp	r4, r3
 80089ce:	bf08      	it	eq
 80089d0:	68ec      	ldreq	r4, [r5, #12]
 80089d2:	e7da      	b.n	800898a <_fflush_r+0x22>
 80089d4:	0800930c 	.word	0x0800930c
 80089d8:	0800932c 	.word	0x0800932c
 80089dc:	080092ec 	.word	0x080092ec

080089e0 <_lseek_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	4611      	mov	r1, r2
 80089e8:	2200      	movs	r2, #0
 80089ea:	4d05      	ldr	r5, [pc, #20]	; (8008a00 <_lseek_r+0x20>)
 80089ec:	602a      	str	r2, [r5, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f7fa fa3f 	bl	8002e72 <_lseek>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_lseek_r+0x1e>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_lseek_r+0x1e>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	2000031c 	.word	0x2000031c

08008a04 <__swhatbuf_r>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	460e      	mov	r6, r1
 8008a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	461d      	mov	r5, r3
 8008a12:	b096      	sub	sp, #88	; 0x58
 8008a14:	da07      	bge.n	8008a26 <__swhatbuf_r+0x22>
 8008a16:	2300      	movs	r3, #0
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	89b3      	ldrh	r3, [r6, #12]
 8008a1c:	061a      	lsls	r2, r3, #24
 8008a1e:	d410      	bmi.n	8008a42 <__swhatbuf_r+0x3e>
 8008a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a24:	e00e      	b.n	8008a44 <__swhatbuf_r+0x40>
 8008a26:	466a      	mov	r2, sp
 8008a28:	f000 f8c8 	bl	8008bbc <_fstat_r>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	dbf2      	blt.n	8008a16 <__swhatbuf_r+0x12>
 8008a30:	9a01      	ldr	r2, [sp, #4]
 8008a32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a3a:	425a      	negs	r2, r3
 8008a3c:	415a      	adcs	r2, r3
 8008a3e:	602a      	str	r2, [r5, #0]
 8008a40:	e7ee      	b.n	8008a20 <__swhatbuf_r+0x1c>
 8008a42:	2340      	movs	r3, #64	; 0x40
 8008a44:	2000      	movs	r0, #0
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	b016      	add	sp, #88	; 0x58
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}

08008a4c <__smakebuf_r>:
 8008a4c:	898b      	ldrh	r3, [r1, #12]
 8008a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a50:	079d      	lsls	r5, r3, #30
 8008a52:	4606      	mov	r6, r0
 8008a54:	460c      	mov	r4, r1
 8008a56:	d507      	bpl.n	8008a68 <__smakebuf_r+0x1c>
 8008a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	6123      	str	r3, [r4, #16]
 8008a60:	2301      	movs	r3, #1
 8008a62:	6163      	str	r3, [r4, #20]
 8008a64:	b002      	add	sp, #8
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	466a      	mov	r2, sp
 8008a6a:	ab01      	add	r3, sp, #4
 8008a6c:	f7ff ffca 	bl	8008a04 <__swhatbuf_r>
 8008a70:	9900      	ldr	r1, [sp, #0]
 8008a72:	4605      	mov	r5, r0
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff fa73 	bl	8007f60 <_malloc_r>
 8008a7a:	b948      	cbnz	r0, 8008a90 <__smakebuf_r+0x44>
 8008a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a80:	059a      	lsls	r2, r3, #22
 8008a82:	d4ef      	bmi.n	8008a64 <__smakebuf_r+0x18>
 8008a84:	f023 0303 	bic.w	r3, r3, #3
 8008a88:	f043 0302 	orr.w	r3, r3, #2
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	e7e3      	b.n	8008a58 <__smakebuf_r+0xc>
 8008a90:	4b0d      	ldr	r3, [pc, #52]	; (8008ac8 <__smakebuf_r+0x7c>)
 8008a92:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	6020      	str	r0, [r4, #0]
 8008a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9c:	81a3      	strh	r3, [r4, #12]
 8008a9e:	9b00      	ldr	r3, [sp, #0]
 8008aa0:	6120      	str	r0, [r4, #16]
 8008aa2:	6163      	str	r3, [r4, #20]
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	b15b      	cbz	r3, 8008ac0 <__smakebuf_r+0x74>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aae:	f000 f897 	bl	8008be0 <_isatty_r>
 8008ab2:	b128      	cbz	r0, 8008ac0 <__smakebuf_r+0x74>
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	f043 0301 	orr.w	r3, r3, #1
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	89a0      	ldrh	r0, [r4, #12]
 8008ac2:	4305      	orrs	r5, r0
 8008ac4:	81a5      	strh	r5, [r4, #12]
 8008ac6:	e7cd      	b.n	8008a64 <__smakebuf_r+0x18>
 8008ac8:	08007db9 	.word	0x08007db9

08008acc <memchr>:
 8008acc:	4603      	mov	r3, r0
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	b2c9      	uxtb	r1, r1
 8008ad2:	4402      	add	r2, r0
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	d101      	bne.n	8008ade <memchr+0x12>
 8008ada:	2000      	movs	r0, #0
 8008adc:	e003      	b.n	8008ae6 <memchr+0x1a>
 8008ade:	7804      	ldrb	r4, [r0, #0]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	428c      	cmp	r4, r1
 8008ae4:	d1f6      	bne.n	8008ad4 <memchr+0x8>
 8008ae6:	bd10      	pop	{r4, pc}

08008ae8 <__malloc_lock>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	; (8008af0 <__malloc_lock+0x8>)
 8008aea:	f7ff ba37 	b.w	8007f5c <__retarget_lock_acquire_recursive>
 8008aee:	bf00      	nop
 8008af0:	20000314 	.word	0x20000314

08008af4 <__malloc_unlock>:
 8008af4:	4801      	ldr	r0, [pc, #4]	; (8008afc <__malloc_unlock+0x8>)
 8008af6:	f7ff ba32 	b.w	8007f5e <__retarget_lock_release_recursive>
 8008afa:	bf00      	nop
 8008afc:	20000314 	.word	0x20000314

08008b00 <_free_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4605      	mov	r5, r0
 8008b04:	2900      	cmp	r1, #0
 8008b06:	d043      	beq.n	8008b90 <_free_r+0x90>
 8008b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b0c:	1f0c      	subs	r4, r1, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	bfb8      	it	lt
 8008b12:	18e4      	addlt	r4, r4, r3
 8008b14:	f7ff ffe8 	bl	8008ae8 <__malloc_lock>
 8008b18:	4a1e      	ldr	r2, [pc, #120]	; (8008b94 <_free_r+0x94>)
 8008b1a:	6813      	ldr	r3, [r2, #0]
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	b933      	cbnz	r3, 8008b2e <_free_r+0x2e>
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	6014      	str	r4, [r2, #0]
 8008b24:	4628      	mov	r0, r5
 8008b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b2a:	f7ff bfe3 	b.w	8008af4 <__malloc_unlock>
 8008b2e:	42a3      	cmp	r3, r4
 8008b30:	d90a      	bls.n	8008b48 <_free_r+0x48>
 8008b32:	6821      	ldr	r1, [r4, #0]
 8008b34:	1862      	adds	r2, r4, r1
 8008b36:	4293      	cmp	r3, r2
 8008b38:	bf01      	itttt	eq
 8008b3a:	681a      	ldreq	r2, [r3, #0]
 8008b3c:	685b      	ldreq	r3, [r3, #4]
 8008b3e:	1852      	addeq	r2, r2, r1
 8008b40:	6022      	streq	r2, [r4, #0]
 8008b42:	6063      	str	r3, [r4, #4]
 8008b44:	6004      	str	r4, [r0, #0]
 8008b46:	e7ed      	b.n	8008b24 <_free_r+0x24>
 8008b48:	461a      	mov	r2, r3
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	b10b      	cbz	r3, 8008b52 <_free_r+0x52>
 8008b4e:	42a3      	cmp	r3, r4
 8008b50:	d9fa      	bls.n	8008b48 <_free_r+0x48>
 8008b52:	6811      	ldr	r1, [r2, #0]
 8008b54:	1850      	adds	r0, r2, r1
 8008b56:	42a0      	cmp	r0, r4
 8008b58:	d10b      	bne.n	8008b72 <_free_r+0x72>
 8008b5a:	6820      	ldr	r0, [r4, #0]
 8008b5c:	4401      	add	r1, r0
 8008b5e:	1850      	adds	r0, r2, r1
 8008b60:	4283      	cmp	r3, r0
 8008b62:	6011      	str	r1, [r2, #0]
 8008b64:	d1de      	bne.n	8008b24 <_free_r+0x24>
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	4401      	add	r1, r0
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	6053      	str	r3, [r2, #4]
 8008b70:	e7d8      	b.n	8008b24 <_free_r+0x24>
 8008b72:	d902      	bls.n	8008b7a <_free_r+0x7a>
 8008b74:	230c      	movs	r3, #12
 8008b76:	602b      	str	r3, [r5, #0]
 8008b78:	e7d4      	b.n	8008b24 <_free_r+0x24>
 8008b7a:	6820      	ldr	r0, [r4, #0]
 8008b7c:	1821      	adds	r1, r4, r0
 8008b7e:	428b      	cmp	r3, r1
 8008b80:	bf01      	itttt	eq
 8008b82:	6819      	ldreq	r1, [r3, #0]
 8008b84:	685b      	ldreq	r3, [r3, #4]
 8008b86:	1809      	addeq	r1, r1, r0
 8008b88:	6021      	streq	r1, [r4, #0]
 8008b8a:	6063      	str	r3, [r4, #4]
 8008b8c:	6054      	str	r4, [r2, #4]
 8008b8e:	e7c9      	b.n	8008b24 <_free_r+0x24>
 8008b90:	bd38      	pop	{r3, r4, r5, pc}
 8008b92:	bf00      	nop
 8008b94:	20000150 	.word	0x20000150

08008b98 <_read_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4d05      	ldr	r5, [pc, #20]	; (8008bb8 <_read_r+0x20>)
 8008ba4:	602a      	str	r2, [r5, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f7fa f906 	bl	8002db8 <_read>
 8008bac:	1c43      	adds	r3, r0, #1
 8008bae:	d102      	bne.n	8008bb6 <_read_r+0x1e>
 8008bb0:	682b      	ldr	r3, [r5, #0]
 8008bb2:	b103      	cbz	r3, 8008bb6 <_read_r+0x1e>
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	2000031c 	.word	0x2000031c

08008bbc <_fstat_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4d06      	ldr	r5, [pc, #24]	; (8008bdc <_fstat_r+0x20>)
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	f7fa f939 	bl	8002e40 <_fstat>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	d102      	bne.n	8008bd8 <_fstat_r+0x1c>
 8008bd2:	682b      	ldr	r3, [r5, #0]
 8008bd4:	b103      	cbz	r3, 8008bd8 <_fstat_r+0x1c>
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	bd38      	pop	{r3, r4, r5, pc}
 8008bda:	bf00      	nop
 8008bdc:	2000031c 	.word	0x2000031c

08008be0 <_isatty_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	2300      	movs	r3, #0
 8008be4:	4d05      	ldr	r5, [pc, #20]	; (8008bfc <_isatty_r+0x1c>)
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	f7fa f937 	bl	8002e5e <_isatty>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_isatty_r+0x1a>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_isatty_r+0x1a>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	2000031c 	.word	0x2000031c

08008c00 <atan>:
 8008c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	4bb6      	ldr	r3, [pc, #728]	; (8008ee0 <atan+0x2e0>)
 8008c06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c0a:	429e      	cmp	r6, r3
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	468b      	mov	fp, r1
 8008c12:	dd17      	ble.n	8008c44 <atan+0x44>
 8008c14:	4bb3      	ldr	r3, [pc, #716]	; (8008ee4 <atan+0x2e4>)
 8008c16:	429e      	cmp	r6, r3
 8008c18:	dc01      	bgt.n	8008c1e <atan+0x1e>
 8008c1a:	d109      	bne.n	8008c30 <atan+0x30>
 8008c1c:	b140      	cbz	r0, 8008c30 <atan+0x30>
 8008c1e:	4622      	mov	r2, r4
 8008c20:	462b      	mov	r3, r5
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fb05 	bl	8000234 <__adddf3>
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	460d      	mov	r5, r1
 8008c2e:	e005      	b.n	8008c3c <atan+0x3c>
 8008c30:	f1bb 0f00 	cmp.w	fp, #0
 8008c34:	4cac      	ldr	r4, [pc, #688]	; (8008ee8 <atan+0x2e8>)
 8008c36:	f300 8121 	bgt.w	8008e7c <atan+0x27c>
 8008c3a:	4dac      	ldr	r5, [pc, #688]	; (8008eec <atan+0x2ec>)
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	4baa      	ldr	r3, [pc, #680]	; (8008ef0 <atan+0x2f0>)
 8008c46:	429e      	cmp	r6, r3
 8008c48:	dc11      	bgt.n	8008c6e <atan+0x6e>
 8008c4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008c4e:	429e      	cmp	r6, r3
 8008c50:	dc0a      	bgt.n	8008c68 <atan+0x68>
 8008c52:	a38b      	add	r3, pc, #556	; (adr r3, 8008e80 <atan+0x280>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f7f7 faec 	bl	8000234 <__adddf3>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4ba5      	ldr	r3, [pc, #660]	; (8008ef4 <atan+0x2f4>)
 8008c60:	f7f7 ff2e 	bl	8000ac0 <__aeabi_dcmpgt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d1e9      	bne.n	8008c3c <atan+0x3c>
 8008c68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008c6c:	e027      	b.n	8008cbe <atan+0xbe>
 8008c6e:	f000 f951 	bl	8008f14 <fabs>
 8008c72:	4ba1      	ldr	r3, [pc, #644]	; (8008ef8 <atan+0x2f8>)
 8008c74:	4604      	mov	r4, r0
 8008c76:	429e      	cmp	r6, r3
 8008c78:	460d      	mov	r5, r1
 8008c7a:	f300 80b8 	bgt.w	8008dee <atan+0x1ee>
 8008c7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008c82:	429e      	cmp	r6, r3
 8008c84:	f300 809c 	bgt.w	8008dc0 <atan+0x1c0>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	f7f7 fad2 	bl	8000234 <__adddf3>
 8008c90:	2200      	movs	r2, #0
 8008c92:	4b98      	ldr	r3, [pc, #608]	; (8008ef4 <atan+0x2f4>)
 8008c94:	f7f7 facc 	bl	8000230 <__aeabi_dsub>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	f7f7 fac5 	bl	8000234 <__adddf3>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fd9f 	bl	80007f4 <__aeabi_ddiv>
 8008cb6:	f04f 0a00 	mov.w	sl, #0
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	462b      	mov	r3, r5
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	f7f7 fc6b 	bl	80005a0 <__aeabi_dmul>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4680      	mov	r8, r0
 8008cd0:	4689      	mov	r9, r1
 8008cd2:	f7f7 fc65 	bl	80005a0 <__aeabi_dmul>
 8008cd6:	a36c      	add	r3, pc, #432	; (adr r3, 8008e88 <atan+0x288>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	f7f7 fc5e 	bl	80005a0 <__aeabi_dmul>
 8008ce4:	a36a      	add	r3, pc, #424	; (adr r3, 8008e90 <atan+0x290>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 faa3 	bl	8000234 <__adddf3>
 8008cee:	4632      	mov	r2, r6
 8008cf0:	463b      	mov	r3, r7
 8008cf2:	f7f7 fc55 	bl	80005a0 <__aeabi_dmul>
 8008cf6:	a368      	add	r3, pc, #416	; (adr r3, 8008e98 <atan+0x298>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 fa9a 	bl	8000234 <__adddf3>
 8008d00:	4632      	mov	r2, r6
 8008d02:	463b      	mov	r3, r7
 8008d04:	f7f7 fc4c 	bl	80005a0 <__aeabi_dmul>
 8008d08:	a365      	add	r3, pc, #404	; (adr r3, 8008ea0 <atan+0x2a0>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fa91 	bl	8000234 <__adddf3>
 8008d12:	4632      	mov	r2, r6
 8008d14:	463b      	mov	r3, r7
 8008d16:	f7f7 fc43 	bl	80005a0 <__aeabi_dmul>
 8008d1a:	a363      	add	r3, pc, #396	; (adr r3, 8008ea8 <atan+0x2a8>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fa88 	bl	8000234 <__adddf3>
 8008d24:	4632      	mov	r2, r6
 8008d26:	463b      	mov	r3, r7
 8008d28:	f7f7 fc3a 	bl	80005a0 <__aeabi_dmul>
 8008d2c:	a360      	add	r3, pc, #384	; (adr r3, 8008eb0 <atan+0x2b0>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fa7f 	bl	8000234 <__adddf3>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	f7f7 fc31 	bl	80005a0 <__aeabi_dmul>
 8008d3e:	a35e      	add	r3, pc, #376	; (adr r3, 8008eb8 <atan+0x2b8>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	4680      	mov	r8, r0
 8008d46:	4689      	mov	r9, r1
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fc28 	bl	80005a0 <__aeabi_dmul>
 8008d50:	a35b      	add	r3, pc, #364	; (adr r3, 8008ec0 <atan+0x2c0>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 fa6b 	bl	8000230 <__aeabi_dsub>
 8008d5a:	4632      	mov	r2, r6
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	f7f7 fc1f 	bl	80005a0 <__aeabi_dmul>
 8008d62:	a359      	add	r3, pc, #356	; (adr r3, 8008ec8 <atan+0x2c8>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fa62 	bl	8000230 <__aeabi_dsub>
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	463b      	mov	r3, r7
 8008d70:	f7f7 fc16 	bl	80005a0 <__aeabi_dmul>
 8008d74:	a356      	add	r3, pc, #344	; (adr r3, 8008ed0 <atan+0x2d0>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fa59 	bl	8000230 <__aeabi_dsub>
 8008d7e:	4632      	mov	r2, r6
 8008d80:	463b      	mov	r3, r7
 8008d82:	f7f7 fc0d 	bl	80005a0 <__aeabi_dmul>
 8008d86:	a354      	add	r3, pc, #336	; (adr r3, 8008ed8 <atan+0x2d8>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fa50 	bl	8000230 <__aeabi_dsub>
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	f7f7 fc04 	bl	80005a0 <__aeabi_dmul>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	4649      	mov	r1, r9
 8008da0:	f7f7 fa48 	bl	8000234 <__adddf3>
 8008da4:	4622      	mov	r2, r4
 8008da6:	462b      	mov	r3, r5
 8008da8:	f7f7 fbfa 	bl	80005a0 <__aeabi_dmul>
 8008dac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	d144      	bne.n	8008e40 <atan+0x240>
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 fa39 	bl	8000230 <__aeabi_dsub>
 8008dbe:	e734      	b.n	8008c2a <atan+0x2a>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b4c      	ldr	r3, [pc, #304]	; (8008ef4 <atan+0x2f4>)
 8008dc4:	f7f7 fa34 	bl	8000230 <__aeabi_dsub>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4606      	mov	r6, r0
 8008dcc:	460f      	mov	r7, r1
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4b48      	ldr	r3, [pc, #288]	; (8008ef4 <atan+0x2f4>)
 8008dd4:	f7f7 fa2e 	bl	8000234 <__adddf3>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7f7 fd08 	bl	80007f4 <__aeabi_ddiv>
 8008de4:	f04f 0a01 	mov.w	sl, #1
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	e767      	b.n	8008cbe <atan+0xbe>
 8008dee:	4b43      	ldr	r3, [pc, #268]	; (8008efc <atan+0x2fc>)
 8008df0:	429e      	cmp	r6, r3
 8008df2:	da1a      	bge.n	8008e2a <atan+0x22a>
 8008df4:	2200      	movs	r2, #0
 8008df6:	4b42      	ldr	r3, [pc, #264]	; (8008f00 <atan+0x300>)
 8008df8:	f7f7 fa1a 	bl	8000230 <__aeabi_dsub>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	4620      	mov	r0, r4
 8008e04:	4629      	mov	r1, r5
 8008e06:	4b3e      	ldr	r3, [pc, #248]	; (8008f00 <atan+0x300>)
 8008e08:	f7f7 fbca 	bl	80005a0 <__aeabi_dmul>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4b39      	ldr	r3, [pc, #228]	; (8008ef4 <atan+0x2f4>)
 8008e10:	f7f7 fa10 	bl	8000234 <__adddf3>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 fcea 	bl	80007f4 <__aeabi_ddiv>
 8008e20:	f04f 0a02 	mov.w	sl, #2
 8008e24:	4604      	mov	r4, r0
 8008e26:	460d      	mov	r5, r1
 8008e28:	e749      	b.n	8008cbe <atan+0xbe>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	2000      	movs	r0, #0
 8008e30:	4934      	ldr	r1, [pc, #208]	; (8008f04 <atan+0x304>)
 8008e32:	f7f7 fcdf 	bl	80007f4 <__aeabi_ddiv>
 8008e36:	f04f 0a03 	mov.w	sl, #3
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	460d      	mov	r5, r1
 8008e3e:	e73e      	b.n	8008cbe <atan+0xbe>
 8008e40:	4b31      	ldr	r3, [pc, #196]	; (8008f08 <atan+0x308>)
 8008e42:	4e32      	ldr	r6, [pc, #200]	; (8008f0c <atan+0x30c>)
 8008e44:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008e48:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008e4c:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e50:	f7f7 f9ee 	bl	8000230 <__aeabi_dsub>
 8008e54:	4622      	mov	r2, r4
 8008e56:	462b      	mov	r3, r5
 8008e58:	f7f7 f9ea 	bl	8000230 <__aeabi_dsub>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008e64:	f7f7 f9e4 	bl	8000230 <__aeabi_dsub>
 8008e68:	f1bb 0f00 	cmp.w	fp, #0
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	f6bf aee4 	bge.w	8008c3c <atan+0x3c>
 8008e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e78:	461d      	mov	r5, r3
 8008e7a:	e6df      	b.n	8008c3c <atan+0x3c>
 8008e7c:	4d24      	ldr	r5, [pc, #144]	; (8008f10 <atan+0x310>)
 8008e7e:	e6dd      	b.n	8008c3c <atan+0x3c>
 8008e80:	8800759c 	.word	0x8800759c
 8008e84:	7e37e43c 	.word	0x7e37e43c
 8008e88:	e322da11 	.word	0xe322da11
 8008e8c:	3f90ad3a 	.word	0x3f90ad3a
 8008e90:	24760deb 	.word	0x24760deb
 8008e94:	3fa97b4b 	.word	0x3fa97b4b
 8008e98:	a0d03d51 	.word	0xa0d03d51
 8008e9c:	3fb10d66 	.word	0x3fb10d66
 8008ea0:	c54c206e 	.word	0xc54c206e
 8008ea4:	3fb745cd 	.word	0x3fb745cd
 8008ea8:	920083ff 	.word	0x920083ff
 8008eac:	3fc24924 	.word	0x3fc24924
 8008eb0:	5555550d 	.word	0x5555550d
 8008eb4:	3fd55555 	.word	0x3fd55555
 8008eb8:	2c6a6c2f 	.word	0x2c6a6c2f
 8008ebc:	bfa2b444 	.word	0xbfa2b444
 8008ec0:	52defd9a 	.word	0x52defd9a
 8008ec4:	3fadde2d 	.word	0x3fadde2d
 8008ec8:	af749a6d 	.word	0xaf749a6d
 8008ecc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008ed0:	fe231671 	.word	0xfe231671
 8008ed4:	3fbc71c6 	.word	0x3fbc71c6
 8008ed8:	9998ebc4 	.word	0x9998ebc4
 8008edc:	3fc99999 	.word	0x3fc99999
 8008ee0:	440fffff 	.word	0x440fffff
 8008ee4:	7ff00000 	.word	0x7ff00000
 8008ee8:	54442d18 	.word	0x54442d18
 8008eec:	bff921fb 	.word	0xbff921fb
 8008ef0:	3fdbffff 	.word	0x3fdbffff
 8008ef4:	3ff00000 	.word	0x3ff00000
 8008ef8:	3ff2ffff 	.word	0x3ff2ffff
 8008efc:	40038000 	.word	0x40038000
 8008f00:	3ff80000 	.word	0x3ff80000
 8008f04:	bff00000 	.word	0xbff00000
 8008f08:	080093a0 	.word	0x080093a0
 8008f0c:	08009380 	.word	0x08009380
 8008f10:	3ff921fb 	.word	0x3ff921fb

08008f14 <fabs>:
 8008f14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008f18:	4770      	bx	lr

08008f1a <atan2>:
 8008f1a:	f000 b82d 	b.w	8008f78 <__ieee754_atan2>
	...

08008f20 <sqrt>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	4606      	mov	r6, r0
 8008f24:	460f      	mov	r7, r1
 8008f26:	f000 f8f9 	bl	800911c <__ieee754_sqrt>
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <sqrt+0x54>)
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8008f32:	460d      	mov	r5, r1
 8008f34:	3301      	adds	r3, #1
 8008f36:	d019      	beq.n	8008f6c <sqrt+0x4c>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	4639      	mov	r1, r7
 8008f40:	f7f7 fdc8 	bl	8000ad4 <__aeabi_dcmpun>
 8008f44:	b990      	cbnz	r0, 8008f6c <sqrt+0x4c>
 8008f46:	2200      	movs	r2, #0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	f7f7 fd99 	bl	8000a84 <__aeabi_dcmplt>
 8008f52:	b158      	cbz	r0, 8008f6c <sqrt+0x4c>
 8008f54:	f7fe fec2 	bl	8007cdc <__errno>
 8008f58:	2321      	movs	r3, #33	; 0x21
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	6003      	str	r3, [r0, #0]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	f7f7 fc46 	bl	80007f4 <__aeabi_ddiv>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000108 	.word	0x20000108

08008f78 <__ieee754_atan2>:
 8008f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	4692      	mov	sl, r2
 8008f7e:	4699      	mov	r9, r3
 8008f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008f84:	461f      	mov	r7, r3
 8008f86:	f1ca 0300 	rsb	r3, sl, #0
 8008f8a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8009118 <__ieee754_atan2+0x1a0>
 8008f8e:	ea43 030a 	orr.w	r3, r3, sl
 8008f92:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008f96:	4573      	cmp	r3, lr
 8008f98:	4604      	mov	r4, r0
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	d808      	bhi.n	8008fb0 <__ieee754_atan2+0x38>
 8008f9e:	4246      	negs	r6, r0
 8008fa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008fa4:	4306      	orrs	r6, r0
 8008fa6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8008faa:	4576      	cmp	r6, lr
 8008fac:	468c      	mov	ip, r1
 8008fae:	d908      	bls.n	8008fc2 <__ieee754_atan2+0x4a>
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	f7f7 f93c 	bl	8000234 <__adddf3>
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	460d      	mov	r5, r1
 8008fc0:	e019      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 8008fc2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8008fc6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008fca:	ea56 060a 	orrs.w	r6, r6, sl
 8008fce:	d103      	bne.n	8008fd8 <__ieee754_atan2+0x60>
 8008fd0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	f7ff be14 	b.w	8008c00 <atan>
 8008fd8:	17be      	asrs	r6, r7, #30
 8008fda:	f006 0602 	and.w	r6, r6, #2
 8008fde:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008fe2:	ea53 0100 	orrs.w	r1, r3, r0
 8008fe6:	d10a      	bne.n	8008ffe <__ieee754_atan2+0x86>
 8008fe8:	2e02      	cmp	r6, #2
 8008fea:	d067      	beq.n	80090bc <__ieee754_atan2+0x144>
 8008fec:	2e03      	cmp	r6, #3
 8008fee:	d102      	bne.n	8008ff6 <__ieee754_atan2+0x7e>
 8008ff0:	a53b      	add	r5, pc, #236	; (adr r5, 80090e0 <__ieee754_atan2+0x168>)
 8008ff2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	ea52 010a 	orrs.w	r1, r2, sl
 8009002:	d106      	bne.n	8009012 <__ieee754_atan2+0x9a>
 8009004:	f1bc 0f00 	cmp.w	ip, #0
 8009008:	da63      	bge.n	80090d2 <__ieee754_atan2+0x15a>
 800900a:	a537      	add	r5, pc, #220	; (adr r5, 80090e8 <__ieee754_atan2+0x170>)
 800900c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009010:	e7f1      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 8009012:	4572      	cmp	r2, lr
 8009014:	d10f      	bne.n	8009036 <__ieee754_atan2+0xbe>
 8009016:	4293      	cmp	r3, r2
 8009018:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800901c:	d107      	bne.n	800902e <__ieee754_atan2+0xb6>
 800901e:	2e02      	cmp	r6, #2
 8009020:	d850      	bhi.n	80090c4 <__ieee754_atan2+0x14c>
 8009022:	4b3b      	ldr	r3, [pc, #236]	; (8009110 <__ieee754_atan2+0x198>)
 8009024:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009028:	e9d6 4500 	ldrd	r4, r5, [r6]
 800902c:	e7e3      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 800902e:	2e02      	cmp	r6, #2
 8009030:	d84c      	bhi.n	80090cc <__ieee754_atan2+0x154>
 8009032:	4b38      	ldr	r3, [pc, #224]	; (8009114 <__ieee754_atan2+0x19c>)
 8009034:	e7f6      	b.n	8009024 <__ieee754_atan2+0xac>
 8009036:	4573      	cmp	r3, lr
 8009038:	d0e4      	beq.n	8009004 <__ieee754_atan2+0x8c>
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009040:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009044:	da20      	bge.n	8009088 <__ieee754_atan2+0x110>
 8009046:	2f00      	cmp	r7, #0
 8009048:	da01      	bge.n	800904e <__ieee754_atan2+0xd6>
 800904a:	323c      	adds	r2, #60	; 0x3c
 800904c:	db20      	blt.n	8009090 <__ieee754_atan2+0x118>
 800904e:	4652      	mov	r2, sl
 8009050:	464b      	mov	r3, r9
 8009052:	4620      	mov	r0, r4
 8009054:	4629      	mov	r1, r5
 8009056:	f7f7 fbcd 	bl	80007f4 <__aeabi_ddiv>
 800905a:	f7ff ff5b 	bl	8008f14 <fabs>
 800905e:	f7ff fdcf 	bl	8008c00 <atan>
 8009062:	4604      	mov	r4, r0
 8009064:	460d      	mov	r5, r1
 8009066:	2e01      	cmp	r6, #1
 8009068:	d015      	beq.n	8009096 <__ieee754_atan2+0x11e>
 800906a:	2e02      	cmp	r6, #2
 800906c:	d017      	beq.n	800909e <__ieee754_atan2+0x126>
 800906e:	2e00      	cmp	r6, #0
 8009070:	d0c1      	beq.n	8008ff6 <__ieee754_atan2+0x7e>
 8009072:	a31f      	add	r3, pc, #124	; (adr r3, 80090f0 <__ieee754_atan2+0x178>)
 8009074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009078:	4620      	mov	r0, r4
 800907a:	4629      	mov	r1, r5
 800907c:	f7f7 f8d8 	bl	8000230 <__aeabi_dsub>
 8009080:	a31d      	add	r3, pc, #116	; (adr r3, 80090f8 <__ieee754_atan2+0x180>)
 8009082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009086:	e016      	b.n	80090b6 <__ieee754_atan2+0x13e>
 8009088:	a51d      	add	r5, pc, #116	; (adr r5, 8009100 <__ieee754_atan2+0x188>)
 800908a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800908e:	e7ea      	b.n	8009066 <__ieee754_atan2+0xee>
 8009090:	2400      	movs	r4, #0
 8009092:	2500      	movs	r5, #0
 8009094:	e7e7      	b.n	8009066 <__ieee754_atan2+0xee>
 8009096:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800909a:	461d      	mov	r5, r3
 800909c:	e7ab      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 800909e:	a314      	add	r3, pc, #80	; (adr r3, 80090f0 <__ieee754_atan2+0x178>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	4620      	mov	r0, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	f7f7 f8c2 	bl	8000230 <__aeabi_dsub>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	a111      	add	r1, pc, #68	; (adr r1, 80090f8 <__ieee754_atan2+0x180>)
 80090b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090b6:	f7f7 f8bb 	bl	8000230 <__aeabi_dsub>
 80090ba:	e77f      	b.n	8008fbc <__ieee754_atan2+0x44>
 80090bc:	a50e      	add	r5, pc, #56	; (adr r5, 80090f8 <__ieee754_atan2+0x180>)
 80090be:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090c2:	e798      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 80090c4:	a510      	add	r5, pc, #64	; (adr r5, 8009108 <__ieee754_atan2+0x190>)
 80090c6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090ca:	e794      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 80090cc:	2400      	movs	r4, #0
 80090ce:	2500      	movs	r5, #0
 80090d0:	e791      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 80090d2:	a50b      	add	r5, pc, #44	; (adr r5, 8009100 <__ieee754_atan2+0x188>)
 80090d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090d8:	e78d      	b.n	8008ff6 <__ieee754_atan2+0x7e>
 80090da:	bf00      	nop
 80090dc:	f3af 8000 	nop.w
 80090e0:	54442d18 	.word	0x54442d18
 80090e4:	c00921fb 	.word	0xc00921fb
 80090e8:	54442d18 	.word	0x54442d18
 80090ec:	bff921fb 	.word	0xbff921fb
 80090f0:	33145c07 	.word	0x33145c07
 80090f4:	3ca1a626 	.word	0x3ca1a626
 80090f8:	54442d18 	.word	0x54442d18
 80090fc:	400921fb 	.word	0x400921fb
 8009100:	54442d18 	.word	0x54442d18
 8009104:	3ff921fb 	.word	0x3ff921fb
 8009108:	54442d18 	.word	0x54442d18
 800910c:	3fe921fb 	.word	0x3fe921fb
 8009110:	080093c0 	.word	0x080093c0
 8009114:	080093d8 	.word	0x080093d8
 8009118:	7ff00000 	.word	0x7ff00000

0800911c <__ieee754_sqrt>:
 800911c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009270 <__ieee754_sqrt+0x154>
 8009120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009124:	ea3c 0c01 	bics.w	ip, ip, r1
 8009128:	460b      	mov	r3, r1
 800912a:	4606      	mov	r6, r0
 800912c:	460d      	mov	r5, r1
 800912e:	460a      	mov	r2, r1
 8009130:	4607      	mov	r7, r0
 8009132:	4604      	mov	r4, r0
 8009134:	d10e      	bne.n	8009154 <__ieee754_sqrt+0x38>
 8009136:	4602      	mov	r2, r0
 8009138:	f7f7 fa32 	bl	80005a0 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4630      	mov	r0, r6
 8009142:	4629      	mov	r1, r5
 8009144:	f7f7 f876 	bl	8000234 <__adddf3>
 8009148:	4606      	mov	r6, r0
 800914a:	460d      	mov	r5, r1
 800914c:	4630      	mov	r0, r6
 800914e:	4629      	mov	r1, r5
 8009150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009154:	2900      	cmp	r1, #0
 8009156:	dc0d      	bgt.n	8009174 <__ieee754_sqrt+0x58>
 8009158:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800915c:	ea5c 0707 	orrs.w	r7, ip, r7
 8009160:	d0f4      	beq.n	800914c <__ieee754_sqrt+0x30>
 8009162:	b139      	cbz	r1, 8009174 <__ieee754_sqrt+0x58>
 8009164:	4602      	mov	r2, r0
 8009166:	f7f7 f863 	bl	8000230 <__aeabi_dsub>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	f7f7 fb41 	bl	80007f4 <__aeabi_ddiv>
 8009172:	e7e9      	b.n	8009148 <__ieee754_sqrt+0x2c>
 8009174:	1512      	asrs	r2, r2, #20
 8009176:	d074      	beq.n	8009262 <__ieee754_sqrt+0x146>
 8009178:	2000      	movs	r0, #0
 800917a:	07d5      	lsls	r5, r2, #31
 800917c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009180:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8009184:	bf5e      	ittt	pl
 8009186:	0fe3      	lsrpl	r3, r4, #31
 8009188:	0064      	lslpl	r4, r4, #1
 800918a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800918e:	0fe3      	lsrs	r3, r4, #31
 8009190:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009194:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009198:	2516      	movs	r5, #22
 800919a:	4601      	mov	r1, r0
 800919c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80091a0:	1076      	asrs	r6, r6, #1
 80091a2:	0064      	lsls	r4, r4, #1
 80091a4:	188f      	adds	r7, r1, r2
 80091a6:	429f      	cmp	r7, r3
 80091a8:	bfde      	ittt	le
 80091aa:	1bdb      	suble	r3, r3, r7
 80091ac:	18b9      	addle	r1, r7, r2
 80091ae:	1880      	addle	r0, r0, r2
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	3d01      	subs	r5, #1
 80091b4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80091b8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80091bc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80091c0:	d1f0      	bne.n	80091a4 <__ieee754_sqrt+0x88>
 80091c2:	462a      	mov	r2, r5
 80091c4:	f04f 0e20 	mov.w	lr, #32
 80091c8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80091cc:	428b      	cmp	r3, r1
 80091ce:	eb07 0c05 	add.w	ip, r7, r5
 80091d2:	dc02      	bgt.n	80091da <__ieee754_sqrt+0xbe>
 80091d4:	d113      	bne.n	80091fe <__ieee754_sqrt+0xe2>
 80091d6:	45a4      	cmp	ip, r4
 80091d8:	d811      	bhi.n	80091fe <__ieee754_sqrt+0xe2>
 80091da:	f1bc 0f00 	cmp.w	ip, #0
 80091de:	eb0c 0507 	add.w	r5, ip, r7
 80091e2:	da43      	bge.n	800926c <__ieee754_sqrt+0x150>
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	db41      	blt.n	800926c <__ieee754_sqrt+0x150>
 80091e8:	f101 0801 	add.w	r8, r1, #1
 80091ec:	1a5b      	subs	r3, r3, r1
 80091ee:	4641      	mov	r1, r8
 80091f0:	45a4      	cmp	ip, r4
 80091f2:	bf88      	it	hi
 80091f4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80091f8:	eba4 040c 	sub.w	r4, r4, ip
 80091fc:	443a      	add	r2, r7
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	f1be 0e01 	subs.w	lr, lr, #1
 8009204:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009208:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800920c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009210:	d1dc      	bne.n	80091cc <__ieee754_sqrt+0xb0>
 8009212:	4323      	orrs	r3, r4
 8009214:	d006      	beq.n	8009224 <__ieee754_sqrt+0x108>
 8009216:	1c54      	adds	r4, r2, #1
 8009218:	bf0b      	itete	eq
 800921a:	4672      	moveq	r2, lr
 800921c:	3201      	addne	r2, #1
 800921e:	3001      	addeq	r0, #1
 8009220:	f022 0201 	bicne.w	r2, r2, #1
 8009224:	1043      	asrs	r3, r0, #1
 8009226:	07c1      	lsls	r1, r0, #31
 8009228:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800922c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009230:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009234:	bf48      	it	mi
 8009236:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800923a:	4610      	mov	r0, r2
 800923c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009240:	e782      	b.n	8009148 <__ieee754_sqrt+0x2c>
 8009242:	0ae3      	lsrs	r3, r4, #11
 8009244:	3915      	subs	r1, #21
 8009246:	0564      	lsls	r4, r4, #21
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0fa      	beq.n	8009242 <__ieee754_sqrt+0x126>
 800924c:	02de      	lsls	r6, r3, #11
 800924e:	d50a      	bpl.n	8009266 <__ieee754_sqrt+0x14a>
 8009250:	f1c2 0020 	rsb	r0, r2, #32
 8009254:	fa24 f000 	lsr.w	r0, r4, r0
 8009258:	1e55      	subs	r5, r2, #1
 800925a:	4094      	lsls	r4, r2
 800925c:	4303      	orrs	r3, r0
 800925e:	1b4a      	subs	r2, r1, r5
 8009260:	e78a      	b.n	8009178 <__ieee754_sqrt+0x5c>
 8009262:	4611      	mov	r1, r2
 8009264:	e7f0      	b.n	8009248 <__ieee754_sqrt+0x12c>
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	3201      	adds	r2, #1
 800926a:	e7ef      	b.n	800924c <__ieee754_sqrt+0x130>
 800926c:	4688      	mov	r8, r1
 800926e:	e7bd      	b.n	80091ec <__ieee754_sqrt+0xd0>
 8009270:	7ff00000 	.word	0x7ff00000

08009274 <_init>:
 8009274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009276:	bf00      	nop
 8009278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927a:	bc08      	pop	{r3}
 800927c:	469e      	mov	lr, r3
 800927e:	4770      	bx	lr

08009280 <_fini>:
 8009280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009282:	bf00      	nop
 8009284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009286:	bc08      	pop	{r3}
 8009288:	469e      	mov	lr, r3
 800928a:	4770      	bx	lr
