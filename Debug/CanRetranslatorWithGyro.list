
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080bc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080082a8  080082a8  000182a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008350  08008350  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008350  08008350  00018350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008358  08008358  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800835c  0800835c  0001835c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008360  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000110  0800846c  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  0800846c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d852  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a4  00000000  00000000  0002d987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00030030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  00030b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207bc  00000000  00000000  00031580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f423  00000000  00000000  00051d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b678a  00000000  00000000  0006115f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001178e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003018  00000000  00000000  0011793c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000110 	.word	0x20000110
 8000204:	00000000 	.word	0x00000000
 8000208:	0800828c 	.word	0x0800828c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000114 	.word	0x20000114
 8000224:	0800828c 	.word	0x0800828c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_uldivmod>:
 800100c:	b953      	cbnz	r3, 8001024 <__aeabi_uldivmod+0x18>
 800100e:	b94a      	cbnz	r2, 8001024 <__aeabi_uldivmod+0x18>
 8001010:	2900      	cmp	r1, #0
 8001012:	bf08      	it	eq
 8001014:	2800      	cmpeq	r0, #0
 8001016:	bf1c      	itt	ne
 8001018:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800101c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 b96e 	b.w	8001300 <__aeabi_idiv0>
 8001024:	f1ad 0c08 	sub.w	ip, sp, #8
 8001028:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800102c:	f000 f806 	bl	800103c <__udivmoddi4>
 8001030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr

0800103c <__udivmoddi4>:
 800103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	9e08      	ldr	r6, [sp, #32]
 8001042:	460d      	mov	r5, r1
 8001044:	4604      	mov	r4, r0
 8001046:	468e      	mov	lr, r1
 8001048:	2b00      	cmp	r3, #0
 800104a:	f040 8083 	bne.w	8001154 <__udivmoddi4+0x118>
 800104e:	428a      	cmp	r2, r1
 8001050:	4617      	mov	r7, r2
 8001052:	d947      	bls.n	80010e4 <__udivmoddi4+0xa8>
 8001054:	fab2 f382 	clz	r3, r2
 8001058:	b14b      	cbz	r3, 800106e <__udivmoddi4+0x32>
 800105a:	f1c3 0120 	rsb	r1, r3, #32
 800105e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001062:	fa20 f101 	lsr.w	r1, r0, r1
 8001066:	409f      	lsls	r7, r3
 8001068:	ea41 0e0e 	orr.w	lr, r1, lr
 800106c:	409c      	lsls	r4, r3
 800106e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001072:	fbbe fcf8 	udiv	ip, lr, r8
 8001076:	fa1f f987 	uxth.w	r9, r7
 800107a:	fb08 e21c 	mls	r2, r8, ip, lr
 800107e:	fb0c f009 	mul.w	r0, ip, r9
 8001082:	0c21      	lsrs	r1, r4, #16
 8001084:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001088:	4290      	cmp	r0, r2
 800108a:	d90a      	bls.n	80010a2 <__udivmoddi4+0x66>
 800108c:	18ba      	adds	r2, r7, r2
 800108e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001092:	f080 8118 	bcs.w	80012c6 <__udivmoddi4+0x28a>
 8001096:	4290      	cmp	r0, r2
 8001098:	f240 8115 	bls.w	80012c6 <__udivmoddi4+0x28a>
 800109c:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a0:	443a      	add	r2, r7
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	fbb2 f0f8 	udiv	r0, r2, r8
 80010a8:	fb08 2210 	mls	r2, r8, r0, r2
 80010ac:	fb00 f109 	mul.w	r1, r0, r9
 80010b0:	b2a4      	uxth	r4, r4
 80010b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010b6:	42a1      	cmp	r1, r4
 80010b8:	d909      	bls.n	80010ce <__udivmoddi4+0x92>
 80010ba:	193c      	adds	r4, r7, r4
 80010bc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010c0:	f080 8103 	bcs.w	80012ca <__udivmoddi4+0x28e>
 80010c4:	42a1      	cmp	r1, r4
 80010c6:	f240 8100 	bls.w	80012ca <__udivmoddi4+0x28e>
 80010ca:	3802      	subs	r0, #2
 80010cc:	443c      	add	r4, r7
 80010ce:	1a64      	subs	r4, r4, r1
 80010d0:	2100      	movs	r1, #0
 80010d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010d6:	b11e      	cbz	r6, 80010e0 <__udivmoddi4+0xa4>
 80010d8:	2200      	movs	r2, #0
 80010da:	40dc      	lsrs	r4, r3
 80010dc:	e9c6 4200 	strd	r4, r2, [r6]
 80010e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e4:	b902      	cbnz	r2, 80010e8 <__udivmoddi4+0xac>
 80010e6:	deff      	udf	#255	; 0xff
 80010e8:	fab2 f382 	clz	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d14f      	bne.n	8001190 <__udivmoddi4+0x154>
 80010f0:	1a8d      	subs	r5, r1, r2
 80010f2:	2101      	movs	r1, #1
 80010f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010f8:	fa1f f882 	uxth.w	r8, r2
 80010fc:	fbb5 fcfe 	udiv	ip, r5, lr
 8001100:	fb0e 551c 	mls	r5, lr, ip, r5
 8001104:	fb08 f00c 	mul.w	r0, r8, ip
 8001108:	0c22      	lsrs	r2, r4, #16
 800110a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800110e:	42a8      	cmp	r0, r5
 8001110:	d907      	bls.n	8001122 <__udivmoddi4+0xe6>
 8001112:	197d      	adds	r5, r7, r5
 8001114:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001118:	d202      	bcs.n	8001120 <__udivmoddi4+0xe4>
 800111a:	42a8      	cmp	r0, r5
 800111c:	f200 80e9 	bhi.w	80012f2 <__udivmoddi4+0x2b6>
 8001120:	4694      	mov	ip, r2
 8001122:	1a2d      	subs	r5, r5, r0
 8001124:	fbb5 f0fe 	udiv	r0, r5, lr
 8001128:	fb0e 5510 	mls	r5, lr, r0, r5
 800112c:	fb08 f800 	mul.w	r8, r8, r0
 8001130:	b2a4      	uxth	r4, r4
 8001132:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001136:	45a0      	cmp	r8, r4
 8001138:	d907      	bls.n	800114a <__udivmoddi4+0x10e>
 800113a:	193c      	adds	r4, r7, r4
 800113c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x10c>
 8001142:	45a0      	cmp	r8, r4
 8001144:	f200 80d9 	bhi.w	80012fa <__udivmoddi4+0x2be>
 8001148:	4610      	mov	r0, r2
 800114a:	eba4 0408 	sub.w	r4, r4, r8
 800114e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001152:	e7c0      	b.n	80010d6 <__udivmoddi4+0x9a>
 8001154:	428b      	cmp	r3, r1
 8001156:	d908      	bls.n	800116a <__udivmoddi4+0x12e>
 8001158:	2e00      	cmp	r6, #0
 800115a:	f000 80b1 	beq.w	80012c0 <__udivmoddi4+0x284>
 800115e:	2100      	movs	r1, #0
 8001160:	e9c6 0500 	strd	r0, r5, [r6]
 8001164:	4608      	mov	r0, r1
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d14b      	bne.n	800120a <__udivmoddi4+0x1ce>
 8001172:	42ab      	cmp	r3, r5
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0x140>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 80b9 	bhi.w	80012ee <__udivmoddi4+0x2b2>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb65 0303 	sbc.w	r3, r5, r3
 8001182:	2001      	movs	r0, #1
 8001184:	469e      	mov	lr, r3
 8001186:	2e00      	cmp	r6, #0
 8001188:	d0aa      	beq.n	80010e0 <__udivmoddi4+0xa4>
 800118a:	e9c6 4e00 	strd	r4, lr, [r6]
 800118e:	e7a7      	b.n	80010e0 <__udivmoddi4+0xa4>
 8001190:	409f      	lsls	r7, r3
 8001192:	f1c3 0220 	rsb	r2, r3, #32
 8001196:	40d1      	lsrs	r1, r2
 8001198:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800119c:	fbb1 f0fe 	udiv	r0, r1, lr
 80011a0:	fa1f f887 	uxth.w	r8, r7
 80011a4:	fb0e 1110 	mls	r1, lr, r0, r1
 80011a8:	fa24 f202 	lsr.w	r2, r4, r2
 80011ac:	409d      	lsls	r5, r3
 80011ae:	fb00 fc08 	mul.w	ip, r0, r8
 80011b2:	432a      	orrs	r2, r5
 80011b4:	0c15      	lsrs	r5, r2, #16
 80011b6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011ba:	45ac      	cmp	ip, r5
 80011bc:	fa04 f403 	lsl.w	r4, r4, r3
 80011c0:	d909      	bls.n	80011d6 <__udivmoddi4+0x19a>
 80011c2:	197d      	adds	r5, r7, r5
 80011c4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80011c8:	f080 808f 	bcs.w	80012ea <__udivmoddi4+0x2ae>
 80011cc:	45ac      	cmp	ip, r5
 80011ce:	f240 808c 	bls.w	80012ea <__udivmoddi4+0x2ae>
 80011d2:	3802      	subs	r0, #2
 80011d4:	443d      	add	r5, r7
 80011d6:	eba5 050c 	sub.w	r5, r5, ip
 80011da:	fbb5 f1fe 	udiv	r1, r5, lr
 80011de:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011e2:	fb01 f908 	mul.w	r9, r1, r8
 80011e6:	b295      	uxth	r5, r2
 80011e8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011ec:	45a9      	cmp	r9, r5
 80011ee:	d907      	bls.n	8001200 <__udivmoddi4+0x1c4>
 80011f0:	197d      	adds	r5, r7, r5
 80011f2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80011f6:	d274      	bcs.n	80012e2 <__udivmoddi4+0x2a6>
 80011f8:	45a9      	cmp	r9, r5
 80011fa:	d972      	bls.n	80012e2 <__udivmoddi4+0x2a6>
 80011fc:	3902      	subs	r1, #2
 80011fe:	443d      	add	r5, r7
 8001200:	eba5 0509 	sub.w	r5, r5, r9
 8001204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001208:	e778      	b.n	80010fc <__udivmoddi4+0xc0>
 800120a:	f1c1 0720 	rsb	r7, r1, #32
 800120e:	408b      	lsls	r3, r1
 8001210:	fa22 fc07 	lsr.w	ip, r2, r7
 8001214:	ea4c 0c03 	orr.w	ip, ip, r3
 8001218:	fa25 f407 	lsr.w	r4, r5, r7
 800121c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001220:	fbb4 f9fe 	udiv	r9, r4, lr
 8001224:	fa1f f88c 	uxth.w	r8, ip
 8001228:	fb0e 4419 	mls	r4, lr, r9, r4
 800122c:	fa20 f307 	lsr.w	r3, r0, r7
 8001230:	fb09 fa08 	mul.w	sl, r9, r8
 8001234:	408d      	lsls	r5, r1
 8001236:	431d      	orrs	r5, r3
 8001238:	0c2b      	lsrs	r3, r5, #16
 800123a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800123e:	45a2      	cmp	sl, r4
 8001240:	fa02 f201 	lsl.w	r2, r2, r1
 8001244:	fa00 f301 	lsl.w	r3, r0, r1
 8001248:	d909      	bls.n	800125e <__udivmoddi4+0x222>
 800124a:	eb1c 0404 	adds.w	r4, ip, r4
 800124e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001252:	d248      	bcs.n	80012e6 <__udivmoddi4+0x2aa>
 8001254:	45a2      	cmp	sl, r4
 8001256:	d946      	bls.n	80012e6 <__udivmoddi4+0x2aa>
 8001258:	f1a9 0902 	sub.w	r9, r9, #2
 800125c:	4464      	add	r4, ip
 800125e:	eba4 040a 	sub.w	r4, r4, sl
 8001262:	fbb4 f0fe 	udiv	r0, r4, lr
 8001266:	fb0e 4410 	mls	r4, lr, r0, r4
 800126a:	fb00 fa08 	mul.w	sl, r0, r8
 800126e:	b2ad      	uxth	r5, r5
 8001270:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001274:	45a2      	cmp	sl, r4
 8001276:	d908      	bls.n	800128a <__udivmoddi4+0x24e>
 8001278:	eb1c 0404 	adds.w	r4, ip, r4
 800127c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001280:	d22d      	bcs.n	80012de <__udivmoddi4+0x2a2>
 8001282:	45a2      	cmp	sl, r4
 8001284:	d92b      	bls.n	80012de <__udivmoddi4+0x2a2>
 8001286:	3802      	subs	r0, #2
 8001288:	4464      	add	r4, ip
 800128a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800128e:	fba0 8902 	umull	r8, r9, r0, r2
 8001292:	eba4 040a 	sub.w	r4, r4, sl
 8001296:	454c      	cmp	r4, r9
 8001298:	46c6      	mov	lr, r8
 800129a:	464d      	mov	r5, r9
 800129c:	d319      	bcc.n	80012d2 <__udivmoddi4+0x296>
 800129e:	d016      	beq.n	80012ce <__udivmoddi4+0x292>
 80012a0:	b15e      	cbz	r6, 80012ba <__udivmoddi4+0x27e>
 80012a2:	ebb3 020e 	subs.w	r2, r3, lr
 80012a6:	eb64 0405 	sbc.w	r4, r4, r5
 80012aa:	fa04 f707 	lsl.w	r7, r4, r7
 80012ae:	fa22 f301 	lsr.w	r3, r2, r1
 80012b2:	431f      	orrs	r7, r3
 80012b4:	40cc      	lsrs	r4, r1
 80012b6:	e9c6 7400 	strd	r7, r4, [r6]
 80012ba:	2100      	movs	r1, #0
 80012bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c0:	4631      	mov	r1, r6
 80012c2:	4630      	mov	r0, r6
 80012c4:	e70c      	b.n	80010e0 <__udivmoddi4+0xa4>
 80012c6:	468c      	mov	ip, r1
 80012c8:	e6eb      	b.n	80010a2 <__udivmoddi4+0x66>
 80012ca:	4610      	mov	r0, r2
 80012cc:	e6ff      	b.n	80010ce <__udivmoddi4+0x92>
 80012ce:	4543      	cmp	r3, r8
 80012d0:	d2e6      	bcs.n	80012a0 <__udivmoddi4+0x264>
 80012d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80012d6:	eb69 050c 	sbc.w	r5, r9, ip
 80012da:	3801      	subs	r0, #1
 80012dc:	e7e0      	b.n	80012a0 <__udivmoddi4+0x264>
 80012de:	4628      	mov	r0, r5
 80012e0:	e7d3      	b.n	800128a <__udivmoddi4+0x24e>
 80012e2:	4611      	mov	r1, r2
 80012e4:	e78c      	b.n	8001200 <__udivmoddi4+0x1c4>
 80012e6:	4681      	mov	r9, r0
 80012e8:	e7b9      	b.n	800125e <__udivmoddi4+0x222>
 80012ea:	4608      	mov	r0, r1
 80012ec:	e773      	b.n	80011d6 <__udivmoddi4+0x19a>
 80012ee:	4608      	mov	r0, r1
 80012f0:	e749      	b.n	8001186 <__udivmoddi4+0x14a>
 80012f2:	f1ac 0c02 	sub.w	ip, ip, #2
 80012f6:	443d      	add	r5, r7
 80012f8:	e713      	b.n	8001122 <__udivmoddi4+0xe6>
 80012fa:	3802      	subs	r0, #2
 80012fc:	443c      	add	r4, r7
 80012fe:	e724      	b.n	800114a <__udivmoddi4+0x10e>

08001300 <__aeabi_idiv0>:
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <BUTTON_STATE>:
#include "stm32f1xx_hal_gpio.h"
#include "button.h"

enum BUTTON num;

uint8_t BUTTON_STATE(uint8_t num) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d114      	bne.n	800133e <BUTTON_STATE+0x3a>

	case CALIBRATE_MPU_BUTTON:

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) {
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <BUTTON_STATE+0x44>)
 800131a:	f003 fa67 	bl	80047ec <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <BUTTON_STATE+0x24>
			return 0;
 8001324:	2300      	movs	r3, #0
 8001326:	e00a      	b.n	800133e <BUTTON_STATE+0x3a>
		} else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) {
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <BUTTON_STATE+0x44>)
 800132e:	f003 fa5d 	bl	80047ec <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <BUTTON_STATE+0x38>
			return 1;
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <BUTTON_STATE+0x3a>
		}
		break;
 800133c:	bf00      	nop
	}
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40010800 	.word	0x40010800

0800134c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001354:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <MX_CAN1_Init+0xac>)
 8001356:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 4;
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800135a:	2204      	movs	r2, #4
 800135c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800136c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001370:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001374:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001378:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001382:	2201      	movs	r2, #1
 8001384:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800138e:	2200      	movs	r2, #0
 8001390:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_CAN1_Init+0xa8>)
 8001394:	2200      	movs	r2, #0
 8001396:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <MX_CAN1_Init+0xa8>)
 800139a:	2201      	movs	r2, #1
 800139c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800139e:	4815      	ldr	r0, [pc, #84]	; (80013f4 <MX_CAN1_Init+0xa8>)
 80013a0:	f001 fdec 	bl	8002f7c <HAL_CAN_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_CAN1_Init+0x62>
		Error_Handler();
 80013aa:	f001 f8ea 	bl	8002582 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80013d2:	230e      	movs	r3, #14
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80013d6:	463b      	mov	r3, r7
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_CAN1_Init+0xa8>)
 80013dc:	f001 feca 	bl	8003174 <HAL_CAN_ConfigFilter>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_CAN1_Init+0x9e>
		Error_Handler();
 80013e6:	f001 f8cc 	bl	8002582 <Error_Handler>
	}
}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000174 	.word	0x20000174
 80013f8:	40006400 	.word	0x40006400

080013fc <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_CAN2_Init+0xac>)
 8001406:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 4;
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800140a:	2204      	movs	r2, #4
 800140c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800141c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001420:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001424:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001428:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800142c:	2200      	movs	r2, #0
 800142e:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001432:	2201      	movs	r2, #1
 8001434:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001444:	2200      	movs	r2, #0
 8001446:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800144a:	2201      	movs	r2, #1
 800144c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 800144e:	4815      	ldr	r0, [pc, #84]	; (80014a4 <MX_CAN2_Init+0xa8>)
 8001450:	f001 fd94 	bl	8002f7c <HAL_CAN_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_CAN2_Init+0x62>
		Error_Handler();
 800145a:	f001 f892 	bl	8002582 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 14;
 800145e:	230e      	movs	r3, #14
 8001460:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001466:	2301      	movs	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x000;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800147a:	2301      	movs	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001482:	230e      	movs	r3, #14
 8001484:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <MX_CAN2_Init+0xa8>)
 800148c:	f001 fe72 	bl	8003174 <HAL_CAN_ConfigFilter>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_CAN2_Init+0x9e>
		Error_Handler();
 8001496:	f001 f874 	bl	8002582 <Error_Handler>
	}

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	2000014c 	.word	0x2000014c
 80014a8:	40006800 	.word	0x40006800

080014ac <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6d      	ldr	r2, [pc, #436]	; (800167c <HAL_CAN_MspInit+0x1d0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d15b      	bne.n	8001584 <HAL_CAN_MspInit+0xd8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80014cc:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a6b      	ldr	r2, [pc, #428]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80014d4:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80014d6:	4b6a      	ldr	r3, [pc, #424]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d10b      	bne.n	80014f6 <HAL_CAN_MspInit+0x4a>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80014de:	4b69      	ldr	r3, [pc, #420]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a68      	ldr	r2, [pc, #416]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b66      	ldr	r3, [pc, #408]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a62      	ldr	r2, [pc, #392]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b60      	ldr	r3, [pc, #384]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001512:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4859      	ldr	r0, [pc, #356]	; (8001688 <HAL_CAN_MspInit+0x1dc>)
 8001524:	f002 ffde 	bl	80044e4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4852      	ldr	r0, [pc, #328]	; (8001688 <HAL_CAN_MspInit+0x1dc>)
 800153e:	f002 ffd1 	bl	80044e4 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2013      	movs	r0, #19
 8001548:	f002 fc91 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800154c:	2013      	movs	r0, #19
 800154e:	f002 fcaa 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2014      	movs	r0, #20
 8001558:	f002 fc89 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800155c:	2014      	movs	r0, #20
 800155e:	f002 fca2 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2015      	movs	r0, #21
 8001568:	f002 fc81 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800156c:	2015      	movs	r0, #21
 800156e:	f002 fc9a 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2016      	movs	r0, #22
 8001578:	f002 fc79 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800157c:	2016      	movs	r0, #22
 800157e:	f002 fc92 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
	}
}
 8001582:	e077      	b.n	8001674 <HAL_CAN_MspInit+0x1c8>
	} else if (canHandle->Instance == CAN2) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a40      	ldr	r2, [pc, #256]	; (800168c <HAL_CAN_MspInit+0x1e0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d172      	bne.n	8001674 <HAL_CAN_MspInit+0x1c8>
		__HAL_RCC_CAN2_CLK_ENABLE();
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 8001594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a34      	ldr	r2, [pc, #208]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80015ae:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_CAN_MspInit+0x1d4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10b      	bne.n	80015d0 <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	4a31      	ldr	r2, [pc, #196]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c2:	61d3      	str	r3, [r2, #28]
 80015c4:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015d6:	f043 0308 	orr.w	r3, r3, #8
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_CAN_MspInit+0x1d8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e8:	2320      	movs	r3, #32
 80015ea:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4825      	ldr	r0, [pc, #148]	; (8001690 <HAL_CAN_MspInit+0x1e4>)
 80015fc:	f002 ff72 	bl	80044e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001608:	2303      	movs	r3, #3
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <HAL_CAN_MspInit+0x1e4>)
 8001614:	f002 ff66 	bl	80044e4 <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_CAN2_ENABLE();
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_CAN_MspInit+0x1e8>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_CAN_MspInit+0x1e8>)
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	6053      	str	r3, [r2, #4]
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	203f      	movs	r0, #63	; 0x3f
 800163a:	f002 fc18 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800163e:	203f      	movs	r0, #63	; 0x3f
 8001640:	f002 fc31 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2040      	movs	r0, #64	; 0x40
 800164a:	f002 fc10 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800164e:	2040      	movs	r0, #64	; 0x40
 8001650:	f002 fc29 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2041      	movs	r0, #65	; 0x41
 800165a:	f002 fc08 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800165e:	2041      	movs	r0, #65	; 0x41
 8001660:	f002 fc21 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2042      	movs	r0, #66	; 0x42
 800166a:	f002 fc00 	bl	8003e6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800166e:	2042      	movs	r0, #66	; 0x42
 8001670:	f002 fc19 	bl	8003ea6 <HAL_NVIC_EnableIRQ>
}
 8001674:	bf00      	nop
 8001676:	3730      	adds	r7, #48	; 0x30
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40006400 	.word	0x40006400
 8001680:	2000012c 	.word	0x2000012c
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800
 800168c:	40006800 	.word	0x40006800
 8001690:	40010c00 	.word	0x40010c00
 8001694:	40010000 	.word	0x40010000

08001698 <EEPROM_Init>:
// - set global variables ValidPage, ReceivingPage and ErasedPage
// - build address index
// - resume page transfer if needed
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_Init() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
	EEPROM_Result result;

	//unlock the flash memory
	HAL_FLASH_Unlock();
 800169e:	f002 fda1 	bl	80041e4 <HAL_FLASH_Unlock>

	//read each page status and check if valid
	EEPROM_PageStatus PageStatus0 = *((__IO uint16_t*) EEPROM_PAGE0);
 80016a2:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <EEPROM_Init+0x17c>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	83fb      	strh	r3, [r7, #30]
	EEPROM_PageStatus PageStatus1 = *((__IO uint16_t*) EEPROM_PAGE1);
 80016a8:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <EEPROM_Init+0x180>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	83bb      	strh	r3, [r7, #28]
	uint8_t InvalidState = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 != EEPROM_VALID && PageStatus0 != EEPROM_RECEIVING
 80016b2:	8bfb      	ldrh	r3, [r7, #30]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <EEPROM_Init+0x38>
 80016b8:	8bfb      	ldrh	r3, [r7, #30]
 80016ba:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016be:	4293      	cmp	r3, r2
 80016c0:	d006      	beq.n	80016d0 <EEPROM_Init+0x38>
			&& PageStatus0 != EEPROM_ERASED)
 80016c2:	8bfb      	ldrh	r3, [r7, #30]
 80016c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d001      	beq.n	80016d0 <EEPROM_Init+0x38>
		InvalidState = 1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	76fb      	strb	r3, [r7, #27]
	if (PageStatus1 != EEPROM_VALID && PageStatus1 != EEPROM_RECEIVING
 80016d0:	8bbb      	ldrh	r3, [r7, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <EEPROM_Init+0x56>
 80016d6:	8bbb      	ldrh	r3, [r7, #28]
 80016d8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016dc:	4293      	cmp	r3, r2
 80016de:	d006      	beq.n	80016ee <EEPROM_Init+0x56>
			&& PageStatus1 != EEPROM_ERASED)
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d001      	beq.n	80016ee <EEPROM_Init+0x56>
		InvalidState = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 == PageStatus1)
 80016ee:	8bfa      	ldrh	r2, [r7, #30]
 80016f0:	8bbb      	ldrh	r3, [r7, #28]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d101      	bne.n	80016fa <EEPROM_Init+0x62>
		InvalidState = 1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	76fb      	strb	r3, [r7, #27]

	// if invalid page status, format EEPROM (erase both pages and set page0 as valid)
	if (InvalidState) {
 80016fa:	7efb      	ldrb	r3, [r7, #27]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d029      	beq.n	8001754 <EEPROM_Init+0xbc>
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8001704:	2301      	movs	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
		EraseDefinitions.PageAddress = EEPROM_PAGE0;
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <EEPROM_Init+0x17c>)
 800170a:	613b      	str	r3, [r7, #16]
		EraseDefinitions.NbPages = 2;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
		uint32_t PageError;

		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	f107 0308 	add.w	r3, r7, #8
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fe3b 	bl	8004394 <HAL_FLASHEx_Erase>
 800171e:	4603      	mov	r3, r0
 8001720:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 8001722:	7ebb      	ldrb	r3, [r7, #26]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <EEPROM_Init+0x94>
			return result;
 8001728:	7ebb      	ldrb	r3, [r7, #26]
 800172a:	e06e      	b.n	800180a <EEPROM_Init+0x172>

		result = HAL_FLASH_Program(EEPROM_SIZE16, EEPROM_PAGE0, EEPROM_VALID);
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	4937      	ldr	r1, [pc, #220]	; (8001814 <EEPROM_Init+0x17c>)
 8001736:	2001      	movs	r0, #1
 8001738:	f002 fce4 	bl	8004104 <HAL_FLASH_Program>
 800173c:	4603      	mov	r3, r0
 800173e:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 8001740:	7ebb      	ldrb	r3, [r7, #26]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <EEPROM_Init+0xb2>
			return result;
 8001746:	7ebb      	ldrb	r3, [r7, #26]
 8001748:	e05f      	b.n	800180a <EEPROM_Init+0x172>

		PageStatus0 = EEPROM_VALID;
 800174a:	2300      	movs	r3, #0
 800174c:	83fb      	strh	r3, [r7, #30]
		PageStatus1 = EEPROM_ERASED;
 800174e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001752:	83bb      	strh	r3, [r7, #28]
	}

	//set global variables ValidPage, ReceivingPage and ErasedPage (one stays EEPROM_PAGE_NONE)
	if (PageStatus0 == EEPROM_VALID)
 8001754:	8bfb      	ldrh	r3, [r7, #30]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <EEPROM_Init+0xc8>
		EEPROM_ValidPage = EEPROM_PAGE0;
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <EEPROM_Init+0x184>)
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <EEPROM_Init+0x17c>)
 800175e:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_VALID)
 8001760:	8bbb      	ldrh	r3, [r7, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <EEPROM_Init+0xd4>
		EEPROM_ValidPage = EEPROM_PAGE1;
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <EEPROM_Init+0x184>)
 8001768:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <EEPROM_Init+0x180>)
 800176a:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_RECEIVING)
 800176c:	8bfb      	ldrh	r3, [r7, #30]
 800176e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001772:	4293      	cmp	r3, r2
 8001774:	d102      	bne.n	800177c <EEPROM_Init+0xe4>
		EEPROM_ReceivingPage = EEPROM_PAGE0;
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <EEPROM_Init+0x188>)
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <EEPROM_Init+0x17c>)
 800177a:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_RECEIVING)
 800177c:	8bbb      	ldrh	r3, [r7, #28]
 800177e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <EEPROM_Init+0xf4>
		EEPROM_ReceivingPage = EEPROM_PAGE1;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <EEPROM_Init+0x188>)
 8001788:	4a23      	ldr	r2, [pc, #140]	; (8001818 <EEPROM_Init+0x180>)
 800178a:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_ERASED)
 800178c:	8bfb      	ldrh	r3, [r7, #30]
 800178e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001792:	4293      	cmp	r3, r2
 8001794:	d102      	bne.n	800179c <EEPROM_Init+0x104>
		EEPROM_ErasedPage = EEPROM_PAGE0;
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <EEPROM_Init+0x18c>)
 8001798:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <EEPROM_Init+0x17c>)
 800179a:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_ERASED)
 800179c:	8bbb      	ldrh	r3, [r7, #28]
 800179e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d102      	bne.n	80017ac <EEPROM_Init+0x114>
		EEPROM_ErasedPage = EEPROM_PAGE1;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <EEPROM_Init+0x18c>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <EEPROM_Init+0x180>)
 80017aa:	601a      	str	r2, [r3, #0]

	//build address index (addresses from receiving page are dominant)
	EEPROM_PageToIndex(EEPROM_ValidPage);
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <EEPROM_Init+0x184>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fa93 	bl	8001cdc <EEPROM_PageToIndex>
	EEPROM_PageToIndex(EEPROM_ReceivingPage);
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <EEPROM_Init+0x188>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fa8e 	bl	8001cdc <EEPROM_PageToIndex>

	//if needed, resume page transfer or just mark receiving page as valid
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE) {
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <EEPROM_Init+0x188>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01f      	beq.n	8001808 <EEPROM_Init+0x170>
		if (EEPROM_ValidPage == EEPROM_PAGE_NONE) {
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <EEPROM_Init+0x184>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10c      	bne.n	80017ea <EEPROM_Init+0x152>
			result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <EEPROM_Init+0x188>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f9e4 	bl	8001ba4 <EEPROM_SetPageStatus>
 80017dc:	4603      	mov	r3, r0
 80017de:	76bb      	strb	r3, [r7, #26]
			if (result != EEPROM_SUCCESS)
 80017e0:	7ebb      	ldrb	r3, [r7, #26]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d010      	beq.n	8001808 <EEPROM_Init+0x170>
				return result;
 80017e6:	7ebb      	ldrb	r3, [r7, #26]
 80017e8:	e00f      	b.n	800180a <EEPROM_Init+0x172>
		} else {
			result = EEPROM_PageTransfer(EEPROM_ValidPage,
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <EEPROM_Init+0x184>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <EEPROM_Init+0x188>)
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f96d 	bl	8001ad4 <EEPROM_PageTransfer>
 80017fa:	4603      	mov	r3, r0
 80017fc:	76bb      	strb	r3, [r7, #26]
					EEPROM_ReceivingPage);
			if (result != EEPROM_SUCCESS)
 80017fe:	7ebb      	ldrb	r3, [r7, #26]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <EEPROM_Init+0x170>
				return result;
 8001804:	7ebb      	ldrb	r3, [r7, #26]
 8001806:	e000      	b.n	800180a <EEPROM_Init+0x172>
		}
	}

	return EEPROM_SUCCESS;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800f000 	.word	0x0800f000
 8001818:	0800f800 	.word	0x0800f800
 800181c:	20000138 	.word	0x20000138
 8001820:	2000013c 	.word	0x2000013c
 8001824:	20000140 	.word	0x20000140

08001828 <EEPROM_ReadVariable>:
// - read variable value from physical address with right size
//
// VariableName:	name (number) of the variable to read
// Value:			outputs the variable value
// return:			EEPROM_SUCCESS, EEPROM_INVALID_NAME, EEPROM_NOT_ASSIGNED
EEPROM_Result EEPROM_ReadVariable(uint16_t VariableName, EEPROM_Value *Value) {
 8001828:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	6039      	str	r1, [r7, #0]
 8001834:	80fb      	strh	r3, [r7, #6]
	//check if variable name exists
	if (VariableName >= EEPROM_VARIABLE_COUNT)
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d901      	bls.n	8001840 <EEPROM_ReadVariable+0x18>
		return EEPROM_INVALID_NAME;
 800183c:	2306      	movs	r3, #6
 800183e:	e041      	b.n	80018c4 <EEPROM_ReadVariable+0x9c>

	//check if variable was assigned
	uint32_t Address = EEPROM_START_ADDRESS + EEPROM_Index[VariableName];
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <EEPROM_ReadVariable+0xa8>)
 8001844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001848:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800184c:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8001850:	60fb      	str	r3, [r7, #12]
	if (Address == EEPROM_PAGE0)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <EEPROM_ReadVariable+0xac>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <EEPROM_ReadVariable+0x36>
		return EEPROM_NOT_ASSIGNED;
 800185a:	2305      	movs	r3, #5
 800185c:	e032      	b.n	80018c4 <EEPROM_ReadVariable+0x9c>

	//read variable value from physical address with right size
	switch (EEPROM_SizeTable[VariableName]) {
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <EEPROM_ReadVariable+0xb0>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d011      	beq.n	800188c <EEPROM_ReadVariable+0x64>
 8001868:	2b03      	cmp	r3, #3
 800186a:	dc28      	bgt.n	80018be <EEPROM_ReadVariable+0x96>
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <EEPROM_ReadVariable+0x4e>
 8001870:	2b02      	cmp	r3, #2
 8001872:	d006      	beq.n	8001882 <EEPROM_ReadVariable+0x5a>
 8001874:	e023      	b.n	80018be <EEPROM_ReadVariable+0x96>
	case EEPROM_SIZE16:
		(*Value).uInt16 = *((__IO uint16_t*) Address);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29a      	uxth	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	801a      	strh	r2, [r3, #0]
		break;
 8001880:	e01f      	b.n	80018c2 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE32:
		(*Value).uInt32 = *((__IO uint32_t*) Address);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]
		break;
 800188a:	e01a      	b.n	80018c2 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE64:
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f04f 0100 	mov.w	r1, #0
				| ((uint64_t) *((__IO uint32_t*) (Address + 4)) << 32);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4698      	mov	r8, r3
 800189e:	f04f 0900 	mov.w	r9, #0
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	4643      	mov	r3, r8
 80018ac:	2200      	movs	r2, #0
 80018ae:	ea40 0402 	orr.w	r4, r0, r2
 80018b2:	ea41 0503 	orr.w	r5, r1, r3
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 80018bc:	e001      	b.n	80018c2 <EEPROM_ReadVariable+0x9a>
	default:
		return EEPROM_NOT_ASSIGNED;
 80018be:	2305      	movs	r3, #5
 80018c0:	e000      	b.n	80018c4 <EEPROM_ReadVariable+0x9c>
	}

	return EEPROM_SUCCESS;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80018ce:	4770      	bx	lr
 80018d0:	20000134 	.word	0x20000134
 80018d4:	0800f000 	.word	0x0800f000
 80018d8:	20000130 	.word	0x20000130

080018dc <EEPROM_WriteVariable>:
// VariableName:	name (number) of the variable to write
// Value:			value to be written
// Size:			size of "Value" as EEPROM_Size
// return:			EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_WriteVariable(uint16_t VariableName, EEPROM_Value Value,
		uint8_t Size) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	4601      	mov	r1, r0
 80018e4:	e9c7 2300 	strd	r2, r3, [r7]
 80018e8:	460b      	mov	r3, r1
 80018ea:	81fb      	strh	r3, [r7, #14]
	EEPROM_Result result;

	//get writing page's end address (prefer writing to receiving page)
	EEPROM_Page WritingPage = EEPROM_ValidPage;
 80018ec:	4b73      	ldr	r3, [pc, #460]	; (8001abc <EEPROM_WriteVariable+0x1e0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE)
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <EEPROM_WriteVariable+0x1e4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <EEPROM_WriteVariable+0x24>
		WritingPage = EEPROM_ReceivingPage;
 80018fa:	4b71      	ldr	r3, [pc, #452]	; (8001ac0 <EEPROM_WriteVariable+0x1e4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
	if (WritingPage == EEPROM_PAGE_NONE)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <EEPROM_WriteVariable+0x2e>
		return EEPROM_NO_VALID_PAGE;
 8001906:	2304      	movs	r3, #4
 8001908:	e0d3      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>
	uint32_t PageEndAddress = WritingPage + FLASH_PAGE_SIZE;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001910:	61bb      	str	r3, [r7, #24]

	//calculate memory usage of variable
	uint8_t Bytes = 2 + (1 << Size);
 8001912:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001916:	2201      	movs	r2, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3302      	adds	r3, #2
 8001920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (Size == EEPROM_SIZE_DELETED)
 8001924:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <EEPROM_WriteVariable+0x56>
		Bytes = 2;
 800192c:	2302      	movs	r3, #2
 800192e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//check if enough free space or page full
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8001932:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <EEPROM_WriteVariable+0x6e>
 800193a:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	1ad2      	subs	r2, r2, r3
 8001942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001946:	429a      	cmp	r2, r3
 8001948:	d25d      	bcs.n	8001a06 <EEPROM_WriteVariable+0x12a>
		//check if data is too much to store on one page
		uint16_t RequiredMemory = 2;
 800194a:	2302      	movs	r3, #2
 800194c:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 800194e:	2300      	movs	r3, #0
 8001950:	83fb      	strh	r3, [r7, #30]
 8001952:	e023      	b.n	800199c <EEPROM_WriteVariable+0xc0>
			if (i == VariableName)
 8001954:	8bfa      	ldrh	r2, [r7, #30]
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	429a      	cmp	r2, r3
 800195a:	d10b      	bne.n	8001974 <EEPROM_WriteVariable+0x98>
				RequiredMemory += 2 + (1 << Size);
 800195c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001960:	2201      	movs	r2, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	b29a      	uxth	r2, r3
 8001968:	8c3b      	ldrh	r3, [r7, #32]
 800196a:	4413      	add	r3, r2
 800196c:	b29b      	uxth	r3, r3
 800196e:	3302      	adds	r3, #2
 8001970:	843b      	strh	r3, [r7, #32]
 8001972:	e010      	b.n	8001996 <EEPROM_WriteVariable+0xba>
			else if (EEPROM_SizeTable[i] != EEPROM_SIZE_DELETED)
 8001974:	8bfb      	ldrh	r3, [r7, #30]
 8001976:	4a54      	ldr	r2, [pc, #336]	; (8001ac8 <EEPROM_WriteVariable+0x1ec>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <EEPROM_WriteVariable+0xba>
				RequiredMemory += 2 + (1 << EEPROM_SizeTable[i]);
 800197e:	8bfb      	ldrh	r3, [r7, #30]
 8001980:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <EEPROM_WriteVariable+0x1ec>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	461a      	mov	r2, r3
 8001986:	2301      	movs	r3, #1
 8001988:	4093      	lsls	r3, r2
 800198a:	b29a      	uxth	r2, r3
 800198c:	8c3b      	ldrh	r3, [r7, #32]
 800198e:	4413      	add	r3, r2
 8001990:	b29b      	uxth	r3, r3
 8001992:	3302      	adds	r3, #2
 8001994:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001996:	8bfb      	ldrh	r3, [r7, #30]
 8001998:	3301      	adds	r3, #1
 800199a:	83fb      	strh	r3, [r7, #30]
 800199c:	8bfb      	ldrh	r3, [r7, #30]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d9d8      	bls.n	8001954 <EEPROM_WriteVariable+0x78>
		}
		if (RequiredMemory > FLASH_PAGE_SIZE)
 80019a2:	8c3b      	ldrh	r3, [r7, #32]
 80019a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019a8:	d901      	bls.n	80019ae <EEPROM_WriteVariable+0xd2>
			return EEPROM_FULL;
 80019aa:	2307      	movs	r3, #7
 80019ac:	e081      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//mark the empty page as receiving
		result = EEPROM_SetPageStatus(EEPROM_ErasedPage, EEPROM_RECEIVING);
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <EEPROM_WriteVariable+0x1f0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f8f4 	bl	8001ba4 <EEPROM_SetPageStatus>
 80019bc:	4603      	mov	r3, r0
 80019be:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <EEPROM_WriteVariable+0xee>
			return result;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	e073      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//change next index to receiving page
		EEPROM_NextIndex = EEPROM_ReceivingPage + 2;
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <EEPROM_WriteVariable+0x1e4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3302      	adds	r3, #2
 80019d0:	4a3c      	ldr	r2, [pc, #240]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 80019d2:	6013      	str	r3, [r2, #0]

		//write the variable to receiving page (by calling this function again)
		result = EEPROM_WriteVariable(VariableName, Value, Size);
 80019d4:	89f9      	ldrh	r1, [r7, #14]
 80019d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019e0:	4608      	mov	r0, r1
 80019e2:	f7ff ff7b 	bl	80018dc <EEPROM_WriteVariable>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <EEPROM_WriteVariable+0x118>
			return result;
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	e05e      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//do page transfer
		result = EEPROM_PageTransfer();
 80019f4:	f000 f86e 	bl	8001ad4 <EEPROM_PageTransfer>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d055      	beq.n	8001aae <EEPROM_WriteVariable+0x1d2>
			return result;
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	e055      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>
	}

	//else (if enough space)
	else {
		//write variable value
		if (Size != EEPROM_SIZE_DELETED) {
 8001a06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00f      	beq.n	8001a2e <EEPROM_WriteVariable+0x152>
			result = HAL_FLASH_Program(Size, EEPROM_NextIndex + 2,
 8001a0e:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1c99      	adds	r1, r3, #2
 8001a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1c:	f002 fb72 	bl	8004104 <HAL_FLASH_Program>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
					Value.uInt64);
			if (result != EEPROM_SUCCESS)
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <EEPROM_WriteVariable+0x152>
				return result;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	e041      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>
		}

		//create and write variable header (size and name)
		uint16_t VariableHeader = VariableName + (Size << 14);
 8001a2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	039b      	lsls	r3, r3, #14
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	82bb      	strh	r3, [r7, #20]
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, EEPROM_NextIndex,
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	8aba      	ldrh	r2, [r7, #20]
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f002 fb5b 	bl	8004104 <HAL_FLASH_Program>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]
				VariableHeader);
		if (result != EEPROM_SUCCESS)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <EEPROM_WriteVariable+0x180>
			return result;
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	e02a      	b.n	8001ab2 <EEPROM_WriteVariable+0x1d6>

		//update index & size table
		EEPROM_Index[VariableName] =
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	b29b      	uxth	r3, r3
		EEPROM_Index[VariableName] =
 8001a62:	89fa      	ldrh	r2, [r7, #14]
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	3302      	adds	r3, #2
 8001a6a:	b299      	uxth	r1, r3
		EEPROM_Index[VariableName] =
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <EEPROM_WriteVariable+0x1f4>)
 8001a6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		EEPROM_SizeTable[VariableName] = Size;
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	4914      	ldr	r1, [pc, #80]	; (8001ac8 <EEPROM_WriteVariable+0x1ec>)
 8001a76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a7a:	54ca      	strb	r2, [r1, r3]
		if (Size == EEPROM_SIZE_DELETED)
 8001a7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <EEPROM_WriteVariable+0x1b2>
			EEPROM_Index[VariableName] = 0;
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <EEPROM_WriteVariable+0x1f4>)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//update next index
		EEPROM_NextIndex += Bytes;
 8001a8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a9a:	6013      	str	r3, [r2, #0]
		if (EEPROM_NextIndex >= PageEndAddress)
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d804      	bhi.n	8001ab0 <EEPROM_WriteVariable+0x1d4>
			EEPROM_NextIndex = 0;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <EEPROM_WriteVariable+0x1e8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e000      	b.n	8001ab0 <EEPROM_WriteVariable+0x1d4>
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8001aae:	bf00      	nop
	}

	return EEPROM_SUCCESS;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000138 	.word	0x20000138
 8001ac0:	2000013c 	.word	0x2000013c
 8001ac4:	20000144 	.word	0x20000144
 8001ac8:	20000130 	.word	0x20000130
 8001acc:	20000140 	.word	0x20000140
 8001ad0:	20000134 	.word	0x20000134

08001ad4 <EEPROM_PageTransfer>:
//		- write variable to receiving page
// - erase source page
// - mark receiving page as valid
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
static EEPROM_Result EEPROM_PageTransfer() {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af02      	add	r7, sp, #8
	EEPROM_Result result;
	EEPROM_Value Value;

	//get start & end address of valid page (source) (as offset to EEPROM start)
	uint16_t StartAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS;
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <EEPROM_PageTransfer+0xc0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae4:	81bb      	strh	r3, [r7, #12]
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
			+ FLASH_PAGE_SIZE;
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <EEPROM_PageTransfer+0xc0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
 8001aec:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001af0:	817b      	strh	r3, [r7, #10]

	//copy each variable
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	81fb      	strh	r3, [r7, #14]
 8001af6:	e02a      	b.n	8001b4e <EEPROM_PageTransfer+0x7a>
		//check if is stored on the source page
		if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress) {
 8001af8:	89fb      	ldrh	r3, [r7, #14]
 8001afa:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <EEPROM_PageTransfer+0xc4>)
 8001afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b00:	89ba      	ldrh	r2, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d220      	bcs.n	8001b48 <EEPROM_PageTransfer+0x74>
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <EEPROM_PageTransfer+0xc4>)
 8001b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0e:	897a      	ldrh	r2, [r7, #10]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d919      	bls.n	8001b48 <EEPROM_PageTransfer+0x74>
			//read variable value (if possible)
			if (EEPROM_ReadVariable(i, &Value) == EEPROM_SUCCESS) {
 8001b14:	463a      	mov	r2, r7
 8001b16:	89fb      	ldrh	r3, [r7, #14]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fe84 	bl	8001828 <EEPROM_ReadVariable>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d110      	bne.n	8001b48 <EEPROM_PageTransfer+0x74>
				//write variable to receiving page
				result = EEPROM_WriteVariable(i, Value, EEPROM_SizeTable[i]);
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <EEPROM_PageTransfer+0xc8>)
 8001b2a:	5cd3      	ldrb	r3, [r2, r3]
 8001b2c:	89f9      	ldrh	r1, [r7, #14]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b34:	4608      	mov	r0, r1
 8001b36:	f7ff fed1 	bl	80018dc <EEPROM_WriteVariable>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	727b      	strb	r3, [r7, #9]
				if (result != EEPROM_SUCCESS)
 8001b3e:	7a7b      	ldrb	r3, [r7, #9]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <EEPROM_PageTransfer+0x74>
					return result;
 8001b44:	7a7b      	ldrb	r3, [r7, #9]
 8001b46:	e021      	b.n	8001b8c <EEPROM_PageTransfer+0xb8>
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	81fb      	strh	r3, [r7, #14]
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d9d1      	bls.n	8001af8 <EEPROM_PageTransfer+0x24>
			}
		}
	}

	//erase source page
	result = EEPROM_SetPageStatus(EEPROM_ValidPage, EEPROM_ERASED);
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <EEPROM_PageTransfer+0xc0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f821 	bl	8001ba4 <EEPROM_SetPageStatus>
 8001b62:	4603      	mov	r3, r0
 8001b64:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b66:	7a7b      	ldrb	r3, [r7, #9]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <EEPROM_PageTransfer+0x9c>
		return result;
 8001b6c:	7a7b      	ldrb	r3, [r7, #9]
 8001b6e:	e00d      	b.n	8001b8c <EEPROM_PageTransfer+0xb8>

	//mark receiving page as valid
	result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <EEPROM_PageTransfer+0xcc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f814 	bl	8001ba4 <EEPROM_SetPageStatus>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <EEPROM_PageTransfer+0xb6>
		return result;
 8001b86:	7a7b      	ldrb	r3, [r7, #9]
 8001b88:	e000      	b.n	8001b8c <EEPROM_PageTransfer+0xb8>

	return EEPROM_SUCCESS;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000138 	.word	0x20000138
 8001b98:	20000134 	.word	0x20000134
 8001b9c:	20000130 	.word	0x20000130
 8001ba0:	2000013c 	.word	0x2000013c

08001ba4 <EEPROM_SetPageStatus>:
//
// Page:		page to change the status (as EEPROM_Page)
// PageStatus:	page status to set for page (as EEPROM_PageStatus)
// return:		EEPROM_SUCCESS, EEPROM_ERROR, EEPROM_BUSY or EEPROM_TIMEOUT
static EEPROM_Result EEPROM_SetPageStatus(EEPROM_Page Page,
		EEPROM_PageStatus PageStatus) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
	EEPROM_Result result;

	//check if erase operation required
	if (PageStatus == EEPROM_ERASED) {
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d13f      	bne.n	8001c3a <EEPROM_SetPageStatus+0x96>
		//remove every variable from index, that is stored on erase page
		uint16_t StartAddress = Page - EEPROM_START_ADDRESS;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc2:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t EndAddress = Page - EEPROM_START_ADDRESS + FLASH_PAGE_SIZE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001bcc:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bd2:	e015      	b.n	8001c00 <EEPROM_SetPageStatus+0x5c>
			if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress)
 8001bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd6:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <EEPROM_SetPageStatus+0x128>)
 8001bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d20b      	bcs.n	8001bfa <EEPROM_SetPageStatus+0x56>
 8001be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be4:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <EEPROM_SetPageStatus+0x128>)
 8001be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bea:	8c3a      	ldrh	r2, [r7, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d904      	bls.n	8001bfa <EEPROM_SetPageStatus+0x56>
				EEPROM_Index[i] = 0;
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf2:	4a36      	ldr	r2, [pc, #216]	; (8001ccc <EEPROM_SetPageStatus+0x128>)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d9e6      	bls.n	8001bd4 <EEPROM_SetPageStatus+0x30>
		}

		//setup erase definitions
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
		EraseDefinitions.PageAddress = Page;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
		EraseDefinitions.NbPages = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
		uint32_t PageError;

		//erase page
		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 8001c16:	f107 020c 	add.w	r2, r7, #12
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fbb7 	bl	8004394 <HAL_FLASHEx_Erase>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (result != EEPROM_SUCCESS)
 8001c2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c38:	e043      	b.n	8001cc2 <EEPROM_SetPageStatus+0x11e>
	}

	//else write status to flash
	else {
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page,
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	2001      	movs	r0, #1
 8001c44:	f002 fa5e 	bl	8004104 <HAL_FLASH_Program>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				PageStatus);
		if (result != EEPROM_SUCCESS)
 8001c4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c5a:	e032      	b.n	8001cc2 <EEPROM_SetPageStatus+0x11e>
	}

	//update global page status variables (remove page from old status and attach to new status)
	if (EEPROM_ValidPage == Page)
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <EEPROM_SetPageStatus+0x12c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d103      	bne.n	8001c6e <EEPROM_SetPageStatus+0xca>
		EEPROM_ValidPage = EEPROM_PAGE_NONE;
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <EEPROM_SetPageStatus+0x12c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e010      	b.n	8001c90 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ReceivingPage == Page)
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <EEPROM_SetPageStatus+0x130>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d103      	bne.n	8001c80 <EEPROM_SetPageStatus+0xdc>
		EEPROM_ReceivingPage = EEPROM_PAGE_NONE;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <EEPROM_SetPageStatus+0x130>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e007      	b.n	8001c90 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ErasedPage == Page)
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <EEPROM_SetPageStatus+0x134>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d102      	bne.n	8001c90 <EEPROM_SetPageStatus+0xec>
		EEPROM_ErasedPage = EEPROM_PAGE_NONE;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <EEPROM_SetPageStatus+0x134>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

	if (PageStatus == EEPROM_VALID)
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <EEPROM_SetPageStatus+0xfa>
		EEPROM_ValidPage = Page;
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <EEPROM_SetPageStatus+0x12c>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e010      	b.n	8001cc0 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_RECEIVING)
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d103      	bne.n	8001cb0 <EEPROM_SetPageStatus+0x10c>
		EEPROM_ReceivingPage = Page;
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <EEPROM_SetPageStatus+0x130>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e007      	b.n	8001cc0 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_ERASED)
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d102      	bne.n	8001cc0 <EEPROM_SetPageStatus+0x11c>
		EEPROM_ErasedPage = Page;
 8001cba:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <EEPROM_SetPageStatus+0x134>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6013      	str	r3, [r2, #0]

	return EEPROM_SUCCESS;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000134 	.word	0x20000134
 8001cd0:	20000138 	.word	0x20000138
 8001cd4:	2000013c 	.word	0x2000013c
 8001cd8:	20000140 	.word	0x20000140

08001cdc <EEPROM_PageToIndex>:
// - set next free flash address
// - return on loop end
//
// Page:	page to search for variables
// return:	EEPROM_SUCCESS
static EEPROM_Result EEPROM_PageToIndex(EEPROM_Page Page) {
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	uint8_t SizeCode;					//size of current variable as Size code
	uint8_t Size;							//size of current variable in bytes
	uint16_t Name;									//name of current variable

	//ignore call when Page is PAGE_NONE
	if (Page == EEPROM_PAGE_NONE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <EEPROM_PageToIndex+0x12>
		return EEPROM_SUCCESS;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e070      	b.n	8001dd0 <EEPROM_PageToIndex+0xf4>

	//get page addresses
	uint32_t Address = Page + 2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
	uint32_t PageEndAddress = Page + FLASH_PAGE_SIZE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfa:	613b      	str	r3, [r7, #16]

	//loop through page starting after page header
	while (Address < PageEndAddress) {
 8001cfc:	e059      	b.n	8001db2 <EEPROM_PageToIndex+0xd6>
		//read potential variable header
		VariableHeader = *((__IO uint16_t*) Address);
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	81fb      	strh	r3, [r7, #14]

		//if no header written (causes: end of data reached or reset while writing)
		if (VariableHeader == 0xFFFF) {
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d121      	bne.n	8001d52 <EEPROM_PageToIndex+0x76>
			//loop through next 4 halfword and check if there is anything written
			Size = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001d12:	2302      	movs	r3, #2
 8001d14:	75fb      	strb	r3, [r7, #23]
 8001d16:	e013      	b.n	8001d40 <EEPROM_PageToIndex+0x64>
				if (Address + i >= PageEndAddress)
 8001d18:	7dfa      	ldrb	r2, [r7, #23]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d911      	bls.n	8001d48 <EEPROM_PageToIndex+0x6c>
					break;
				//while looping count the size of written data (resulting from reset while writing)
				if (*((__IO uint16_t*) (Address + i)) != 0xFFFF)
 8001d24:	7dfa      	ldrb	r2, [r7, #23]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4413      	add	r3, r2
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d001      	beq.n	8001d3a <EEPROM_PageToIndex+0x5e>
					Size = i;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	75fb      	strb	r3, [r7, #23]
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d9e8      	bls.n	8001d18 <EEPROM_PageToIndex+0x3c>
 8001d46:	e000      	b.n	8001d4a <EEPROM_PageToIndex+0x6e>
					break;
 8001d48:	bf00      	nop
			}
			//if no data found, last variable of page was reached (end loop)
			if (Size == 0)
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <EEPROM_PageToIndex+0xcc>
				break;
 8001d50:	e033      	b.n	8001dba <EEPROM_PageToIndex+0xde>
		}

		//else (if header written, proper variable value is following)
		else {
			//get size code
			SizeCode = VariableHeader >> 14;
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	0b9b      	lsrs	r3, r3, #14
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	737b      	strb	r3, [r7, #13]

			//check for valid name (VARIABLE_COUNT might have been reduced between builds, but old variables are still in flash)
			Name = VariableHeader & 0b0011111111111111;
 8001d5a:	89fb      	ldrh	r3, [r7, #14]
 8001d5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d60:	817b      	strh	r3, [r7, #10]
			if (Name < EEPROM_VARIABLE_COUNT) {
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d815      	bhi.n	8001d94 <EEPROM_PageToIndex+0xb8>
				//if everything valid, update the index and the size table
				EEPROM_Index[Name] = Address + 2 - EEPROM_START_ADDRESS;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	897a      	ldrh	r2, [r7, #10]
 8001d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d72:	3302      	adds	r3, #2
 8001d74:	b299      	uxth	r1, r3
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <EEPROM_PageToIndex+0x100>)
 8001d78:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				EEPROM_SizeTable[Name] = SizeCode;
 8001d7c:	897b      	ldrh	r3, [r7, #10]
 8001d7e:	4918      	ldr	r1, [pc, #96]	; (8001de0 <EEPROM_PageToIndex+0x104>)
 8001d80:	7b7a      	ldrb	r2, [r7, #13]
 8001d82:	54ca      	strb	r2, [r1, r3]
				if (SizeCode == EEPROM_SIZE_DELETED)
 8001d84:	7b7b      	ldrb	r3, [r7, #13]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <EEPROM_PageToIndex+0xb8>
					EEPROM_Index[Name] = 0;
 8001d8a:	897b      	ldrh	r3, [r7, #10]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <EEPROM_PageToIndex+0x100>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			//calculate size in bytes from size code
			Size = 1 << SizeCode;
 8001d94:	7b7b      	ldrb	r3, [r7, #13]
 8001d96:	2201      	movs	r2, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	77fb      	strb	r3, [r7, #31]
			if (SizeCode == EEPROM_SIZE_DELETED)
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <EEPROM_PageToIndex+0xcc>
				Size = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
		}

		//go to next address on page
		Address = Address + 2 + Size;
 8001da8:	7ffa      	ldrb	r2, [r7, #31]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	4413      	add	r3, r2
 8001dae:	3302      	adds	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
	while (Address < PageEndAddress) {
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3a1      	bcc.n	8001cfe <EEPROM_PageToIndex+0x22>
	}

	//set next free flash address
	EEPROM_NextIndex = Address;
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <EEPROM_PageToIndex+0x108>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6013      	str	r3, [r2, #0]
	if (Address >= PageEndAddress)
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <EEPROM_PageToIndex+0xf2>
		EEPROM_NextIndex = 0;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <EEPROM_PageToIndex+0x108>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

	//return on loop end
	return EEPROM_SUCCESS;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3724      	adds	r7, #36	; 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000134 	.word	0x20000134
 8001de0:	20000130 	.word	0x20000130
 8001de4:	20000144 	.word	0x20000144

08001de8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_GPIO_Init+0x80>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4619      	mov	r1, r3
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <MX_GPIO_Init+0x84>)
 8001e5a:	f002 fb43 	bl	80044e4 <HAL_GPIO_Init>

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010800 	.word	0x40010800

08001e70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e76:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <MX_I2C1_Init+0x54>)
 8001e78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e7c:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_I2C1_Init+0x58>)
 8001e7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_I2C1_Init+0x50>)
 8001eae:	f002 fcb5 	bl	800481c <HAL_I2C_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001eb8:	f000 fb63 	bl	8002582 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	2000019c 	.word	0x2000019c
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	00061a80 	.word	0x00061a80

08001ecc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_I2C_MspInit+0x90>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d132      	bne.n	8001f52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0a:	2312      	movs	r3, #18
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4812      	ldr	r0, [pc, #72]	; (8001f64 <HAL_I2C_MspInit+0x98>)
 8001f1a:	f002 fae3 	bl	80044e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_I2C_MspInit+0x9c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <HAL_I2C_MspInit+0x9c>)
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_I2C_MspInit+0x94>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010c00 	.word	0x40010c00
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	00000000 	.word	0x00000000

08001f70 <flashMemoryInit>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint16_t address);
void writeFlash(uint32_t address, double data);

void flashMemoryInit() {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af02      	add	r7, sp, #8
	//initialize EEPROM
	EEPROM_Init();
 8001f76:	f7ff fb8f 	bl	8001698 <EEPROM_Init>

	//set default value if variable not assigned
	EEPROM_Value value;
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	81fb      	strh	r3, [r7, #14]
 8001f7e:	e02b      	b.n	8001fd8 <flashMemoryInit+0x68>
		if (EEPROM_ReadVariable(i, &value) == EEPROM_NOT_ASSIGNED) {
 8001f80:	463a      	mov	r2, r7
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fc4e 	bl	8001828 <EEPROM_ReadVariable>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d11c      	bne.n	8001fcc <flashMemoryInit+0x5c>
			isCorrectionAssign = false;
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <flashMemoryInit+0x80>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

			switch (i) {
 8001f98:	89fb      	ldrh	r3, [r7, #14]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <flashMemoryInit+0x34>
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d00a      	beq.n	8001fb8 <flashMemoryInit+0x48>
 8001fa2:	e016      	b.n	8001fd2 <flashMemoryInit+0x62>
			case 0:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001fa4:	a310      	add	r3, pc, #64	; (adr r3, 8001fe8 <flashMemoryInit+0x78>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	89f9      	ldrh	r1, [r7, #14]
 8001fac:	2003      	movs	r0, #3
 8001fae:	9000      	str	r0, [sp, #0]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	f7ff fc93 	bl	80018dc <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fb6:	e00c      	b.n	8001fd2 <flashMemoryInit+0x62>
			case 1:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001fb8:	a30b      	add	r3, pc, #44	; (adr r3, 8001fe8 <flashMemoryInit+0x78>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	89f9      	ldrh	r1, [r7, #14]
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	9000      	str	r0, [sp, #0]
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	f7ff fc89 	bl	80018dc <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fca:	e002      	b.n	8001fd2 <flashMemoryInit+0x62>
			}
		} else {
			isCorrectionAssign = true;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <flashMemoryInit+0x80>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	81fb      	strh	r3, [r7, #14]
 8001fd8:	89fb      	ldrh	r3, [r7, #14]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d9d0      	bls.n	8001f80 <flashMemoryInit+0x10>
		}
	}
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	88e368f1 	.word	0x88e368f1
 8001fec:	3ee4f8b5 	.word	0x3ee4f8b5
 8001ff0:	20000148 	.word	0x20000148

08001ff4 <saveGyroData>:

void saveGyroData(double x, double y) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ffe:	e9c7 2300 	strd	r2, r3, [r7]
	isCorrectionAssign = true;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <saveGyroData+0x3c>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
	writeFlash(xAddress, x);
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <saveGyroData+0x40>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002012:	4608      	mov	r0, r1
 8002014:	f000 f82e 	bl	8002074 <writeFlash>
	writeFlash(yAddress, y);
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <saveGyroData+0x44>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002022:	4608      	mov	r0, r1
 8002024:	f000 f826 	bl	8002074 <writeFlash>
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000148 	.word	0x20000148
 8002034:	2000014a 	.word	0x2000014a
 8002038:	20000000 	.word	0x20000000

0800203c <readXFromFlash>:

double readXFromFlash() {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	return readFlash(xAddress);
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <readXFromFlash+0x18>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f82c 	bl	80020a2 <readFlash>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
}
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000014a 	.word	0x2000014a

08002058 <readYFromFlash>:

double readYFromFlash() {
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	return readFlash(yAddress);
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <readYFromFlash+0x18>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f81e 	bl	80020a2 <readFlash>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
}
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000000 	.word	0x20000000

08002074 <writeFlash>:

void writeFlash(uint32_t address, double data) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	e9c7 2300 	strd	r2, r3, [r7]
	EEPROM_Value value;
	value.Double = data;
 8002080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002084:	e9c7 2304 	strd	r2, r3, [r7, #16]
	EEPROM_WriteVariable(address, value, EEPROM_SIZE64);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	b299      	uxth	r1, r3
 800208c:	2303      	movs	r3, #3
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002094:	4608      	mov	r0, r1
 8002096:	f7ff fc21 	bl	80018dc <EEPROM_WriteVariable>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <readFlash>:

double readFlash(uint16_t address) {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	80fb      	strh	r3, [r7, #6]
	EEPROM_Value value;
	EEPROM_ReadVariable(address, &value);
 80020ac:	f107 0208 	add.w	r2, r7, #8
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fbb7 	bl	8001828 <EEPROM_ReadVariable>
	return value.Double;
 80020ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <main>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int main(void) {
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b08d      	sub	sp, #52	; 0x34
 80020cc:	af00      	add	r7, sp, #0

	HAL_Init();
 80020ce:	f000 fecf 	bl	8002e70 <HAL_Init>

	SystemClock_Config();
 80020d2:	f000 f8eb 	bl	80022ac <SystemClock_Config>

	MX_GPIO_Init();
 80020d6:	f7ff fe87 	bl	8001de8 <MX_GPIO_Init>
	MX_CAN1_Init();
 80020da:	f7ff f937 	bl	800134c <MX_CAN1_Init>
	MX_CAN2_Init();
 80020de:	f7ff f98d 	bl	80013fc <MX_CAN2_Init>
	MX_I2C1_Init();
 80020e2:	f7ff fec5 	bl	8001e70 <MX_I2C1_Init>
	flashMemoryInit();
 80020e6:	f7ff ff43 	bl	8001f70 <flashMemoryInit>

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80020ea:	4868      	ldr	r0, [pc, #416]	; (800228c <main+0x1c4>)
 80020ec:	f001 f922 	bl	8003334 <HAL_CAN_Start>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <main+0x32>
		Error_Handler();
 80020f6:	f000 fa44 	bl	8002582 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 80020fa:	f648 4102 	movw	r1, #35842	; 0x8c02
 80020fe:	4863      	ldr	r0, [pc, #396]	; (800228c <main+0x1c4>)
 8002100:	f001 fb7b 	bl	80037fa <HAL_CAN_ActivateNotification>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <main+0x46>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 800210a:	f000 fa3a 	bl	8002582 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 800210e:	4860      	ldr	r0, [pc, #384]	; (8002290 <main+0x1c8>)
 8002110:	f001 f910 	bl	8003334 <HAL_CAN_Start>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <main+0x56>
		Error_Handler();
 800211a:	f000 fa32 	bl	8002582 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 800211e:	f648 4110 	movw	r1, #35856	; 0x8c10
 8002122:	485b      	ldr	r0, [pc, #364]	; (8002290 <main+0x1c8>)
 8002124:	f001 fb69 	bl	80037fa <HAL_CAN_ActivateNotification>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <main+0x6a>
			CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 800212e:	f000 fa28 	bl	8002582 <Error_Handler>
	}

	//MPU initialize
	while (MPU6050_Init(&hi2c1) == 1) {
 8002132:	bf00      	nop
 8002134:	4857      	ldr	r0, [pc, #348]	; (8002294 <main+0x1cc>)
 8002136:	f000 fa29 	bl	800258c <MPU6050_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b01      	cmp	r3, #1
 800213e:	d0f9      	beq.n	8002134 <main+0x6c>
	}

	//loop
	while (1) {
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8002140:	4955      	ldr	r1, [pc, #340]	; (8002298 <main+0x1d0>)
 8002142:	4854      	ldr	r0, [pc, #336]	; (8002294 <main+0x1cc>)
 8002144:	f000 fa7c 	bl	8002640 <MPU6050_Read_All>

		double realX = MPU6050.KalmanAngleX;
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <main+0x1d0>)
 800214a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800214e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double realY = MPU6050.KalmanAngleY;
 8002152:	4b51      	ldr	r3, [pc, #324]	; (8002298 <main+0x1d0>)
 8002154:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002158:	e9c7 2304 	strd	r2, r3, [r7, #16]

		double storedX = readXFromFlash();
 800215c:	f7ff ff6e 	bl	800203c <readXFromFlash>
 8002160:	e9c7 0102 	strd	r0, r1, [r7, #8]
		double storedY = readYFromFlash();
 8002164:	f7ff ff78 	bl	8002058 <readYFromFlash>
 8002168:	e9c7 0100 	strd	r0, r1, [r7]

		double pitch = storedY - realY;
 800216c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002174:	f7fe f85c 	bl	8000230 <__aeabi_dsub>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double roll = storedX - realX;
 8002180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002184:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002188:	f7fe f852 	bl	8000230 <__aeabi_dsub>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (pitch > 60) {
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <main+0x1d4>)
 800219a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800219e:	f7fe fc8f 	bl	8000ac0 <__aeabi_dcmpgt>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <main+0xea>
			pitch = 60;
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <main+0x1d4>)
 80021ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (pitch < -60) {
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <main+0x1d8>)
 80021b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021bc:	f7fe fc62 	bl	8000a84 <__aeabi_dcmplt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <main+0x108>
			pitch = -60;
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <main+0x1d8>)
 80021cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (roll > 60) {
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <main+0x1d4>)
 80021d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021da:	f7fe fc71 	bl	8000ac0 <__aeabi_dcmpgt>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d004      	beq.n	80021ee <main+0x126>
			roll = 60;
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <main+0x1d4>)
 80021ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}
		if (roll < -60) {
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <main+0x1d8>)
 80021f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021f8:	f7fe fc44 	bl	8000a84 <__aeabi_dcmplt>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <main+0x144>
			roll = -60;
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <main+0x1d8>)
 8002208:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

		//20 & -20 degree max
		pitch += 0x78;
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <main+0x1dc>)
 8002212:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002216:	f7fe f80d 	bl	8000234 <__adddf3>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		//29 & -29 degree max
		roll += 0x78;
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <main+0x1dc>)
 8002228:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800222c:	f7fe f802 	bl	8000234 <__adddf3>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (isCorrectionAssign) {
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <main+0x1e0>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <main+0x194>
			sendGyroData(pitch, roll);
 8002240:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002244:	f7fe fc5c 	bl	8000b00 <__aeabi_d2iz>
 8002248:	4604      	mov	r4, r0
 800224a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800224e:	f7fe fc57 	bl	8000b00 <__aeabi_d2iz>
 8002252:	4603      	mov	r3, r0
 8002254:	4619      	mov	r1, r3
 8002256:	4620      	mov	r0, r4
 8002258:	f000 f958 	bl	800250c <sendGyroData>
		}

		if (BUTTON_STATE(CALIBRATE_MPU_BUTTON) == 1 || !isCorrectionAssign) {
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff f851 	bl	8001304 <BUTTON_STATE>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d006      	beq.n	8002276 <main+0x1ae>
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <main+0x1e0>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f083 0301 	eor.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <main+0x1ba>
			saveGyroData(realX, realY);
 8002276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800227a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800227e:	f7ff feb9 	bl	8001ff4 <saveGyroData>
		}

		HAL_Delay(100);
 8002282:	2064      	movs	r0, #100	; 0x64
 8002284:	f000 fe56 	bl	8002f34 <HAL_Delay>
	while (1) {
 8002288:	e75a      	b.n	8002140 <main+0x78>
 800228a:	bf00      	nop
 800228c:	20000174 	.word	0x20000174
 8002290:	2000014c 	.word	0x2000014c
 8002294:	2000019c 	.word	0x2000019c
 8002298:	200001f0 	.word	0x200001f0
 800229c:	404e0000 	.word	0x404e0000
 80022a0:	c04e0000 	.word	0xc04e0000
 80022a4:	405e0000 	.word	0x405e0000
 80022a8:	20000148 	.word	0x20000148

080022ac <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b094      	sub	sp, #80	; 0x50
 80022b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	2238      	movs	r2, #56	; 0x38
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f005 fca4 	bl	8007c08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80022d8:	2304      	movs	r3, #4
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022dc:	2301      	movs	r3, #1
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80022e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e4:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e6:	2302      	movs	r3, #2
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80022f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022f4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80022f6:	2302      	movs	r3, #2
 80022f8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80022fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002300:	2340      	movs	r3, #64	; 0x40
 8002302:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4618      	mov	r0, r3
 800230a:	f004 ff5b 	bl	80071c4 <HAL_RCC_OscConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0x6c>
		Error_Handler();
 8002314:	f000 f935 	bl	8002582 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002318:	230f      	movs	r3, #15
 800231a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231c:	2302      	movs	r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f005 fa5d 	bl	80077f0 <HAL_RCC_ClockConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0x94>
		Error_Handler();
 800233c:	f000 f921 	bl	8002582 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <SystemClock_Config+0xa4>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3750      	adds	r7, #80	; 0x50
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	42420070 	.word	0x42420070

08002354 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo0 can1 callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan1, RxDataCan1)
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002360:	2100      	movs	r1, #0
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f001 f938 	bl	80035d8 <HAL_CAN_GetRxMessage>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d113      	bne.n	8002396 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			== HAL_OK) {
		if (RxHeaderCan1.StdId == 0x350 && RxDataCan1[0] == 0xc7) {
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002376:	d106      	bne.n	8002386 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2bc7      	cmp	r3, #199	; 0xc7
 800237e:	d102      	bne.n	8002386 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			RxDataCan1[0] = 0xc6;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002382:	22c6      	movs	r2, #198	; 0xc6
 8002384:	701a      	strb	r2, [r3, #0]
		}

		CAN2_Transmit_manual(RxHeaderCan1.StdId, RxHeaderCan1.DLC, RxDataCan1);
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800238c:	6911      	ldr	r1, [r2, #16]
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f871 	bl	8002478 <CAN2_Transmit_manual>
	}
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200002d0 	.word	0x200002d0
 80023a4:	2000024c 	.word	0x2000024c

080023a8 <HAL_CAN_RxFifo1MsgPendingCallback>:

// can fifo1 for can2 callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeaderCan2, RxDataCan2)
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f001 f90e 	bl	80035d8 <HAL_CAN_GetRxMessage>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d107      	bne.n	80023d2 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
			== HAL_OK) {
		CAN1_Transmit_manual(RxHeaderCan2.StdId, RxHeaderCan2.DLC, RxDataCan2);
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a06      	ldr	r2, [pc, #24]	; (80023e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80023c8:	6911      	ldr	r1, [r2, #16]
 80023ca:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f809 	bl	80023e4 <CAN1_Transmit_manual>
	}
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002c0 	.word	0x200002c0
 80023e0:	2000028c 	.word	0x2000028c

080023e4 <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 80023f0:	bf00      	nop
 80023f2:	481d      	ldr	r0, [pc, #116]	; (8002468 <CAN1_Transmit_manual+0x84>)
 80023f4:	f001 f8bc 	bl	8003570 <HAL_CAN_GetTxMailboxesFreeLevel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f9      	beq.n	80023f2 <CAN1_Transmit_manual+0xe>

	}

	TxHeaderCan1.StdId = ID_CAN;
 80023fe:	4a1b      	ldr	r2, [pc, #108]	; (800246c <CAN1_Transmit_manual+0x88>)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6013      	str	r3, [r2, #0]
	TxHeaderCan1.DLC = DLC_CAN;
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <CAN1_Transmit_manual+0x88>)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6113      	str	r3, [r2, #16]
	TxDataCan1[0] = DATA_CAN[0];
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002410:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = DATA_CAN[1];
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	785a      	ldrb	r2, [r3, #1]
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002418:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = DATA_CAN[2];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	789a      	ldrb	r2, [r3, #2]
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002420:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = DATA_CAN[3];
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	78da      	ldrb	r2, [r3, #3]
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002428:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = DATA_CAN[4];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	791a      	ldrb	r2, [r3, #4]
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002430:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = DATA_CAN[5];
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	795a      	ldrb	r2, [r3, #5]
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002438:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = DATA_CAN[6];
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	799a      	ldrb	r2, [r3, #6]
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002440:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = DATA_CAN[7];
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	79da      	ldrb	r2, [r3, #7]
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 8002448:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeaderCan1, TxDataCan1, &TxMailboxCan1)
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <CAN1_Transmit_manual+0x90>)
 800244c:	4a08      	ldr	r2, [pc, #32]	; (8002470 <CAN1_Transmit_manual+0x8c>)
 800244e:	4907      	ldr	r1, [pc, #28]	; (800246c <CAN1_Transmit_manual+0x88>)
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <CAN1_Transmit_manual+0x84>)
 8002452:	f000 ffb3 	bl	80033bc <HAL_CAN_AddTxMessage>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <CAN1_Transmit_manual+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800245c:	f000 f891 	bl	8002582 <Error_Handler>
	}
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000174 	.word	0x20000174
 800246c:	2000026c 	.word	0x2000026c
 8002470:	200002c8 	.word	0x200002c8
 8002474:	20000248 	.word	0x20000248

08002478 <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) == 0) {
 8002484:	bf00      	nop
 8002486:	481d      	ldr	r0, [pc, #116]	; (80024fc <CAN2_Transmit_manual+0x84>)
 8002488:	f001 f872 	bl	8003570 <HAL_CAN_GetTxMailboxesFreeLevel>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f9      	beq.n	8002486 <CAN2_Transmit_manual+0xe>

	}

	TxHeaderCan2.StdId = ID_CAN;
 8002492:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <CAN2_Transmit_manual+0x88>)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6013      	str	r3, [r2, #0]
	TxHeaderCan2.DLC = DLC_CAN;
 8002498:	4a19      	ldr	r2, [pc, #100]	; (8002500 <CAN2_Transmit_manual+0x88>)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6113      	str	r3, [r2, #16]
	TxDataCan2[0] = DATA_CAN[0];
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024a4:	701a      	strb	r2, [r3, #0]
	TxDataCan2[1] = DATA_CAN[1];
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	785a      	ldrb	r2, [r3, #1]
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024ac:	705a      	strb	r2, [r3, #1]
	TxDataCan2[2] = DATA_CAN[2];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	789a      	ldrb	r2, [r3, #2]
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024b4:	709a      	strb	r2, [r3, #2]
	TxDataCan2[3] = DATA_CAN[3];
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	78da      	ldrb	r2, [r3, #3]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024bc:	70da      	strb	r2, [r3, #3]
	TxDataCan2[4] = DATA_CAN[4];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	791a      	ldrb	r2, [r3, #4]
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024c4:	711a      	strb	r2, [r3, #4]
	TxDataCan2[5] = DATA_CAN[5];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	795a      	ldrb	r2, [r3, #5]
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024cc:	715a      	strb	r2, [r3, #5]
	TxDataCan2[6] = DATA_CAN[6];
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	799a      	ldrb	r2, [r3, #6]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024d4:	719a      	strb	r2, [r3, #6]
	TxDataCan2[7] = DATA_CAN[7];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	79da      	ldrb	r2, [r3, #7]
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024dc:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeaderCan2, TxDataCan2, &TxMailboxCan2)
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <CAN2_Transmit_manual+0x90>)
 80024e0:	4a08      	ldr	r2, [pc, #32]	; (8002504 <CAN2_Transmit_manual+0x8c>)
 80024e2:	4907      	ldr	r1, [pc, #28]	; (8002500 <CAN2_Transmit_manual+0x88>)
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <CAN2_Transmit_manual+0x84>)
 80024e6:	f000 ff69 	bl	80033bc <HAL_CAN_AddTxMessage>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <CAN2_Transmit_manual+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80024f0:	f000 f847 	bl	8002582 <Error_Handler>
	}
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000014c 	.word	0x2000014c
 8002500:	200002a8 	.word	0x200002a8
 8002504:	20000284 	.word	0x20000284
 8002508:	20000268 	.word	0x20000268

0800250c <sendGyroData>:

void sendGyroData(int x, int y) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	TxDataCan1[0] = y;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <sendGyroData+0x54>)
 800251c:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = x;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <sendGyroData+0x54>)
 8002524:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = 0x00;
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <sendGyroData+0x54>)
 8002528:	2200      	movs	r2, #0
 800252a:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = 0x00;
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <sendGyroData+0x54>)
 800252e:	2200      	movs	r2, #0
 8002530:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = 0x00;
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <sendGyroData+0x54>)
 8002534:	2200      	movs	r2, #0
 8002536:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = 0x00;
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <sendGyroData+0x54>)
 800253a:	2200      	movs	r2, #0
 800253c:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = 0x00;
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <sendGyroData+0x54>)
 8002540:	2200      	movs	r2, #0
 8002542:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = 0x00;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <sendGyroData+0x54>)
 8002546:	2200      	movs	r2, #0
 8002548:	71da      	strb	r2, [r3, #7]

	CAN1_Transmit_manual(0x685, 8, TxDataCan1);
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <sendGyroData+0x54>)
 800254c:	2108      	movs	r1, #8
 800254e:	f240 6085 	movw	r0, #1669	; 0x685
 8002552:	f7ff ff47 	bl	80023e4 <CAN1_Transmit_manual>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200002c8 	.word	0x200002c8

08002564 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_CAN_GetError(hcan);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f001 fb7a 	bl	8003c66 <HAL_CAN_GetError>
 8002572:	60f8      	str	r0, [r7, #12]
  	HAL_CAN_ResetError(hcan);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f001 fb81 	bl	8003c7c <HAL_CAN_ResetError>
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <Error_Handler>:

void Error_Handler(void) {
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002586:	b672      	cpsid	i
}
 8002588:	bf00      	nop
	__disable_irq();

	while (1) {
 800258a:	e7fe      	b.n	800258a <Error_Handler+0x8>

0800258c <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af04      	add	r7, sp, #16
 8002592:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 8002594:	2364      	movs	r3, #100	; 0x64
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	2301      	movs	r3, #1
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	f107 030f 	add.w	r3, r7, #15
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2301      	movs	r3, #1
 80025a4:	2275      	movs	r2, #117	; 0x75
 80025a6:	21d0      	movs	r1, #208	; 0xd0
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f002 fb75 	bl	8004c98 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b68      	cmp	r3, #104	; 0x68
 80025b2:	d13d      	bne.n	8002630 <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 80025b8:	2364      	movs	r3, #100	; 0x64
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	2301      	movs	r3, #1
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	f107 030e 	add.w	r3, r7, #14
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	226b      	movs	r2, #107	; 0x6b
 80025ca:	21d0      	movs	r1, #208	; 0xd0
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f002 fa69 	bl	8004aa4 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80025d2:	2307      	movs	r3, #7
 80025d4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 80025d6:	2364      	movs	r3, #100	; 0x64
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2301      	movs	r3, #1
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	f107 030e 	add.w	r3, r7, #14
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2301      	movs	r3, #1
 80025e6:	2219      	movs	r2, #25
 80025e8:	21d0      	movs	r1, #208	; 0xd0
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f002 fa5a 	bl	8004aa4 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 80025f4:	2364      	movs	r3, #100	; 0x64
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	2301      	movs	r3, #1
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	f107 030e 	add.w	r3, r7, #14
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2301      	movs	r3, #1
 8002604:	221c      	movs	r2, #28
 8002606:	21d0      	movs	r1, #208	; 0xd0
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f002 fa4b 	bl	8004aa4 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 800260e:	2300      	movs	r3, #0
 8002610:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 8002612:	2364      	movs	r3, #100	; 0x64
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	2301      	movs	r3, #1
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	f107 030e 	add.w	r3, r7, #14
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2301      	movs	r3, #1
 8002622:	221b      	movs	r2, #27
 8002624:	21d0      	movs	r1, #208	; 0xd0
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f002 fa3c 	bl	8004aa4 <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <MPU6050_Init+0xa6>
	}
	return 1;
 8002630:	2301      	movs	r3, #1
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	0000      	movs	r0, r0
 800263c:	0000      	movs	r0, r0
	...

08002640 <MPU6050_Read_All>:
	temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
			+ (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002644:	b094      	sub	sp, #80	; 0x50
 8002646:	af04      	add	r7, sp, #16
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14,
 800264c:	2364      	movs	r3, #100	; 0x64
 800264e:	9302      	str	r3, [sp, #8]
 8002650:	230e      	movs	r3, #14
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2301      	movs	r3, #1
 800265c:	223b      	movs	r2, #59	; 0x3b
 800265e:	21d0      	movs	r1, #208	; 0xd0
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f002 fb19 	bl	8004c98 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8002666:	7a3b      	ldrb	r3, [r7, #8]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	b21a      	sxth	r2, r3
 800266c:	7a7b      	ldrb	r3, [r7, #9]
 800266e:	b21b      	sxth	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b21a      	sxth	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002678:	7abb      	ldrb	r3, [r7, #10]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b21a      	sxth	r2, r3
 800267e:	7afb      	ldrb	r3, [r7, #11]
 8002680:	b21b      	sxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b21a      	sxth	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800268a:	7b3b      	ldrb	r3, [r7, #12]
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	b21a      	sxth	r2, r3
 8002690:	7b7b      	ldrb	r3, [r7, #13]
 8002692:	b21b      	sxth	r3, r3
 8002694:	4313      	orrs	r3, r2
 8002696:	b21a      	sxth	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	809a      	strh	r2, [r3, #4]
	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	86fb      	strh	r3, [r7, #54]	; 0x36
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80026aa:	7c3b      	ldrb	r3, [r7, #16]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	7c7b      	ldrb	r3, [r7, #17]
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b21a      	sxth	r2, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80026bc:	7cbb      	ldrb	r3, [r7, #18]
 80026be:	021b      	lsls	r3, r3, #8
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80026ce:	7d3b      	ldrb	r3, [r7, #20]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	7d7b      	ldrb	r3, [r7, #21]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21a      	sxth	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fef0 	bl	80004cc <__aeabi_i2d>
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4bb7      	ldr	r3, [pc, #732]	; (80029d0 <MPU6050_Read_All+0x390>)
 80026f2:	f7fe f87f 	bl	80007f4 <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fee0 	bl	80004cc <__aeabi_i2d>
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	4baf      	ldr	r3, [pc, #700]	; (80029d0 <MPU6050_Read_All+0x390>)
 8002712:	f7fe f86f 	bl	80007f4 <__aeabi_ddiv>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fed0 	bl	80004cc <__aeabi_i2d>
 800272c:	a3a2      	add	r3, pc, #648	; (adr r3, 80029b8 <MPU6050_Read_All+0x378>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	f7fe f85f 	bl	80007f4 <__aeabi_ddiv>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	6839      	ldr	r1, [r7, #0]
 800273c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
 8002740:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fabd 	bl	8000cc4 <__aeabi_i2f>
 800274a:	4603      	mov	r3, r0
 800274c:	49a1      	ldr	r1, [pc, #644]	; (80029d4 <MPU6050_Read_All+0x394>)
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fbc0 	bl	8000ed4 <__aeabi_fdiv>
 8002754:	4603      	mov	r3, r0
 8002756:	49a0      	ldr	r1, [pc, #640]	; (80029d8 <MPU6050_Read_All+0x398>)
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe f9ff 	bl	8000b5c <__addsf3>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
			+ (float) 36.53);
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fead 	bl	80004cc <__aeabi_i2d>
 8002772:	a393      	add	r3, pc, #588	; (adr r3, 80029c0 <MPU6050_Read_All+0x380>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fe f83c 	bl	80007f4 <__aeabi_ddiv>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fe9d 	bl	80004cc <__aeabi_i2d>
 8002792:	a38b      	add	r3, pc, #556	; (adr r3, 80029c0 <MPU6050_Read_All+0x380>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fe f82c 	bl	80007f4 <__aeabi_ddiv>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	6839      	ldr	r1, [r7, #0]
 80027a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fe8d 	bl	80004cc <__aeabi_i2d>
 80027b2:	a383      	add	r3, pc, #524	; (adr r3, 80029c0 <MPU6050_Read_All+0x380>)
 80027b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b8:	f7fe f81c 	bl	80007f4 <__aeabi_ddiv>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 80027c6:	f000 fbab 	bl	8002f20 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	4b83      	ldr	r3, [pc, #524]	; (80029dc <MPU6050_Read_All+0x39c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fe6a 	bl	80004ac <__aeabi_ui2d>
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <MPU6050_Read_All+0x3a0>)
 80027de:	f7fe f809 	bl	80007f4 <__aeabi_ddiv>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 80027ea:	f000 fb99 	bl	8002f20 <HAL_GetTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a7a      	ldr	r2, [pc, #488]	; (80029dc <MPU6050_Read_All+0x39c>)
 80027f2:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002802:	fb03 f202 	mul.w	r2, r3, r2
					+ DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800280c:	4619      	mov	r1, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002814:	fb03 f301 	mul.w	r3, r3, r1
 8002818:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fe56 	bl	80004cc <__aeabi_i2d>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f005 fb86 	bl	8007f38 <sqrt>
 800282c:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if (roll_sqrt != 0.0) {
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800283c:	f7fe f918 	bl	8000a70 <__aeabi_dcmpeq>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d119      	bne.n	800287a <MPU6050_Read_All+0x23a>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe3d 	bl	80004cc <__aeabi_i2d>
 8002852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002856:	f7fd ffcd 	bl	80007f4 <__aeabi_ddiv>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f005 f9d9 	bl	8007c18 <atan>
 8002866:	a358      	add	r3, pc, #352	; (adr r3, 80029c8 <MPU6050_Read_All+0x388>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fe98 	bl	80005a0 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002878:	e005      	b.n	8002886 <MPU6050_Read_All+0x246>
	} else {
		roll = 0.0;
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288c:	425b      	negs	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f7fd fe1c 	bl	80004cc <__aeabi_i2d>
 8002894:	4682      	mov	sl, r0
 8002896:	468b      	mov	fp, r1
			DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe14 	bl	80004cc <__aeabi_i2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4650      	mov	r0, sl
 80028aa:	4659      	mov	r1, fp
 80028ac:	f005 fb41 	bl	8007f32 <atan2>
 80028b0:	a345      	add	r3, pc, #276	; (adr r3, 80029c8 <MPU6050_Read_All+0x388>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f7fd fe73 	bl	80005a0 <__aeabi_dmul>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90)
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <MPU6050_Read_All+0x3a4>)
 80028c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028cc:	f7fe f8da 	bl	8000a84 <__aeabi_dcmplt>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <MPU6050_Read_All+0x2ac>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <MPU6050_Read_All+0x3a8>)
 80028e2:	f7fe f8ed 	bl	8000ac0 <__aeabi_dcmpgt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d114      	bne.n	8002916 <MPU6050_Read_All+0x2d6>
			|| (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <MPU6050_Read_All+0x3a8>)
 80028f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028f6:	f7fe f8e3 	bl	8000ac0 <__aeabi_dcmpgt>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <MPU6050_Read_All+0x2ec>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <MPU6050_Read_All+0x3a4>)
 800290c:	f7fe f8ba 	bl	8000a84 <__aeabi_dcmplt>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <MPU6050_Read_All+0x2ec>
		KalmanY.angle = pitch;
 8002916:	4935      	ldr	r1, [pc, #212]	; (80029ec <MPU6050_Read_All+0x3ac>)
 8002918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002926:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800292a:	e012      	b.n	8002952 <MPU6050_Read_All+0x312>
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800293a:	e9cd 2300 	strd	r2, r3, [sp]
 800293e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002942:	482a      	ldr	r0, [pc, #168]	; (80029ec <MPU6050_Read_All+0x3ac>)
 8002944:	f000 f856 	bl	80029f4 <Kalman_getAngle>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				DataStruct->Gy, dt);
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002958:	4690      	mov	r8, r2
 800295a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <MPU6050_Read_All+0x3a8>)
 8002964:	4640      	mov	r0, r8
 8002966:	4649      	mov	r1, r9
 8002968:	f7fe f8aa 	bl	8000ac0 <__aeabi_dcmpgt>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <MPU6050_Read_All+0x344>
		DataStruct->Gx = -DataStruct->Gx;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002978:	4614      	mov	r4, r2
 800297a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800298a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800298e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002992:	e9cd 2300 	strd	r2, r3, [sp]
 8002996:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800299a:	4815      	ldr	r0, [pc, #84]	; (80029f0 <MPU6050_Read_All+0x3b0>)
 800299c:	f000 f82a 	bl	80029f4 <Kalman_getAngle>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			dt);
}
 80029aa:	bf00      	nop
 80029ac:	3740      	adds	r7, #64	; 0x40
 80029ae:	46bd      	mov	sp, r7
 80029b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b4:	f3af 8000 	nop.w
 80029b8:	00000000 	.word	0x00000000
 80029bc:	40cc2900 	.word	0x40cc2900
 80029c0:	00000000 	.word	0x00000000
 80029c4:	40606000 	.word	0x40606000
 80029c8:	1a63c1f8 	.word	0x1a63c1f8
 80029cc:	404ca5dc 	.word	0x404ca5dc
 80029d0:	40d00000 	.word	0x40d00000
 80029d4:	43aa0000 	.word	0x43aa0000
 80029d8:	42121eb8 	.word	0x42121eb8
 80029dc:	200002d8 	.word	0x200002d8
 80029e0:	408f4000 	.word	0x408f4000
 80029e4:	c0568000 	.word	0xc0568000
 80029e8:	40568000 	.word	0x40568000
 80029ec:	20000050 	.word	0x20000050
 80029f0:	20000008 	.word	0x20000008

080029f4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b092      	sub	sp, #72	; 0x48
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a0a:	f7fd fc11 	bl	8000230 <__aeabi_dsub>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a24:	f7fd fdbc 	bl	80005a0 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4629      	mov	r1, r5
 8002a30:	f7fd fc00 	bl	8000234 <__adddf3>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	68f9      	ldr	r1, [r7, #12]
 8002a3a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002a4a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a4e:	f7fd fda7 	bl	80005a0 <__aeabi_dmul>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a60:	f7fd fbe6 	bl	8000230 <__aeabi_dsub>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a72:	f7fd fbdd 	bl	8000230 <__aeabi_dsub>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f7fd fbd6 	bl	8000234 <__adddf3>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002a90:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a94:	f7fd fd84 	bl	80005a0 <__aeabi_dmul>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	f7fd fbc8 	bl	8000234 <__adddf3>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002aba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002abe:	f7fd fd6f 	bl	80005a0 <__aeabi_dmul>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	4629      	mov	r1, r5
 8002aca:	f7fd fbb1 	bl	8000230 <__aeabi_dsub>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ae4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ae8:	f7fd fd5a 	bl	80005a0 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4620      	mov	r0, r4
 8002af2:	4629      	mov	r1, r5
 8002af4:	f7fd fb9c 	bl	8000230 <__aeabi_dsub>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	68f9      	ldr	r1, [r7, #12]
 8002afe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b0e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002b12:	f7fd fd45 	bl	80005a0 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7fd fb89 	bl	8000234 <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b38:	f7fd fb7c 	bl	8000234 <__adddf3>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b4e:	f7fd fe51 	bl	80007f4 <__aeabi_ddiv>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b64:	f7fd fe46 	bl	80007f4 <__aeabi_ddiv>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b7a:	f7fd fb59 	bl	8000230 <__aeabi_dsub>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b94:	f7fd fd04 	bl	80005a0 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	f7fd fb48 	bl	8000234 <__adddf3>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002bb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bb8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bbc:	f7fd fcf0 	bl	80005a0 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	f7fd fb34 	bl	8000234 <__adddf3>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002bdc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002be6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002bf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf8:	f7fd fcd2 	bl	80005a0 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4620      	mov	r0, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	f7fd fb14 	bl	8000230 <__aeabi_dsub>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	68f9      	ldr	r1, [r7, #12]
 8002c0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002c18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c20:	f7fd fcbe 	bl	80005a0 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4620      	mov	r0, r4
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	f7fd fb00 	bl	8000230 <__aeabi_dsub>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002c40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c48:	f7fd fcaa 	bl	80005a0 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4620      	mov	r0, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fd faec 	bl	8000230 <__aeabi_dsub>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002c68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c6c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c70:	f7fd fc96 	bl	80005a0 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd fad8 	bl	8000230 <__aeabi_dsub>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	68f9      	ldr	r1, [r7, #12]
 8002c86:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	3748      	adds	r7, #72	; 0x48
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6193      	str	r3, [r2, #24]
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	61d3      	str	r3, [r2, #28]
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_MspInit+0x5c>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_MspInit+0x60>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_MspInit+0x60>)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40010000 	.word	0x40010000

08002d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <NMI_Handler+0x4>

08002d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <HardFault_Handler+0x4>

08002d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d10:	e7fe      	b.n	8002d10 <MemManage_Handler+0x4>

08002d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d16:	e7fe      	b.n	8002d16 <BusFault_Handler+0x4>

08002d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <UsageFault_Handler+0x4>

08002d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d46:	f000 f8d9 	bl	8002efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <CAN1_TX_IRQHandler+0x10>)
 8002d56:	f000 fd75 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000174 	.word	0x20000174

08002d64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <CAN1_RX0_IRQHandler+0x10>)
 8002d6a:	f000 fd6b 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000174 	.word	0x20000174

08002d78 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <CAN1_RX1_IRQHandler+0x10>)
 8002d7e:	f000 fd61 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000174 	.word	0x20000174

08002d8c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <CAN1_SCE_IRQHandler+0x10>)
 8002d92:	f000 fd57 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000174 	.word	0x20000174

08002da0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <I2C1_EV_IRQHandler+0x10>)
 8002da6:	f002 f9df 	bl	8005168 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	2000019c 	.word	0x2000019c

08002db4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <I2C1_ER_IRQHandler+0x10>)
 8002dba:	f002 fb46 	bl	800544a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000019c 	.word	0x2000019c

08002dc8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <CAN2_TX_IRQHandler+0x10>)
 8002dce:	f000 fd39 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	2000014c 	.word	0x2000014c

08002ddc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <CAN2_RX0_IRQHandler+0x10>)
 8002de2:	f000 fd2f 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000014c 	.word	0x2000014c

08002df0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <CAN2_RX1_IRQHandler+0x10>)
 8002df6:	f000 fd25 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	2000014c 	.word	0x2000014c

08002e04 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <CAN2_SCE_IRQHandler+0x10>)
 8002e0a:	f000 fd1b 	bl	8003844 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000014c 	.word	0x2000014c

08002e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e24:	480c      	ldr	r0, [pc, #48]	; (8002e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e26:	490d      	ldr	r1, [pc, #52]	; (8002e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e4a:	f7ff ffe5 	bl	8002e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4e:	f004 feb7 	bl	8007bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e52:	f7ff f939 	bl	80020c8 <main>
  bx lr
 8002e56:	4770      	bx	lr
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002e60:	08008360 	.word	0x08008360
  ldr r2, =_sbss
 8002e64:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002e68:	20000300 	.word	0x20000300

08002e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC1_2_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_Init+0x28>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_Init+0x28>)
 8002e7a:	f043 0310 	orr.w	r3, r3, #16
 8002e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e80:	2003      	movs	r0, #3
 8002e82:	f000 ffe9 	bl	8003e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e86:	200f      	movs	r0, #15
 8002e88:	f000 f808 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8c:	f7ff ff06 	bl	8002c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x54>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_InitTick+0x58>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 f801 	bl	8003ec2 <HAL_SYSTICK_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00e      	b.n	8002ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d80a      	bhi.n	8002ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed8:	f000 ffc9 	bl	8003e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <HAL_InitTick+0x5c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000098 	.word	0x20000098
 8002ef4:	200000a0 	.word	0x200000a0
 8002ef8:	2000009c 	.word	0x2000009c

08002efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_IncTick+0x1c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_IncTick+0x20>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_IncTick+0x20>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	200000a0 	.word	0x200000a0
 8002f1c:	200002dc 	.word	0x200002dc

08002f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <HAL_GetTick+0x10>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	200002dc 	.word	0x200002dc

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffe0 	bl	8002f20 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200000a0 	.word	0x200000a0

08002f7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e0ed      	b.n	800316a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7fe fa86 	bl	80014ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fb0:	f7ff ffb6 	bl	8002f20 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fb6:	e012      	b.n	8002fde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fb8:	f7ff ffb2 	bl	8002f20 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b0a      	cmp	r3, #10
 8002fc4:	d90b      	bls.n	8002fde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0c5      	b.n	800316a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0e5      	beq.n	8002fb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0202 	bic.w	r2, r2, #2
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ffc:	f7ff ff90 	bl	8002f20 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003002:	e012      	b.n	800302a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003004:	f7ff ff8c 	bl	8002f20 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b0a      	cmp	r3, #10
 8003010:	d90b      	bls.n	800302a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2205      	movs	r2, #5
 8003022:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e09f      	b.n	800316a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e5      	bne.n	8003004 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7e1b      	ldrb	r3, [r3, #24]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d108      	bne.n	8003052 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e007      	b.n	8003062 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7e5b      	ldrb	r3, [r3, #25]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d108      	bne.n	800307c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e007      	b.n	800308c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7e9b      	ldrb	r3, [r3, #26]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d108      	bne.n	80030a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0220 	orr.w	r2, r2, #32
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e007      	b.n	80030b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0220 	bic.w	r2, r2, #32
 80030b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7edb      	ldrb	r3, [r3, #27]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d108      	bne.n	80030d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0210 	bic.w	r2, r2, #16
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e007      	b.n	80030e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0210 	orr.w	r2, r2, #16
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7f1b      	ldrb	r3, [r3, #28]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d108      	bne.n	80030fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e007      	b.n	800310a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0208 	bic.w	r2, r2, #8
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	7f5b      	ldrb	r3, [r3, #29]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d108      	bne.n	8003124 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0204 	orr.w	r2, r2, #4
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e007      	b.n	8003134 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	ea42 0103 	orr.w	r1, r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	1e5a      	subs	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800318c:	7cfb      	ldrb	r3, [r7, #19]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d003      	beq.n	800319a <HAL_CAN_ConfigFilter+0x26>
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	2b02      	cmp	r3, #2
 8003196:	f040 80be 	bne.w	8003316 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_CAN_ConfigFilter+0x1bc>)
 800319c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2201      	movs	r2, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	43db      	mvns	r3, r3
 80031ec:	401a      	ands	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d123      	bne.n	8003244 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800321e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3248      	adds	r2, #72	; 0x48
 8003224:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003238:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800323a:	6979      	ldr	r1, [r7, #20]
 800323c:	3348      	adds	r3, #72	; 0x48
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d122      	bne.n	8003292 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	431a      	orrs	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800326c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3248      	adds	r2, #72	; 0x48
 8003272:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003286:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003288:	6979      	ldr	r1, [r7, #20]
 800328a:	3348      	adds	r3, #72	; 0x48
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	401a      	ands	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80032ac:	e007      	b.n	80032be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	401a      	ands	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80032d8:	e007      	b.n	80032ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003308:	f023 0201 	bic.w	r2, r3, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e006      	b.n	8003324 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40006400 	.word	0x40006400

08003334 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d12e      	bne.n	80033a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003360:	f7ff fdde 	bl	8002f20 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003366:	e012      	b.n	800338e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003368:	f7ff fdda 	bl	8002f20 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b0a      	cmp	r3, #10
 8003374:	d90b      	bls.n	800338e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2205      	movs	r2, #5
 8003386:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e012      	b.n	80033b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e006      	b.n	80033b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80033bc:	b480      	push	{r7}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80033da:	7ffb      	ldrb	r3, [r7, #31]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d003      	beq.n	80033e8 <HAL_CAN_AddTxMessage+0x2c>
 80033e0:	7ffb      	ldrb	r3, [r7, #31]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	f040 80b8 	bne.w	8003558 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a0 	beq.w	8003548 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	0e1b      	lsrs	r3, r3, #24
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d907      	bls.n	8003428 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e09e      	b.n	8003566 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003428:	2201      	movs	r2, #1
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	409a      	lsls	r2, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003444:	68f9      	ldr	r1, [r7, #12]
 8003446:	6809      	ldr	r1, [r1, #0]
 8003448:	431a      	orrs	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3318      	adds	r3, #24
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	440b      	add	r3, r1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e00f      	b.n	8003476 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003460:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800346a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3318      	adds	r3, #24
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	440b      	add	r3, r1
 8003474:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3318      	adds	r3, #24
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	440b      	add	r3, r1
 8003486:	3304      	adds	r3, #4
 8003488:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	7d1b      	ldrb	r3, [r3, #20]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d111      	bne.n	80034b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	3318      	adds	r3, #24
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	6811      	ldr	r1, [r2, #0]
 80034a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	3318      	adds	r3, #24
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	440b      	add	r3, r1
 80034b2:	3304      	adds	r3, #4
 80034b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3307      	adds	r3, #7
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	061a      	lsls	r2, r3, #24
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3306      	adds	r3, #6
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3305      	adds	r3, #5
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	4313      	orrs	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	3204      	adds	r2, #4
 80034d6:	7812      	ldrb	r2, [r2, #0]
 80034d8:	4610      	mov	r0, r2
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	6811      	ldr	r1, [r2, #0]
 80034de:	ea43 0200 	orr.w	r2, r3, r0
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80034ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3303      	adds	r3, #3
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	061a      	lsls	r2, r3, #24
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3302      	adds	r3, #2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3301      	adds	r3, #1
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	4313      	orrs	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	4610      	mov	r0, r2
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	6811      	ldr	r1, [r2, #0]
 8003514:	ea43 0200 	orr.w	r2, r3, r0
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	440b      	add	r3, r1
 800351e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003522:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3318      	adds	r3, #24
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	4413      	add	r3, r2
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	6811      	ldr	r1, [r2, #0]
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3318      	adds	r3, #24
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	440b      	add	r3, r1
 8003542:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e00e      	b.n	8003566 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e006      	b.n	8003566 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003582:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d11d      	bne.n	80035cc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3301      	adds	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3301      	adds	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3301      	adds	r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80035cc:	68fb      	ldr	r3, [r7, #12]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ec:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d003      	beq.n	80035fc <HAL_CAN_GetRxMessage+0x24>
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 80f3 	bne.w	80037e2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d116      	bne.n	800363e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0e7      	b.n	80037f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0d8      	b.n	80037f0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	331b      	adds	r3, #27
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	4413      	add	r3, r2
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0204 	and.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10c      	bne.n	8003676 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	331b      	adds	r3, #27
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	4413      	add	r3, r2
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0d5b      	lsrs	r3, r3, #21
 800366c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e00b      	b.n	800368e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	331b      	adds	r3, #27
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	08db      	lsrs	r3, r3, #3
 8003686:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	331b      	adds	r3, #27
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	4413      	add	r3, r2
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0202 	and.w	r2, r3, #2
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	331b      	adds	r3, #27
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	331b      	adds	r3, #27
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	3304      	adds	r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	331b      	adds	r3, #27
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	4413      	add	r3, r2
 80036e0:	3304      	adds	r3, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4413      	add	r3, r2
 800370c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	0a1a      	lsrs	r2, r3, #8
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4413      	add	r3, r2
 8003726:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0c1a      	lsrs	r2, r3, #16
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	3302      	adds	r3, #2
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4413      	add	r3, r2
 8003740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e1a      	lsrs	r2, r3, #24
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	3303      	adds	r3, #3
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	4413      	add	r3, r2
 800375a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	3304      	adds	r3, #4
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	4413      	add	r3, r2
 8003772:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	0a1a      	lsrs	r2, r3, #8
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	3305      	adds	r3, #5
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4413      	add	r3, r2
 800378c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0c1a      	lsrs	r2, r3, #16
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	3306      	adds	r3, #6
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e1a      	lsrs	r2, r3, #24
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	3307      	adds	r3, #7
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0220 	orr.w	r2, r2, #32
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	e007      	b.n	80037de <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0220 	orr.w	r2, r2, #32
 80037dc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e006      	b.n	80037f0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d002      	beq.n	8003818 <HAL_CAN_ActivateNotification+0x1e>
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d109      	bne.n	800382c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6959      	ldr	r1, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e006      	b.n	800383a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d07c      	beq.n	8003984 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d023      	beq.n	80038dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2201      	movs	r2, #1
 800389a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f983 	bl	8003bb2 <HAL_CAN_TxMailbox0CompleteCallback>
 80038ac:	e016      	b.n	80038dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
 80038c0:	e00c      	b.n	80038dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	e002      	b.n	80038dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f986 	bl	8003be8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d024      	beq.n	8003930 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f962 	bl	8003bc4 <HAL_CAN_TxMailbox1CompleteCallback>
 8003900:	e016      	b.n	8003930 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
 8003914:	e00c      	b.n	8003930 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	e002      	b.n	8003930 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f965 	bl	8003bfa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d024      	beq.n	8003984 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003942:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f941 	bl	8003bd6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003954:	e016      	b.n	8003984 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	e00c      	b.n	8003984 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
 800397c:	e002      	b.n	8003984 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f944 	bl	8003c0c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800399e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2210      	movs	r2, #16
 80039a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2208      	movs	r2, #8
 80039c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f92a 	bl	8003c1e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe fcb6 	bl	8002354 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00c      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2208      	movs	r2, #8
 8003a26:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f901 	bl	8003c30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe fcae 	bl	80023a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2210      	movs	r2, #16
 8003a66:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8ea 	bl	8003c42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2208      	movs	r2, #8
 8003a88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8e2 	bl	8003c54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d07b      	beq.n	8003b92 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d072      	beq.n	8003b8a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f043 0302 	orr.w	r3, r3, #2
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f043 0304 	orr.w	r3, r3, #4
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d043      	beq.n	8003b8a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d03e      	beq.n	8003b8a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b12:	2b60      	cmp	r3, #96	; 0x60
 8003b14:	d02b      	beq.n	8003b6e <HAL_CAN_IRQHandler+0x32a>
 8003b16:	2b60      	cmp	r3, #96	; 0x60
 8003b18:	d82e      	bhi.n	8003b78 <HAL_CAN_IRQHandler+0x334>
 8003b1a:	2b50      	cmp	r3, #80	; 0x50
 8003b1c:	d022      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x320>
 8003b1e:	2b50      	cmp	r3, #80	; 0x50
 8003b20:	d82a      	bhi.n	8003b78 <HAL_CAN_IRQHandler+0x334>
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d019      	beq.n	8003b5a <HAL_CAN_IRQHandler+0x316>
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d826      	bhi.n	8003b78 <HAL_CAN_IRQHandler+0x334>
 8003b2a:	2b30      	cmp	r3, #48	; 0x30
 8003b2c:	d010      	beq.n	8003b50 <HAL_CAN_IRQHandler+0x30c>
 8003b2e:	2b30      	cmp	r3, #48	; 0x30
 8003b30:	d822      	bhi.n	8003b78 <HAL_CAN_IRQHandler+0x334>
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d002      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x2f8>
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d005      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b3a:	e01d      	b.n	8003b78 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f043 0308 	orr.w	r3, r3, #8
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b44:	e019      	b.n	8003b7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	f043 0310 	orr.w	r3, r3, #16
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b4e:	e014      	b.n	8003b7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f043 0320 	orr.w	r3, r3, #32
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b58:	e00f      	b.n	8003b7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b62:	e00a      	b.n	8003b7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b6c:	e005      	b.n	8003b7a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b76:	e000      	b.n	8003b7a <HAL_CAN_IRQHandler+0x336>
            break;
 8003b78:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b88:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fe fcdd 	bl	8002564 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003baa:	bf00      	nop
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c8e:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c90:	7bbb      	ldrb	r3, [r7, #14]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d002      	beq.n	8003c9c <HAL_CAN_ResetError+0x20>
 8003c96:	7bbb      	ldrb	r3, [r7, #14]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d103      	bne.n	8003ca4 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8003ca2:	e007      	b.n	8003cb4 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	60d3      	str	r3, [r2, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <__NVIC_GetPriorityGrouping+0x18>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 0307 	and.w	r3, r3, #7
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	db0b      	blt.n	8003d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	f003 021f 	and.w	r2, r3, #31
 8003d3c:	4906      	ldr	r1, [pc, #24]	; (8003d58 <__NVIC_EnableIRQ+0x34>)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2001      	movs	r0, #1
 8003d46:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	e000e100 	.word	0xe000e100

08003d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	db0a      	blt.n	8003d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	490c      	ldr	r1, [pc, #48]	; (8003da8 <__NVIC_SetPriority+0x4c>)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d84:	e00a      	b.n	8003d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4908      	ldr	r1, [pc, #32]	; (8003dac <__NVIC_SetPriority+0x50>)
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	3b04      	subs	r3, #4
 8003d94:	0112      	lsls	r2, r2, #4
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	440b      	add	r3, r1
 8003d9a:	761a      	strb	r2, [r3, #24]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000e100 	.word	0xe000e100
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f1c3 0307 	rsb	r3, r3, #7
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	bf28      	it	cs
 8003dce:	2304      	movcs	r3, #4
 8003dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d902      	bls.n	8003de0 <NVIC_EncodePriority+0x30>
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3b03      	subs	r3, #3
 8003dde:	e000      	b.n	8003de2 <NVIC_EncodePriority+0x32>
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	401a      	ands	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003e02:	43d9      	mvns	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e08:	4313      	orrs	r3, r2
         );
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3724      	adds	r7, #36	; 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e24:	d301      	bcc.n	8003e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e26:	2301      	movs	r3, #1
 8003e28:	e00f      	b.n	8003e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	; (8003e54 <SysTick_Config+0x40>)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e32:	210f      	movs	r1, #15
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e38:	f7ff ff90 	bl	8003d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <SysTick_Config+0x40>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <SysTick_Config+0x40>)
 8003e44:	2207      	movs	r2, #7
 8003e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	e000e010 	.word	0xe000e010

08003e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff2d 	bl	8003cc0 <__NVIC_SetPriorityGrouping>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4603      	mov	r3, r0
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e80:	f7ff ff42 	bl	8003d08 <__NVIC_GetPriorityGrouping>
 8003e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	6978      	ldr	r0, [r7, #20]
 8003e8c:	f7ff ff90 	bl	8003db0 <NVIC_EncodePriority>
 8003e90:	4602      	mov	r2, r0
 8003e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff5f 	bl	8003d5c <__NVIC_SetPriority>
}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	4603      	mov	r3, r0
 8003eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff35 	bl	8003d24 <__NVIC_EnableIRQ>
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ffa2 	bl	8003e14 <SysTick_Config>
 8003ed0:	4603      	mov	r3, r0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d005      	beq.n	8003efe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e0d6      	b.n	80040ac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 020e 	bic.w	r2, r2, #14
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b64      	ldr	r3, [pc, #400]	; (80040b8 <HAL_DMA_Abort_IT+0x1dc>)
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d958      	bls.n	8003fdc <HAL_DMA_Abort_IT+0x100>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a63      	ldr	r2, [pc, #396]	; (80040bc <HAL_DMA_Abort_IT+0x1e0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d04f      	beq.n	8003fd4 <HAL_DMA_Abort_IT+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a61      	ldr	r2, [pc, #388]	; (80040c0 <HAL_DMA_Abort_IT+0x1e4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d048      	beq.n	8003fd0 <HAL_DMA_Abort_IT+0xf4>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a60      	ldr	r2, [pc, #384]	; (80040c4 <HAL_DMA_Abort_IT+0x1e8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d040      	beq.n	8003fca <HAL_DMA_Abort_IT+0xee>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5e      	ldr	r2, [pc, #376]	; (80040c8 <HAL_DMA_Abort_IT+0x1ec>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d038      	beq.n	8003fc4 <HAL_DMA_Abort_IT+0xe8>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a5d      	ldr	r2, [pc, #372]	; (80040cc <HAL_DMA_Abort_IT+0x1f0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d030      	beq.n	8003fbe <HAL_DMA_Abort_IT+0xe2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5b      	ldr	r2, [pc, #364]	; (80040d0 <HAL_DMA_Abort_IT+0x1f4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d028      	beq.n	8003fb8 <HAL_DMA_Abort_IT+0xdc>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a53      	ldr	r2, [pc, #332]	; (80040b8 <HAL_DMA_Abort_IT+0x1dc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d020      	beq.n	8003fb2 <HAL_DMA_Abort_IT+0xd6>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a57      	ldr	r2, [pc, #348]	; (80040d4 <HAL_DMA_Abort_IT+0x1f8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_DMA_Abort_IT+0xd2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a56      	ldr	r2, [pc, #344]	; (80040d8 <HAL_DMA_Abort_IT+0x1fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d012      	beq.n	8003faa <HAL_DMA_Abort_IT+0xce>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a54      	ldr	r2, [pc, #336]	; (80040dc <HAL_DMA_Abort_IT+0x200>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_DMA_Abort_IT+0xc8>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a53      	ldr	r2, [pc, #332]	; (80040e0 <HAL_DMA_Abort_IT+0x204>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d102      	bne.n	8003f9e <HAL_DMA_Abort_IT+0xc2>
 8003f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f9c:	e01b      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa2:	e018      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa8:	e015      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003faa:	2310      	movs	r3, #16
 8003fac:	e013      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e011      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fb6:	e00e      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fbc:	e00b      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fc2:	e008      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc8:	e005      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fce:	e002      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	e000      	b.n	8003fd6 <HAL_DMA_Abort_IT+0xfa>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4a43      	ldr	r2, [pc, #268]	; (80040e4 <HAL_DMA_Abort_IT+0x208>)
 8003fd8:	6053      	str	r3, [r2, #4]
 8003fda:	e057      	b.n	800408c <HAL_DMA_Abort_IT+0x1b0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a36      	ldr	r2, [pc, #216]	; (80040bc <HAL_DMA_Abort_IT+0x1e0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d04f      	beq.n	8004086 <HAL_DMA_Abort_IT+0x1aa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a35      	ldr	r2, [pc, #212]	; (80040c0 <HAL_DMA_Abort_IT+0x1e4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d048      	beq.n	8004082 <HAL_DMA_Abort_IT+0x1a6>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a33      	ldr	r2, [pc, #204]	; (80040c4 <HAL_DMA_Abort_IT+0x1e8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d040      	beq.n	800407c <HAL_DMA_Abort_IT+0x1a0>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a32      	ldr	r2, [pc, #200]	; (80040c8 <HAL_DMA_Abort_IT+0x1ec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d038      	beq.n	8004076 <HAL_DMA_Abort_IT+0x19a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a30      	ldr	r2, [pc, #192]	; (80040cc <HAL_DMA_Abort_IT+0x1f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d030      	beq.n	8004070 <HAL_DMA_Abort_IT+0x194>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a2f      	ldr	r2, [pc, #188]	; (80040d0 <HAL_DMA_Abort_IT+0x1f4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d028      	beq.n	800406a <HAL_DMA_Abort_IT+0x18e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <HAL_DMA_Abort_IT+0x1dc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d020      	beq.n	8004064 <HAL_DMA_Abort_IT+0x188>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a2b      	ldr	r2, [pc, #172]	; (80040d4 <HAL_DMA_Abort_IT+0x1f8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d019      	beq.n	8004060 <HAL_DMA_Abort_IT+0x184>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <HAL_DMA_Abort_IT+0x1fc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d012      	beq.n	800405c <HAL_DMA_Abort_IT+0x180>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a28      	ldr	r2, [pc, #160]	; (80040dc <HAL_DMA_Abort_IT+0x200>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00a      	beq.n	8004056 <HAL_DMA_Abort_IT+0x17a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_DMA_Abort_IT+0x204>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d102      	bne.n	8004050 <HAL_DMA_Abort_IT+0x174>
 800404a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404e:	e01b      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004054:	e018      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800405a:	e015      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 800405c:	2310      	movs	r3, #16
 800405e:	e013      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004060:	2301      	movs	r3, #1
 8004062:	e011      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004064:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004068:	e00e      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 800406a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800406e:	e00b      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004074:	e008      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800407a:	e005      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 800407c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004080:	e002      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004082:	2310      	movs	r3, #16
 8004084:	e000      	b.n	8004088 <HAL_DMA_Abort_IT+0x1ac>
 8004086:	2301      	movs	r3, #1
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_DMA_Abort_IT+0x20c>)
 800408a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
    } 
  }
  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40020080 	.word	0x40020080
 80040bc:	40020008 	.word	0x40020008
 80040c0:	4002001c 	.word	0x4002001c
 80040c4:	40020030 	.word	0x40020030
 80040c8:	40020044 	.word	0x40020044
 80040cc:	40020058 	.word	0x40020058
 80040d0:	4002006c 	.word	0x4002006c
 80040d4:	40020408 	.word	0x40020408
 80040d8:	4002041c 	.word	0x4002041c
 80040dc:	40020430 	.word	0x40020430
 80040e0:	40020444 	.word	0x40020444
 80040e4:	40020400 	.word	0x40020400
 80040e8:	40020000 	.word	0x40020000

080040ec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800411e:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <HAL_FLASH_Program+0xd8>)
 8004120:	7e1b      	ldrb	r3, [r3, #24]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_FLASH_Program+0x26>
 8004126:	2302      	movs	r3, #2
 8004128:	e054      	b.n	80041d4 <HAL_FLASH_Program+0xd0>
 800412a:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <HAL_FLASH_Program+0xd8>)
 800412c:	2201      	movs	r2, #1
 800412e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004130:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004134:	f000 f898 	bl	8004268 <FLASH_WaitForLastOperation>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d144      	bne.n	80041cc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d102      	bne.n	800414e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004148:	2301      	movs	r3, #1
 800414a:	757b      	strb	r3, [r7, #21]
 800414c:	e007      	b.n	800415e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d102      	bne.n	800415a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004154:	2302      	movs	r3, #2
 8004156:	757b      	strb	r3, [r7, #21]
 8004158:	e001      	b.n	800415e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800415a:	2304      	movs	r3, #4
 800415c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800415e:	2300      	movs	r3, #0
 8004160:	75bb      	strb	r3, [r7, #22]
 8004162:	e02d      	b.n	80041c0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004164:	7dbb      	ldrb	r3, [r7, #22]
 8004166:	005a      	lsls	r2, r3, #1
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	eb02 0c03 	add.w	ip, r2, r3
 800416e:	7dbb      	ldrb	r3, [r7, #22]
 8004170:	0119      	lsls	r1, r3, #4
 8004172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004176:	f1c1 0620 	rsb	r6, r1, #32
 800417a:	f1a1 0020 	sub.w	r0, r1, #32
 800417e:	fa22 f401 	lsr.w	r4, r2, r1
 8004182:	fa03 f606 	lsl.w	r6, r3, r6
 8004186:	4334      	orrs	r4, r6
 8004188:	fa23 f000 	lsr.w	r0, r3, r0
 800418c:	4304      	orrs	r4, r0
 800418e:	fa23 f501 	lsr.w	r5, r3, r1
 8004192:	b2a3      	uxth	r3, r4
 8004194:	4619      	mov	r1, r3
 8004196:	4660      	mov	r0, ip
 8004198:	f000 f84a 	bl	8004230 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800419c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041a0:	f000 f862 	bl	8004268 <FLASH_WaitForLastOperation>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <HAL_FLASH_Program+0xdc>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <HAL_FLASH_Program+0xdc>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d107      	bne.n	80041ca <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80041ba:	7dbb      	ldrb	r3, [r7, #22]
 80041bc:	3301      	adds	r3, #1
 80041be:	75bb      	strb	r3, [r7, #22]
 80041c0:	7dba      	ldrb	r2, [r7, #22]
 80041c2:	7d7b      	ldrb	r3, [r7, #21]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3cd      	bcc.n	8004164 <HAL_FLASH_Program+0x60>
 80041c8:	e000      	b.n	80041cc <HAL_FLASH_Program+0xc8>
      {
        break;
 80041ca:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80041cc:	4b03      	ldr	r3, [pc, #12]	; (80041dc <HAL_FLASH_Program+0xd8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	761a      	strb	r2, [r3, #24]

  return status;
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041dc:	200002e0 	.word	0x200002e0
 80041e0:	40022000 	.word	0x40022000

080041e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <HAL_FLASH_Unlock+0x40>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00d      	beq.n	8004216 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_FLASH_Unlock+0x40>)
 80041fc:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <HAL_FLASH_Unlock+0x44>)
 80041fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <HAL_FLASH_Unlock+0x40>)
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <HAL_FLASH_Unlock+0x48>)
 8004204:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <HAL_FLASH_Unlock+0x40>)
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004216:	79fb      	ldrb	r3, [r7, #7]
}
 8004218:	4618      	mov	r0, r3
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40022000 	.word	0x40022000
 8004228:	45670123 	.word	0x45670123
 800422c:	cdef89ab 	.word	0xcdef89ab

08004230 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <FLASH_Program_HalfWord+0x30>)
 800423e:	2200      	movs	r2, #0
 8004240:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <FLASH_Program_HalfWord+0x34>)
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <FLASH_Program_HalfWord+0x34>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	887a      	ldrh	r2, [r7, #2]
 8004252:	801a      	strh	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	200002e0 	.word	0x200002e0
 8004264:	40022000 	.word	0x40022000

08004268 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004270:	f7fe fe56 	bl	8002f20 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004276:	e010      	b.n	800429a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800427e:	d00c      	beq.n	800429a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <FLASH_WaitForLastOperation+0x2e>
 8004286:	f7fe fe4b 	bl	8002f20 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	d201      	bcs.n	800429a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e025      	b.n	80042e6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <FLASH_WaitForLastOperation+0x88>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e8      	bne.n	8004278 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <FLASH_WaitForLastOperation+0x88>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <FLASH_WaitForLastOperation+0x88>)
 80042b4:	2220      	movs	r2, #32
 80042b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <FLASH_WaitForLastOperation+0x88>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10b      	bne.n	80042dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80042c4:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <FLASH_WaitForLastOperation+0x88>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <FLASH_WaitForLastOperation+0x88>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80042dc:	f000 f80a 	bl	80042f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40022000 	.word	0x40022000

080042f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80042fe:	4b23      	ldr	r3, [pc, #140]	; (800438c <FLASH_SetErrorCode+0x98>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <FLASH_SetErrorCode+0x9c>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <FLASH_SetErrorCode+0x9c>)
 8004314:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f043 0310 	orr.w	r3, r3, #16
 800431c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800431e:	4b1b      	ldr	r3, [pc, #108]	; (800438c <FLASH_SetErrorCode+0x98>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800432a:	4b19      	ldr	r3, [pc, #100]	; (8004390 <FLASH_SetErrorCode+0x9c>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	4a17      	ldr	r2, [pc, #92]	; (8004390 <FLASH_SetErrorCode+0x9c>)
 8004334:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f043 0304 	orr.w	r3, r3, #4
 800433c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <FLASH_SetErrorCode+0x98>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800434a:	4b11      	ldr	r3, [pc, #68]	; (8004390 <FLASH_SetErrorCode+0x9c>)
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <FLASH_SetErrorCode+0x9c>)
 8004354:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <FLASH_SetErrorCode+0x98>)
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	4a0c      	ldr	r2, [pc, #48]	; (800438c <FLASH_SetErrorCode+0x98>)
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f240 1201 	movw	r2, #257	; 0x101
 8004368:	4293      	cmp	r3, r2
 800436a:	d106      	bne.n	800437a <FLASH_SetErrorCode+0x86>
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <FLASH_SetErrorCode+0x98>)
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4a06      	ldr	r2, [pc, #24]	; (800438c <FLASH_SetErrorCode+0x98>)
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	61d3      	str	r3, [r2, #28]
}  
 8004378:	e002      	b.n	8004380 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800437a:	4a04      	ldr	r2, [pc, #16]	; (800438c <FLASH_SetErrorCode+0x98>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	60d3      	str	r3, [r2, #12]
}  
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	200002e0 	.word	0x200002e0

08004394 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043a6:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <HAL_FLASHEx_Erase+0xd0>)
 80043a8:	7e1b      	ldrb	r3, [r3, #24]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_FLASHEx_Erase+0x1e>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e053      	b.n	800445a <HAL_FLASHEx_Erase+0xc6>
 80043b2:	4b2c      	ldr	r3, [pc, #176]	; (8004464 <HAL_FLASHEx_Erase+0xd0>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d116      	bne.n	80043ee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043c4:	f7ff ff50 	bl	8004268 <FLASH_WaitForLastOperation>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d141      	bne.n	8004452 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80043ce:	2001      	movs	r0, #1
 80043d0:	f000 f84c 	bl	800446c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043d8:	f7ff ff46 	bl	8004268 <FLASH_WaitForLastOperation>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80043e0:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_FLASHEx_Erase+0xd4>)
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	4a20      	ldr	r2, [pc, #128]	; (8004468 <HAL_FLASHEx_Erase+0xd4>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6113      	str	r3, [r2, #16]
 80043ec:	e031      	b.n	8004452 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80043ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043f2:	f7ff ff39 	bl	8004268 <FLASH_WaitForLastOperation>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d12a      	bne.n	8004452 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004402:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	e019      	b.n	8004440 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800440c:	68b8      	ldr	r0, [r7, #8]
 800440e:	f000 f849 	bl	80044a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004412:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004416:	f7ff ff27 	bl	8004268 <FLASH_WaitForLastOperation>
 800441a:	4603      	mov	r3, r0
 800441c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <HAL_FLASHEx_Erase+0xd4>)
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	4a11      	ldr	r2, [pc, #68]	; (8004468 <HAL_FLASHEx_Erase+0xd4>)
 8004424:	f023 0302 	bic.w	r3, r3, #2
 8004428:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	601a      	str	r2, [r3, #0]
            break;
 8004436:	e00c      	b.n	8004452 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	02da      	lsls	r2, r3, #11
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d3dc      	bcc.n	800440c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004452:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_FLASHEx_Erase+0xd0>)
 8004454:	2200      	movs	r2, #0
 8004456:	761a      	strb	r2, [r3, #24]

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200002e0 	.word	0x200002e0
 8004468:	40022000 	.word	0x40022000

0800446c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <FLASH_MassErase+0x30>)
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <FLASH_MassErase+0x34>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <FLASH_MassErase+0x34>)
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <FLASH_MassErase+0x34>)
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	4a05      	ldr	r2, [pc, #20]	; (80044a0 <FLASH_MassErase+0x34>)
 800448c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004490:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	200002e0 	.word	0x200002e0
 80044a0:	40022000 	.word	0x40022000

080044a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <FLASH_PageErase+0x38>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <FLASH_PageErase+0x3c>)
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <FLASH_PageErase+0x3c>)
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <FLASH_PageErase+0x3c>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <FLASH_PageErase+0x3c>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	4a05      	ldr	r2, [pc, #20]	; (80044e0 <FLASH_PageErase+0x3c>)
 80044ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	200002e0 	.word	0x200002e0
 80044e0:	40022000 	.word	0x40022000

080044e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b08b      	sub	sp, #44	; 0x2c
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044f2:	2300      	movs	r3, #0
 80044f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f6:	e169      	b.n	80047cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044f8:	2201      	movs	r2, #1
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	429a      	cmp	r2, r3
 8004512:	f040 8158 	bne.w	80047c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a9a      	ldr	r2, [pc, #616]	; (8004784 <HAL_GPIO_Init+0x2a0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d05e      	beq.n	80045de <HAL_GPIO_Init+0xfa>
 8004520:	4a98      	ldr	r2, [pc, #608]	; (8004784 <HAL_GPIO_Init+0x2a0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d875      	bhi.n	8004612 <HAL_GPIO_Init+0x12e>
 8004526:	4a98      	ldr	r2, [pc, #608]	; (8004788 <HAL_GPIO_Init+0x2a4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d058      	beq.n	80045de <HAL_GPIO_Init+0xfa>
 800452c:	4a96      	ldr	r2, [pc, #600]	; (8004788 <HAL_GPIO_Init+0x2a4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d86f      	bhi.n	8004612 <HAL_GPIO_Init+0x12e>
 8004532:	4a96      	ldr	r2, [pc, #600]	; (800478c <HAL_GPIO_Init+0x2a8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d052      	beq.n	80045de <HAL_GPIO_Init+0xfa>
 8004538:	4a94      	ldr	r2, [pc, #592]	; (800478c <HAL_GPIO_Init+0x2a8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d869      	bhi.n	8004612 <HAL_GPIO_Init+0x12e>
 800453e:	4a94      	ldr	r2, [pc, #592]	; (8004790 <HAL_GPIO_Init+0x2ac>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04c      	beq.n	80045de <HAL_GPIO_Init+0xfa>
 8004544:	4a92      	ldr	r2, [pc, #584]	; (8004790 <HAL_GPIO_Init+0x2ac>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d863      	bhi.n	8004612 <HAL_GPIO_Init+0x12e>
 800454a:	4a92      	ldr	r2, [pc, #584]	; (8004794 <HAL_GPIO_Init+0x2b0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d046      	beq.n	80045de <HAL_GPIO_Init+0xfa>
 8004550:	4a90      	ldr	r2, [pc, #576]	; (8004794 <HAL_GPIO_Init+0x2b0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d85d      	bhi.n	8004612 <HAL_GPIO_Init+0x12e>
 8004556:	2b12      	cmp	r3, #18
 8004558:	d82a      	bhi.n	80045b0 <HAL_GPIO_Init+0xcc>
 800455a:	2b12      	cmp	r3, #18
 800455c:	d859      	bhi.n	8004612 <HAL_GPIO_Init+0x12e>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <HAL_GPIO_Init+0x80>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	080045df 	.word	0x080045df
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045cb 	.word	0x080045cb
 8004570:	0800460d 	.word	0x0800460d
 8004574:	08004613 	.word	0x08004613
 8004578:	08004613 	.word	0x08004613
 800457c:	08004613 	.word	0x08004613
 8004580:	08004613 	.word	0x08004613
 8004584:	08004613 	.word	0x08004613
 8004588:	08004613 	.word	0x08004613
 800458c:	08004613 	.word	0x08004613
 8004590:	08004613 	.word	0x08004613
 8004594:	08004613 	.word	0x08004613
 8004598:	08004613 	.word	0x08004613
 800459c:	08004613 	.word	0x08004613
 80045a0:	08004613 	.word	0x08004613
 80045a4:	08004613 	.word	0x08004613
 80045a8:	080045c1 	.word	0x080045c1
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	4a79      	ldr	r2, [pc, #484]	; (8004798 <HAL_GPIO_Init+0x2b4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d013      	beq.n	80045de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045b6:	e02c      	b.n	8004612 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	623b      	str	r3, [r7, #32]
          break;
 80045be:	e029      	b.n	8004614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	3304      	adds	r3, #4
 80045c6:	623b      	str	r3, [r7, #32]
          break;
 80045c8:	e024      	b.n	8004614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	3308      	adds	r3, #8
 80045d0:	623b      	str	r3, [r7, #32]
          break;
 80045d2:	e01f      	b.n	8004614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	330c      	adds	r3, #12
 80045da:	623b      	str	r3, [r7, #32]
          break;
 80045dc:	e01a      	b.n	8004614 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045e6:	2304      	movs	r3, #4
 80045e8:	623b      	str	r3, [r7, #32]
          break;
 80045ea:	e013      	b.n	8004614 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045f4:	2308      	movs	r3, #8
 80045f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	611a      	str	r2, [r3, #16]
          break;
 80045fe:	e009      	b.n	8004614 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004600:	2308      	movs	r3, #8
 8004602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	615a      	str	r2, [r3, #20]
          break;
 800460a:	e003      	b.n	8004614 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800460c:	2300      	movs	r3, #0
 800460e:	623b      	str	r3, [r7, #32]
          break;
 8004610:	e000      	b.n	8004614 <HAL_GPIO_Init+0x130>
          break;
 8004612:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2bff      	cmp	r3, #255	; 0xff
 8004618:	d801      	bhi.n	800461e <HAL_GPIO_Init+0x13a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	e001      	b.n	8004622 <HAL_GPIO_Init+0x13e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2bff      	cmp	r3, #255	; 0xff
 8004628:	d802      	bhi.n	8004630 <HAL_GPIO_Init+0x14c>
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	e002      	b.n	8004636 <HAL_GPIO_Init+0x152>
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	3b08      	subs	r3, #8
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	210f      	movs	r1, #15
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	401a      	ands	r2, r3
 8004648:	6a39      	ldr	r1, [r7, #32]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	431a      	orrs	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80b1 	beq.w	80047c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004664:	4b4d      	ldr	r3, [pc, #308]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	4a4c      	ldr	r2, [pc, #304]	; (800479c <HAL_GPIO_Init+0x2b8>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6193      	str	r3, [r2, #24]
 8004670:	4b4a      	ldr	r3, [pc, #296]	; (800479c <HAL_GPIO_Init+0x2b8>)
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800467c:	4a48      	ldr	r2, [pc, #288]	; (80047a0 <HAL_GPIO_Init+0x2bc>)
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	3302      	adds	r3, #2
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	220f      	movs	r2, #15
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a40      	ldr	r2, [pc, #256]	; (80047a4 <HAL_GPIO_Init+0x2c0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d013      	beq.n	80046d0 <HAL_GPIO_Init+0x1ec>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3f      	ldr	r2, [pc, #252]	; (80047a8 <HAL_GPIO_Init+0x2c4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00d      	beq.n	80046cc <HAL_GPIO_Init+0x1e8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3e      	ldr	r2, [pc, #248]	; (80047ac <HAL_GPIO_Init+0x2c8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <HAL_GPIO_Init+0x1e4>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3d      	ldr	r2, [pc, #244]	; (80047b0 <HAL_GPIO_Init+0x2cc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_GPIO_Init+0x1e0>
 80046c0:	2303      	movs	r3, #3
 80046c2:	e006      	b.n	80046d2 <HAL_GPIO_Init+0x1ee>
 80046c4:	2304      	movs	r3, #4
 80046c6:	e004      	b.n	80046d2 <HAL_GPIO_Init+0x1ee>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e002      	b.n	80046d2 <HAL_GPIO_Init+0x1ee>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_GPIO_Init+0x1ee>
 80046d0:	2300      	movs	r3, #0
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	f002 0203 	and.w	r2, r2, #3
 80046d8:	0092      	lsls	r2, r2, #2
 80046da:	4093      	lsls	r3, r2
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046e2:	492f      	ldr	r1, [pc, #188]	; (80047a0 <HAL_GPIO_Init+0x2bc>)
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	3302      	adds	r3, #2
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d006      	beq.n	800470a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046fc:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	492c      	ldr	r1, [pc, #176]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
 8004708:	e006      	b.n	8004718 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800470a:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	43db      	mvns	r3, r3
 8004712:	4928      	ldr	r1, [pc, #160]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 8004714:	4013      	ands	r3, r2
 8004716:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004724:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	4922      	ldr	r1, [pc, #136]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	e006      	b.n	8004740 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	43db      	mvns	r3, r3
 800473a:	491e      	ldr	r1, [pc, #120]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 800473c:	4013      	ands	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d006      	beq.n	800475a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	4918      	ldr	r1, [pc, #96]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4313      	orrs	r3, r2
 8004756:	608b      	str	r3, [r1, #8]
 8004758:	e006      	b.n	8004768 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	43db      	mvns	r3, r3
 8004762:	4914      	ldr	r1, [pc, #80]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 8004764:	4013      	ands	r3, r2
 8004766:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d021      	beq.n	80047b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	490e      	ldr	r1, [pc, #56]	; (80047b4 <HAL_GPIO_Init+0x2d0>)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	60cb      	str	r3, [r1, #12]
 8004780:	e021      	b.n	80047c6 <HAL_GPIO_Init+0x2e2>
 8004782:	bf00      	nop
 8004784:	10320000 	.word	0x10320000
 8004788:	10310000 	.word	0x10310000
 800478c:	10220000 	.word	0x10220000
 8004790:	10210000 	.word	0x10210000
 8004794:	10120000 	.word	0x10120000
 8004798:	10110000 	.word	0x10110000
 800479c:	40021000 	.word	0x40021000
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40010800 	.word	0x40010800
 80047a8:	40010c00 	.word	0x40010c00
 80047ac:	40011000 	.word	0x40011000
 80047b0:	40011400 	.word	0x40011400
 80047b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_GPIO_Init+0x304>)
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	43db      	mvns	r3, r3
 80047c0:	4909      	ldr	r1, [pc, #36]	; (80047e8 <HAL_GPIO_Init+0x304>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	3301      	adds	r3, #1
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	fa22 f303 	lsr.w	r3, r2, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f47f ae8e 	bne.w	80044f8 <HAL_GPIO_Init+0x14>
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	372c      	adds	r7, #44	; 0x2c
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	40010400 	.word	0x40010400

080047ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e001      	b.n	800480e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
	...

0800481c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e12b      	b.n	8004a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fb42 	bl	8001ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0201 	bic.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800486e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800487e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004880:	f003 f966 	bl	8007b50 <HAL_RCC_GetPCLK1Freq>
 8004884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4a81      	ldr	r2, [pc, #516]	; (8004a90 <HAL_I2C_Init+0x274>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d807      	bhi.n	80048a0 <HAL_I2C_Init+0x84>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a80      	ldr	r2, [pc, #512]	; (8004a94 <HAL_I2C_Init+0x278>)
 8004894:	4293      	cmp	r3, r2
 8004896:	bf94      	ite	ls
 8004898:	2301      	movls	r3, #1
 800489a:	2300      	movhi	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e006      	b.n	80048ae <HAL_I2C_Init+0x92>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a7d      	ldr	r2, [pc, #500]	; (8004a98 <HAL_I2C_Init+0x27c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	bf94      	ite	ls
 80048a8:	2301      	movls	r3, #1
 80048aa:	2300      	movhi	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e0e7      	b.n	8004a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4a78      	ldr	r2, [pc, #480]	; (8004a9c <HAL_I2C_Init+0x280>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0c9b      	lsrs	r3, r3, #18
 80048c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a6a      	ldr	r2, [pc, #424]	; (8004a90 <HAL_I2C_Init+0x274>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d802      	bhi.n	80048f0 <HAL_I2C_Init+0xd4>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3301      	adds	r3, #1
 80048ee:	e009      	b.n	8004904 <HAL_I2C_Init+0xe8>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048f6:	fb02 f303 	mul.w	r3, r2, r3
 80048fa:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <HAL_I2C_Init+0x284>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	099b      	lsrs	r3, r3, #6
 8004902:	3301      	adds	r3, #1
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	430b      	orrs	r3, r1
 800490a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004916:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	495c      	ldr	r1, [pc, #368]	; (8004a90 <HAL_I2C_Init+0x274>)
 8004920:	428b      	cmp	r3, r1
 8004922:	d819      	bhi.n	8004958 <HAL_I2C_Init+0x13c>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1e59      	subs	r1, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004938:	400b      	ands	r3, r1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_I2C_Init+0x138>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1e59      	subs	r1, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fbb1 f3f3 	udiv	r3, r1, r3
 800494c:	3301      	adds	r3, #1
 800494e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004952:	e051      	b.n	80049f8 <HAL_I2C_Init+0x1dc>
 8004954:	2304      	movs	r3, #4
 8004956:	e04f      	b.n	80049f8 <HAL_I2C_Init+0x1dc>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d111      	bne.n	8004984 <HAL_I2C_Init+0x168>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	1e58      	subs	r0, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6859      	ldr	r1, [r3, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	440b      	add	r3, r1
 800496e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	e012      	b.n	80049aa <HAL_I2C_Init+0x18e>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1e58      	subs	r0, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	0099      	lsls	r1, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	fbb0 f3f3 	udiv	r3, r0, r3
 800499a:	3301      	adds	r3, #1
 800499c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_I2C_Init+0x196>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e022      	b.n	80049f8 <HAL_I2C_Init+0x1dc>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10e      	bne.n	80049d8 <HAL_I2C_Init+0x1bc>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1e58      	subs	r0, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6859      	ldr	r1, [r3, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	440b      	add	r3, r1
 80049c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d6:	e00f      	b.n	80049f8 <HAL_I2C_Init+0x1dc>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	1e58      	subs	r0, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	0099      	lsls	r1, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	6809      	ldr	r1, [r1, #0]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6911      	ldr	r1, [r2, #16]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	000186a0 	.word	0x000186a0
 8004a94:	001e847f 	.word	0x001e847f
 8004a98:	003d08ff 	.word	0x003d08ff
 8004a9c:	431bde83 	.word	0x431bde83
 8004aa0:	10624dd3 	.word	0x10624dd3

08004aa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	817b      	strh	r3, [r7, #10]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	813b      	strh	r3, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004abe:	f7fe fa2f 	bl	8002f20 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	f040 80d9 	bne.w	8004c84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	2319      	movs	r3, #25
 8004ad8:	2201      	movs	r2, #1
 8004ada:	496d      	ldr	r1, [pc, #436]	; (8004c90 <HAL_I2C_Mem_Write+0x1ec>)
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f002 f949 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0cc      	b.n	8004c86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_I2C_Mem_Write+0x56>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e0c5      	b.n	8004c86 <HAL_I2C_Mem_Write+0x1e2>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d007      	beq.n	8004b20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2221      	movs	r2, #33	; 0x21
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2240      	movs	r2, #64	; 0x40
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4a4d      	ldr	r2, [pc, #308]	; (8004c94 <HAL_I2C_Mem_Write+0x1f0>)
 8004b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b62:	88f8      	ldrh	r0, [r7, #6]
 8004b64:	893a      	ldrh	r2, [r7, #8]
 8004b66:	8979      	ldrh	r1, [r7, #10]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4603      	mov	r3, r0
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f001 fed8 	bl	8006928 <I2C_RequestMemoryWrite>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d052      	beq.n	8004c24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e081      	b.n	8004c86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f002 f9ca 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00d      	beq.n	8004bae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d107      	bne.n	8004baa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e06b      	b.n	8004c86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11b      	bne.n	8004c24 <HAL_I2C_Mem_Write+0x180>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d017      	beq.n	8004c24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1aa      	bne.n	8004b82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f002 f9b6 	bl	8006fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00d      	beq.n	8004c58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d107      	bne.n	8004c54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e016      	b.n	8004c86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	00100002 	.word	0x00100002
 8004c94:	ffff0000 	.word	0xffff0000

08004c98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08c      	sub	sp, #48	; 0x30
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	817b      	strh	r3, [r7, #10]
 8004caa:	460b      	mov	r3, r1
 8004cac:	813b      	strh	r3, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb6:	f7fe f933 	bl	8002f20 <HAL_GetTick>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	f040 8244 	bne.w	8005152 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	2319      	movs	r3, #25
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4982      	ldr	r1, [pc, #520]	; (8004edc <HAL_I2C_Mem_Read+0x244>)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f002 f84d 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e237      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Mem_Read+0x5a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e230      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d007      	beq.n	8004d18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2222      	movs	r2, #34	; 0x22
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a62      	ldr	r2, [pc, #392]	; (8004ee0 <HAL_I2C_Mem_Read+0x248>)
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d5a:	88f8      	ldrh	r0, [r7, #6]
 8004d5c:	893a      	ldrh	r2, [r7, #8]
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	4603      	mov	r3, r0
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f001 fe72 	bl	8006a54 <I2C_RequestMemoryRead>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e1ec      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d113      	bne.n	8004daa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e1c0      	b.n	800512c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d11e      	bne.n	8004df0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc2:	b672      	cpsid	i
}
 8004dc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dec:	b662      	cpsie	i
}
 8004dee:	e035      	b.n	8004e5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d11e      	bne.n	8004e36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e08:	b672      	cpsid	i
}
 8004e0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e32:	b662      	cpsie	i
}
 8004e34:	e012      	b.n	8004e5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e5c:	e166      	b.n	800512c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	f200 811f 	bhi.w	80050a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d123      	bne.n	8004eb8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f002 f907 	bl	8007088 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e167      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eb6:	e139      	b.n	800512c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d152      	bne.n	8004f66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	4906      	ldr	r1, [pc, #24]	; (8004ee4 <HAL_I2C_Mem_Read+0x24c>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f001 ff52 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e13c      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
 8004eda:	bf00      	nop
 8004edc:	00100002 	.word	0x00100002
 8004ee0:	ffff0000 	.word	0xffff0000
 8004ee4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004ee8:	b672      	cpsid	i
}
 8004eea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f2e:	b662      	cpsie	i
}
 8004f30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f64:	e0e2      	b.n	800512c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	497b      	ldr	r1, [pc, #492]	; (800515c <HAL_I2C_Mem_Read+0x4c4>)
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f001 feff 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0e9      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f90:	b672      	cpsid	i
}
 8004f92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fc6:	4b66      	ldr	r3, [pc, #408]	; (8005160 <HAL_I2C_Mem_Read+0x4c8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	08db      	lsrs	r3, r3, #3
 8004fcc:	4a65      	ldr	r2, [pc, #404]	; (8005164 <HAL_I2C_Mem_Read+0x4cc>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	0a1a      	lsrs	r2, r3, #8
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	00da      	lsls	r2, r3, #3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d118      	bne.n	800501e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800500e:	b662      	cpsie	i
}
 8005010:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e09a      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b04      	cmp	r3, #4
 800502a:	d1d9      	bne.n	8004fe0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800506e:	b662      	cpsie	i
}
 8005070:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050a4:	e042      	b.n	800512c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f001 ffec 	bl	8007088 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e04c      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d118      	bne.n	800512c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	f47f ae94 	bne.w	8004e5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e000      	b.n	8005154 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005152:	2302      	movs	r3, #2
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3728      	adds	r7, #40	; 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	00010004 	.word	0x00010004
 8005160:	20000098 	.word	0x20000098
 8005164:	14f8b589 	.word	0x14f8b589

08005168 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005188:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b10      	cmp	r3, #16
 8005196:	d003      	beq.n	80051a0 <HAL_I2C_EV_IRQHandler+0x38>
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	f040 80c1 	bne.w	8005322 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051c0:	d003      	beq.n	80051ca <HAL_I2C_EV_IRQHandler+0x62>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051c8:	d101      	bne.n	80051ce <HAL_I2C_EV_IRQHandler+0x66>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_I2C_EV_IRQHandler+0x68>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f000 8132 	beq.w	800543a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00c      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x92>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	0a5b      	lsrs	r3, r3, #9
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d006      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f001 ffcf 	bl	8007190 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fd77 	bl	8005ce6 <I2C_Master_SB>
 80051f8:	e092      	b.n	8005320 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_I2C_EV_IRQHandler+0xb2>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 fdec 	bl	8005df0 <I2C_Master_ADD10>
 8005218:	e082      	b.n	8005320 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_I2C_EV_IRQHandler+0xd2>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	0a5b      	lsrs	r3, r3, #9
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fe05 	bl	8005e42 <I2C_Master_ADDR>
 8005238:	e072      	b.n	8005320 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d03b      	beq.n	80052be <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005254:	f000 80f3 	beq.w	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	09db      	lsrs	r3, r3, #7
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <HAL_I2C_EV_IRQHandler+0x11c>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	0a9b      	lsrs	r3, r3, #10
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d009      	beq.n	8005284 <HAL_I2C_EV_IRQHandler+0x11c>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d103      	bne.n	8005284 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9f1 	bl	8005664 <I2C_MasterTransmit_TXE>
 8005282:	e04d      	b.n	8005320 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80d6 	beq.w	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	0a5b      	lsrs	r3, r3, #9
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80cf 	beq.w	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80052a0:	7bbb      	ldrb	r3, [r7, #14]
 80052a2:	2b21      	cmp	r3, #33	; 0x21
 80052a4:	d103      	bne.n	80052ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa78 	bl	800579c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ac:	e0c7      	b.n	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	f040 80c4 	bne.w	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fae6 	bl	8005888 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052bc:	e0bf      	b.n	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052cc:	f000 80b7 	beq.w	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00f      	beq.n	80052fc <HAL_I2C_EV_IRQHandler+0x194>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	0a9b      	lsrs	r3, r3, #10
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d009      	beq.n	80052fc <HAL_I2C_EV_IRQHandler+0x194>
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fb5b 	bl	80059b0 <I2C_MasterReceive_RXNE>
 80052fa:	e011      	b.n	8005320 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	089b      	lsrs	r3, r3, #2
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 809a 	beq.w	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	0a5b      	lsrs	r3, r3, #9
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8093 	beq.w	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fbfa 	bl	8005b12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800531e:	e08e      	b.n	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005320:	e08d      	b.n	800543e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	61fb      	str	r3, [r7, #28]
 8005332:	e007      	b.n	8005344 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d012      	beq.n	8005376 <HAL_I2C_EV_IRQHandler+0x20e>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	0a5b      	lsrs	r3, r3, #9
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00c      	beq.n	8005376 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800536c:	69b9      	ldr	r1, [r7, #24]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 ffbe 	bl	80062f0 <I2C_Slave_ADDR>
 8005374:	e066      	b.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_I2C_EV_IRQHandler+0x22e>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	0a5b      	lsrs	r3, r3, #9
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fff8 	bl	8006384 <I2C_Slave_STOPF>
 8005394:	e056      	b.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005396:	7bbb      	ldrb	r3, [r7, #14]
 8005398:	2b21      	cmp	r3, #33	; 0x21
 800539a:	d002      	beq.n	80053a2 <HAL_I2C_EV_IRQHandler+0x23a>
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	2b29      	cmp	r3, #41	; 0x29
 80053a0:	d125      	bne.n	80053ee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	09db      	lsrs	r3, r3, #7
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00f      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x266>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	0a9b      	lsrs	r3, r3, #10
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x266>
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fed6 	bl	8006178 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053cc:	e039      	b.n	8005442 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	089b      	lsrs	r3, r3, #2
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d033      	beq.n	8005442 <HAL_I2C_EV_IRQHandler+0x2da>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	0a5b      	lsrs	r3, r3, #9
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02d      	beq.n	8005442 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 ff03 	bl	80061f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053ec:	e029      	b.n	8005442 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	099b      	lsrs	r3, r3, #6
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00f      	beq.n	800541a <HAL_I2C_EV_IRQHandler+0x2b2>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	0a9b      	lsrs	r3, r3, #10
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	089b      	lsrs	r3, r3, #2
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 ff0d 	bl	8006232 <I2C_SlaveReceive_RXNE>
 8005418:	e014      	b.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	089b      	lsrs	r3, r3, #2
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	0a5b      	lsrs	r3, r3, #9
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 ff3b 	bl	80062ae <I2C_SlaveReceive_BTF>
 8005438:	e004      	b.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005442:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08a      	sub	sp, #40	; 0x28
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005462:	2300      	movs	r3, #0
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d016      	beq.n	80054a8 <HAL_I2C_ER_IRQHandler+0x5e>
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d010      	beq.n	80054a8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005496:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	0a5b      	lsrs	r3, r3, #9
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <HAL_I2C_ER_IRQHandler+0x88>
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80054d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	0a9b      	lsrs	r3, r3, #10
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d03f      	beq.n	800555e <HAL_I2C_ER_IRQHandler+0x114>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	0a1b      	lsrs	r3, r3, #8
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d039      	beq.n	800555e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80054ea:	7efb      	ldrb	r3, [r7, #27]
 80054ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005504:	7ebb      	ldrb	r3, [r7, #26]
 8005506:	2b20      	cmp	r3, #32
 8005508:	d112      	bne.n	8005530 <HAL_I2C_ER_IRQHandler+0xe6>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10f      	bne.n	8005530 <HAL_I2C_ER_IRQHandler+0xe6>
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	2b21      	cmp	r3, #33	; 0x21
 8005514:	d008      	beq.n	8005528 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005516:	7cfb      	ldrb	r3, [r7, #19]
 8005518:	2b29      	cmp	r3, #41	; 0x29
 800551a:	d005      	beq.n	8005528 <HAL_I2C_ER_IRQHandler+0xde>
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b28      	cmp	r3, #40	; 0x28
 8005520:	d106      	bne.n	8005530 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b21      	cmp	r3, #33	; 0x21
 8005526:	d103      	bne.n	8005530 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 f85b 	bl	80065e4 <I2C_Slave_AF>
 800552e:	e016      	b.n	800555e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005538:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	f043 0304 	orr.w	r3, r3, #4
 8005540:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005542:	7efb      	ldrb	r3, [r7, #27]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d002      	beq.n	800554e <HAL_I2C_ER_IRQHandler+0x104>
 8005548:	7efb      	ldrb	r3, [r7, #27]
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d107      	bne.n	800555e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	0adb      	lsrs	r3, r3, #11
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <HAL_I2C_ER_IRQHandler+0x13e>
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	0a1b      	lsrs	r3, r3, #8
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d008      	beq.n	8005588 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	f043 0308 	orr.w	r3, r3, #8
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005586:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 f892 	bl	80066c4 <I2C_ITError>
  }
}
 80055a0:	bf00      	nop
 80055a2:	3728      	adds	r7, #40	; 0x28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr

080055de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	70fb      	strb	r3, [r7, #3]
 80055fc:	4613      	mov	r3, r2
 80055fe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d150      	bne.n	800572c <I2C_MasterTransmit_TXE+0xc8>
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b21      	cmp	r3, #33	; 0x21
 800568e:	d14d      	bne.n	800572c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b08      	cmp	r3, #8
 8005694:	d01d      	beq.n	80056d2 <I2C_MasterTransmit_TXE+0x6e>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b20      	cmp	r3, #32
 800569a:	d01a      	beq.n	80056d2 <I2C_MasterTransmit_TXE+0x6e>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056a2:	d016      	beq.n	80056d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2211      	movs	r2, #17
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff6c 	bl	80055a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056d0:	e060      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d107      	bne.n	800571c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff81 	bl	800561c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800571a:	e03b      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff3f 	bl	80055a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800572a:	e033      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b21      	cmp	r3, #33	; 0x21
 8005730:	d005      	beq.n	800573e <I2C_MasterTransmit_TXE+0xda>
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d12d      	bne.n	8005794 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b22      	cmp	r3, #34	; 0x22
 800573c:	d12a      	bne.n	8005794 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005756:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005758:	e01c      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d103      	bne.n	800576e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f88e 	bl	8005888 <I2C_MemoryTransmit_TXE_BTF>
}
 800576c:	e012      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005792:	e7ff      	b.n	8005794 <I2C_MasterTransmit_TXE+0x130>
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b21      	cmp	r3, #33	; 0x21
 80057b4:	d164      	bne.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d012      	beq.n	80057e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80057e4:	e04c      	b.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d01d      	beq.n	8005828 <I2C_MasterTransmit_BTF+0x8c>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d01a      	beq.n	8005828 <I2C_MasterTransmit_BTF+0x8c>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057f8:	d016      	beq.n	8005828 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005808:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2211      	movs	r2, #17
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fec1 	bl	80055a8 <HAL_I2C_MasterTxCpltCallback>
}
 8005826:	e02b      	b.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005836:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005846:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d107      	bne.n	8005872 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fed6 	bl	800561c <HAL_I2C_MemTxCpltCallback>
}
 8005870:	e006      	b.n	8005880 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fe94 	bl	80055a8 <HAL_I2C_MasterTxCpltCallback>
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005896:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11d      	bne.n	80058dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10b      	bne.n	80058c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b8:	1c9a      	adds	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80058be:	e073      	b.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	121b      	asrs	r3, r3, #8
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058da:	e065      	b.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10b      	bne.n	80058fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058fa:	e055      	b.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	2b02      	cmp	r3, #2
 8005902:	d151      	bne.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b22      	cmp	r3, #34	; 0x22
 8005908:	d10d      	bne.n	8005926 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005918:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005924:	e040      	b.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b21      	cmp	r3, #33	; 0x21
 8005934:	d112      	bne.n	800595c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	781a      	ldrb	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800595a:	e025      	b.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d120      	bne.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b21      	cmp	r3, #33	; 0x21
 800596a:	d11d      	bne.n	80059a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800597a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fe3a 	bl	800561c <HAL_I2C_MemTxCpltCallback>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b22      	cmp	r3, #34	; 0x22
 80059c2:	f040 80a2 	bne.w	8005b0a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d921      	bls.n	8005a18 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	f040 8082 	bne.w	8005b0a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a14:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005a16:	e078      	b.n	8005b0a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d074      	beq.n	8005b0a <I2C_MasterReceive_RXNE+0x15a>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d002      	beq.n	8005a2c <I2C_MasterReceive_RXNE+0x7c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d16e      	bne.n	8005b0a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 faf9 	bl	8007024 <I2C_WaitOnSTOPRequestThroughIT>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d142      	bne.n	8005abe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a46:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a56:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d10a      	bne.n	8005aa8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fdc4 	bl	800562e <HAL_I2C_MemRxCpltCallback>
}
 8005aa6:	e030      	b.n	8005b0a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2212      	movs	r2, #18
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fd7f 	bl	80055ba <HAL_I2C_MasterRxCpltCallback>
}
 8005abc:	e025      	b.n	8005b0a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005acc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fd9b 	bl	8005640 <HAL_I2C_ErrorCallback>
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d11b      	bne.n	8005b62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005b60:	e0bd      	b.n	8005cde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d129      	bne.n	8005bc0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d00a      	beq.n	8005b98 <I2C_MasterReceive_BTF+0x86>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d007      	beq.n	8005b98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005bbe:	e08e      	b.n	8005cde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d176      	bne.n	8005cb8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d002      	beq.n	8005bd6 <I2C_MasterReceive_BTF+0xc4>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b10      	cmp	r3, #16
 8005bd4:	d108      	bne.n	8005be8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e019      	b.n	8005c1c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d002      	beq.n	8005bf4 <I2C_MasterReceive_BTF+0xe2>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d108      	bne.n	8005c06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e00a      	b.n	8005c1c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	d007      	beq.n	8005c1c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d10a      	bne.n	8005ca2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff fcc7 	bl	800562e <HAL_I2C_MemRxCpltCallback>
}
 8005ca0:	e01d      	b.n	8005cde <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2212      	movs	r2, #18
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff fc82 	bl	80055ba <HAL_I2C_MasterRxCpltCallback>
}
 8005cb6:	e012      	b.n	8005cde <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d117      	bne.n	8005d2a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	461a      	mov	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d12:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d14:	e067      	b.n	8005de6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	611a      	str	r2, [r3, #16]
}
 8005d28:	e05d      	b.n	8005de6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d32:	d133      	bne.n	8005d9c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b21      	cmp	r3, #33	; 0x21
 8005d3e:	d109      	bne.n	8005d54 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d50:	611a      	str	r2, [r3, #16]
 8005d52:	e008      	b.n	8005d66 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d004      	beq.n	8005d78 <I2C_Master_SB+0x92>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d108      	bne.n	8005d8a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d032      	beq.n	8005de6 <I2C_Master_SB+0x100>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d02d      	beq.n	8005de6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d98:	605a      	str	r2, [r3, #4]
}
 8005d9a:	e024      	b.n	8005de6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10e      	bne.n	8005dc2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	11db      	asrs	r3, r3, #7
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0306 	and.w	r3, r3, #6
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f063 030f 	orn	r3, r3, #15
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	611a      	str	r2, [r3, #16]
}
 8005dc0:	e011      	b.n	8005de6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d10d      	bne.n	8005de6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	11db      	asrs	r3, r3, #7
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0306 	and.w	r3, r3, #6
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f063 030e 	orn	r3, r3, #14
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	611a      	str	r2, [r3, #16]
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <I2C_Master_ADD10+0x26>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <I2C_Master_ADD10+0x48>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e36:	605a      	str	r2, [r3, #4]
  }
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b091      	sub	sp, #68	; 0x44
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b22      	cmp	r3, #34	; 0x22
 8005e6a:	f040 8174 	bne.w	8006156 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10f      	bne.n	8005e96 <I2C_Master_ADDR+0x54>
 8005e76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d10b      	bne.n	8005e96 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	633b      	str	r3, [r7, #48]	; 0x30
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	633b      	str	r3, [r7, #48]	; 0x30
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	633b      	str	r3, [r7, #48]	; 0x30
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	e16b      	b.n	800616e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11d      	bne.n	8005eda <I2C_Master_ADDR+0x98>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ea6:	d118      	bne.n	8005eda <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ecc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	651a      	str	r2, [r3, #80]	; 0x50
 8005ed8:	e149      	b.n	800616e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d113      	bne.n	8005f0c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e120      	b.n	800614e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	f040 808a 	bne.w	800602c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f1e:	d137      	bne.n	8005f90 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3e:	d113      	bne.n	8005f68 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f50:	2300      	movs	r3, #0
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	e0f2      	b.n	800614e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	e0de      	b.n	800614e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d02e      	beq.n	8005ff4 <I2C_Master_ADDR+0x1b2>
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d02b      	beq.n	8005ff4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	2b12      	cmp	r3, #18
 8005fa0:	d102      	bne.n	8005fa8 <I2C_Master_ADDR+0x166>
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d125      	bne.n	8005ff4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d00e      	beq.n	8005fcc <I2C_Master_ADDR+0x18a>
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d00b      	beq.n	8005fcc <I2C_Master_ADDR+0x18a>
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d008      	beq.n	8005fcc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e007      	b.n	8005fdc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fda:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	e0ac      	b.n	800614e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006002:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006004:	2300      	movs	r3, #0
 8006006:	61bb      	str	r3, [r7, #24]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e090      	b.n	800614e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d158      	bne.n	80060e8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	2b04      	cmp	r3, #4
 800603a:	d021      	beq.n	8006080 <I2C_Master_ADDR+0x23e>
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	2b02      	cmp	r3, #2
 8006040:	d01e      	beq.n	8006080 <I2C_Master_ADDR+0x23e>
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	2b10      	cmp	r3, #16
 8006046:	d01b      	beq.n	8006080 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006056:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e012      	b.n	80060a6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800608e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b4:	d14b      	bne.n	800614e <I2C_Master_ADDR+0x30c>
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060bc:	d00b      	beq.n	80060d6 <I2C_Master_ADDR+0x294>
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d008      	beq.n	80060d6 <I2C_Master_ADDR+0x294>
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d005      	beq.n	80060d6 <I2C_Master_ADDR+0x294>
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d002      	beq.n	80060d6 <I2C_Master_ADDR+0x294>
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d13b      	bne.n	800614e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	e032      	b.n	800614e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060f6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006106:	d117      	bne.n	8006138 <I2C_Master_ADDR+0x2f6>
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800610e:	d00b      	beq.n	8006128 <I2C_Master_ADDR+0x2e6>
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	2b01      	cmp	r3, #1
 8006114:	d008      	beq.n	8006128 <I2C_Master_ADDR+0x2e6>
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	2b08      	cmp	r3, #8
 800611a:	d005      	beq.n	8006128 <I2C_Master_ADDR+0x2e6>
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	2b10      	cmp	r3, #16
 8006120:	d002      	beq.n	8006128 <I2C_Master_ADDR+0x2e6>
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	2b20      	cmp	r3, #32
 8006126:	d107      	bne.n	8006138 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006136:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006154:	e00b      	b.n	800616e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006156:	2300      	movs	r3, #0
 8006158:	60bb      	str	r3, [r7, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	68bb      	ldr	r3, [r7, #8]
}
 800616c:	e7ff      	b.n	800616e <I2C_Master_ADDR+0x32c>
 800616e:	bf00      	nop
 8006170:	3744      	adds	r7, #68	; 0x44
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr

08006178 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006186:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d02b      	beq.n	80061ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d114      	bne.n	80061ea <I2C_SlaveTransmit_TXE+0x72>
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b29      	cmp	r3, #41	; 0x29
 80061c4:	d111      	bne.n	80061ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2221      	movs	r2, #33	; 0x21
 80061da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2228      	movs	r2, #40	; 0x28
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f9f1 	bl	80055cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d011      	beq.n	8006228 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr

08006232 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006240:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02c      	beq.n	80062a6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d114      	bne.n	80062a6 <I2C_SlaveReceive_RXNE+0x74>
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	2b2a      	cmp	r3, #42	; 0x2a
 8006280:	d111      	bne.n	80062a6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006290:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2222      	movs	r2, #34	; 0x22
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2228      	movs	r2, #40	; 0x28
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff f99c 	bl	80055de <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d012      	beq.n	80062e6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800630a:	2b28      	cmp	r3, #40	; 0x28
 800630c:	d127      	bne.n	800635e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	089b      	lsrs	r3, r3, #2
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	09db      	lsrs	r3, r3, #7
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	81bb      	strh	r3, [r7, #12]
 8006340:	e002      	b.n	8006348 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006350:	89ba      	ldrh	r2, [r7, #12]
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff f94a 	bl	80055f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800635c:	e00e      	b.n	800637c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635e:	2300      	movs	r3, #0
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006392:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80063a4:	2300      	movs	r3, #0
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	60bb      	str	r3, [r7, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e0:	d172      	bne.n	80064c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2b22      	cmp	r3, #34	; 0x22
 80063e6:	d002      	beq.n	80063ee <I2C_Slave_STOPF+0x6a>
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b2a      	cmp	r3, #42	; 0x2a
 80063ec:	d135      	bne.n	800645a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f043 0204 	orr.w	r2, r3, #4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006420:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	4618      	mov	r0, r3
 8006428:	f7fd fe60 	bl	80040ec <HAL_DMA_GetState>
 800642c:	4603      	mov	r3, r0
 800642e:	2b01      	cmp	r3, #1
 8006430:	d049      	beq.n	80064c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	4a69      	ldr	r2, [pc, #420]	; (80065dc <I2C_Slave_STOPF+0x258>)
 8006438:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	4618      	mov	r0, r3
 8006440:	f7fd fd4c 	bl	8003edc <HAL_DMA_Abort_IT>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d03d      	beq.n	80064c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006454:	4610      	mov	r0, r2
 8006456:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006458:	e035      	b.n	80064c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f043 0204 	orr.w	r2, r3, #4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800648c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006492:	4618      	mov	r0, r3
 8006494:	f7fd fe2a 	bl	80040ec <HAL_DMA_GetState>
 8006498:	4603      	mov	r3, r0
 800649a:	2b01      	cmp	r3, #1
 800649c:	d014      	beq.n	80064c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	4a4e      	ldr	r2, [pc, #312]	; (80065dc <I2C_Slave_STOPF+0x258>)
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fd fd16 	bl	8003edc <HAL_DMA_Abort_IT>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d008      	beq.n	80064c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	e000      	b.n	80064c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d03e      	beq.n	8006550 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d112      	bne.n	8006506 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d112      	bne.n	800653a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	f043 0204 	orr.w	r2, r3, #4
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f8b3 	bl	80066c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800655e:	e039      	b.n	80065d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b2a      	cmp	r3, #42	; 0x2a
 8006564:	d109      	bne.n	800657a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2228      	movs	r2, #40	; 0x28
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff f832 	bl	80055de <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b28      	cmp	r3, #40	; 0x28
 8006584:	d111      	bne.n	80065aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a15      	ldr	r2, [pc, #84]	; (80065e0 <I2C_Slave_STOPF+0x25c>)
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff f831 	bl	800560a <HAL_I2C_ListenCpltCallback>
}
 80065a8:	e014      	b.n	80065d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	2b22      	cmp	r3, #34	; 0x22
 80065b0:	d002      	beq.n	80065b8 <I2C_Slave_STOPF+0x234>
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b22      	cmp	r3, #34	; 0x22
 80065b6:	d10d      	bne.n	80065d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7ff f805 	bl	80055de <HAL_I2C_SlaveRxCpltCallback>
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	08006c25 	.word	0x08006c25
 80065e0:	ffff0000 	.word	0xffff0000

080065e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d002      	beq.n	8006606 <I2C_Slave_AF+0x22>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b20      	cmp	r3, #32
 8006604:	d129      	bne.n	800665a <I2C_Slave_AF+0x76>
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b28      	cmp	r3, #40	; 0x28
 800660a:	d126      	bne.n	800665a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a2c      	ldr	r2, [pc, #176]	; (80066c0 <I2C_Slave_AF+0xdc>)
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006620:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800662a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800663a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fe ffd9 	bl	800560a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006658:	e02e      	b.n	80066b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b21      	cmp	r3, #33	; 0x21
 800665e:	d126      	bne.n	80066ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <I2C_Slave_AF+0xdc>)
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2221      	movs	r2, #33	; 0x21
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800668a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006694:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fe ff90 	bl	80055cc <HAL_I2C_SlaveTxCpltCallback>
}
 80066ac:	e004      	b.n	80066b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066b6:	615a      	str	r2, [r3, #20]
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	ffff0000 	.word	0xffff0000

080066c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d002      	beq.n	80066e8 <I2C_ITError+0x24>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d10a      	bne.n	80066fe <I2C_ITError+0x3a>
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b22      	cmp	r3, #34	; 0x22
 80066ec:	d107      	bne.n	80066fe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066fc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006704:	2b28      	cmp	r3, #40	; 0x28
 8006706:	d107      	bne.n	8006718 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2228      	movs	r2, #40	; 0x28
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006716:	e015      	b.n	8006744 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006726:	d00a      	beq.n	800673e <I2C_ITError+0x7a>
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b60      	cmp	r3, #96	; 0x60
 800672c:	d007      	beq.n	800673e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800674e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006752:	d161      	bne.n	8006818 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006762:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800676c:	2b01      	cmp	r3, #1
 800676e:	d020      	beq.n	80067b2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006774:	4a6a      	ldr	r2, [pc, #424]	; (8006920 <I2C_ITError+0x25c>)
 8006776:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677c:	4618      	mov	r0, r3
 800677e:	f7fd fbad 	bl	8003edc <HAL_DMA_Abort_IT>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8089 	beq.w	800689c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067ac:	4610      	mov	r0, r2
 80067ae:	4798      	blx	r3
 80067b0:	e074      	b.n	800689c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	4a5a      	ldr	r2, [pc, #360]	; (8006920 <I2C_ITError+0x25c>)
 80067b8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fd fb8c 	bl	8003edc <HAL_DMA_Abort_IT>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d068      	beq.n	800689c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b40      	cmp	r3, #64	; 0x40
 80067d6:	d10b      	bne.n	80067f0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006812:	4610      	mov	r0, r2
 8006814:	4798      	blx	r3
 8006816:	e041      	b.n	800689c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	d125      	bne.n	8006870 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683c:	2b40      	cmp	r3, #64	; 0x40
 800683e:	d10b      	bne.n	8006858 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7fe fef2 	bl	8005652 <HAL_I2C_AbortCpltCallback>
 800686e:	e015      	b.n	800689c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d10b      	bne.n	8006896 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fe fed2 	bl	8005640 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10e      	bne.n	80068ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d109      	bne.n	80068ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d104      	bne.n	80068ca <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d007      	beq.n	80068da <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068d8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d113      	bne.n	8006916 <I2C_ITError+0x252>
 80068ee:	7bfb      	ldrb	r3, [r7, #15]
 80068f0:	2b28      	cmp	r3, #40	; 0x28
 80068f2:	d110      	bne.n	8006916 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a0b      	ldr	r2, [pc, #44]	; (8006924 <I2C_ITError+0x260>)
 80068f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fe fe7a 	bl	800560a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	08006c25 	.word	0x08006c25
 8006924:	ffff0000 	.word	0xffff0000

08006928 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	4608      	mov	r0, r1
 8006932:	4611      	mov	r1, r2
 8006934:	461a      	mov	r2, r3
 8006936:	4603      	mov	r3, r0
 8006938:	817b      	strh	r3, [r7, #10]
 800693a:	460b      	mov	r3, r1
 800693c:	813b      	strh	r3, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	2200      	movs	r2, #0
 800695a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fa08 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00d      	beq.n	8006986 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006978:	d103      	bne.n	8006982 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e05f      	b.n	8006a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	6a3a      	ldr	r2, [r7, #32]
 800699a:	492d      	ldr	r1, [pc, #180]	; (8006a50 <I2C_RequestMemoryWrite+0x128>)
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 fa40 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e04c      	b.n	8006a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	617b      	str	r3, [r7, #20]
 80069c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c4:	6a39      	ldr	r1, [r7, #32]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 faaa 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00d      	beq.n	80069ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d107      	bne.n	80069ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e02b      	b.n	8006a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069f4:	893b      	ldrh	r3, [r7, #8]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	611a      	str	r2, [r3, #16]
 80069fe:	e021      	b.n	8006a44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a10:	6a39      	ldr	r1, [r7, #32]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fa84 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d107      	bne.n	8006a36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e005      	b.n	8006a46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a3a:	893b      	ldrh	r3, [r7, #8]
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	00010002 	.word	0x00010002

08006a54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	461a      	mov	r2, r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	817b      	strh	r3, [r7, #10]
 8006a66:	460b      	mov	r3, r1
 8006a68:	813b      	strh	r3, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f96a 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00d      	beq.n	8006ac2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab4:	d103      	bne.n	8006abe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e0aa      	b.n	8006c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ad0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	6a3a      	ldr	r2, [r7, #32]
 8006ad6:	4952      	ldr	r1, [pc, #328]	; (8006c20 <I2C_RequestMemoryRead+0x1cc>)
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f9a2 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e097      	b.n	8006c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b00:	6a39      	ldr	r1, [r7, #32]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fa0c 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00d      	beq.n	8006b2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d107      	bne.n	8006b26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e076      	b.n	8006c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d105      	bne.n	8006b3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	611a      	str	r2, [r3, #16]
 8006b3a:	e021      	b.n	8006b80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b3c:	893b      	ldrh	r3, [r7, #8]
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b4c:	6a39      	ldr	r1, [r7, #32]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f9e6 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00d      	beq.n	8006b76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d107      	bne.n	8006b72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e050      	b.n	8006c18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b76:	893b      	ldrh	r3, [r7, #8]
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	6a39      	ldr	r1, [r7, #32]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f9cb 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00d      	beq.n	8006bac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d107      	bne.n	8006ba8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e035      	b.n	8006c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f8d3 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00d      	beq.n	8006bf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be2:	d103      	bne.n	8006bec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e013      	b.n	8006c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bf0:	897b      	ldrh	r3, [r7, #10]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	6a3a      	ldr	r2, [r7, #32]
 8006c04:	4906      	ldr	r1, [pc, #24]	; (8006c20 <I2C_RequestMemoryRead+0x1cc>)
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f90b 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	00010002 	.word	0x00010002

08006c24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c3e:	4b4b      	ldr	r3, [pc, #300]	; (8006d6c <I2C_DMAAbort+0x148>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	08db      	lsrs	r3, r3, #3
 8006c44:	4a4a      	ldr	r2, [pc, #296]	; (8006d70 <I2C_DMAAbort+0x14c>)
 8006c46:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4a:	0a1a      	lsrs	r2, r3, #8
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	00da      	lsls	r2, r3, #3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006c6a:	e00a      	b.n	8006c82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d0ea      	beq.n	8006c58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8e:	2200      	movs	r2, #0
 8006c90:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d003      	beq.n	8006cd8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0201 	bic.w	r2, r2, #1
 8006ce6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b60      	cmp	r3, #96	; 0x60
 8006cf2:	d10e      	bne.n	8006d12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2200      	movs	r2, #0
 8006d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d0a:	6978      	ldr	r0, [r7, #20]
 8006d0c:	f7fe fca1 	bl	8005652 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d10:	e027      	b.n	8006d62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d12:	7cfb      	ldrb	r3, [r7, #19]
 8006d14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d18:	2b28      	cmp	r3, #40	; 0x28
 8006d1a:	d117      	bne.n	8006d4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2228      	movs	r2, #40	; 0x28
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d4a:	e007      	b.n	8006d5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006d5c:	6978      	ldr	r0, [r7, #20]
 8006d5e:	f7fe fc6f 	bl	8005640 <HAL_I2C_ErrorCallback>
}
 8006d62:	bf00      	nop
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000098 	.word	0x20000098
 8006d70:	14f8b589 	.word	0x14f8b589

08006d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d84:	e025      	b.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d8c:	d021      	beq.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8e:	f7fc f8c7 	bl	8002f20 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d302      	bcc.n	8006da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d116      	bne.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e023      	b.n	8006e1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d10d      	bne.n	8006df8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	43da      	mvns	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4013      	ands	r3, r2
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bf0c      	ite	eq
 8006dee:	2301      	moveq	r3, #1
 8006df0:	2300      	movne	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	e00c      	b.n	8006e12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d0b6      	beq.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e30:	e051      	b.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e40:	d123      	bne.n	8006e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f043 0204 	orr.w	r2, r3, #4
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e046      	b.n	8006f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e90:	d021      	beq.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fc f845 	bl	8002f20 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d116      	bne.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f043 0220 	orr.w	r2, r3, #32
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e020      	b.n	8006f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d10c      	bne.n	8006efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	43da      	mvns	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4013      	ands	r3, r2
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bf14      	ite	ne
 8006ef2:	2301      	movne	r3, #1
 8006ef4:	2300      	moveq	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	e00b      	b.n	8006f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	43da      	mvns	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4013      	ands	r3, r2
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d18d      	bne.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f2c:	e02d      	b.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f900 	bl	8007134 <I2C_IsAcknowledgeFailed>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e02d      	b.n	8006f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f44:	d021      	beq.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f46:	f7fb ffeb 	bl	8002f20 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d302      	bcc.n	8006f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d116      	bne.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e007      	b.n	8006f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	d1ca      	bne.n	8006f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fae:	e02d      	b.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f8bf 	bl	8007134 <I2C_IsAcknowledgeFailed>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e02d      	b.n	800701c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc6:	d021      	beq.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc8:	f7fb ffaa 	bl	8002f20 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e007      	b.n	800701c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b04      	cmp	r3, #4
 8007018:	d1ca      	bne.n	8006fb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007030:	4b13      	ldr	r3, [pc, #76]	; (8007080 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	4a13      	ldr	r2, [pc, #76]	; (8007084 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	0a1a      	lsrs	r2, r3, #8
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3b01      	subs	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d107      	bne.n	8007062 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e008      	b.n	8007074 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800706c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007070:	d0e9      	beq.n	8007046 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20000098 	.word	0x20000098
 8007084:	14f8b589 	.word	0x14f8b589

08007088 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007094:	e042      	b.n	800711c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b10      	cmp	r3, #16
 80070a2:	d119      	bne.n	80070d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0210 	mvn.w	r2, #16
 80070ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e029      	b.n	800712c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d8:	f7fb ff22 	bl	8002f20 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d302      	bcc.n	80070ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d116      	bne.n	800711c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e007      	b.n	800712c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d1b5      	bne.n	8007096 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800714a:	d11b      	bne.n	8007184 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007154:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f043 0204 	orr.w	r2, r3, #4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80071a0:	d103      	bne.n	80071aa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80071a8:	e007      	b.n	80071ba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80071b2:	d102      	bne.n	80071ba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2208      	movs	r2, #8
 80071b8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr

080071c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e304      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8087 	beq.w	80072f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80071e4:	4b92      	ldr	r3, [pc, #584]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 030c 	and.w	r3, r3, #12
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d00c      	beq.n	800720a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80071f0:	4b8f      	ldr	r3, [pc, #572]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f003 030c 	and.w	r3, r3, #12
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d112      	bne.n	8007222 <HAL_RCC_OscConfig+0x5e>
 80071fc:	4b8c      	ldr	r3, [pc, #560]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d10b      	bne.n	8007222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800720a:	4b89      	ldr	r3, [pc, #548]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d06c      	beq.n	80072f0 <HAL_RCC_OscConfig+0x12c>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d168      	bne.n	80072f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e2de      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722a:	d106      	bne.n	800723a <HAL_RCC_OscConfig+0x76>
 800722c:	4b80      	ldr	r3, [pc, #512]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a7f      	ldr	r2, [pc, #508]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	e02e      	b.n	8007298 <HAL_RCC_OscConfig+0xd4>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10c      	bne.n	800725c <HAL_RCC_OscConfig+0x98>
 8007242:	4b7b      	ldr	r3, [pc, #492]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a7a      	ldr	r2, [pc, #488]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	4b78      	ldr	r3, [pc, #480]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a77      	ldr	r2, [pc, #476]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	e01d      	b.n	8007298 <HAL_RCC_OscConfig+0xd4>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007264:	d10c      	bne.n	8007280 <HAL_RCC_OscConfig+0xbc>
 8007266:	4b72      	ldr	r3, [pc, #456]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a71      	ldr	r2, [pc, #452]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800726c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	4b6f      	ldr	r3, [pc, #444]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a6e      	ldr	r2, [pc, #440]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e00b      	b.n	8007298 <HAL_RCC_OscConfig+0xd4>
 8007280:	4b6b      	ldr	r3, [pc, #428]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a6a      	ldr	r2, [pc, #424]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	4b68      	ldr	r3, [pc, #416]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a67      	ldr	r2, [pc, #412]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007296:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d013      	beq.n	80072c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a0:	f7fb fe3e 	bl	8002f20 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072a8:	f7fb fe3a 	bl	8002f20 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b64      	cmp	r3, #100	; 0x64
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e292      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072ba:	4b5d      	ldr	r3, [pc, #372]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0f0      	beq.n	80072a8 <HAL_RCC_OscConfig+0xe4>
 80072c6:	e014      	b.n	80072f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072c8:	f7fb fe2a 	bl	8002f20 <HAL_GetTick>
 80072cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ce:	e008      	b.n	80072e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072d0:	f7fb fe26 	bl	8002f20 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b64      	cmp	r3, #100	; 0x64
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e27e      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072e2:	4b53      	ldr	r3, [pc, #332]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1f0      	bne.n	80072d0 <HAL_RCC_OscConfig+0x10c>
 80072ee:	e000      	b.n	80072f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d063      	beq.n	80073c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072fe:	4b4c      	ldr	r3, [pc, #304]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f003 030c 	and.w	r3, r3, #12
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00b      	beq.n	8007322 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800730a:	4b49      	ldr	r3, [pc, #292]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f003 030c 	and.w	r3, r3, #12
 8007312:	2b08      	cmp	r3, #8
 8007314:	d11c      	bne.n	8007350 <HAL_RCC_OscConfig+0x18c>
 8007316:	4b46      	ldr	r3, [pc, #280]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d116      	bne.n	8007350 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007322:	4b43      	ldr	r3, [pc, #268]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_RCC_OscConfig+0x176>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d001      	beq.n	800733a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e252      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800733a:	4b3d      	ldr	r3, [pc, #244]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4939      	ldr	r1, [pc, #228]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800734a:	4313      	orrs	r3, r2
 800734c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800734e:	e03a      	b.n	80073c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d020      	beq.n	800739a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007358:	4b36      	ldr	r3, [pc, #216]	; (8007434 <HAL_RCC_OscConfig+0x270>)
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800735e:	f7fb fddf 	bl	8002f20 <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007366:	f7fb fddb 	bl	8002f20 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e233      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007378:	4b2d      	ldr	r3, [pc, #180]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f0      	beq.n	8007366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007384:	4b2a      	ldr	r3, [pc, #168]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4927      	ldr	r1, [pc, #156]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	600b      	str	r3, [r1, #0]
 8007398:	e015      	b.n	80073c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800739a:	4b26      	ldr	r3, [pc, #152]	; (8007434 <HAL_RCC_OscConfig+0x270>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a0:	f7fb fdbe 	bl	8002f20 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073a8:	f7fb fdba 	bl	8002f20 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e212      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ba:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d03a      	beq.n	8007448 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d019      	beq.n	800740e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073da:	4b17      	ldr	r3, [pc, #92]	; (8007438 <HAL_RCC_OscConfig+0x274>)
 80073dc:	2201      	movs	r2, #1
 80073de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073e0:	f7fb fd9e 	bl	8002f20 <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073e6:	e008      	b.n	80073fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073e8:	f7fb fd9a 	bl	8002f20 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e1f2      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073fa:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <HAL_RCC_OscConfig+0x26c>)
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0f0      	beq.n	80073e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007406:	2001      	movs	r0, #1
 8007408:	f000 fbb6 	bl	8007b78 <RCC_Delay>
 800740c:	e01c      	b.n	8007448 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800740e:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <HAL_RCC_OscConfig+0x274>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007414:	f7fb fd84 	bl	8002f20 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800741a:	e00f      	b.n	800743c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800741c:	f7fb fd80 	bl	8002f20 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d908      	bls.n	800743c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e1d8      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
 800742e:	bf00      	nop
 8007430:	40021000 	.word	0x40021000
 8007434:	42420000 	.word	0x42420000
 8007438:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800743c:	4b9b      	ldr	r3, [pc, #620]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e9      	bne.n	800741c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80a6 	beq.w	80075a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800745a:	4b94      	ldr	r3, [pc, #592]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10d      	bne.n	8007482 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007466:	4b91      	ldr	r3, [pc, #580]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	4a90      	ldr	r2, [pc, #576]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800746c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007470:	61d3      	str	r3, [r2, #28]
 8007472:	4b8e      	ldr	r3, [pc, #568]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747a:	60bb      	str	r3, [r7, #8]
 800747c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800747e:	2301      	movs	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007482:	4b8b      	ldr	r3, [pc, #556]	; (80076b0 <HAL_RCC_OscConfig+0x4ec>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	2b00      	cmp	r3, #0
 800748c:	d118      	bne.n	80074c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800748e:	4b88      	ldr	r3, [pc, #544]	; (80076b0 <HAL_RCC_OscConfig+0x4ec>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a87      	ldr	r2, [pc, #540]	; (80076b0 <HAL_RCC_OscConfig+0x4ec>)
 8007494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800749a:	f7fb fd41 	bl	8002f20 <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a2:	f7fb fd3d 	bl	8002f20 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b64      	cmp	r3, #100	; 0x64
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e195      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074b4:	4b7e      	ldr	r3, [pc, #504]	; (80076b0 <HAL_RCC_OscConfig+0x4ec>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0f0      	beq.n	80074a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d106      	bne.n	80074d6 <HAL_RCC_OscConfig+0x312>
 80074c8:	4b78      	ldr	r3, [pc, #480]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	4a77      	ldr	r2, [pc, #476]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80074ce:	f043 0301 	orr.w	r3, r3, #1
 80074d2:	6213      	str	r3, [r2, #32]
 80074d4:	e02d      	b.n	8007532 <HAL_RCC_OscConfig+0x36e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10c      	bne.n	80074f8 <HAL_RCC_OscConfig+0x334>
 80074de:	4b73      	ldr	r3, [pc, #460]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	4a72      	ldr	r2, [pc, #456]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	6213      	str	r3, [r2, #32]
 80074ea:	4b70      	ldr	r3, [pc, #448]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	4a6f      	ldr	r2, [pc, #444]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80074f0:	f023 0304 	bic.w	r3, r3, #4
 80074f4:	6213      	str	r3, [r2, #32]
 80074f6:	e01c      	b.n	8007532 <HAL_RCC_OscConfig+0x36e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b05      	cmp	r3, #5
 80074fe:	d10c      	bne.n	800751a <HAL_RCC_OscConfig+0x356>
 8007500:	4b6a      	ldr	r3, [pc, #424]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	4a69      	ldr	r2, [pc, #420]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007506:	f043 0304 	orr.w	r3, r3, #4
 800750a:	6213      	str	r3, [r2, #32]
 800750c:	4b67      	ldr	r3, [pc, #412]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	4a66      	ldr	r2, [pc, #408]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	6213      	str	r3, [r2, #32]
 8007518:	e00b      	b.n	8007532 <HAL_RCC_OscConfig+0x36e>
 800751a:	4b64      	ldr	r3, [pc, #400]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	4a63      	ldr	r2, [pc, #396]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	6213      	str	r3, [r2, #32]
 8007526:	4b61      	ldr	r3, [pc, #388]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	4a60      	ldr	r2, [pc, #384]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800752c:	f023 0304 	bic.w	r3, r3, #4
 8007530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d015      	beq.n	8007566 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800753a:	f7fb fcf1 	bl	8002f20 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007540:	e00a      	b.n	8007558 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007542:	f7fb fced 	bl	8002f20 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007550:	4293      	cmp	r3, r2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e143      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007558:	4b54      	ldr	r3, [pc, #336]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0ee      	beq.n	8007542 <HAL_RCC_OscConfig+0x37e>
 8007564:	e014      	b.n	8007590 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007566:	f7fb fcdb 	bl	8002f20 <HAL_GetTick>
 800756a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800756c:	e00a      	b.n	8007584 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800756e:	f7fb fcd7 	bl	8002f20 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	f241 3288 	movw	r2, #5000	; 0x1388
 800757c:	4293      	cmp	r3, r2
 800757e:	d901      	bls.n	8007584 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e12d      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007584:	4b49      	ldr	r3, [pc, #292]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1ee      	bne.n	800756e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d105      	bne.n	80075a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007596:	4b45      	ldr	r3, [pc, #276]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	4a44      	ldr	r2, [pc, #272]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800759c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075a0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 808c 	beq.w	80076c4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80075ac:	4b3f      	ldr	r3, [pc, #252]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b8:	d10e      	bne.n	80075d8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80075ba:	4b3c      	ldr	r3, [pc, #240]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d108      	bne.n	80075d8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80075c6:	4b39      	ldr	r3, [pc, #228]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80075ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d2:	d101      	bne.n	80075d8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e103      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d14e      	bne.n	800767e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80075e0:	4b32      	ldr	r3, [pc, #200]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d009      	beq.n	8007600 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80075ec:	4b2f      	ldr	r3, [pc, #188]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0ef      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007600:	4b2c      	ldr	r3, [pc, #176]	; (80076b4 <HAL_RCC_OscConfig+0x4f0>)
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007606:	f7fb fc8b 	bl	8002f20 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800760e:	f7fb fc87 	bl	8002f20 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b64      	cmp	r3, #100	; 0x64
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e0df      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8007620:	4b22      	ldr	r3, [pc, #136]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f0      	bne.n	800760e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800762c:	4b1f      	ldr	r3, [pc, #124]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007638:	491c      	ldr	r1, [pc, #112]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800763a:	4313      	orrs	r3, r2
 800763c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800763e:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	4918      	ldr	r1, [pc, #96]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 800764c:	4313      	orrs	r3, r2
 800764e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8007650:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <HAL_RCC_OscConfig+0x4f0>)
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007656:	f7fb fc63 	bl	8002f20 <HAL_GetTick>
 800765a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800765c:	e008      	b.n	8007670 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800765e:	f7fb fc5f 	bl	8002f20 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b64      	cmp	r3, #100	; 0x64
 800766a:	d901      	bls.n	8007670 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e0b7      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <HAL_RCC_OscConfig+0x49a>
 800767c:	e022      	b.n	80076c4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800767e:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <HAL_RCC_OscConfig+0x4e8>)
 8007684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007688:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800768a:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <HAL_RCC_OscConfig+0x4f0>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007690:	f7fb fc46 	bl	8002f20 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007696:	e00f      	b.n	80076b8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007698:	f7fb fc42 	bl	8002f20 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b64      	cmp	r3, #100	; 0x64
 80076a4:	d908      	bls.n	80076b8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e09a      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
 80076aa:	bf00      	nop
 80076ac:	40021000 	.word	0x40021000
 80076b0:	40007000 	.word	0x40007000
 80076b4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80076b8:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e9      	bne.n	8007698 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8088 	beq.w	80077de <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076ce:	4b46      	ldr	r3, [pc, #280]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f003 030c 	and.w	r3, r3, #12
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d068      	beq.n	80077ac <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d14d      	bne.n	800777e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076e2:	4b42      	ldr	r3, [pc, #264]	; (80077ec <HAL_RCC_OscConfig+0x628>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fb fc1a 	bl	8002f20 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f0:	f7fb fc16 	bl	8002f20 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e06e      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007702:	4b39      	ldr	r3, [pc, #228]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007716:	d10f      	bne.n	8007738 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007718:	4b33      	ldr	r3, [pc, #204]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 800771a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4931      	ldr	r1, [pc, #196]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 8007722:	4313      	orrs	r3, r2
 8007724:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007726:	4b30      	ldr	r3, [pc, #192]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	f023 020f 	bic.w	r2, r3, #15
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	492d      	ldr	r1, [pc, #180]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 8007734:	4313      	orrs	r3, r2
 8007736:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007738:	4b2b      	ldr	r3, [pc, #172]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	430b      	orrs	r3, r1
 800774a:	4927      	ldr	r1, [pc, #156]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 800774c:	4313      	orrs	r3, r2
 800774e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007750:	4b26      	ldr	r3, [pc, #152]	; (80077ec <HAL_RCC_OscConfig+0x628>)
 8007752:	2201      	movs	r2, #1
 8007754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007756:	f7fb fbe3 	bl	8002f20 <HAL_GetTick>
 800775a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800775c:	e008      	b.n	8007770 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800775e:	f7fb fbdf 	bl	8002f20 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d901      	bls.n	8007770 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e037      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007770:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f0      	beq.n	800775e <HAL_RCC_OscConfig+0x59a>
 800777c:	e02f      	b.n	80077de <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800777e:	4b1b      	ldr	r3, [pc, #108]	; (80077ec <HAL_RCC_OscConfig+0x628>)
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007784:	f7fb fbcc 	bl	8002f20 <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800778c:	f7fb fbc8 	bl	8002f20 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e020      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1f0      	bne.n	800778c <HAL_RCC_OscConfig+0x5c8>
 80077aa:	e018      	b.n	80077de <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e013      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <HAL_RCC_OscConfig+0x624>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d106      	bne.n	80077da <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d001      	beq.n	80077de <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40021000 	.word	0x40021000
 80077ec:	42420060 	.word	0x42420060

080077f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0d0      	b.n	80079a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007804:	4b6a      	ldr	r3, [pc, #424]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d910      	bls.n	8007834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007812:	4b67      	ldr	r3, [pc, #412]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f023 0207 	bic.w	r2, r3, #7
 800781a:	4965      	ldr	r1, [pc, #404]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	4313      	orrs	r3, r2
 8007820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007822:	4b63      	ldr	r3, [pc, #396]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d001      	beq.n	8007834 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e0b8      	b.n	80079a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b00      	cmp	r3, #0
 800783e:	d020      	beq.n	8007882 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0304 	and.w	r3, r3, #4
 8007848:	2b00      	cmp	r3, #0
 800784a:	d005      	beq.n	8007858 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800784c:	4b59      	ldr	r3, [pc, #356]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	4a58      	ldr	r2, [pc, #352]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007852:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007856:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007864:	4b53      	ldr	r3, [pc, #332]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	4a52      	ldr	r2, [pc, #328]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 800786a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800786e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007870:	4b50      	ldr	r3, [pc, #320]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	494d      	ldr	r1, [pc, #308]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 800787e:	4313      	orrs	r3, r2
 8007880:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d040      	beq.n	8007910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d107      	bne.n	80078a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007896:	4b47      	ldr	r3, [pc, #284]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d115      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e07f      	b.n	80079a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d107      	bne.n	80078be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ae:	4b41      	ldr	r3, [pc, #260]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e073      	b.n	80079a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078be:	4b3d      	ldr	r3, [pc, #244]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e06b      	b.n	80079a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ce:	4b39      	ldr	r3, [pc, #228]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f023 0203 	bic.w	r2, r3, #3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	4936      	ldr	r1, [pc, #216]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078e0:	f7fb fb1e 	bl	8002f20 <HAL_GetTick>
 80078e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e6:	e00a      	b.n	80078fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e8:	f7fb fb1a 	bl	8002f20 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e053      	b.n	80079a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fe:	4b2d      	ldr	r3, [pc, #180]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f003 020c 	and.w	r2, r3, #12
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	429a      	cmp	r2, r3
 800790e:	d1eb      	bne.n	80078e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007910:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d210      	bcs.n	8007940 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791e:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 0207 	bic.w	r2, r3, #7
 8007926:	4922      	ldr	r1, [pc, #136]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	4313      	orrs	r3, r2
 800792c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800792e:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d001      	beq.n	8007940 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e032      	b.n	80079a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d008      	beq.n	800795e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800794c:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4916      	ldr	r1, [pc, #88]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 800795a:	4313      	orrs	r3, r2
 800795c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d009      	beq.n	800797e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800796a:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	490e      	ldr	r1, [pc, #56]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 800797a:	4313      	orrs	r3, r2
 800797c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800797e:	f000 f821 	bl	80079c4 <HAL_RCC_GetSysClockFreq>
 8007982:	4602      	mov	r2, r0
 8007984:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	490a      	ldr	r1, [pc, #40]	; (80079b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007990:	5ccb      	ldrb	r3, [r1, r3]
 8007992:	fa22 f303 	lsr.w	r3, r2, r3
 8007996:	4a09      	ldr	r2, [pc, #36]	; (80079bc <HAL_RCC_ClockConfig+0x1cc>)
 8007998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800799a:	4b09      	ldr	r3, [pc, #36]	; (80079c0 <HAL_RCC_ClockConfig+0x1d0>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fb fa7c 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40022000 	.word	0x40022000
 80079b4:	40021000 	.word	0x40021000
 80079b8:	080082c8 	.word	0x080082c8
 80079bc:	20000098 	.word	0x20000098
 80079c0:	2000009c 	.word	0x2000009c

080079c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c6:	b091      	sub	sp, #68	; 0x44
 80079c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80079ca:	4b56      	ldr	r3, [pc, #344]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x160>)
 80079cc:	f107 0414 	add.w	r4, r7, #20
 80079d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079d2:	c407      	stmia	r4!, {r0, r1, r2}
 80079d4:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80079d6:	4b54      	ldr	r3, [pc, #336]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x164>)
 80079d8:	1d3c      	adds	r4, r7, #4
 80079da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
 80079e4:	2300      	movs	r3, #0
 80079e6:	633b      	str	r3, [r7, #48]	; 0x30
 80079e8:	2300      	movs	r3, #0
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079ec:	2300      	movs	r3, #0
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079f8:	2300      	movs	r3, #0
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80079fc:	4b4b      	ldr	r3, [pc, #300]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x168>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	f003 030c 	and.w	r3, r3, #12
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d002      	beq.n	8007a12 <HAL_RCC_GetSysClockFreq+0x4e>
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d003      	beq.n	8007a18 <HAL_RCC_GetSysClockFreq+0x54>
 8007a10:	e080      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007a14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a16:	e080      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1a:	0c9b      	lsrs	r3, r3, #18
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a24:	4413      	add	r3, r2
 8007a26:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d066      	beq.n	8007b04 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007a36:	4b3d      	ldr	r3, [pc, #244]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007a42:	4413      	add	r3, r2
 8007a44:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8007a48:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007a4a:	4b38      	ldr	r3, [pc, #224]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d044      	beq.n	8007ae0 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007a56:	4b35      	ldr	r3, [pc, #212]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	091b      	lsrs	r3, r3, #4
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	3301      	adds	r3, #1
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007a64:	4b31      	ldr	r3, [pc, #196]	; (8007b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	0a1b      	lsrs	r3, r3, #8
 8007a6a:	f003 030f 	and.w	r3, r3, #15
 8007a6e:	3302      	adds	r3, #2
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	fb02 f501 	mul.w	r5, r2, r1
 8007a86:	fb00 f403 	mul.w	r4, r0, r3
 8007a8a:	442c      	add	r4, r5
 8007a8c:	fba0 2302 	umull	r2, r3, r0, r2
 8007a90:	18e1      	adds	r1, r4, r3
 8007a92:	460b      	mov	r3, r1
 8007a94:	4926      	ldr	r1, [pc, #152]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007a96:	fb01 f003 	mul.w	r0, r1, r3
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	fb01 f102 	mul.w	r1, r1, r2
 8007aa0:	4401      	add	r1, r0
 8007aa2:	4823      	ldr	r0, [pc, #140]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007aa4:	fba2 4500 	umull	r4, r5, r2, r0
 8007aa8:	194b      	adds	r3, r1, r5
 8007aaa:	461d      	mov	r5, r3
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f04f 0100 	mov.w	r1, #0
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	fb02 fc01 	mul.w	ip, r2, r1
 8007ac0:	fb00 f603 	mul.w	r6, r0, r3
 8007ac4:	4466      	add	r6, ip
 8007ac6:	fba0 2302 	umull	r2, r3, r0, r2
 8007aca:	18f1      	adds	r1, r6, r3
 8007acc:	460b      	mov	r3, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f9 fa9b 	bl	800100c <__aeabi_uldivmod>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4613      	mov	r3, r2
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ade:	e007      	b.n	8007af0 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007ae4:	fb02 f203 	mul.w	r2, r2, r3
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007af0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007af4:	461a      	mov	r2, r3
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d108      	bne.n	8007b0e <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8007afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b02:	e004      	b.n	8007b0e <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	4a0b      	ldr	r2, [pc, #44]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x170>)
 8007b08:	fb02 f303 	mul.w	r3, r2, r3
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8007b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b12:	e002      	b.n	8007b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b14:	4b08      	ldr	r3, [pc, #32]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x174>)
 8007b16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3744      	adds	r7, #68	; 0x44
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b24:	080082a8 	.word	0x080082a8
 8007b28:	080082b8 	.word	0x080082b8
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	017d7840 	.word	0x017d7840
 8007b34:	003d0900 	.word	0x003d0900
 8007b38:	007a1200 	.word	0x007a1200

08007b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b40:	4b02      	ldr	r3, [pc, #8]	; (8007b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8007b42:	681b      	ldr	r3, [r3, #0]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr
 8007b4c:	20000098 	.word	0x20000098

08007b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b54:	f7ff fff2 	bl	8007b3c <HAL_RCC_GetHCLKFreq>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	0a1b      	lsrs	r3, r3, #8
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	4903      	ldr	r1, [pc, #12]	; (8007b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b66:	5ccb      	ldrb	r3, [r1, r3]
 8007b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	40021000 	.word	0x40021000
 8007b74:	080082d8 	.word	0x080082d8

08007b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007b80:	4b0a      	ldr	r3, [pc, #40]	; (8007bac <RCC_Delay+0x34>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a0a      	ldr	r2, [pc, #40]	; (8007bb0 <RCC_Delay+0x38>)
 8007b86:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8a:	0a5b      	lsrs	r3, r3, #9
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	fb02 f303 	mul.w	r3, r2, r3
 8007b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b94:	bf00      	nop
  }
  while (Delay --);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	1e5a      	subs	r2, r3, #1
 8007b9a:	60fa      	str	r2, [r7, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f9      	bne.n	8007b94 <RCC_Delay+0x1c>
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr
 8007bac:	20000098 	.word	0x20000098
 8007bb0:	10624dd3 	.word	0x10624dd3

08007bb4 <__errno>:
 8007bb4:	4b01      	ldr	r3, [pc, #4]	; (8007bbc <__errno+0x8>)
 8007bb6:	6818      	ldr	r0, [r3, #0]
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	200000a4 	.word	0x200000a4

08007bc0 <__libc_init_array>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	4d0c      	ldr	r5, [pc, #48]	; (8007bf8 <__libc_init_array+0x38>)
 8007bc6:	4c0d      	ldr	r4, [pc, #52]	; (8007bfc <__libc_init_array+0x3c>)
 8007bc8:	1b64      	subs	r4, r4, r5
 8007bca:	10a4      	asrs	r4, r4, #2
 8007bcc:	42a6      	cmp	r6, r4
 8007bce:	d109      	bne.n	8007be4 <__libc_init_array+0x24>
 8007bd0:	f000 fb5c 	bl	800828c <_init>
 8007bd4:	2600      	movs	r6, #0
 8007bd6:	4d0a      	ldr	r5, [pc, #40]	; (8007c00 <__libc_init_array+0x40>)
 8007bd8:	4c0a      	ldr	r4, [pc, #40]	; (8007c04 <__libc_init_array+0x44>)
 8007bda:	1b64      	subs	r4, r4, r5
 8007bdc:	10a4      	asrs	r4, r4, #2
 8007bde:	42a6      	cmp	r6, r4
 8007be0:	d105      	bne.n	8007bee <__libc_init_array+0x2e>
 8007be2:	bd70      	pop	{r4, r5, r6, pc}
 8007be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be8:	4798      	blx	r3
 8007bea:	3601      	adds	r6, #1
 8007bec:	e7ee      	b.n	8007bcc <__libc_init_array+0xc>
 8007bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf2:	4798      	blx	r3
 8007bf4:	3601      	adds	r6, #1
 8007bf6:	e7f2      	b.n	8007bde <__libc_init_array+0x1e>
 8007bf8:	08008358 	.word	0x08008358
 8007bfc:	08008358 	.word	0x08008358
 8007c00:	08008358 	.word	0x08008358
 8007c04:	0800835c 	.word	0x0800835c

08007c08 <memset>:
 8007c08:	4603      	mov	r3, r0
 8007c0a:	4402      	add	r2, r0
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d100      	bne.n	8007c12 <memset+0xa>
 8007c10:	4770      	bx	lr
 8007c12:	f803 1b01 	strb.w	r1, [r3], #1
 8007c16:	e7f9      	b.n	8007c0c <memset+0x4>

08007c18 <atan>:
 8007c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	4bb6      	ldr	r3, [pc, #728]	; (8007ef8 <atan+0x2e0>)
 8007c1e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007c22:	429e      	cmp	r6, r3
 8007c24:	4604      	mov	r4, r0
 8007c26:	460d      	mov	r5, r1
 8007c28:	468b      	mov	fp, r1
 8007c2a:	dd17      	ble.n	8007c5c <atan+0x44>
 8007c2c:	4bb3      	ldr	r3, [pc, #716]	; (8007efc <atan+0x2e4>)
 8007c2e:	429e      	cmp	r6, r3
 8007c30:	dc01      	bgt.n	8007c36 <atan+0x1e>
 8007c32:	d109      	bne.n	8007c48 <atan+0x30>
 8007c34:	b140      	cbz	r0, 8007c48 <atan+0x30>
 8007c36:	4622      	mov	r2, r4
 8007c38:	462b      	mov	r3, r5
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 faf9 	bl	8000234 <__adddf3>
 8007c42:	4604      	mov	r4, r0
 8007c44:	460d      	mov	r5, r1
 8007c46:	e005      	b.n	8007c54 <atan+0x3c>
 8007c48:	f1bb 0f00 	cmp.w	fp, #0
 8007c4c:	4cac      	ldr	r4, [pc, #688]	; (8007f00 <atan+0x2e8>)
 8007c4e:	f300 8121 	bgt.w	8007e94 <atan+0x27c>
 8007c52:	4dac      	ldr	r5, [pc, #688]	; (8007f04 <atan+0x2ec>)
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	4baa      	ldr	r3, [pc, #680]	; (8007f08 <atan+0x2f0>)
 8007c5e:	429e      	cmp	r6, r3
 8007c60:	dc11      	bgt.n	8007c86 <atan+0x6e>
 8007c62:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007c66:	429e      	cmp	r6, r3
 8007c68:	dc0a      	bgt.n	8007c80 <atan+0x68>
 8007c6a:	a38b      	add	r3, pc, #556	; (adr r3, 8007e98 <atan+0x280>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f7f8 fae0 	bl	8000234 <__adddf3>
 8007c74:	2200      	movs	r2, #0
 8007c76:	4ba5      	ldr	r3, [pc, #660]	; (8007f0c <atan+0x2f4>)
 8007c78:	f7f8 ff22 	bl	8000ac0 <__aeabi_dcmpgt>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d1e9      	bne.n	8007c54 <atan+0x3c>
 8007c80:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c84:	e027      	b.n	8007cd6 <atan+0xbe>
 8007c86:	f000 f951 	bl	8007f2c <fabs>
 8007c8a:	4ba1      	ldr	r3, [pc, #644]	; (8007f10 <atan+0x2f8>)
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	460d      	mov	r5, r1
 8007c92:	f300 80b8 	bgt.w	8007e06 <atan+0x1ee>
 8007c96:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007c9a:	429e      	cmp	r6, r3
 8007c9c:	f300 809c 	bgt.w	8007dd8 <atan+0x1c0>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	f7f8 fac6 	bl	8000234 <__adddf3>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	4b98      	ldr	r3, [pc, #608]	; (8007f0c <atan+0x2f4>)
 8007cac:	f7f8 fac0 	bl	8000230 <__aeabi_dsub>
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f7f8 fab9 	bl	8000234 <__adddf3>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 fd93 	bl	80007f4 <__aeabi_ddiv>
 8007cce:	f04f 0a00 	mov.w	sl, #0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	462b      	mov	r3, r5
 8007cda:	4620      	mov	r0, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7f8 fc5f 	bl	80005a0 <__aeabi_dmul>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	f7f8 fc59 	bl	80005a0 <__aeabi_dmul>
 8007cee:	a36c      	add	r3, pc, #432	; (adr r3, 8007ea0 <atan+0x288>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	f7f8 fc52 	bl	80005a0 <__aeabi_dmul>
 8007cfc:	a36a      	add	r3, pc, #424	; (adr r3, 8007ea8 <atan+0x290>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f7f8 fa97 	bl	8000234 <__adddf3>
 8007d06:	4632      	mov	r2, r6
 8007d08:	463b      	mov	r3, r7
 8007d0a:	f7f8 fc49 	bl	80005a0 <__aeabi_dmul>
 8007d0e:	a368      	add	r3, pc, #416	; (adr r3, 8007eb0 <atan+0x298>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fa8e 	bl	8000234 <__adddf3>
 8007d18:	4632      	mov	r2, r6
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	f7f8 fc40 	bl	80005a0 <__aeabi_dmul>
 8007d20:	a365      	add	r3, pc, #404	; (adr r3, 8007eb8 <atan+0x2a0>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7f8 fa85 	bl	8000234 <__adddf3>
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	463b      	mov	r3, r7
 8007d2e:	f7f8 fc37 	bl	80005a0 <__aeabi_dmul>
 8007d32:	a363      	add	r3, pc, #396	; (adr r3, 8007ec0 <atan+0x2a8>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f7f8 fa7c 	bl	8000234 <__adddf3>
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	463b      	mov	r3, r7
 8007d40:	f7f8 fc2e 	bl	80005a0 <__aeabi_dmul>
 8007d44:	a360      	add	r3, pc, #384	; (adr r3, 8007ec8 <atan+0x2b0>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fa73 	bl	8000234 <__adddf3>
 8007d4e:	4642      	mov	r2, r8
 8007d50:	464b      	mov	r3, r9
 8007d52:	f7f8 fc25 	bl	80005a0 <__aeabi_dmul>
 8007d56:	a35e      	add	r3, pc, #376	; (adr r3, 8007ed0 <atan+0x2b8>)
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	4689      	mov	r9, r1
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 fc1c 	bl	80005a0 <__aeabi_dmul>
 8007d68:	a35b      	add	r3, pc, #364	; (adr r3, 8007ed8 <atan+0x2c0>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fa5f 	bl	8000230 <__aeabi_dsub>
 8007d72:	4632      	mov	r2, r6
 8007d74:	463b      	mov	r3, r7
 8007d76:	f7f8 fc13 	bl	80005a0 <__aeabi_dmul>
 8007d7a:	a359      	add	r3, pc, #356	; (adr r3, 8007ee0 <atan+0x2c8>)
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f7f8 fa56 	bl	8000230 <__aeabi_dsub>
 8007d84:	4632      	mov	r2, r6
 8007d86:	463b      	mov	r3, r7
 8007d88:	f7f8 fc0a 	bl	80005a0 <__aeabi_dmul>
 8007d8c:	a356      	add	r3, pc, #344	; (adr r3, 8007ee8 <atan+0x2d0>)
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f7f8 fa4d 	bl	8000230 <__aeabi_dsub>
 8007d96:	4632      	mov	r2, r6
 8007d98:	463b      	mov	r3, r7
 8007d9a:	f7f8 fc01 	bl	80005a0 <__aeabi_dmul>
 8007d9e:	a354      	add	r3, pc, #336	; (adr r3, 8007ef0 <atan+0x2d8>)
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 fa44 	bl	8000230 <__aeabi_dsub>
 8007da8:	4632      	mov	r2, r6
 8007daa:	463b      	mov	r3, r7
 8007dac:	f7f8 fbf8 	bl	80005a0 <__aeabi_dmul>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 fa3c 	bl	8000234 <__adddf3>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	f7f8 fbee 	bl	80005a0 <__aeabi_dmul>
 8007dc4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	d144      	bne.n	8007e58 <atan+0x240>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	f7f8 fa2d 	bl	8000230 <__aeabi_dsub>
 8007dd6:	e734      	b.n	8007c42 <atan+0x2a>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4b4c      	ldr	r3, [pc, #304]	; (8007f0c <atan+0x2f4>)
 8007ddc:	f7f8 fa28 	bl	8000230 <__aeabi_dsub>
 8007de0:	2200      	movs	r2, #0
 8007de2:	4606      	mov	r6, r0
 8007de4:	460f      	mov	r7, r1
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	4b48      	ldr	r3, [pc, #288]	; (8007f0c <atan+0x2f4>)
 8007dec:	f7f8 fa22 	bl	8000234 <__adddf3>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fcfc 	bl	80007f4 <__aeabi_ddiv>
 8007dfc:	f04f 0a01 	mov.w	sl, #1
 8007e00:	4604      	mov	r4, r0
 8007e02:	460d      	mov	r5, r1
 8007e04:	e767      	b.n	8007cd6 <atan+0xbe>
 8007e06:	4b43      	ldr	r3, [pc, #268]	; (8007f14 <atan+0x2fc>)
 8007e08:	429e      	cmp	r6, r3
 8007e0a:	da1a      	bge.n	8007e42 <atan+0x22a>
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4b42      	ldr	r3, [pc, #264]	; (8007f18 <atan+0x300>)
 8007e10:	f7f8 fa0e 	bl	8000230 <__aeabi_dsub>
 8007e14:	2200      	movs	r2, #0
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4b3e      	ldr	r3, [pc, #248]	; (8007f18 <atan+0x300>)
 8007e20:	f7f8 fbbe 	bl	80005a0 <__aeabi_dmul>
 8007e24:	2200      	movs	r2, #0
 8007e26:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <atan+0x2f4>)
 8007e28:	f7f8 fa04 	bl	8000234 <__adddf3>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fcde 	bl	80007f4 <__aeabi_ddiv>
 8007e38:	f04f 0a02 	mov.w	sl, #2
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	e749      	b.n	8007cd6 <atan+0xbe>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	2000      	movs	r0, #0
 8007e48:	4934      	ldr	r1, [pc, #208]	; (8007f1c <atan+0x304>)
 8007e4a:	f7f8 fcd3 	bl	80007f4 <__aeabi_ddiv>
 8007e4e:	f04f 0a03 	mov.w	sl, #3
 8007e52:	4604      	mov	r4, r0
 8007e54:	460d      	mov	r5, r1
 8007e56:	e73e      	b.n	8007cd6 <atan+0xbe>
 8007e58:	4b31      	ldr	r3, [pc, #196]	; (8007f20 <atan+0x308>)
 8007e5a:	4e32      	ldr	r6, [pc, #200]	; (8007f24 <atan+0x30c>)
 8007e5c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007e60:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007e64:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e68:	f7f8 f9e2 	bl	8000230 <__aeabi_dsub>
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	462b      	mov	r3, r5
 8007e70:	f7f8 f9de 	bl	8000230 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007e7c:	f7f8 f9d8 	bl	8000230 <__aeabi_dsub>
 8007e80:	f1bb 0f00 	cmp.w	fp, #0
 8007e84:	4604      	mov	r4, r0
 8007e86:	460d      	mov	r5, r1
 8007e88:	f6bf aee4 	bge.w	8007c54 <atan+0x3c>
 8007e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e90:	461d      	mov	r5, r3
 8007e92:	e6df      	b.n	8007c54 <atan+0x3c>
 8007e94:	4d24      	ldr	r5, [pc, #144]	; (8007f28 <atan+0x310>)
 8007e96:	e6dd      	b.n	8007c54 <atan+0x3c>
 8007e98:	8800759c 	.word	0x8800759c
 8007e9c:	7e37e43c 	.word	0x7e37e43c
 8007ea0:	e322da11 	.word	0xe322da11
 8007ea4:	3f90ad3a 	.word	0x3f90ad3a
 8007ea8:	24760deb 	.word	0x24760deb
 8007eac:	3fa97b4b 	.word	0x3fa97b4b
 8007eb0:	a0d03d51 	.word	0xa0d03d51
 8007eb4:	3fb10d66 	.word	0x3fb10d66
 8007eb8:	c54c206e 	.word	0xc54c206e
 8007ebc:	3fb745cd 	.word	0x3fb745cd
 8007ec0:	920083ff 	.word	0x920083ff
 8007ec4:	3fc24924 	.word	0x3fc24924
 8007ec8:	5555550d 	.word	0x5555550d
 8007ecc:	3fd55555 	.word	0x3fd55555
 8007ed0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007ed4:	bfa2b444 	.word	0xbfa2b444
 8007ed8:	52defd9a 	.word	0x52defd9a
 8007edc:	3fadde2d 	.word	0x3fadde2d
 8007ee0:	af749a6d 	.word	0xaf749a6d
 8007ee4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007ee8:	fe231671 	.word	0xfe231671
 8007eec:	3fbc71c6 	.word	0x3fbc71c6
 8007ef0:	9998ebc4 	.word	0x9998ebc4
 8007ef4:	3fc99999 	.word	0x3fc99999
 8007ef8:	440fffff 	.word	0x440fffff
 8007efc:	7ff00000 	.word	0x7ff00000
 8007f00:	54442d18 	.word	0x54442d18
 8007f04:	bff921fb 	.word	0xbff921fb
 8007f08:	3fdbffff 	.word	0x3fdbffff
 8007f0c:	3ff00000 	.word	0x3ff00000
 8007f10:	3ff2ffff 	.word	0x3ff2ffff
 8007f14:	40038000 	.word	0x40038000
 8007f18:	3ff80000 	.word	0x3ff80000
 8007f1c:	bff00000 	.word	0xbff00000
 8007f20:	08008300 	.word	0x08008300
 8007f24:	080082e0 	.word	0x080082e0
 8007f28:	3ff921fb 	.word	0x3ff921fb

08007f2c <fabs>:
 8007f2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f30:	4770      	bx	lr

08007f32 <atan2>:
 8007f32:	f000 b82d 	b.w	8007f90 <__ieee754_atan2>
	...

08007f38 <sqrt>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	4606      	mov	r6, r0
 8007f3c:	460f      	mov	r7, r1
 8007f3e:	f000 f8f9 	bl	8008134 <__ieee754_sqrt>
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <sqrt+0x54>)
 8007f44:	4604      	mov	r4, r0
 8007f46:	f993 3000 	ldrsb.w	r3, [r3]
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	d019      	beq.n	8007f84 <sqrt+0x4c>
 8007f50:	4632      	mov	r2, r6
 8007f52:	463b      	mov	r3, r7
 8007f54:	4630      	mov	r0, r6
 8007f56:	4639      	mov	r1, r7
 8007f58:	f7f8 fdbc 	bl	8000ad4 <__aeabi_dcmpun>
 8007f5c:	b990      	cbnz	r0, 8007f84 <sqrt+0x4c>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2300      	movs	r3, #0
 8007f62:	4630      	mov	r0, r6
 8007f64:	4639      	mov	r1, r7
 8007f66:	f7f8 fd8d 	bl	8000a84 <__aeabi_dcmplt>
 8007f6a:	b158      	cbz	r0, 8007f84 <sqrt+0x4c>
 8007f6c:	f7ff fe22 	bl	8007bb4 <__errno>
 8007f70:	2321      	movs	r3, #33	; 0x21
 8007f72:	2200      	movs	r2, #0
 8007f74:	6003      	str	r3, [r0, #0]
 8007f76:	2300      	movs	r3, #0
 8007f78:	4610      	mov	r0, r2
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	f7f8 fc3a 	bl	80007f4 <__aeabi_ddiv>
 8007f80:	4604      	mov	r4, r0
 8007f82:	460d      	mov	r5, r1
 8007f84:	4620      	mov	r0, r4
 8007f86:	4629      	mov	r1, r5
 8007f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000108 	.word	0x20000108

08007f90 <__ieee754_atan2>:
 8007f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	4692      	mov	sl, r2
 8007f96:	4699      	mov	r9, r3
 8007f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f9c:	461f      	mov	r7, r3
 8007f9e:	f1ca 0300 	rsb	r3, sl, #0
 8007fa2:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8008130 <__ieee754_atan2+0x1a0>
 8007fa6:	ea43 030a 	orr.w	r3, r3, sl
 8007faa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007fae:	4573      	cmp	r3, lr
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	d808      	bhi.n	8007fc8 <__ieee754_atan2+0x38>
 8007fb6:	4246      	negs	r6, r0
 8007fb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007fbc:	4306      	orrs	r6, r0
 8007fbe:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007fc2:	4576      	cmp	r6, lr
 8007fc4:	468c      	mov	ip, r1
 8007fc6:	d908      	bls.n	8007fda <__ieee754_atan2+0x4a>
 8007fc8:	4652      	mov	r2, sl
 8007fca:	464b      	mov	r3, r9
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 f930 	bl	8000234 <__adddf3>
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	460d      	mov	r5, r1
 8007fd8:	e019      	b.n	800800e <__ieee754_atan2+0x7e>
 8007fda:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007fde:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007fe2:	ea56 060a 	orrs.w	r6, r6, sl
 8007fe6:	d103      	bne.n	8007ff0 <__ieee754_atan2+0x60>
 8007fe8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	f7ff be14 	b.w	8007c18 <atan>
 8007ff0:	17be      	asrs	r6, r7, #30
 8007ff2:	f006 0602 	and.w	r6, r6, #2
 8007ff6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007ffa:	ea53 0100 	orrs.w	r1, r3, r0
 8007ffe:	d10a      	bne.n	8008016 <__ieee754_atan2+0x86>
 8008000:	2e02      	cmp	r6, #2
 8008002:	d067      	beq.n	80080d4 <__ieee754_atan2+0x144>
 8008004:	2e03      	cmp	r6, #3
 8008006:	d102      	bne.n	800800e <__ieee754_atan2+0x7e>
 8008008:	a53b      	add	r5, pc, #236	; (adr r5, 80080f8 <__ieee754_atan2+0x168>)
 800800a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800800e:	4620      	mov	r0, r4
 8008010:	4629      	mov	r1, r5
 8008012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	ea52 010a 	orrs.w	r1, r2, sl
 800801a:	d106      	bne.n	800802a <__ieee754_atan2+0x9a>
 800801c:	f1bc 0f00 	cmp.w	ip, #0
 8008020:	da63      	bge.n	80080ea <__ieee754_atan2+0x15a>
 8008022:	a537      	add	r5, pc, #220	; (adr r5, 8008100 <__ieee754_atan2+0x170>)
 8008024:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008028:	e7f1      	b.n	800800e <__ieee754_atan2+0x7e>
 800802a:	4572      	cmp	r2, lr
 800802c:	d10f      	bne.n	800804e <__ieee754_atan2+0xbe>
 800802e:	4293      	cmp	r3, r2
 8008030:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8008034:	d107      	bne.n	8008046 <__ieee754_atan2+0xb6>
 8008036:	2e02      	cmp	r6, #2
 8008038:	d850      	bhi.n	80080dc <__ieee754_atan2+0x14c>
 800803a:	4b3b      	ldr	r3, [pc, #236]	; (8008128 <__ieee754_atan2+0x198>)
 800803c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008040:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008044:	e7e3      	b.n	800800e <__ieee754_atan2+0x7e>
 8008046:	2e02      	cmp	r6, #2
 8008048:	d84c      	bhi.n	80080e4 <__ieee754_atan2+0x154>
 800804a:	4b38      	ldr	r3, [pc, #224]	; (800812c <__ieee754_atan2+0x19c>)
 800804c:	e7f6      	b.n	800803c <__ieee754_atan2+0xac>
 800804e:	4573      	cmp	r3, lr
 8008050:	d0e4      	beq.n	800801c <__ieee754_atan2+0x8c>
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008058:	ea4f 5223 	mov.w	r2, r3, asr #20
 800805c:	da20      	bge.n	80080a0 <__ieee754_atan2+0x110>
 800805e:	2f00      	cmp	r7, #0
 8008060:	da01      	bge.n	8008066 <__ieee754_atan2+0xd6>
 8008062:	323c      	adds	r2, #60	; 0x3c
 8008064:	db20      	blt.n	80080a8 <__ieee754_atan2+0x118>
 8008066:	4652      	mov	r2, sl
 8008068:	464b      	mov	r3, r9
 800806a:	4620      	mov	r0, r4
 800806c:	4629      	mov	r1, r5
 800806e:	f7f8 fbc1 	bl	80007f4 <__aeabi_ddiv>
 8008072:	f7ff ff5b 	bl	8007f2c <fabs>
 8008076:	f7ff fdcf 	bl	8007c18 <atan>
 800807a:	4604      	mov	r4, r0
 800807c:	460d      	mov	r5, r1
 800807e:	2e01      	cmp	r6, #1
 8008080:	d015      	beq.n	80080ae <__ieee754_atan2+0x11e>
 8008082:	2e02      	cmp	r6, #2
 8008084:	d017      	beq.n	80080b6 <__ieee754_atan2+0x126>
 8008086:	2e00      	cmp	r6, #0
 8008088:	d0c1      	beq.n	800800e <__ieee754_atan2+0x7e>
 800808a:	a31f      	add	r3, pc, #124	; (adr r3, 8008108 <__ieee754_atan2+0x178>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	4620      	mov	r0, r4
 8008092:	4629      	mov	r1, r5
 8008094:	f7f8 f8cc 	bl	8000230 <__aeabi_dsub>
 8008098:	a31d      	add	r3, pc, #116	; (adr r3, 8008110 <__ieee754_atan2+0x180>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	e016      	b.n	80080ce <__ieee754_atan2+0x13e>
 80080a0:	a51d      	add	r5, pc, #116	; (adr r5, 8008118 <__ieee754_atan2+0x188>)
 80080a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080a6:	e7ea      	b.n	800807e <__ieee754_atan2+0xee>
 80080a8:	2400      	movs	r4, #0
 80080aa:	2500      	movs	r5, #0
 80080ac:	e7e7      	b.n	800807e <__ieee754_atan2+0xee>
 80080ae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80080b2:	461d      	mov	r5, r3
 80080b4:	e7ab      	b.n	800800e <__ieee754_atan2+0x7e>
 80080b6:	a314      	add	r3, pc, #80	; (adr r3, 8008108 <__ieee754_atan2+0x178>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 f8b6 	bl	8000230 <__aeabi_dsub>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	a111      	add	r1, pc, #68	; (adr r1, 8008110 <__ieee754_atan2+0x180>)
 80080ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ce:	f7f8 f8af 	bl	8000230 <__aeabi_dsub>
 80080d2:	e77f      	b.n	8007fd4 <__ieee754_atan2+0x44>
 80080d4:	a50e      	add	r5, pc, #56	; (adr r5, 8008110 <__ieee754_atan2+0x180>)
 80080d6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080da:	e798      	b.n	800800e <__ieee754_atan2+0x7e>
 80080dc:	a510      	add	r5, pc, #64	; (adr r5, 8008120 <__ieee754_atan2+0x190>)
 80080de:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080e2:	e794      	b.n	800800e <__ieee754_atan2+0x7e>
 80080e4:	2400      	movs	r4, #0
 80080e6:	2500      	movs	r5, #0
 80080e8:	e791      	b.n	800800e <__ieee754_atan2+0x7e>
 80080ea:	a50b      	add	r5, pc, #44	; (adr r5, 8008118 <__ieee754_atan2+0x188>)
 80080ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080f0:	e78d      	b.n	800800e <__ieee754_atan2+0x7e>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	54442d18 	.word	0x54442d18
 80080fc:	c00921fb 	.word	0xc00921fb
 8008100:	54442d18 	.word	0x54442d18
 8008104:	bff921fb 	.word	0xbff921fb
 8008108:	33145c07 	.word	0x33145c07
 800810c:	3ca1a626 	.word	0x3ca1a626
 8008110:	54442d18 	.word	0x54442d18
 8008114:	400921fb 	.word	0x400921fb
 8008118:	54442d18 	.word	0x54442d18
 800811c:	3ff921fb 	.word	0x3ff921fb
 8008120:	54442d18 	.word	0x54442d18
 8008124:	3fe921fb 	.word	0x3fe921fb
 8008128:	08008320 	.word	0x08008320
 800812c:	08008338 	.word	0x08008338
 8008130:	7ff00000 	.word	0x7ff00000

08008134 <__ieee754_sqrt>:
 8008134:	f8df c150 	ldr.w	ip, [pc, #336]	; 8008288 <__ieee754_sqrt+0x154>
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008140:	460b      	mov	r3, r1
 8008142:	4606      	mov	r6, r0
 8008144:	460d      	mov	r5, r1
 8008146:	460a      	mov	r2, r1
 8008148:	4607      	mov	r7, r0
 800814a:	4604      	mov	r4, r0
 800814c:	d10e      	bne.n	800816c <__ieee754_sqrt+0x38>
 800814e:	4602      	mov	r2, r0
 8008150:	f7f8 fa26 	bl	80005a0 <__aeabi_dmul>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4630      	mov	r0, r6
 800815a:	4629      	mov	r1, r5
 800815c:	f7f8 f86a 	bl	8000234 <__adddf3>
 8008160:	4606      	mov	r6, r0
 8008162:	460d      	mov	r5, r1
 8008164:	4630      	mov	r0, r6
 8008166:	4629      	mov	r1, r5
 8008168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816c:	2900      	cmp	r1, #0
 800816e:	dc0d      	bgt.n	800818c <__ieee754_sqrt+0x58>
 8008170:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008174:	ea5c 0707 	orrs.w	r7, ip, r7
 8008178:	d0f4      	beq.n	8008164 <__ieee754_sqrt+0x30>
 800817a:	b139      	cbz	r1, 800818c <__ieee754_sqrt+0x58>
 800817c:	4602      	mov	r2, r0
 800817e:	f7f8 f857 	bl	8000230 <__aeabi_dsub>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	f7f8 fb35 	bl	80007f4 <__aeabi_ddiv>
 800818a:	e7e9      	b.n	8008160 <__ieee754_sqrt+0x2c>
 800818c:	1512      	asrs	r2, r2, #20
 800818e:	d074      	beq.n	800827a <__ieee754_sqrt+0x146>
 8008190:	2000      	movs	r0, #0
 8008192:	07d5      	lsls	r5, r2, #31
 8008194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008198:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800819c:	bf5e      	ittt	pl
 800819e:	0fe3      	lsrpl	r3, r4, #31
 80081a0:	0064      	lslpl	r4, r4, #1
 80081a2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80081a6:	0fe3      	lsrs	r3, r4, #31
 80081a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80081ac:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80081b0:	2516      	movs	r5, #22
 80081b2:	4601      	mov	r1, r0
 80081b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80081b8:	1076      	asrs	r6, r6, #1
 80081ba:	0064      	lsls	r4, r4, #1
 80081bc:	188f      	adds	r7, r1, r2
 80081be:	429f      	cmp	r7, r3
 80081c0:	bfde      	ittt	le
 80081c2:	1bdb      	suble	r3, r3, r7
 80081c4:	18b9      	addle	r1, r7, r2
 80081c6:	1880      	addle	r0, r0, r2
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	3d01      	subs	r5, #1
 80081cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80081d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80081d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80081d8:	d1f0      	bne.n	80081bc <__ieee754_sqrt+0x88>
 80081da:	462a      	mov	r2, r5
 80081dc:	f04f 0e20 	mov.w	lr, #32
 80081e0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80081e4:	428b      	cmp	r3, r1
 80081e6:	eb07 0c05 	add.w	ip, r7, r5
 80081ea:	dc02      	bgt.n	80081f2 <__ieee754_sqrt+0xbe>
 80081ec:	d113      	bne.n	8008216 <__ieee754_sqrt+0xe2>
 80081ee:	45a4      	cmp	ip, r4
 80081f0:	d811      	bhi.n	8008216 <__ieee754_sqrt+0xe2>
 80081f2:	f1bc 0f00 	cmp.w	ip, #0
 80081f6:	eb0c 0507 	add.w	r5, ip, r7
 80081fa:	da43      	bge.n	8008284 <__ieee754_sqrt+0x150>
 80081fc:	2d00      	cmp	r5, #0
 80081fe:	db41      	blt.n	8008284 <__ieee754_sqrt+0x150>
 8008200:	f101 0801 	add.w	r8, r1, #1
 8008204:	1a5b      	subs	r3, r3, r1
 8008206:	4641      	mov	r1, r8
 8008208:	45a4      	cmp	ip, r4
 800820a:	bf88      	it	hi
 800820c:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008210:	eba4 040c 	sub.w	r4, r4, ip
 8008214:	443a      	add	r2, r7
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	f1be 0e01 	subs.w	lr, lr, #1
 800821c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008220:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8008224:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008228:	d1dc      	bne.n	80081e4 <__ieee754_sqrt+0xb0>
 800822a:	4323      	orrs	r3, r4
 800822c:	d006      	beq.n	800823c <__ieee754_sqrt+0x108>
 800822e:	1c54      	adds	r4, r2, #1
 8008230:	bf0b      	itete	eq
 8008232:	4672      	moveq	r2, lr
 8008234:	3201      	addne	r2, #1
 8008236:	3001      	addeq	r0, #1
 8008238:	f022 0201 	bicne.w	r2, r2, #1
 800823c:	1043      	asrs	r3, r0, #1
 800823e:	07c1      	lsls	r1, r0, #31
 8008240:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008244:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008248:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800824c:	bf48      	it	mi
 800824e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008252:	4610      	mov	r0, r2
 8008254:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8008258:	e782      	b.n	8008160 <__ieee754_sqrt+0x2c>
 800825a:	0ae3      	lsrs	r3, r4, #11
 800825c:	3915      	subs	r1, #21
 800825e:	0564      	lsls	r4, r4, #21
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0fa      	beq.n	800825a <__ieee754_sqrt+0x126>
 8008264:	02de      	lsls	r6, r3, #11
 8008266:	d50a      	bpl.n	800827e <__ieee754_sqrt+0x14a>
 8008268:	f1c2 0020 	rsb	r0, r2, #32
 800826c:	fa24 f000 	lsr.w	r0, r4, r0
 8008270:	1e55      	subs	r5, r2, #1
 8008272:	4094      	lsls	r4, r2
 8008274:	4303      	orrs	r3, r0
 8008276:	1b4a      	subs	r2, r1, r5
 8008278:	e78a      	b.n	8008190 <__ieee754_sqrt+0x5c>
 800827a:	4611      	mov	r1, r2
 800827c:	e7f0      	b.n	8008260 <__ieee754_sqrt+0x12c>
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	3201      	adds	r2, #1
 8008282:	e7ef      	b.n	8008264 <__ieee754_sqrt+0x130>
 8008284:	4688      	mov	r8, r1
 8008286:	e7bd      	b.n	8008204 <__ieee754_sqrt+0xd0>
 8008288:	7ff00000 	.word	0x7ff00000

0800828c <_init>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr

08008298 <_fini>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr
