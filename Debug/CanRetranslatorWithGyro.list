
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080075f0  080075f0  000175f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007748  08007748  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007750  08007750  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08007758  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000110  08007864  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08007864  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6f5  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002908  00000000  00000000  0002e82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00031138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  00031c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fec3  00000000  00000000  000326b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef12  00000000  00000000  0005257b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0a0d  00000000  00000000  0006148d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003824  00000000  00000000  00111ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000110 	.word	0x20000110
 8000204:	00000000 	.word	0x00000000
 8000208:	080075d4 	.word	0x080075d4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000114 	.word	0x20000114
 8000224:	080075d4 	.word	0x080075d4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_uldivmod>:
 800100c:	b953      	cbnz	r3, 8001024 <__aeabi_uldivmod+0x18>
 800100e:	b94a      	cbnz	r2, 8001024 <__aeabi_uldivmod+0x18>
 8001010:	2900      	cmp	r1, #0
 8001012:	bf08      	it	eq
 8001014:	2800      	cmpeq	r0, #0
 8001016:	bf1c      	itt	ne
 8001018:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800101c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 b96e 	b.w	8001300 <__aeabi_idiv0>
 8001024:	f1ad 0c08 	sub.w	ip, sp, #8
 8001028:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800102c:	f000 f806 	bl	800103c <__udivmoddi4>
 8001030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr

0800103c <__udivmoddi4>:
 800103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001040:	9e08      	ldr	r6, [sp, #32]
 8001042:	460d      	mov	r5, r1
 8001044:	4604      	mov	r4, r0
 8001046:	468e      	mov	lr, r1
 8001048:	2b00      	cmp	r3, #0
 800104a:	f040 8083 	bne.w	8001154 <__udivmoddi4+0x118>
 800104e:	428a      	cmp	r2, r1
 8001050:	4617      	mov	r7, r2
 8001052:	d947      	bls.n	80010e4 <__udivmoddi4+0xa8>
 8001054:	fab2 f382 	clz	r3, r2
 8001058:	b14b      	cbz	r3, 800106e <__udivmoddi4+0x32>
 800105a:	f1c3 0120 	rsb	r1, r3, #32
 800105e:	fa05 fe03 	lsl.w	lr, r5, r3
 8001062:	fa20 f101 	lsr.w	r1, r0, r1
 8001066:	409f      	lsls	r7, r3
 8001068:	ea41 0e0e 	orr.w	lr, r1, lr
 800106c:	409c      	lsls	r4, r3
 800106e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001072:	fbbe fcf8 	udiv	ip, lr, r8
 8001076:	fa1f f987 	uxth.w	r9, r7
 800107a:	fb08 e21c 	mls	r2, r8, ip, lr
 800107e:	fb0c f009 	mul.w	r0, ip, r9
 8001082:	0c21      	lsrs	r1, r4, #16
 8001084:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001088:	4290      	cmp	r0, r2
 800108a:	d90a      	bls.n	80010a2 <__udivmoddi4+0x66>
 800108c:	18ba      	adds	r2, r7, r2
 800108e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001092:	f080 8118 	bcs.w	80012c6 <__udivmoddi4+0x28a>
 8001096:	4290      	cmp	r0, r2
 8001098:	f240 8115 	bls.w	80012c6 <__udivmoddi4+0x28a>
 800109c:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a0:	443a      	add	r2, r7
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	fbb2 f0f8 	udiv	r0, r2, r8
 80010a8:	fb08 2210 	mls	r2, r8, r0, r2
 80010ac:	fb00 f109 	mul.w	r1, r0, r9
 80010b0:	b2a4      	uxth	r4, r4
 80010b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010b6:	42a1      	cmp	r1, r4
 80010b8:	d909      	bls.n	80010ce <__udivmoddi4+0x92>
 80010ba:	193c      	adds	r4, r7, r4
 80010bc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010c0:	f080 8103 	bcs.w	80012ca <__udivmoddi4+0x28e>
 80010c4:	42a1      	cmp	r1, r4
 80010c6:	f240 8100 	bls.w	80012ca <__udivmoddi4+0x28e>
 80010ca:	3802      	subs	r0, #2
 80010cc:	443c      	add	r4, r7
 80010ce:	1a64      	subs	r4, r4, r1
 80010d0:	2100      	movs	r1, #0
 80010d2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010d6:	b11e      	cbz	r6, 80010e0 <__udivmoddi4+0xa4>
 80010d8:	2200      	movs	r2, #0
 80010da:	40dc      	lsrs	r4, r3
 80010dc:	e9c6 4200 	strd	r4, r2, [r6]
 80010e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e4:	b902      	cbnz	r2, 80010e8 <__udivmoddi4+0xac>
 80010e6:	deff      	udf	#255	; 0xff
 80010e8:	fab2 f382 	clz	r3, r2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d14f      	bne.n	8001190 <__udivmoddi4+0x154>
 80010f0:	1a8d      	subs	r5, r1, r2
 80010f2:	2101      	movs	r1, #1
 80010f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010f8:	fa1f f882 	uxth.w	r8, r2
 80010fc:	fbb5 fcfe 	udiv	ip, r5, lr
 8001100:	fb0e 551c 	mls	r5, lr, ip, r5
 8001104:	fb08 f00c 	mul.w	r0, r8, ip
 8001108:	0c22      	lsrs	r2, r4, #16
 800110a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800110e:	42a8      	cmp	r0, r5
 8001110:	d907      	bls.n	8001122 <__udivmoddi4+0xe6>
 8001112:	197d      	adds	r5, r7, r5
 8001114:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001118:	d202      	bcs.n	8001120 <__udivmoddi4+0xe4>
 800111a:	42a8      	cmp	r0, r5
 800111c:	f200 80e9 	bhi.w	80012f2 <__udivmoddi4+0x2b6>
 8001120:	4694      	mov	ip, r2
 8001122:	1a2d      	subs	r5, r5, r0
 8001124:	fbb5 f0fe 	udiv	r0, r5, lr
 8001128:	fb0e 5510 	mls	r5, lr, r0, r5
 800112c:	fb08 f800 	mul.w	r8, r8, r0
 8001130:	b2a4      	uxth	r4, r4
 8001132:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001136:	45a0      	cmp	r8, r4
 8001138:	d907      	bls.n	800114a <__udivmoddi4+0x10e>
 800113a:	193c      	adds	r4, r7, r4
 800113c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x10c>
 8001142:	45a0      	cmp	r8, r4
 8001144:	f200 80d9 	bhi.w	80012fa <__udivmoddi4+0x2be>
 8001148:	4610      	mov	r0, r2
 800114a:	eba4 0408 	sub.w	r4, r4, r8
 800114e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001152:	e7c0      	b.n	80010d6 <__udivmoddi4+0x9a>
 8001154:	428b      	cmp	r3, r1
 8001156:	d908      	bls.n	800116a <__udivmoddi4+0x12e>
 8001158:	2e00      	cmp	r6, #0
 800115a:	f000 80b1 	beq.w	80012c0 <__udivmoddi4+0x284>
 800115e:	2100      	movs	r1, #0
 8001160:	e9c6 0500 	strd	r0, r5, [r6]
 8001164:	4608      	mov	r0, r1
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	fab3 f183 	clz	r1, r3
 800116e:	2900      	cmp	r1, #0
 8001170:	d14b      	bne.n	800120a <__udivmoddi4+0x1ce>
 8001172:	42ab      	cmp	r3, r5
 8001174:	d302      	bcc.n	800117c <__udivmoddi4+0x140>
 8001176:	4282      	cmp	r2, r0
 8001178:	f200 80b9 	bhi.w	80012ee <__udivmoddi4+0x2b2>
 800117c:	1a84      	subs	r4, r0, r2
 800117e:	eb65 0303 	sbc.w	r3, r5, r3
 8001182:	2001      	movs	r0, #1
 8001184:	469e      	mov	lr, r3
 8001186:	2e00      	cmp	r6, #0
 8001188:	d0aa      	beq.n	80010e0 <__udivmoddi4+0xa4>
 800118a:	e9c6 4e00 	strd	r4, lr, [r6]
 800118e:	e7a7      	b.n	80010e0 <__udivmoddi4+0xa4>
 8001190:	409f      	lsls	r7, r3
 8001192:	f1c3 0220 	rsb	r2, r3, #32
 8001196:	40d1      	lsrs	r1, r2
 8001198:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800119c:	fbb1 f0fe 	udiv	r0, r1, lr
 80011a0:	fa1f f887 	uxth.w	r8, r7
 80011a4:	fb0e 1110 	mls	r1, lr, r0, r1
 80011a8:	fa24 f202 	lsr.w	r2, r4, r2
 80011ac:	409d      	lsls	r5, r3
 80011ae:	fb00 fc08 	mul.w	ip, r0, r8
 80011b2:	432a      	orrs	r2, r5
 80011b4:	0c15      	lsrs	r5, r2, #16
 80011b6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011ba:	45ac      	cmp	ip, r5
 80011bc:	fa04 f403 	lsl.w	r4, r4, r3
 80011c0:	d909      	bls.n	80011d6 <__udivmoddi4+0x19a>
 80011c2:	197d      	adds	r5, r7, r5
 80011c4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80011c8:	f080 808f 	bcs.w	80012ea <__udivmoddi4+0x2ae>
 80011cc:	45ac      	cmp	ip, r5
 80011ce:	f240 808c 	bls.w	80012ea <__udivmoddi4+0x2ae>
 80011d2:	3802      	subs	r0, #2
 80011d4:	443d      	add	r5, r7
 80011d6:	eba5 050c 	sub.w	r5, r5, ip
 80011da:	fbb5 f1fe 	udiv	r1, r5, lr
 80011de:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011e2:	fb01 f908 	mul.w	r9, r1, r8
 80011e6:	b295      	uxth	r5, r2
 80011e8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011ec:	45a9      	cmp	r9, r5
 80011ee:	d907      	bls.n	8001200 <__udivmoddi4+0x1c4>
 80011f0:	197d      	adds	r5, r7, r5
 80011f2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80011f6:	d274      	bcs.n	80012e2 <__udivmoddi4+0x2a6>
 80011f8:	45a9      	cmp	r9, r5
 80011fa:	d972      	bls.n	80012e2 <__udivmoddi4+0x2a6>
 80011fc:	3902      	subs	r1, #2
 80011fe:	443d      	add	r5, r7
 8001200:	eba5 0509 	sub.w	r5, r5, r9
 8001204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001208:	e778      	b.n	80010fc <__udivmoddi4+0xc0>
 800120a:	f1c1 0720 	rsb	r7, r1, #32
 800120e:	408b      	lsls	r3, r1
 8001210:	fa22 fc07 	lsr.w	ip, r2, r7
 8001214:	ea4c 0c03 	orr.w	ip, ip, r3
 8001218:	fa25 f407 	lsr.w	r4, r5, r7
 800121c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001220:	fbb4 f9fe 	udiv	r9, r4, lr
 8001224:	fa1f f88c 	uxth.w	r8, ip
 8001228:	fb0e 4419 	mls	r4, lr, r9, r4
 800122c:	fa20 f307 	lsr.w	r3, r0, r7
 8001230:	fb09 fa08 	mul.w	sl, r9, r8
 8001234:	408d      	lsls	r5, r1
 8001236:	431d      	orrs	r5, r3
 8001238:	0c2b      	lsrs	r3, r5, #16
 800123a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800123e:	45a2      	cmp	sl, r4
 8001240:	fa02 f201 	lsl.w	r2, r2, r1
 8001244:	fa00 f301 	lsl.w	r3, r0, r1
 8001248:	d909      	bls.n	800125e <__udivmoddi4+0x222>
 800124a:	eb1c 0404 	adds.w	r4, ip, r4
 800124e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001252:	d248      	bcs.n	80012e6 <__udivmoddi4+0x2aa>
 8001254:	45a2      	cmp	sl, r4
 8001256:	d946      	bls.n	80012e6 <__udivmoddi4+0x2aa>
 8001258:	f1a9 0902 	sub.w	r9, r9, #2
 800125c:	4464      	add	r4, ip
 800125e:	eba4 040a 	sub.w	r4, r4, sl
 8001262:	fbb4 f0fe 	udiv	r0, r4, lr
 8001266:	fb0e 4410 	mls	r4, lr, r0, r4
 800126a:	fb00 fa08 	mul.w	sl, r0, r8
 800126e:	b2ad      	uxth	r5, r5
 8001270:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001274:	45a2      	cmp	sl, r4
 8001276:	d908      	bls.n	800128a <__udivmoddi4+0x24e>
 8001278:	eb1c 0404 	adds.w	r4, ip, r4
 800127c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001280:	d22d      	bcs.n	80012de <__udivmoddi4+0x2a2>
 8001282:	45a2      	cmp	sl, r4
 8001284:	d92b      	bls.n	80012de <__udivmoddi4+0x2a2>
 8001286:	3802      	subs	r0, #2
 8001288:	4464      	add	r4, ip
 800128a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800128e:	fba0 8902 	umull	r8, r9, r0, r2
 8001292:	eba4 040a 	sub.w	r4, r4, sl
 8001296:	454c      	cmp	r4, r9
 8001298:	46c6      	mov	lr, r8
 800129a:	464d      	mov	r5, r9
 800129c:	d319      	bcc.n	80012d2 <__udivmoddi4+0x296>
 800129e:	d016      	beq.n	80012ce <__udivmoddi4+0x292>
 80012a0:	b15e      	cbz	r6, 80012ba <__udivmoddi4+0x27e>
 80012a2:	ebb3 020e 	subs.w	r2, r3, lr
 80012a6:	eb64 0405 	sbc.w	r4, r4, r5
 80012aa:	fa04 f707 	lsl.w	r7, r4, r7
 80012ae:	fa22 f301 	lsr.w	r3, r2, r1
 80012b2:	431f      	orrs	r7, r3
 80012b4:	40cc      	lsrs	r4, r1
 80012b6:	e9c6 7400 	strd	r7, r4, [r6]
 80012ba:	2100      	movs	r1, #0
 80012bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012c0:	4631      	mov	r1, r6
 80012c2:	4630      	mov	r0, r6
 80012c4:	e70c      	b.n	80010e0 <__udivmoddi4+0xa4>
 80012c6:	468c      	mov	ip, r1
 80012c8:	e6eb      	b.n	80010a2 <__udivmoddi4+0x66>
 80012ca:	4610      	mov	r0, r2
 80012cc:	e6ff      	b.n	80010ce <__udivmoddi4+0x92>
 80012ce:	4543      	cmp	r3, r8
 80012d0:	d2e6      	bcs.n	80012a0 <__udivmoddi4+0x264>
 80012d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80012d6:	eb69 050c 	sbc.w	r5, r9, ip
 80012da:	3801      	subs	r0, #1
 80012dc:	e7e0      	b.n	80012a0 <__udivmoddi4+0x264>
 80012de:	4628      	mov	r0, r5
 80012e0:	e7d3      	b.n	800128a <__udivmoddi4+0x24e>
 80012e2:	4611      	mov	r1, r2
 80012e4:	e78c      	b.n	8001200 <__udivmoddi4+0x1c4>
 80012e6:	4681      	mov	r9, r0
 80012e8:	e7b9      	b.n	800125e <__udivmoddi4+0x222>
 80012ea:	4608      	mov	r0, r1
 80012ec:	e773      	b.n	80011d6 <__udivmoddi4+0x19a>
 80012ee:	4608      	mov	r0, r1
 80012f0:	e749      	b.n	8001186 <__udivmoddi4+0x14a>
 80012f2:	f1ac 0c02 	sub.w	ip, ip, #2
 80012f6:	443d      	add	r5, r7
 80012f8:	e713      	b.n	8001122 <__udivmoddi4+0xe6>
 80012fa:	3802      	subs	r0, #2
 80012fc:	443c      	add	r4, r7
 80012fe:	e724      	b.n	800114a <__udivmoddi4+0x10e>

08001300 <__aeabi_idiv0>:
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <BUTTON_STATE>:
#include "stm32f1xx_hal_gpio.h"
#include "button.h"

enum BUTTON num;

uint8_t BUTTON_STATE(uint8_t num) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d112      	bne.n	800133a <BUTTON_STATE+0x36>

	case CALIBRATE_MPU_BUTTON:

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001314:	2101      	movs	r1, #1
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <BUTTON_STATE+0x40>)
 8001318:	f003 f980 	bl	800461c <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <BUTTON_STATE+0x22>
			return 1;
 8001322:	2301      	movs	r3, #1
 8001324:	e009      	b.n	800133a <BUTTON_STATE+0x36>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8001326:	2101      	movs	r1, #1
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <BUTTON_STATE+0x40>)
 800132a:	f003 f977 	bl	800461c <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <BUTTON_STATE+0x34>
			return 0;
 8001334:	2300      	movs	r3, #0
 8001336:	e000      	b.n	800133a <BUTTON_STATE+0x36>
		}
		break;
 8001338:	bf00      	nop
	}
};
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40011000 	.word	0x40011000

08001348 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan2;

CAN_FilterTypeDef sFilterConfig;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <MX_CAN1_Init+0x100>)
 800134e:	4a3f      	ldr	r2, [pc, #252]	; (800144c <MX_CAN1_Init+0x104>)
 8001350:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 1;
 8001352:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <MX_CAN1_Init+0x100>)
 8001354:	2201      	movs	r2, #1
 8001356:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <MX_CAN1_Init+0x100>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800135e:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <MX_CAN1_Init+0x100>)
 8001360:	2200      	movs	r2, #0
 8001362:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <MX_CAN1_Init+0x100>)
 8001366:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800136a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <MX_CAN1_Init+0x100>)
 800136e:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8001372:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <MX_CAN1_Init+0x100>)
 8001376:	2200      	movs	r2, #0
 8001378:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <MX_CAN1_Init+0x100>)
 800137c:	2201      	movs	r2, #1
 800137e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001380:	4b31      	ldr	r3, [pc, #196]	; (8001448 <MX_CAN1_Init+0x100>)
 8001382:	2200      	movs	r2, #0
 8001384:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001386:	4b30      	ldr	r3, [pc, #192]	; (8001448 <MX_CAN1_Init+0x100>)
 8001388:	2200      	movs	r2, #0
 800138a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800138c:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <MX_CAN1_Init+0x100>)
 800138e:	2200      	movs	r2, #0
 8001390:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <MX_CAN1_Init+0x100>)
 8001394:	2201      	movs	r2, #1
 8001396:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001398:	482b      	ldr	r0, [pc, #172]	; (8001448 <MX_CAN1_Init+0x100>)
 800139a:	f001 fe67 	bl	800306c <HAL_CAN_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_CAN1_Init+0x60>
		Error_Handler();
 80013a4:	f001 f920 	bl	80025e8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	sFilterConfig.FilterBank = 0;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <MX_CAN1_Init+0x108>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <MX_CAN1_Init+0x108>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <MX_CAN1_Init+0x108>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <MX_CAN1_Init+0x108>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_CAN1_Init+0x108>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_CAN1_Init+0x108>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MX_CAN1_Init+0x108>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_CAN1_Init+0x108>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_CAN1_Init+0x108>)
 80013da:	2201      	movs	r2, #1
 80013dc:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_CAN1_Init+0x108>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80013e4:	491a      	ldr	r1, [pc, #104]	; (8001450 <MX_CAN1_Init+0x108>)
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <MX_CAN1_Init+0x100>)
 80013e8:	f001 ff3c 	bl	8003264 <HAL_CAN_ConfigFilter>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_CAN1_Init+0xae>
		Error_Handler();
 80013f2:	f001 f8f9 	bl	80025e8 <Error_Handler>
	}

	sFilterConfig.FilterBank = 14;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_CAN1_Init+0x108>)
 80013f8:	220e      	movs	r2, #14
 80013fa:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_CAN1_Init+0x108>)
 80013fe:	2201      	movs	r2, #1
 8001400:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_CAN1_Init+0x108>)
 8001404:	2201      	movs	r2, #1
 8001406:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_CAN1_Init+0x108>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x000;
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_CAN1_Init+0x108>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_CAN1_Init+0x108>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_CAN1_Init+0x108>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_CAN1_Init+0x108>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_CAN1_Init+0x108>)
 8001428:	2201      	movs	r2, #1
 800142a:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_CAN1_Init+0x108>)
 800142e:	220e      	movs	r2, #14
 8001430:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001432:	4907      	ldr	r1, [pc, #28]	; (8001450 <MX_CAN1_Init+0x108>)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_CAN1_Init+0x100>)
 8001436:	f001 ff15 	bl	8003264 <HAL_CAN_ConfigFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_CAN1_Init+0xfc>
		Error_Handler();
 8001440:	f001 f8d2 	bl	80025e8 <Error_Handler>
	}
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200001a8 	.word	0x200001a8
 800144c:	40006400 	.word	0x40006400
 8001450:	20000158 	.word	0x20000158

08001454 <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_CAN2_Init+0x64>)
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <MX_CAN2_Init+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 5;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_CAN2_Init+0x64>)
 8001460:	2205      	movs	r2, #5
 8001462:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_CAN2_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_CAN2_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_CAN2_Init+0x64>)
 8001472:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001476:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_CAN2_Init+0x64>)
 800147a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800147e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_CAN2_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_CAN2_Init+0x64>)
 8001488:	2201      	movs	r2, #1
 800148a:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_CAN2_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_CAN2_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_CAN2_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_CAN2_Init+0x64>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_CAN2_Init+0x64>)
 80014a6:	f001 fde1 	bl	800306c <HAL_CAN_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_CAN2_Init+0x60>
		Error_Handler();
 80014b0:	f001 f89a 	bl	80025e8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */

	/* USER CODE END CAN2_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000180 	.word	0x20000180
 80014bc:	40006800 	.word	0x40006800

080014c0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a5d      	ldr	r2, [pc, #372]	; (8001650 <HAL_CAN_MspInit+0x190>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d15b      	bne.n	8001598 <HAL_CAN_MspInit+0xd8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80014e0:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <HAL_CAN_MspInit+0x194>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a5b      	ldr	r2, [pc, #364]	; (8001654 <HAL_CAN_MspInit+0x194>)
 80014e8:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80014ea:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <HAL_CAN_MspInit+0x194>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10b      	bne.n	800150a <HAL_CAN_MspInit+0x4a>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80014f2:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80014f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_CAN_MspInit+0x198>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <HAL_CAN_MspInit+0x198>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_CAN_MspInit+0x198>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6193      	str	r3, [r2, #24]
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_CAN_MspInit+0x198>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001526:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4849      	ldr	r0, [pc, #292]	; (800165c <HAL_CAN_MspInit+0x19c>)
 8001538:	f002 feec 	bl	8004314 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4842      	ldr	r0, [pc, #264]	; (800165c <HAL_CAN_MspInit+0x19c>)
 8001552:	f002 fedf 	bl	8004314 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2013      	movs	r0, #19
 800155c:	f002 fcb3 	bl	8003ec6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001560:	2013      	movs	r0, #19
 8001562:	f002 fccc 	bl	8003efe <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2014      	movs	r0, #20
 800156c:	f002 fcab 	bl	8003ec6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001570:	2014      	movs	r0, #20
 8001572:	f002 fcc4 	bl	8003efe <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2015      	movs	r0, #21
 800157c:	f002 fca3 	bl	8003ec6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001580:	2015      	movs	r0, #21
 8001582:	f002 fcbc 	bl	8003efe <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2016      	movs	r0, #22
 800158c:	f002 fc9b 	bl	8003ec6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001590:	2016      	movs	r0, #22
 8001592:	f002 fcb4 	bl	8003efe <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8001596:	e057      	b.n	8001648 <HAL_CAN_MspInit+0x188>
	} else if (canHandle->Instance == CAN2) {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_CAN_MspInit+0x1a0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d152      	bne.n	8001648 <HAL_CAN_MspInit+0x188>
		__HAL_RCC_CAN2_CLK_ENABLE();
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a2c      	ldr	r2, [pc, #176]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_CAN_MspInit+0x194>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a24      	ldr	r2, [pc, #144]	; (8001654 <HAL_CAN_MspInit+0x194>)
 80015c2:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_CAN_MspInit+0x194>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10b      	bne.n	80015e4 <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d6:	61d3      	str	r3, [r2, #28]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_CAN_MspInit+0x198>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015fc:	2320      	movs	r3, #32
 80015fe:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4815      	ldr	r0, [pc, #84]	; (8001664 <HAL_CAN_MspInit+0x1a4>)
 8001610:	f002 fe80 	bl	8004314 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001614:	2340      	movs	r3, #64	; 0x40
 8001616:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <HAL_CAN_MspInit+0x1a4>)
 8001628:	f002 fe74 	bl	8004314 <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_CAN2_ENABLE();
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_CAN_MspInit+0x1a8>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001634:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_CAN_MspInit+0x1a8>)
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	6053      	str	r3, [r2, #4]
}
 8001648:	bf00      	nop
 800164a:	3730      	adds	r7, #48	; 0x30
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40006400 	.word	0x40006400
 8001654:	2000012c 	.word	0x2000012c
 8001658:	40021000 	.word	0x40021000
 800165c:	40010800 	.word	0x40010800
 8001660:	40006800 	.word	0x40006800
 8001664:	40010c00 	.word	0x40010c00
 8001668:	40010000 	.word	0x40010000

0800166c <EEPROM_Init>:
// - set global variables ValidPage, ReceivingPage and ErasedPage
// - build address index
// - resume page transfer if needed
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_Init() {
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
	EEPROM_Result result;

	//unlock the flash memory
	HAL_FLASH_Unlock();
 8001672:	f002 fccf 	bl	8004014 <HAL_FLASH_Unlock>

	//read each page status and check if valid
	EEPROM_PageStatus PageStatus0 = *((__IO uint16_t*) EEPROM_PAGE0);
 8001676:	4b5c      	ldr	r3, [pc, #368]	; (80017e8 <EEPROM_Init+0x17c>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	83fb      	strh	r3, [r7, #30]
	EEPROM_PageStatus PageStatus1 = *((__IO uint16_t*) EEPROM_PAGE1);
 800167c:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <EEPROM_Init+0x180>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	83bb      	strh	r3, [r7, #28]
	uint8_t InvalidState = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 != EEPROM_VALID && PageStatus0 != EEPROM_RECEIVING
 8001686:	8bfb      	ldrh	r3, [r7, #30]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00b      	beq.n	80016a4 <EEPROM_Init+0x38>
 800168c:	8bfb      	ldrh	r3, [r7, #30]
 800168e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001692:	4293      	cmp	r3, r2
 8001694:	d006      	beq.n	80016a4 <EEPROM_Init+0x38>
			&& PageStatus0 != EEPROM_ERASED)
 8001696:	8bfb      	ldrh	r3, [r7, #30]
 8001698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169c:	4293      	cmp	r3, r2
 800169e:	d001      	beq.n	80016a4 <EEPROM_Init+0x38>
		InvalidState = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	76fb      	strb	r3, [r7, #27]
	if (PageStatus1 != EEPROM_VALID && PageStatus1 != EEPROM_RECEIVING
 80016a4:	8bbb      	ldrh	r3, [r7, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <EEPROM_Init+0x56>
 80016aa:	8bbb      	ldrh	r3, [r7, #28]
 80016ac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d006      	beq.n	80016c2 <EEPROM_Init+0x56>
			&& PageStatus1 != EEPROM_ERASED)
 80016b4:	8bbb      	ldrh	r3, [r7, #28]
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d001      	beq.n	80016c2 <EEPROM_Init+0x56>
		InvalidState = 1;
 80016be:	2301      	movs	r3, #1
 80016c0:	76fb      	strb	r3, [r7, #27]
	if (PageStatus0 == PageStatus1)
 80016c2:	8bfa      	ldrh	r2, [r7, #30]
 80016c4:	8bbb      	ldrh	r3, [r7, #28]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d101      	bne.n	80016ce <EEPROM_Init+0x62>
		InvalidState = 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	76fb      	strb	r3, [r7, #27]

	// if invalid page status, format EEPROM (erase both pages and set page0 as valid)
	if (InvalidState) {
 80016ce:	7efb      	ldrb	r3, [r7, #27]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d029      	beq.n	8001728 <EEPROM_Init+0xbc>
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
		EraseDefinitions.Banks = FLASH_BANK_1;
 80016d8:	2301      	movs	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
		EraseDefinitions.PageAddress = EEPROM_PAGE0;
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <EEPROM_Init+0x17c>)
 80016de:	613b      	str	r3, [r7, #16]
		EraseDefinitions.NbPages = 2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
		uint32_t PageError;

		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 80016e4:	1d3a      	adds	r2, r7, #4
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fd69 	bl	80041c4 <HAL_FLASHEx_Erase>
 80016f2:	4603      	mov	r3, r0
 80016f4:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 80016f6:	7ebb      	ldrb	r3, [r7, #26]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <EEPROM_Init+0x94>
			return result;
 80016fc:	7ebb      	ldrb	r3, [r7, #26]
 80016fe:	e06e      	b.n	80017de <EEPROM_Init+0x172>

		result = HAL_FLASH_Program(EEPROM_SIZE16, EEPROM_PAGE0, EEPROM_VALID);
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	4937      	ldr	r1, [pc, #220]	; (80017e8 <EEPROM_Init+0x17c>)
 800170a:	2001      	movs	r0, #1
 800170c:	f002 fc12 	bl	8003f34 <HAL_FLASH_Program>
 8001710:	4603      	mov	r3, r0
 8001712:	76bb      	strb	r3, [r7, #26]
		if (result != EEPROM_SUCCESS)
 8001714:	7ebb      	ldrb	r3, [r7, #26]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <EEPROM_Init+0xb2>
			return result;
 800171a:	7ebb      	ldrb	r3, [r7, #26]
 800171c:	e05f      	b.n	80017de <EEPROM_Init+0x172>

		PageStatus0 = EEPROM_VALID;
 800171e:	2300      	movs	r3, #0
 8001720:	83fb      	strh	r3, [r7, #30]
		PageStatus1 = EEPROM_ERASED;
 8001722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001726:	83bb      	strh	r3, [r7, #28]
	}

	//set global variables ValidPage, ReceivingPage and ErasedPage (one stays EEPROM_PAGE_NONE)
	if (PageStatus0 == EEPROM_VALID)
 8001728:	8bfb      	ldrh	r3, [r7, #30]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <EEPROM_Init+0xc8>
		EEPROM_ValidPage = EEPROM_PAGE0;
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <EEPROM_Init+0x184>)
 8001730:	4a2d      	ldr	r2, [pc, #180]	; (80017e8 <EEPROM_Init+0x17c>)
 8001732:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_VALID)
 8001734:	8bbb      	ldrh	r3, [r7, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <EEPROM_Init+0xd4>
		EEPROM_ValidPage = EEPROM_PAGE1;
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <EEPROM_Init+0x184>)
 800173c:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <EEPROM_Init+0x180>)
 800173e:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_RECEIVING)
 8001740:	8bfb      	ldrh	r3, [r7, #30]
 8001742:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001746:	4293      	cmp	r3, r2
 8001748:	d102      	bne.n	8001750 <EEPROM_Init+0xe4>
		EEPROM_ReceivingPage = EEPROM_PAGE0;
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <EEPROM_Init+0x188>)
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <EEPROM_Init+0x17c>)
 800174e:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_RECEIVING)
 8001750:	8bbb      	ldrh	r3, [r7, #28]
 8001752:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001756:	4293      	cmp	r3, r2
 8001758:	d102      	bne.n	8001760 <EEPROM_Init+0xf4>
		EEPROM_ReceivingPage = EEPROM_PAGE1;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <EEPROM_Init+0x188>)
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <EEPROM_Init+0x180>)
 800175e:	601a      	str	r2, [r3, #0]
	if (PageStatus0 == EEPROM_ERASED)
 8001760:	8bfb      	ldrh	r3, [r7, #30]
 8001762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001766:	4293      	cmp	r3, r2
 8001768:	d102      	bne.n	8001770 <EEPROM_Init+0x104>
		EEPROM_ErasedPage = EEPROM_PAGE0;
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <EEPROM_Init+0x18c>)
 800176c:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <EEPROM_Init+0x17c>)
 800176e:	601a      	str	r2, [r3, #0]
	if (PageStatus1 == EEPROM_ERASED)
 8001770:	8bbb      	ldrh	r3, [r7, #28]
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	4293      	cmp	r3, r2
 8001778:	d102      	bne.n	8001780 <EEPROM_Init+0x114>
		EEPROM_ErasedPage = EEPROM_PAGE1;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <EEPROM_Init+0x18c>)
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <EEPROM_Init+0x180>)
 800177e:	601a      	str	r2, [r3, #0]

	//build address index (addresses from receiving page are dominant)
	EEPROM_PageToIndex(EEPROM_ValidPage);
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <EEPROM_Init+0x184>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fa93 	bl	8001cb0 <EEPROM_PageToIndex>
	EEPROM_PageToIndex(EEPROM_ReceivingPage);
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <EEPROM_Init+0x188>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa8e 	bl	8001cb0 <EEPROM_PageToIndex>

	//if needed, resume page transfer or just mark receiving page as valid
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE) {
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <EEPROM_Init+0x188>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01f      	beq.n	80017dc <EEPROM_Init+0x170>
		if (EEPROM_ValidPage == EEPROM_PAGE_NONE) {
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <EEPROM_Init+0x184>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10c      	bne.n	80017be <EEPROM_Init+0x152>
			result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <EEPROM_Init+0x188>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f9e4 	bl	8001b78 <EEPROM_SetPageStatus>
 80017b0:	4603      	mov	r3, r0
 80017b2:	76bb      	strb	r3, [r7, #26]
			if (result != EEPROM_SUCCESS)
 80017b4:	7ebb      	ldrb	r3, [r7, #26]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d010      	beq.n	80017dc <EEPROM_Init+0x170>
				return result;
 80017ba:	7ebb      	ldrb	r3, [r7, #26]
 80017bc:	e00f      	b.n	80017de <EEPROM_Init+0x172>
		} else {
			result = EEPROM_PageTransfer(EEPROM_ValidPage,
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <EEPROM_Init+0x184>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <EEPROM_Init+0x188>)
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f96d 	bl	8001aa8 <EEPROM_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	76bb      	strb	r3, [r7, #26]
					EEPROM_ReceivingPage);
			if (result != EEPROM_SUCCESS)
 80017d2:	7ebb      	ldrb	r3, [r7, #26]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <EEPROM_Init+0x170>
				return result;
 80017d8:	7ebb      	ldrb	r3, [r7, #26]
 80017da:	e000      	b.n	80017de <EEPROM_Init+0x172>
		}
	}

	return EEPROM_SUCCESS;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	0800f000 	.word	0x0800f000
 80017ec:	0800f800 	.word	0x0800f800
 80017f0:	20000138 	.word	0x20000138
 80017f4:	2000013c 	.word	0x2000013c
 80017f8:	20000140 	.word	0x20000140

080017fc <EEPROM_ReadVariable>:
// - read variable value from physical address with right size
//
// VariableName:	name (number) of the variable to read
// Value:			outputs the variable value
// return:			EEPROM_SUCCESS, EEPROM_INVALID_NAME, EEPROM_NOT_ASSIGNED
EEPROM_Result EEPROM_ReadVariable(uint16_t VariableName, EEPROM_Value *Value) {
 80017fc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	6039      	str	r1, [r7, #0]
 8001808:	80fb      	strh	r3, [r7, #6]
	//check if variable name exists
	if (VariableName >= EEPROM_VARIABLE_COUNT)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d901      	bls.n	8001814 <EEPROM_ReadVariable+0x18>
		return EEPROM_INVALID_NAME;
 8001810:	2306      	movs	r3, #6
 8001812:	e041      	b.n	8001898 <EEPROM_ReadVariable+0x9c>

	//check if variable was assigned
	uint32_t Address = EEPROM_START_ADDRESS + EEPROM_Index[VariableName];
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <EEPROM_ReadVariable+0xa8>)
 8001818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001820:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8001824:	60fb      	str	r3, [r7, #12]
	if (Address == EEPROM_PAGE0)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <EEPROM_ReadVariable+0xac>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <EEPROM_ReadVariable+0x36>
		return EEPROM_NOT_ASSIGNED;
 800182e:	2305      	movs	r3, #5
 8001830:	e032      	b.n	8001898 <EEPROM_ReadVariable+0x9c>

	//read variable value from physical address with right size
	switch (EEPROM_SizeTable[VariableName]) {
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <EEPROM_ReadVariable+0xb0>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	2b03      	cmp	r3, #3
 800183a:	d011      	beq.n	8001860 <EEPROM_ReadVariable+0x64>
 800183c:	2b03      	cmp	r3, #3
 800183e:	dc28      	bgt.n	8001892 <EEPROM_ReadVariable+0x96>
 8001840:	2b01      	cmp	r3, #1
 8001842:	d002      	beq.n	800184a <EEPROM_ReadVariable+0x4e>
 8001844:	2b02      	cmp	r3, #2
 8001846:	d006      	beq.n	8001856 <EEPROM_ReadVariable+0x5a>
 8001848:	e023      	b.n	8001892 <EEPROM_ReadVariable+0x96>
	case EEPROM_SIZE16:
		(*Value).uInt16 = *((__IO uint16_t*) Address);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	b29a      	uxth	r2, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	801a      	strh	r2, [r3, #0]
		break;
 8001854:	e01f      	b.n	8001896 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE32:
		(*Value).uInt32 = *((__IO uint32_t*) Address);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
		break;
 800185e:	e01a      	b.n	8001896 <EEPROM_ReadVariable+0x9a>
	case EEPROM_SIZE64:
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f04f 0100 	mov.w	r1, #0
				| ((uint64_t) *((__IO uint32_t*) (Address + 4)) << 32);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3304      	adds	r3, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4698      	mov	r8, r3
 8001872:	f04f 0900 	mov.w	r9, #0
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	4643      	mov	r3, r8
 8001880:	2200      	movs	r2, #0
 8001882:	ea40 0402 	orr.w	r4, r0, r2
 8001886:	ea41 0503 	orr.w	r5, r1, r3
		(*Value).uInt64 = *((__IO uint32_t*) Address)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 8001890:	e001      	b.n	8001896 <EEPROM_ReadVariable+0x9a>
	default:
		return EEPROM_NOT_ASSIGNED;
 8001892:	2305      	movs	r3, #5
 8001894:	e000      	b.n	8001898 <EEPROM_ReadVariable+0x9c>
	}

	return EEPROM_SUCCESS;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80018a2:	4770      	bx	lr
 80018a4:	20000134 	.word	0x20000134
 80018a8:	0800f000 	.word	0x0800f000
 80018ac:	20000130 	.word	0x20000130

080018b0 <EEPROM_WriteVariable>:
// VariableName:	name (number) of the variable to write
// Value:			value to be written
// Size:			size of "Value" as EEPROM_Size
// return:			EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
EEPROM_Result EEPROM_WriteVariable(uint16_t VariableName, EEPROM_Value Value,
		uint8_t Size) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	4601      	mov	r1, r0
 80018b8:	e9c7 2300 	strd	r2, r3, [r7]
 80018bc:	460b      	mov	r3, r1
 80018be:	81fb      	strh	r3, [r7, #14]
	EEPROM_Result result;

	//get writing page's end address (prefer writing to receiving page)
	EEPROM_Page WritingPage = EEPROM_ValidPage;
 80018c0:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <EEPROM_WriteVariable+0x1e0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
	if (EEPROM_ReceivingPage != EEPROM_PAGE_NONE)
 80018c6:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <EEPROM_WriteVariable+0x1e4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <EEPROM_WriteVariable+0x24>
		WritingPage = EEPROM_ReceivingPage;
 80018ce:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <EEPROM_WriteVariable+0x1e4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
	if (WritingPage == EEPROM_PAGE_NONE)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <EEPROM_WriteVariable+0x2e>
		return EEPROM_NO_VALID_PAGE;
 80018da:	2304      	movs	r3, #4
 80018dc:	e0d3      	b.n	8001a86 <EEPROM_WriteVariable+0x1d6>
	uint32_t PageEndAddress = WritingPage + FLASH_PAGE_SIZE;
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e4:	61bb      	str	r3, [r7, #24]

	//calculate memory usage of variable
	uint8_t Bytes = 2 + (1 << Size);
 80018e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018ea:	2201      	movs	r2, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3302      	adds	r3, #2
 80018f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (Size == EEPROM_SIZE_DELETED)
 80018f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <EEPROM_WriteVariable+0x56>
		Bytes = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//check if enough free space or page full
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8001906:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <EEPROM_WriteVariable+0x6e>
 800190e:	4b62      	ldr	r3, [pc, #392]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	1ad2      	subs	r2, r2, r3
 8001916:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800191a:	429a      	cmp	r2, r3
 800191c:	d25d      	bcs.n	80019da <EEPROM_WriteVariable+0x12a>
		//check if data is too much to store on one page
		uint16_t RequiredMemory = 2;
 800191e:	2302      	movs	r3, #2
 8001920:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	83fb      	strh	r3, [r7, #30]
 8001926:	e023      	b.n	8001970 <EEPROM_WriteVariable+0xc0>
			if (i == VariableName)
 8001928:	8bfa      	ldrh	r2, [r7, #30]
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	429a      	cmp	r2, r3
 800192e:	d10b      	bne.n	8001948 <EEPROM_WriteVariable+0x98>
				RequiredMemory += 2 + (1 << Size);
 8001930:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001934:	2201      	movs	r2, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	8c3b      	ldrh	r3, [r7, #32]
 800193e:	4413      	add	r3, r2
 8001940:	b29b      	uxth	r3, r3
 8001942:	3302      	adds	r3, #2
 8001944:	843b      	strh	r3, [r7, #32]
 8001946:	e010      	b.n	800196a <EEPROM_WriteVariable+0xba>
			else if (EEPROM_SizeTable[i] != EEPROM_SIZE_DELETED)
 8001948:	8bfb      	ldrh	r3, [r7, #30]
 800194a:	4a54      	ldr	r2, [pc, #336]	; (8001a9c <EEPROM_WriteVariable+0x1ec>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <EEPROM_WriteVariable+0xba>
				RequiredMemory += 2 + (1 << EEPROM_SizeTable[i]);
 8001952:	8bfb      	ldrh	r3, [r7, #30]
 8001954:	4a51      	ldr	r2, [pc, #324]	; (8001a9c <EEPROM_WriteVariable+0x1ec>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	461a      	mov	r2, r3
 800195a:	2301      	movs	r3, #1
 800195c:	4093      	lsls	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	8c3b      	ldrh	r3, [r7, #32]
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	3302      	adds	r3, #2
 8001968:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 800196a:	8bfb      	ldrh	r3, [r7, #30]
 800196c:	3301      	adds	r3, #1
 800196e:	83fb      	strh	r3, [r7, #30]
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d9d8      	bls.n	8001928 <EEPROM_WriteVariable+0x78>
		}
		if (RequiredMemory > FLASH_PAGE_SIZE)
 8001976:	8c3b      	ldrh	r3, [r7, #32]
 8001978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800197c:	d901      	bls.n	8001982 <EEPROM_WriteVariable+0xd2>
			return EEPROM_FULL;
 800197e:	2307      	movs	r3, #7
 8001980:	e081      	b.n	8001a86 <EEPROM_WriteVariable+0x1d6>

		//mark the empty page as receiving
		result = EEPROM_SetPageStatus(EEPROM_ErasedPage, EEPROM_RECEIVING);
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <EEPROM_WriteVariable+0x1f0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f8f4 	bl	8001b78 <EEPROM_SetPageStatus>
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <EEPROM_WriteVariable+0xee>
			return result;
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	e073      	b.n	8001a86 <EEPROM_WriteVariable+0x1d6>

		//change next index to receiving page
		EEPROM_NextIndex = EEPROM_ReceivingPage + 2;
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <EEPROM_WriteVariable+0x1e4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	3302      	adds	r3, #2
 80019a4:	4a3c      	ldr	r2, [pc, #240]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 80019a6:	6013      	str	r3, [r2, #0]

		//write the variable to receiving page (by calling this function again)
		result = EEPROM_WriteVariable(VariableName, Value, Size);
 80019a8:	89f9      	ldrh	r1, [r7, #14]
 80019aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019b4:	4608      	mov	r0, r1
 80019b6:	f7ff ff7b 	bl	80018b0 <EEPROM_WriteVariable>
 80019ba:	4603      	mov	r3, r0
 80019bc:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <EEPROM_WriteVariable+0x118>
			return result;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	e05e      	b.n	8001a86 <EEPROM_WriteVariable+0x1d6>

		//do page transfer
		result = EEPROM_PageTransfer();
 80019c8:	f000 f86e 	bl	8001aa8 <EEPROM_PageTransfer>
 80019cc:	4603      	mov	r3, r0
 80019ce:	75fb      	strb	r3, [r7, #23]
		if (result != EEPROM_SUCCESS)
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d055      	beq.n	8001a82 <EEPROM_WriteVariable+0x1d2>
			return result;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	e055      	b.n	8001a86 <EEPROM_WriteVariable+0x1d6>
	}

	//else (if enough space)
	else {
		//write variable value
		if (Size != EEPROM_SIZE_DELETED) {
 80019da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00f      	beq.n	8001a02 <EEPROM_WriteVariable+0x152>
			result = HAL_FLASH_Program(Size, EEPROM_NextIndex + 2,
 80019e2:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1c99      	adds	r1, r3, #2
 80019ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f0:	f002 faa0 	bl	8003f34 <HAL_FLASH_Program>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75fb      	strb	r3, [r7, #23]
					Value.uInt64);
			if (result != EEPROM_SUCCESS)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <EEPROM_WriteVariable+0x152>
				return result;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	e041      	b.n	8001a86 <EEPROM_WriteVariable+0x1d6>
		}

		//create and write variable header (size and name)
		uint16_t VariableHeader = VariableName + (Size << 14);
 8001a02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	039b      	lsls	r3, r3, #14
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	4413      	add	r3, r2
 8001a10:	82bb      	strh	r3, [r7, #20]
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, EEPROM_NextIndex,
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	8aba      	ldrh	r2, [r7, #20]
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f002 fa89 	bl	8003f34 <HAL_FLASH_Program>
 8001a22:	4603      	mov	r3, r0
 8001a24:	75fb      	strb	r3, [r7, #23]
				VariableHeader);
		if (result != EEPROM_SUCCESS)
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <EEPROM_WriteVariable+0x180>
			return result;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	e02a      	b.n	8001a86 <EEPROM_WriteVariable+0x1d6>

		//update index & size table
		EEPROM_Index[VariableName] =
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
		EEPROM_Index[VariableName] =
 8001a36:	89fa      	ldrh	r2, [r7, #14]
				EEPROM_NextIndex + 2 - EEPROM_START_ADDRESS;
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	b299      	uxth	r1, r3
		EEPROM_Index[VariableName] =
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <EEPROM_WriteVariable+0x1f4>)
 8001a42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		EEPROM_SizeTable[VariableName] = Size;
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	4914      	ldr	r1, [pc, #80]	; (8001a9c <EEPROM_WriteVariable+0x1ec>)
 8001a4a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a4e:	54ca      	strb	r2, [r1, r3]
		if (Size == EEPROM_SIZE_DELETED)
 8001a50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d104      	bne.n	8001a62 <EEPROM_WriteVariable+0x1b2>
			EEPROM_Index[VariableName] = 0;
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <EEPROM_WriteVariable+0x1f4>)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		//update next index
		EEPROM_NextIndex += Bytes;
 8001a62:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001a6e:	6013      	str	r3, [r2, #0]
		if (EEPROM_NextIndex >= PageEndAddress)
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d804      	bhi.n	8001a84 <EEPROM_WriteVariable+0x1d4>
			EEPROM_NextIndex = 0;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <EEPROM_WriteVariable+0x1e8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	e000      	b.n	8001a84 <EEPROM_WriteVariable+0x1d4>
	if (EEPROM_NextIndex == 0 || PageEndAddress - EEPROM_NextIndex < Bytes) {
 8001a82:	bf00      	nop
	}

	return EEPROM_SUCCESS;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000138 	.word	0x20000138
 8001a94:	2000013c 	.word	0x2000013c
 8001a98:	20000144 	.word	0x20000144
 8001a9c:	20000130 	.word	0x20000130
 8001aa0:	20000140 	.word	0x20000140
 8001aa4:	20000134 	.word	0x20000134

08001aa8 <EEPROM_PageTransfer>:
//		- write variable to receiving page
// - erase source page
// - mark receiving page as valid
//
// return: EEPROM_SUCCESS, EEPROM_NO_VALID_PAGE, EEPROM_FULL, EEPROM_ERROR, EEPROM_BUSY, EEPROM_TIMEOUT
static EEPROM_Result EEPROM_PageTransfer() {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af02      	add	r7, sp, #8
	EEPROM_Result result;
	EEPROM_Value Value;

	//get start & end address of valid page (source) (as offset to EEPROM start)
	uint16_t StartAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <EEPROM_PageTransfer+0xc0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab8:	81bb      	strh	r3, [r7, #12]
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
			+ FLASH_PAGE_SIZE;
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <EEPROM_PageTransfer+0xc0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
	uint16_t EndAddress = EEPROM_ValidPage - EEPROM_START_ADDRESS
 8001ac0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001ac4:	817b      	strh	r3, [r7, #10]

	//copy each variable
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	81fb      	strh	r3, [r7, #14]
 8001aca:	e02a      	b.n	8001b22 <EEPROM_PageTransfer+0x7a>
		//check if is stored on the source page
		if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress) {
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <EEPROM_PageTransfer+0xc4>)
 8001ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad4:	89ba      	ldrh	r2, [r7, #12]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d220      	bcs.n	8001b1c <EEPROM_PageTransfer+0x74>
 8001ada:	89fb      	ldrh	r3, [r7, #14]
 8001adc:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <EEPROM_PageTransfer+0xc4>)
 8001ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae2:	897a      	ldrh	r2, [r7, #10]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d919      	bls.n	8001b1c <EEPROM_PageTransfer+0x74>
			//read variable value (if possible)
			if (EEPROM_ReadVariable(i, &Value) == EEPROM_SUCCESS) {
 8001ae8:	463a      	mov	r2, r7
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fe84 	bl	80017fc <EEPROM_ReadVariable>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d110      	bne.n	8001b1c <EEPROM_PageTransfer+0x74>
				//write variable to receiving page
				result = EEPROM_WriteVariable(i, Value, EEPROM_SizeTable[i]);
 8001afa:	89fb      	ldrh	r3, [r7, #14]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <EEPROM_PageTransfer+0xc8>)
 8001afe:	5cd3      	ldrb	r3, [r2, r3]
 8001b00:	89f9      	ldrh	r1, [r7, #14]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	f7ff fed1 	bl	80018b0 <EEPROM_WriteVariable>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	727b      	strb	r3, [r7, #9]
				if (result != EEPROM_SUCCESS)
 8001b12:	7a7b      	ldrb	r3, [r7, #9]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <EEPROM_PageTransfer+0x74>
					return result;
 8001b18:	7a7b      	ldrb	r3, [r7, #9]
 8001b1a:	e021      	b.n	8001b60 <EEPROM_PageTransfer+0xb8>
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	81fb      	strh	r3, [r7, #14]
 8001b22:	89fb      	ldrh	r3, [r7, #14]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d9d1      	bls.n	8001acc <EEPROM_PageTransfer+0x24>
			}
		}
	}

	//erase source page
	result = EEPROM_SetPageStatus(EEPROM_ValidPage, EEPROM_ERASED);
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <EEPROM_PageTransfer+0xc0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f821 	bl	8001b78 <EEPROM_SetPageStatus>
 8001b36:	4603      	mov	r3, r0
 8001b38:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b3a:	7a7b      	ldrb	r3, [r7, #9]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <EEPROM_PageTransfer+0x9c>
		return result;
 8001b40:	7a7b      	ldrb	r3, [r7, #9]
 8001b42:	e00d      	b.n	8001b60 <EEPROM_PageTransfer+0xb8>

	//mark receiving page as valid
	result = EEPROM_SetPageStatus(EEPROM_ReceivingPage, EEPROM_VALID);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <EEPROM_PageTransfer+0xcc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f814 	bl	8001b78 <EEPROM_SetPageStatus>
 8001b50:	4603      	mov	r3, r0
 8001b52:	727b      	strb	r3, [r7, #9]
	if (result != EEPROM_SUCCESS)
 8001b54:	7a7b      	ldrb	r3, [r7, #9]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <EEPROM_PageTransfer+0xb6>
		return result;
 8001b5a:	7a7b      	ldrb	r3, [r7, #9]
 8001b5c:	e000      	b.n	8001b60 <EEPROM_PageTransfer+0xb8>

	return EEPROM_SUCCESS;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000138 	.word	0x20000138
 8001b6c:	20000134 	.word	0x20000134
 8001b70:	20000130 	.word	0x20000130
 8001b74:	2000013c 	.word	0x2000013c

08001b78 <EEPROM_SetPageStatus>:
//
// Page:		page to change the status (as EEPROM_Page)
// PageStatus:	page status to set for page (as EEPROM_PageStatus)
// return:		EEPROM_SUCCESS, EEPROM_ERROR, EEPROM_BUSY or EEPROM_TIMEOUT
static EEPROM_Result EEPROM_SetPageStatus(EEPROM_Page Page,
		EEPROM_PageStatus PageStatus) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
	EEPROM_Result result;

	//check if erase operation required
	if (PageStatus == EEPROM_ERASED) {
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d13f      	bne.n	8001c0e <EEPROM_SetPageStatus+0x96>
		//remove every variable from index, that is stored on erase page
		uint16_t StartAddress = Page - EEPROM_START_ADDRESS;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t EndAddress = Page - EEPROM_START_ADDRESS + FLASH_PAGE_SIZE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001ba0:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ba6:	e015      	b.n	8001bd4 <EEPROM_SetPageStatus+0x5c>
			if (StartAddress < EEPROM_Index[i] && EEPROM_Index[i] < EndAddress)
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001baa:	4a3d      	ldr	r2, [pc, #244]	; (8001ca0 <EEPROM_SetPageStatus+0x128>)
 8001bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20b      	bcs.n	8001bce <EEPROM_SetPageStatus+0x56>
 8001bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bb8:	4a39      	ldr	r2, [pc, #228]	; (8001ca0 <EEPROM_SetPageStatus+0x128>)
 8001bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bbe:	8c3a      	ldrh	r2, [r7, #32]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d904      	bls.n	8001bce <EEPROM_SetPageStatus+0x56>
				EEPROM_Index[i] = 0;
 8001bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bc6:	4a36      	ldr	r2, [pc, #216]	; (8001ca0 <EEPROM_SetPageStatus+0x128>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d9e6      	bls.n	8001ba8 <EEPROM_SetPageStatus+0x30>
		}

		//setup erase definitions
		FLASH_EraseInitTypeDef EraseDefinitions;
		EraseDefinitions.TypeErase = FLASH_TYPEERASE_PAGES;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
		EraseDefinitions.Banks = FLASH_BANK_1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
		EraseDefinitions.PageAddress = Page;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	61bb      	str	r3, [r7, #24]
		EraseDefinitions.NbPages = 1;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
		uint32_t PageError;

		//erase page
		result = HAL_FLASHEx_Erase(&EraseDefinitions, &PageError);
 8001bea:	f107 020c 	add.w	r2, r7, #12
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 fae5 	bl	80041c4 <HAL_FLASHEx_Erase>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (result != EEPROM_SUCCESS)
 8001c00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c0c:	e043      	b.n	8001c96 <EEPROM_SetPageStatus+0x11e>
	}

	//else write status to flash
	else {
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Page,
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	2001      	movs	r0, #1
 8001c18:	f002 f98c 	bl	8003f34 <HAL_FLASH_Program>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				PageStatus);
		if (result != EEPROM_SUCCESS)
 8001c22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <EEPROM_SetPageStatus+0xb8>
			return result;
 8001c2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c2e:	e032      	b.n	8001c96 <EEPROM_SetPageStatus+0x11e>
	}

	//update global page status variables (remove page from old status and attach to new status)
	if (EEPROM_ValidPage == Page)
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <EEPROM_SetPageStatus+0x12c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d103      	bne.n	8001c42 <EEPROM_SetPageStatus+0xca>
		EEPROM_ValidPage = EEPROM_PAGE_NONE;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <EEPROM_SetPageStatus+0x12c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e010      	b.n	8001c64 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ReceivingPage == Page)
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <EEPROM_SetPageStatus+0x130>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d103      	bne.n	8001c54 <EEPROM_SetPageStatus+0xdc>
		EEPROM_ReceivingPage = EEPROM_PAGE_NONE;
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <EEPROM_SetPageStatus+0x130>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e007      	b.n	8001c64 <EEPROM_SetPageStatus+0xec>
	else if (EEPROM_ErasedPage == Page)
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <EEPROM_SetPageStatus+0x134>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d102      	bne.n	8001c64 <EEPROM_SetPageStatus+0xec>
		EEPROM_ErasedPage = EEPROM_PAGE_NONE;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <EEPROM_SetPageStatus+0x134>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

	if (PageStatus == EEPROM_VALID)
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <EEPROM_SetPageStatus+0xfa>
		EEPROM_ValidPage = Page;
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <EEPROM_SetPageStatus+0x12c>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	e010      	b.n	8001c94 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_RECEIVING)
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d103      	bne.n	8001c84 <EEPROM_SetPageStatus+0x10c>
		EEPROM_ReceivingPage = Page;
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <EEPROM_SetPageStatus+0x130>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e007      	b.n	8001c94 <EEPROM_SetPageStatus+0x11c>
	else if (PageStatus == EEPROM_ERASED)
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d102      	bne.n	8001c94 <EEPROM_SetPageStatus+0x11c>
		EEPROM_ErasedPage = Page;
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <EEPROM_SetPageStatus+0x134>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6013      	str	r3, [r2, #0]

	return EEPROM_SUCCESS;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3728      	adds	r7, #40	; 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000134 	.word	0x20000134
 8001ca4:	20000138 	.word	0x20000138
 8001ca8:	2000013c 	.word	0x2000013c
 8001cac:	20000140 	.word	0x20000140

08001cb0 <EEPROM_PageToIndex>:
// - set next free flash address
// - return on loop end
//
// Page:	page to search for variables
// return:	EEPROM_SUCCESS
static EEPROM_Result EEPROM_PageToIndex(EEPROM_Page Page) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	uint8_t SizeCode;					//size of current variable as Size code
	uint8_t Size;							//size of current variable in bytes
	uint16_t Name;									//name of current variable

	//ignore call when Page is PAGE_NONE
	if (Page == EEPROM_PAGE_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <EEPROM_PageToIndex+0x12>
		return EEPROM_SUCCESS;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e070      	b.n	8001da4 <EEPROM_PageToIndex+0xf4>

	//get page addresses
	uint32_t Address = Page + 2;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
	uint32_t PageEndAddress = Page + FLASH_PAGE_SIZE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cce:	613b      	str	r3, [r7, #16]

	//loop through page starting after page header
	while (Address < PageEndAddress) {
 8001cd0:	e059      	b.n	8001d86 <EEPROM_PageToIndex+0xd6>
		//read potential variable header
		VariableHeader = *((__IO uint16_t*) Address);
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	81fb      	strh	r3, [r7, #14]

		//if no header written (causes: end of data reached or reset while writing)
		if (VariableHeader == 0xFFFF) {
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d121      	bne.n	8001d26 <EEPROM_PageToIndex+0x76>
			//loop through next 4 halfword and check if there is anything written
			Size = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	75fb      	strb	r3, [r7, #23]
 8001cea:	e013      	b.n	8001d14 <EEPROM_PageToIndex+0x64>
				if (Address + i >= PageEndAddress)
 8001cec:	7dfa      	ldrb	r2, [r7, #23]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d911      	bls.n	8001d1c <EEPROM_PageToIndex+0x6c>
					break;
				//while looping count the size of written data (resulting from reset while writing)
				if (*((__IO uint16_t*) (Address + i)) != 0xFFFF)
 8001cf8:	7dfa      	ldrb	r2, [r7, #23]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d001      	beq.n	8001d0e <EEPROM_PageToIndex+0x5e>
					Size = i;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	77fb      	strb	r3, [r7, #31]
			for (uint8_t i = 2; i <= 8; i += 2) {
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	3302      	adds	r3, #2
 8001d12:	75fb      	strb	r3, [r7, #23]
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d9e8      	bls.n	8001cec <EEPROM_PageToIndex+0x3c>
 8001d1a:	e000      	b.n	8001d1e <EEPROM_PageToIndex+0x6e>
					break;
 8001d1c:	bf00      	nop
			}
			//if no data found, last variable of page was reached (end loop)
			if (Size == 0)
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d12b      	bne.n	8001d7c <EEPROM_PageToIndex+0xcc>
				break;
 8001d24:	e033      	b.n	8001d8e <EEPROM_PageToIndex+0xde>
		}

		//else (if header written, proper variable value is following)
		else {
			//get size code
			SizeCode = VariableHeader >> 14;
 8001d26:	89fb      	ldrh	r3, [r7, #14]
 8001d28:	0b9b      	lsrs	r3, r3, #14
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	737b      	strb	r3, [r7, #13]

			//check for valid name (VARIABLE_COUNT might have been reduced between builds, but old variables are still in flash)
			Name = VariableHeader & 0b0011111111111111;
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d34:	817b      	strh	r3, [r7, #10]
			if (Name < EEPROM_VARIABLE_COUNT) {
 8001d36:	897b      	ldrh	r3, [r7, #10]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d815      	bhi.n	8001d68 <EEPROM_PageToIndex+0xb8>
				//if everything valid, update the index and the size table
				EEPROM_Index[Name] = Address + 2 - EEPROM_START_ADDRESS;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	897a      	ldrh	r2, [r7, #10]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d46:	3302      	adds	r3, #2
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <EEPROM_PageToIndex+0x100>)
 8001d4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				EEPROM_SizeTable[Name] = SizeCode;
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	4918      	ldr	r1, [pc, #96]	; (8001db4 <EEPROM_PageToIndex+0x104>)
 8001d54:	7b7a      	ldrb	r2, [r7, #13]
 8001d56:	54ca      	strb	r2, [r1, r3]
				if (SizeCode == EEPROM_SIZE_DELETED)
 8001d58:	7b7b      	ldrb	r3, [r7, #13]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d104      	bne.n	8001d68 <EEPROM_PageToIndex+0xb8>
					EEPROM_Index[Name] = 0;
 8001d5e:	897b      	ldrh	r3, [r7, #10]
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <EEPROM_PageToIndex+0x100>)
 8001d62:	2100      	movs	r1, #0
 8001d64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}

			//calculate size in bytes from size code
			Size = 1 << SizeCode;
 8001d68:	7b7b      	ldrb	r3, [r7, #13]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	77fb      	strb	r3, [r7, #31]
			if (SizeCode == EEPROM_SIZE_DELETED)
 8001d72:	7b7b      	ldrb	r3, [r7, #13]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <EEPROM_PageToIndex+0xcc>
				Size = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	77fb      	strb	r3, [r7, #31]
		}

		//go to next address on page
		Address = Address + 2 + Size;
 8001d7c:	7ffa      	ldrb	r2, [r7, #31]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4413      	add	r3, r2
 8001d82:	3302      	adds	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
	while (Address < PageEndAddress) {
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3a1      	bcc.n	8001cd2 <EEPROM_PageToIndex+0x22>
	}

	//set next free flash address
	EEPROM_NextIndex = Address;
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <EEPROM_PageToIndex+0x108>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6013      	str	r3, [r2, #0]
	if (Address >= PageEndAddress)
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d302      	bcc.n	8001da2 <EEPROM_PageToIndex+0xf2>
		EEPROM_NextIndex = 0;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <EEPROM_PageToIndex+0x108>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

	//return on loop end
	return EEPROM_SUCCESS;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3724      	adds	r7, #36	; 0x24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000134 	.word	0x20000134
 8001db4:	20000130 	.word	0x20000130
 8001db8:	20000144 	.word	0x20000144

08001dbc <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001dd6:	f043 0320 	orr.w	r3, r3, #32
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_GPIO_Init+0x80>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_GPIO_Init+0x84>)
 8001e2e:	f002 fa71 	bl	8004314 <HAL_GPIO_Init>

}
 8001e32:	bf00      	nop
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010800 	.word	0x40010800

08001e44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <MX_I2C1_Init+0x54>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_I2C1_Init+0x58>)
 8001e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_I2C1_Init+0x50>)
 8001e82:	f002 fbe3 	bl	800464c <HAL_I2C_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e8c:	f000 fbac 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200001d0 	.word	0x200001d0
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	00061a80 	.word	0x00061a80

08001ea0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_I2C_MspInit+0x90>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d132      	bne.n	8001f26 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ec6:	f043 0308 	orr.w	r3, r3, #8
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ed8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <HAL_I2C_MspInit+0x98>)
 8001eee:	f002 fa11 	bl	8004314 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_I2C_MspInit+0x9c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_I2C_MspInit+0x9c>)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_I2C_MspInit+0x94>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40005400 	.word	0x40005400
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010c00 	.word	0x40010c00
 8001f3c:	40010000 	.word	0x40010000

08001f40 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f4c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f5c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001f60:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00b      	beq.n	8001f80 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f68:	e000      	b.n	8001f6c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f6a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f9      	beq.n	8001f6a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	0000      	movs	r0, r0
	...

08001f90 <flashMemoryInit>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint16_t address);
void writeFlash(uint32_t address, double data);

void flashMemoryInit() {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
	//initialize EEPROM
	EEPROM_Init();
 8001f96:	f7ff fb69 	bl	800166c <EEPROM_Init>

	//set default value if variable not assigned
	EEPROM_Value value;
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	81fb      	strh	r3, [r7, #14]
 8001f9e:	e02b      	b.n	8001ff8 <flashMemoryInit+0x68>
		if (EEPROM_ReadVariable(i, &value) == EEPROM_NOT_ASSIGNED) {
 8001fa0:	463a      	mov	r2, r7
 8001fa2:	89fb      	ldrh	r3, [r7, #14]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fc28 	bl	80017fc <EEPROM_ReadVariable>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d11c      	bne.n	8001fec <flashMemoryInit+0x5c>
			isCorrectionAssign = false;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <flashMemoryInit+0x80>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]

			switch (i) {
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <flashMemoryInit+0x34>
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d00a      	beq.n	8001fd8 <flashMemoryInit+0x48>
 8001fc2:	e016      	b.n	8001ff2 <flashMemoryInit+0x62>
			case 0:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001fc4:	a310      	add	r3, pc, #64	; (adr r3, 8002008 <flashMemoryInit+0x78>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	89f9      	ldrh	r1, [r7, #14]
 8001fcc:	2003      	movs	r0, #3
 8001fce:	9000      	str	r0, [sp, #0]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	f7ff fc6d 	bl	80018b0 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fd6:	e00c      	b.n	8001ff2 <flashMemoryInit+0x62>
			case 1:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001fd8:	a30b      	add	r3, pc, #44	; (adr r3, 8002008 <flashMemoryInit+0x78>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	89f9      	ldrh	r1, [r7, #14]
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	9000      	str	r0, [sp, #0]
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	f7ff fc63 	bl	80018b0 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001fea:	e002      	b.n	8001ff2 <flashMemoryInit+0x62>
			}
		} else {
			isCorrectionAssign = true;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <flashMemoryInit+0x80>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	81fb      	strh	r3, [r7, #14]
 8001ff8:	89fb      	ldrh	r3, [r7, #14]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d9d0      	bls.n	8001fa0 <flashMemoryInit+0x10>
		}
	}
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	88e368f1 	.word	0x88e368f1
 800200c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002010:	20000148 	.word	0x20000148

08002014 <saveGyroData>:

void saveGyroData(double x, double y) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800201e:	e9c7 2300 	strd	r2, r3, [r7]
	isCorrectionAssign = true;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <saveGyroData+0x3c>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
	writeFlash(xAddress, x);
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <saveGyroData+0x40>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002032:	4608      	mov	r0, r1
 8002034:	f000 f82e 	bl	8002094 <writeFlash>
	writeFlash(yAddress, y);
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <saveGyroData+0x44>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002042:	4608      	mov	r0, r1
 8002044:	f000 f826 	bl	8002094 <writeFlash>
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000148 	.word	0x20000148
 8002054:	2000014a 	.word	0x2000014a
 8002058:	20000000 	.word	0x20000000

0800205c <readXFromFlash>:

double readXFromFlash() {
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	return readFlash(xAddress);
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <readXFromFlash+0x18>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f82c 	bl	80020c2 <readFlash>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
}
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	2000014a 	.word	0x2000014a

08002078 <readYFromFlash>:

double readYFromFlash() {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	return readFlash(yAddress);
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <readYFromFlash+0x18>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f81e 	bl	80020c2 <readFlash>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
}
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000000 	.word	0x20000000

08002094 <writeFlash>:

void writeFlash(uint32_t address, double data) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	e9c7 2300 	strd	r2, r3, [r7]
	EEPROM_Value value;
	value.Double = data;
 80020a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	EEPROM_WriteVariable(address, value, EEPROM_SIZE64);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	b299      	uxth	r1, r3
 80020ac:	2303      	movs	r3, #3
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020b4:	4608      	mov	r0, r1
 80020b6:	f7ff fbfb 	bl	80018b0 <EEPROM_WriteVariable>
}
 80020ba:	bf00      	nop
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <readFlash>:

double readFlash(uint16_t address) {
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	80fb      	strh	r3, [r7, #6]
	EEPROM_Value value;
	EEPROM_ReadVariable(address, &value);
 80020cc:	f107 0208 	add.w	r2, r7, #8
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fb91 	bl	80017fc <EEPROM_ReadVariable>
	return value.Double;
 80020da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_write>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int _write(int32_t file, uint8_t *ptr, int32_t len) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e009      	b.n	8002112 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	60ba      	str	r2, [r7, #8]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff1a 	bl	8001f40 <ITM_SendChar>
	for (i = 0; i < len; i++)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3301      	adds	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	429a      	cmp	r2, r3
 8002118:	dbf1      	blt.n	80020fe <_write+0x16>
	return len;
 800211a:	687b      	ldr	r3, [r7, #4]

}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <main>:

int main(void) {
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b08d      	sub	sp, #52	; 0x34
 8002128:	af00      	add	r7, sp, #0

	HAL_Init();
 800212a:	f000 ff19 	bl	8002f60 <HAL_Init>

	SystemClock_Config();
 800212e:	f000 f8f1 	bl	8002314 <SystemClock_Config>

	MX_GPIO_Init();
 8002132:	f7ff fe43 	bl	8001dbc <MX_GPIO_Init>
	MX_CAN1_Init();
 8002136:	f7ff f907 	bl	8001348 <MX_CAN1_Init>
	MX_CAN2_Init();
 800213a:	f7ff f98b 	bl	8001454 <MX_CAN2_Init>
	MX_I2C1_Init();
 800213e:	f7ff fe81 	bl	8001e44 <MX_I2C1_Init>
	flashMemoryInit();
 8002142:	f7ff ff25 	bl	8001f90 <flashMemoryInit>

	printf("okokokokoo");
 8002146:	4868      	ldr	r0, [pc, #416]	; (80022e8 <main+0x1c4>)
 8002148:	f003 ffaa 	bl	80060a0 <iprintf>

	//MPU initialize
	while (MPU6050_Init(&hi2c1) == 1)
 800214c:	bf00      	nop
 800214e:	4867      	ldr	r0, [pc, #412]	; (80022ec <main+0x1c8>)
 8002150:	f000 fa4f 	bl	80025f2 <MPU6050_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	d0f9      	beq.n	800214e <main+0x2a>
		;

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800215a:	4865      	ldr	r0, [pc, #404]	; (80022f0 <main+0x1cc>)
 800215c:	f001 f962 	bl	8003424 <HAL_CAN_Start>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <main+0x46>
		Error_Handler();
 8002166:	f000 fa3f 	bl	80025e8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 800216a:	2103      	movs	r1, #3
 800216c:	4860      	ldr	r0, [pc, #384]	; (80022f0 <main+0x1cc>)
 800216e:	f001 fb88 	bl	8003882 <HAL_CAN_ActivateNotification>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <main+0x58>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8002178:	f000 fa36 	bl	80025e8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 800217c:	485d      	ldr	r0, [pc, #372]	; (80022f4 <main+0x1d0>)
 800217e:	f001 f951 	bl	8003424 <HAL_CAN_Start>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <main+0x68>
		Error_Handler();
 8002188:	f000 fa2e 	bl	80025e8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 800218c:	2103      	movs	r1, #3
 800218e:	4859      	ldr	r0, [pc, #356]	; (80022f4 <main+0x1d0>)
 8002190:	f001 fb77 	bl	8003882 <HAL_CAN_ActivateNotification>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <main+0x7a>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 800219a:	f000 fa25 	bl	80025e8 <Error_Handler>
	}

	//loop
	while (1) {
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800219e:	4956      	ldr	r1, [pc, #344]	; (80022f8 <main+0x1d4>)
 80021a0:	4852      	ldr	r0, [pc, #328]	; (80022ec <main+0x1c8>)
 80021a2:	f000 fa7d 	bl	80026a0 <MPU6050_Read_All>

		double realX = MPU6050.KalmanAngleX;
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <main+0x1d4>)
 80021a8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80021ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double realY = MPU6050.KalmanAngleY;
 80021b0:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <main+0x1d4>)
 80021b2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80021b6:	e9c7 2304 	strd	r2, r3, [r7, #16]

		double storedX = readXFromFlash();
 80021ba:	f7ff ff4f 	bl	800205c <readXFromFlash>
 80021be:	e9c7 0102 	strd	r0, r1, [r7, #8]
		double storedY = readYFromFlash();
 80021c2:	f7ff ff59 	bl	8002078 <readYFromFlash>
 80021c6:	e9c7 0100 	strd	r0, r1, [r7]

		double pitch = storedX - realX;
 80021ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021d2:	f7fe f82d 	bl	8000230 <__aeabi_dsub>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		double roll = storedY - realY;
 80021de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021e6:	f7fe f823 	bl	8000230 <__aeabi_dsub>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (pitch > 40) {
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4b41      	ldr	r3, [pc, #260]	; (80022fc <main+0x1d8>)
 80021f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021fc:	f7fe fc60 	bl	8000ac0 <__aeabi_dcmpgt>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <main+0xec>
			pitch = 40;
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <main+0x1d8>)
 800220c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (pitch < -40) {
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <main+0x1dc>)
 8002216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800221a:	f7fe fc33 	bl	8000a84 <__aeabi_dcmplt>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <main+0x10a>
			pitch = -40;
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b35      	ldr	r3, [pc, #212]	; (8002300 <main+0x1dc>)
 800222a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		if (roll > 60) {
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b34      	ldr	r3, [pc, #208]	; (8002304 <main+0x1e0>)
 8002234:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002238:	f7fe fc42 	bl	8000ac0 <__aeabi_dcmpgt>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <main+0x128>
			roll = 60;
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <main+0x1e0>)
 8002248:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}
		if (roll < -60) {
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <main+0x1e4>)
 8002252:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002256:	f7fe fc15 	bl	8000a84 <__aeabi_dcmplt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <main+0x146>
			roll = -60;
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <main+0x1e4>)
 8002266:	e9c7 2308 	strd	r2, r3, [r7, #32]
		}

		//20 & -20 degree max
		pitch += 0x78;
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <main+0x1e8>)
 8002270:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002274:	f7fd ffde 	bl	8000234 <__adddf3>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		//29 & -29 degree max
		roll += 0x78;
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <main+0x1e8>)
 8002286:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800228a:	f7fd ffd3 	bl	8000234 <__adddf3>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	e9c7 2308 	strd	r2, r3, [r7, #32]

		if (isCorrectionAssign) {
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <main+0x1ec>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <main+0x196>
			sendGyroData(pitch, roll);
 800229e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022a2:	f7fe fc2d 	bl	8000b00 <__aeabi_d2iz>
 80022a6:	4604      	mov	r4, r0
 80022a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022ac:	f7fe fc28 	bl	8000b00 <__aeabi_d2iz>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	4620      	mov	r0, r4
 80022b6:	f000 f947 	bl	8002548 <sendGyroData>
		}

		if (BUTTON_STATE(CALIBRATE_MPU_BUTTON) == 1 || !isCorrectionAssign) {
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7ff f822 	bl	8001304 <BUTTON_STATE>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d006      	beq.n	80022d4 <main+0x1b0>
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <main+0x1ec>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <main+0x1bc>
			saveGyroData(realX, realY);
 80022d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022dc:	f7ff fe9a 	bl	8002014 <saveGyroData>
		}

		HAL_Delay(200);
 80022e0:	20c8      	movs	r0, #200	; 0xc8
 80022e2:	f000 fe9f 	bl	8003024 <HAL_Delay>
	while (1) {
 80022e6:	e75a      	b.n	800219e <main+0x7a>
 80022e8:	080075f0 	.word	0x080075f0
 80022ec:	200001d0 	.word	0x200001d0
 80022f0:	200001a8 	.word	0x200001a8
 80022f4:	20000180 	.word	0x20000180
 80022f8:	20000230 	.word	0x20000230
 80022fc:	40440000 	.word	0x40440000
 8002300:	c0440000 	.word	0xc0440000
 8002304:	404e0000 	.word	0x404e0000
 8002308:	c04e0000 	.word	0xc04e0000
 800230c:	405e0000 	.word	0x405e0000
 8002310:	20000148 	.word	0x20000148

08002314 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b094      	sub	sp, #80	; 0x50
 8002318:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	2238      	movs	r2, #56	; 0x38
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f003 feb4 	bl	8006090 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	60da      	str	r2, [r3, #12]
 8002334:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002336:	2301      	movs	r3, #1
 8002338:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800233a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002348:	f107 0318 	add.w	r3, r7, #24
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f97d 	bl	800564c <HAL_RCC_OscConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0x48>
		Error_Handler();
 8002358:	f000 f946 	bl	80025e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800235c:	230f      	movs	r3, #15
 800235e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002360:	2301      	movs	r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fc7f 	bl	8005c78 <HAL_RCC_ClockConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <SystemClock_Config+0x70>
		Error_Handler();
 8002380:	f000 f932 	bl	80025e8 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <SystemClock_Config+0x80>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	3750      	adds	r7, #80	; 0x50
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	42420070 	.word	0x42420070

08002398 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80023a4:	2100      	movs	r1, #0
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f001 f95a 	bl	8003660 <HAL_CAN_GetRxMessage>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d129      	bne.n	8002406 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>

		switch ((uint32_t) hcan->Instance) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a18      	ldr	r2, [pc, #96]	; (8002418 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d122      	bne.n	8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN2:
			CAN1_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80023ca:	6912      	ldr	r2, [r2, #16]
 80023cc:	b2d1      	uxtb	r1, r2
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f825 	bl	8002420 <CAN1_Transmit_manual>
			break;
 80023d6:	e017      	b.n	8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN1:
			if (RxHeader.StdId == 0x350 && RxData[0] == 0xc7) {
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80023e0:	d106      	bne.n	80023f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2bc7      	cmp	r3, #199	; 0xc7
 80023e8:	d102      	bne.n	80023f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
				RxData[0] = 0xc6;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80023ec:	22c6      	movs	r2, #198	; 0xc6
 80023ee:	701a      	strb	r2, [r3, #0]
			}

			CAN2_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80023f8:	6912      	ldr	r2, [r2, #16]
 80023fa:	b2d1      	uxtb	r1, r2
 80023fc:	4a04      	ldr	r2, [pc, #16]	; (8002410 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f858 	bl	80024b4 <CAN2_Transmit_manual>
			break;
 8002404:	e000      	b.n	8002408 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		}

	}
 8002406:	bf00      	nop

}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200002ac 	.word	0x200002ac
 8002414:	200002cc 	.word	0x200002cc
 8002418:	40006400 	.word	0x40006400
 800241c:	40006800 	.word	0x40006800

08002420 <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	603a      	str	r2, [r7, #0]
 800242a:	80fb      	strh	r3, [r7, #6]
 800242c:	460b      	mov	r3, r1
 800242e:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <CAN1_Transmit_manual+0x80>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <CAN1_Transmit_manual+0x84>)
 8002436:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <CAN1_Transmit_manual+0x80>)
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <CAN1_Transmit_manual+0x84>)
 800243e:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 8002446:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	785a      	ldrb	r2, [r3, #1]
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 800244e:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	789a      	ldrb	r2, [r3, #2]
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 8002456:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	78da      	ldrb	r2, [r3, #3]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 800245e:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	791a      	ldrb	r2, [r3, #4]
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 8002466:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	795a      	ldrb	r2, [r3, #5]
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 800246e:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	799a      	ldrb	r2, [r3, #6]
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 8002476:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	79da      	ldrb	r2, [r3, #7]
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 800247e:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <CAN1_Transmit_manual+0x8c>)
 8002482:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <CAN1_Transmit_manual+0x88>)
 8002484:	4907      	ldr	r1, [pc, #28]	; (80024a4 <CAN1_Transmit_manual+0x84>)
 8002486:	480a      	ldr	r0, [pc, #40]	; (80024b0 <CAN1_Transmit_manual+0x90>)
 8002488:	f001 f810 	bl	80034ac <HAL_CAN_AddTxMessage>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <CAN1_Transmit_manual+0x76>
		Error_Handler();
 8002492:	f000 f8a9 	bl	80025e8 <Error_Handler>
	}
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200002cc 	.word	0x200002cc
 80024a4:	200002b4 	.word	0x200002b4
 80024a8:	200002a0 	.word	0x200002a0
 80024ac:	200002a8 	.word	0x200002a8
 80024b0:	200001a8 	.word	0x200001a8

080024b4 <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	603a      	str	r2, [r7, #0]
 80024be:	80fb      	strh	r3, [r7, #6]
 80024c0:	460b      	mov	r3, r1
 80024c2:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <CAN2_Transmit_manual+0x80>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <CAN2_Transmit_manual+0x84>)
 80024ca:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <CAN2_Transmit_manual+0x80>)
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <CAN2_Transmit_manual+0x84>)
 80024d2:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	781a      	ldrb	r2, [r3, #0]
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <CAN2_Transmit_manual+0x88>)
 80024da:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	785a      	ldrb	r2, [r3, #1]
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <CAN2_Transmit_manual+0x88>)
 80024e2:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	789a      	ldrb	r2, [r3, #2]
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <CAN2_Transmit_manual+0x88>)
 80024ea:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	78da      	ldrb	r2, [r3, #3]
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <CAN2_Transmit_manual+0x88>)
 80024f2:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	791a      	ldrb	r2, [r3, #4]
 80024f8:	4b10      	ldr	r3, [pc, #64]	; (800253c <CAN2_Transmit_manual+0x88>)
 80024fa:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	795a      	ldrb	r2, [r3, #5]
 8002500:	4b0e      	ldr	r3, [pc, #56]	; (800253c <CAN2_Transmit_manual+0x88>)
 8002502:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	799a      	ldrb	r2, [r3, #6]
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <CAN2_Transmit_manual+0x88>)
 800250a:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	79da      	ldrb	r2, [r3, #7]
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <CAN2_Transmit_manual+0x88>)
 8002512:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <CAN2_Transmit_manual+0x8c>)
 8002516:	4a09      	ldr	r2, [pc, #36]	; (800253c <CAN2_Transmit_manual+0x88>)
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <CAN2_Transmit_manual+0x84>)
 800251a:	480a      	ldr	r0, [pc, #40]	; (8002544 <CAN2_Transmit_manual+0x90>)
 800251c:	f000 ffc6 	bl	80034ac <HAL_CAN_AddTxMessage>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <CAN2_Transmit_manual+0x76>
		Error_Handler();
 8002526:	f000 f85f 	bl	80025e8 <Error_Handler>
	}
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200002cc 	.word	0x200002cc
 8002538:	200002b4 	.word	0x200002b4
 800253c:	200002a0 	.word	0x200002a0
 8002540:	200002a8 	.word	0x200002a8
 8002544:	20000180 	.word	0x20000180

08002548 <sendGyroData>:
void sendGyroData(int x, int y) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	gyroHeader.StdId = 0x685;
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <sendGyroData+0x68>)
 8002554:	f240 6285 	movw	r2, #1669	; 0x685
 8002558:	601a      	str	r2, [r3, #0]
	gyroHeader.DLC = 8;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <sendGyroData+0x68>)
 800255c:	2208      	movs	r2, #8
 800255e:	611a      	str	r2, [r3, #16]
	gyroData[0] = y;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <sendGyroData+0x6c>)
 8002566:	701a      	strb	r2, [r3, #0]
	gyroData[1] = x;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <sendGyroData+0x6c>)
 800256e:	705a      	strb	r2, [r3, #1]
	gyroData[3] = 0x00;
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <sendGyroData+0x6c>)
 8002572:	2200      	movs	r2, #0
 8002574:	70da      	strb	r2, [r3, #3]
	gyroData[4] = 0x00;
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <sendGyroData+0x6c>)
 8002578:	2200      	movs	r2, #0
 800257a:	711a      	strb	r2, [r3, #4]
	gyroData[5] = 0x00;
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <sendGyroData+0x6c>)
 800257e:	2200      	movs	r2, #0
 8002580:	715a      	strb	r2, [r3, #5]
	gyroData[6] = 0x00;
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <sendGyroData+0x6c>)
 8002584:	2200      	movs	r2, #0
 8002586:	719a      	strb	r2, [r3, #6]
	gyroData[7] = 0x00;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <sendGyroData+0x6c>)
 800258a:	2200      	movs	r2, #0
 800258c:	71da      	strb	r2, [r3, #7]

	HAL_StatusTypeDef res = HAL_CAN_AddTxMessage(&hcan1, &gyroHeader, gyroData,
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <sendGyroData+0x70>)
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <sendGyroData+0x6c>)
 8002592:	4907      	ldr	r1, [pc, #28]	; (80025b0 <sendGyroData+0x68>)
 8002594:	4809      	ldr	r0, [pc, #36]	; (80025bc <sendGyroData+0x74>)
 8002596:	f000 ff89 	bl	80034ac <HAL_CAN_AddTxMessage>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
			&TxMailbox);

	if (res != HAL_OK) {
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <sendGyroData+0x60>
		Error_Handler();
 80025a4:	f000 f820 	bl	80025e8 <Error_Handler>
	}
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000288 	.word	0x20000288
 80025b4:	20000228 	.word	0x20000228
 80025b8:	200002a8 	.word	0x200002a8
 80025bc:	200001a8 	.word	0x200001a8

080025c0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_CAN_GetError(hcan);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f001 fb99 	bl	8003d00 <HAL_CAN_GetError>
 80025ce:	6178      	str	r0, [r7, #20]
	const char trans_str[] = "can error";
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_CAN_ErrorCallback+0x24>)
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025d8:	c303      	stmia	r3!, {r0, r1}
 80025da:	801a      	strh	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	080075fc 	.word	0x080075fc

080025e8 <Error_Handler>:

void Error_Handler(void) {
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ec:	b672      	cpsid	i
}
 80025ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025f0:	e7fe      	b.n	80025f0 <Error_Handler+0x8>

080025f2 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af04      	add	r7, sp, #16
 80025f8:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 80025fa:	2364      	movs	r3, #100	; 0x64
 80025fc:	9302      	str	r3, [sp, #8]
 80025fe:	2301      	movs	r3, #1
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	f107 030f 	add.w	r3, r7, #15
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2301      	movs	r3, #1
 800260a:	2275      	movs	r2, #117	; 0x75
 800260c:	21d0      	movs	r1, #208	; 0xd0
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f002 fa5a 	bl	8004ac8 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b68      	cmp	r3, #104	; 0x68
 8002618:	d13d      	bne.n	8002696 <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 800261e:	2364      	movs	r3, #100	; 0x64
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	2301      	movs	r3, #1
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	f107 030e 	add.w	r3, r7, #14
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	226b      	movs	r2, #107	; 0x6b
 8002630:	21d0      	movs	r1, #208	; 0xd0
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f002 f94e 	bl	80048d4 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002638:	2307      	movs	r3, #7
 800263a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 800263c:	2364      	movs	r3, #100	; 0x64
 800263e:	9302      	str	r3, [sp, #8]
 8002640:	2301      	movs	r3, #1
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	f107 030e 	add.w	r3, r7, #14
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2301      	movs	r3, #1
 800264c:	2219      	movs	r2, #25
 800264e:	21d0      	movs	r1, #208	; 0xd0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f002 f93f 	bl	80048d4 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 800265a:	2364      	movs	r3, #100	; 0x64
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	2301      	movs	r3, #1
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	f107 030e 	add.w	r3, r7, #14
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2301      	movs	r3, #1
 800266a:	221c      	movs	r2, #28
 800266c:	21d0      	movs	r1, #208	; 0xd0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f002 f930 	bl	80048d4 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8002674:	2300      	movs	r3, #0
 8002676:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 8002678:	2364      	movs	r3, #100	; 0x64
 800267a:	9302      	str	r3, [sp, #8]
 800267c:	2301      	movs	r3, #1
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	f107 030e 	add.w	r3, r7, #14
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2301      	movs	r3, #1
 8002688:	221b      	movs	r2, #27
 800268a:	21d0      	movs	r1, #208	; 0xd0
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f002 f921 	bl	80048d4 <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <MPU6050_Init+0xa6>
	}
	return 1;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <MPU6050_Read_All>:
	temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
			+ (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a4:	b094      	sub	sp, #80	; 0x50
 80026a6:	af04      	add	r7, sp, #16
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14,
 80026ac:	2364      	movs	r3, #100	; 0x64
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	230e      	movs	r3, #14
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2301      	movs	r3, #1
 80026bc:	223b      	movs	r2, #59	; 0x3b
 80026be:	21d0      	movs	r1, #208	; 0xd0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f002 fa01 	bl	8004ac8 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80026c6:	7a3b      	ldrb	r3, [r7, #8]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	7a7b      	ldrb	r3, [r7, #9]
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b21a      	sxth	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80026d8:	7abb      	ldrb	r3, [r7, #10]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	b21a      	sxth	r2, r3
 80026de:	7afb      	ldrb	r3, [r7, #11]
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80026ea:	7b3b      	ldrb	r3, [r7, #12]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21a      	sxth	r2, r3
 80026f0:	7b7b      	ldrb	r3, [r7, #13]
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	4313      	orrs	r3, r2
 80026f6:	b21a      	sxth	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	809a      	strh	r2, [r3, #4]
	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80026fc:	7bbb      	ldrb	r3, [r7, #14]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	b21a      	sxth	r2, r3
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	b21b      	sxth	r3, r3
 8002706:	4313      	orrs	r3, r2
 8002708:	86fb      	strh	r3, [r7, #54]	; 0x36
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800270a:	7c3b      	ldrb	r3, [r7, #16]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b21a      	sxth	r2, r3
 8002710:	7c7b      	ldrb	r3, [r7, #17]
 8002712:	b21b      	sxth	r3, r3
 8002714:	4313      	orrs	r3, r2
 8002716:	b21a      	sxth	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800271c:	7cbb      	ldrb	r3, [r7, #18]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b21a      	sxth	r2, r3
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	b21a      	sxth	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800272e:	7d3b      	ldrb	r3, [r7, #20]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	b21a      	sxth	r2, r3
 8002734:	7d7b      	ldrb	r3, [r7, #21]
 8002736:	b21b      	sxth	r3, r3
 8002738:	4313      	orrs	r3, r2
 800273a:	b21a      	sxth	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd fec0 	bl	80004cc <__aeabi_i2d>
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4bb7      	ldr	r3, [pc, #732]	; (8002a30 <MPU6050_Read_All+0x390>)
 8002752:	f7fe f84f 	bl	80007f4 <__aeabi_ddiv>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	6839      	ldr	r1, [r7, #0]
 800275c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd feb0 	bl	80004cc <__aeabi_i2d>
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4baf      	ldr	r3, [pc, #700]	; (8002a30 <MPU6050_Read_All+0x390>)
 8002772:	f7fe f83f 	bl	80007f4 <__aeabi_ddiv>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	6839      	ldr	r1, [r7, #0]
 800277c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fea0 	bl	80004cc <__aeabi_i2d>
 800278c:	a3a2      	add	r3, pc, #648	; (adr r3, 8002a18 <MPU6050_Read_All+0x378>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	f7fe f82f 	bl	80007f4 <__aeabi_ddiv>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	6839      	ldr	r1, [r7, #0]
 800279c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
 80027a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fa8d 	bl	8000cc4 <__aeabi_i2f>
 80027aa:	4603      	mov	r3, r0
 80027ac:	49a1      	ldr	r1, [pc, #644]	; (8002a34 <MPU6050_Read_All+0x394>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fb90 	bl	8000ed4 <__aeabi_fdiv>
 80027b4:	4603      	mov	r3, r0
 80027b6:	49a0      	ldr	r1, [pc, #640]	; (8002a38 <MPU6050_Read_All+0x398>)
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe f9cf 	bl	8000b5c <__addsf3>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
			+ (float) 36.53);
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe7d 	bl	80004cc <__aeabi_i2d>
 80027d2:	a393      	add	r3, pc, #588	; (adr r3, 8002a20 <MPU6050_Read_All+0x380>)
 80027d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d8:	f7fe f80c 	bl	80007f4 <__aeabi_ddiv>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fe6d 	bl	80004cc <__aeabi_i2d>
 80027f2:	a38b      	add	r3, pc, #556	; (adr r3, 8002a20 <MPU6050_Read_All+0x380>)
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f7fd fffc 	bl	80007f4 <__aeabi_ddiv>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	6839      	ldr	r1, [r7, #0]
 8002802:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe5d 	bl	80004cc <__aeabi_i2d>
 8002812:	a383      	add	r3, pc, #524	; (adr r3, 8002a20 <MPU6050_Read_All+0x380>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd ffec 	bl	80007f4 <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002826:	f000 fbf3 	bl	8003010 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	4b83      	ldr	r3, [pc, #524]	; (8002a3c <MPU6050_Read_All+0x39c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe3a 	bl	80004ac <__aeabi_ui2d>
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <MPU6050_Read_All+0x3a0>)
 800283e:	f7fd ffd9 	bl	80007f4 <__aeabi_ddiv>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 800284a:	f000 fbe1 	bl	8003010 <HAL_GetTick>
 800284e:	4603      	mov	r3, r0
 8002850:	4a7a      	ldr	r2, [pc, #488]	; (8002a3c <MPU6050_Read_All+0x39c>)
 8002852:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285a:	461a      	mov	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002862:	fb03 f202 	mul.w	r2, r3, r2
					+ DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800286c:	4619      	mov	r1, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002874:	fb03 f301 	mul.w	r3, r3, r1
 8002878:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe26 	bl	80004cc <__aeabi_i2d>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f004 fcfa 	bl	8007280 <sqrt>
 800288c:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if (roll_sqrt != 0.0) {
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800289c:	f7fe f8e8 	bl	8000a70 <__aeabi_dcmpeq>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d119      	bne.n	80028da <MPU6050_Read_All+0x23a>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe0d 	bl	80004cc <__aeabi_i2d>
 80028b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028b6:	f7fd ff9d 	bl	80007f4 <__aeabi_ddiv>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f004 fb4d 	bl	8006f60 <atan>
 80028c6:	a358      	add	r3, pc, #352	; (adr r3, 8002a28 <MPU6050_Read_All+0x388>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd fe68 	bl	80005a0 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80028d8:	e005      	b.n	80028e6 <MPU6050_Read_All+0x246>
	} else {
		roll = 0.0;
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ec:	425b      	negs	r3, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fdec 	bl	80004cc <__aeabi_i2d>
 80028f4:	4682      	mov	sl, r0
 80028f6:	468b      	mov	fp, r1
			DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fde4 	bl	80004cc <__aeabi_i2d>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4650      	mov	r0, sl
 800290a:	4659      	mov	r1, fp
 800290c:	f004 fcb5 	bl	800727a <atan2>
 8002910:	a345      	add	r3, pc, #276	; (adr r3, 8002a28 <MPU6050_Read_All+0x388>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fd fe43 	bl	80005a0 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90)
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <MPU6050_Read_All+0x3a4>)
 8002928:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800292c:	f7fe f8aa 	bl	8000a84 <__aeabi_dcmplt>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <MPU6050_Read_All+0x2ac>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <MPU6050_Read_All+0x3a8>)
 8002942:	f7fe f8bd 	bl	8000ac0 <__aeabi_dcmpgt>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d114      	bne.n	8002976 <MPU6050_Read_All+0x2d6>
			|| (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <MPU6050_Read_All+0x3a8>)
 8002952:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002956:	f7fe f8b3 	bl	8000ac0 <__aeabi_dcmpgt>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <MPU6050_Read_All+0x2ec>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <MPU6050_Read_All+0x3a4>)
 800296c:	f7fe f88a 	bl	8000a84 <__aeabi_dcmplt>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <MPU6050_Read_All+0x2ec>
		KalmanY.angle = pitch;
 8002976:	4935      	ldr	r1, [pc, #212]	; (8002a4c <MPU6050_Read_All+0x3ac>)
 8002978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002986:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800298a:	e012      	b.n	80029b2 <MPU6050_Read_All+0x312>
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800299a:	e9cd 2300 	strd	r2, r3, [sp]
 800299e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a2:	482a      	ldr	r0, [pc, #168]	; (8002a4c <MPU6050_Read_All+0x3ac>)
 80029a4:	f000 f856 	bl	8002a54 <Kalman_getAngle>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				DataStruct->Gy, dt);
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80029b8:	4690      	mov	r8, r2
 80029ba:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <MPU6050_Read_All+0x3a8>)
 80029c4:	4640      	mov	r0, r8
 80029c6:	4649      	mov	r1, r9
 80029c8:	f7fe f87a 	bl	8000ac0 <__aeabi_dcmpgt>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d008      	beq.n	80029e4 <MPU6050_Read_All+0x344>
		DataStruct->Gx = -DataStruct->Gx;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029d8:	4614      	mov	r4, r2
 80029da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80029ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029f2:	e9cd 2300 	strd	r2, r3, [sp]
 80029f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029fa:	4815      	ldr	r0, [pc, #84]	; (8002a50 <MPU6050_Read_All+0x3b0>)
 80029fc:	f000 f82a 	bl	8002a54 <Kalman_getAngle>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	6839      	ldr	r1, [r7, #0]
 8002a06:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			dt);
}
 8002a0a:	bf00      	nop
 8002a0c:	3740      	adds	r7, #64	; 0x40
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a14:	f3af 8000 	nop.w
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	40cc2900 	.word	0x40cc2900
 8002a20:	00000000 	.word	0x00000000
 8002a24:	40606000 	.word	0x40606000
 8002a28:	1a63c1f8 	.word	0x1a63c1f8
 8002a2c:	404ca5dc 	.word	0x404ca5dc
 8002a30:	40d00000 	.word	0x40d00000
 8002a34:	43aa0000 	.word	0x43aa0000
 8002a38:	42121eb8 	.word	0x42121eb8
 8002a3c:	200002e8 	.word	0x200002e8
 8002a40:	408f4000 	.word	0x408f4000
 8002a44:	c0568000 	.word	0xc0568000
 8002a48:	40568000 	.word	0x40568000
 8002a4c:	20000050 	.word	0x20000050
 8002a50:	20000008 	.word	0x20000008

08002a54 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b092      	sub	sp, #72	; 0x48
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a6a:	f7fd fbe1 	bl	8000230 <__aeabi_dsub>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a84:	f7fd fd8c 	bl	80005a0 <__aeabi_dmul>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f7fd fbd0 	bl	8000234 <__adddf3>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002aaa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002aae:	f7fd fd77 	bl	80005a0 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ac0:	f7fd fbb6 	bl	8000230 <__aeabi_dsub>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ad2:	f7fd fbad 	bl	8000230 <__aeabi_dsub>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fd fba6 	bl	8000234 <__adddf3>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8002af0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002af4:	f7fd fd54 	bl	80005a0 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 8002afc:	4620      	mov	r0, r4
 8002afe:	4629      	mov	r1, r5
 8002b00:	f7fd fb98 	bl	8000234 <__adddf3>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b1a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002b1e:	f7fd fd3f 	bl	80005a0 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fb81 	bl	8000230 <__aeabi_dsub>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	68f9      	ldr	r1, [r7, #12]
 8002b34:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002b44:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002b48:	f7fd fd2a 	bl	80005a0 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4620      	mov	r0, r4
 8002b52:	4629      	mov	r1, r5
 8002b54:	f7fd fb6c 	bl	8000230 <__aeabi_dsub>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	68f9      	ldr	r1, [r7, #12]
 8002b5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002b6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002b72:	f7fd fd15 	bl	80005a0 <__aeabi_dmul>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	f7fd fb59 	bl	8000234 <__adddf3>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002b98:	f7fd fb4c 	bl	8000234 <__adddf3>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002baa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bae:	f7fd fe21 	bl	80007f4 <__aeabi_ddiv>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bc4:	f7fd fe16 	bl	80007f4 <__aeabi_ddiv>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bda:	f7fd fb29 	bl	8000230 <__aeabi_dsub>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002bec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bf0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bf4:	f7fd fcd4 	bl	80005a0 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	f7fd fb18 	bl	8000234 <__adddf3>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002c14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c1c:	f7fd fcc0 	bl	80005a0 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4620      	mov	r0, r4
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd fb04 	bl	8000234 <__adddf3>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	68f9      	ldr	r1, [r7, #12]
 8002c32:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c46:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002c50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c58:	f7fd fca2 	bl	80005a0 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4620      	mov	r0, r4
 8002c62:	4629      	mov	r1, r5
 8002c64:	f7fd fae4 	bl	8000230 <__aeabi_dsub>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002c78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c80:	f7fd fc8e 	bl	80005a0 <__aeabi_dmul>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4620      	mov	r0, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	f7fd fad0 	bl	8000230 <__aeabi_dsub>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ca4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ca8:	f7fd fc7a 	bl	80005a0 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fabc 	bl	8000230 <__aeabi_dsub>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	68f9      	ldr	r1, [r7, #12]
 8002cbe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002cc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ccc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cd0:	f7fd fc66 	bl	80005a0 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4620      	mov	r0, r4
 8002cda:	4629      	mov	r1, r5
 8002cdc:	f7fd faa8 	bl	8000230 <__aeabi_dsub>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	3748      	adds	r7, #72	; 0x48
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_MspInit+0x5c>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_MspInit+0x5c>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6193      	str	r3, [r2, #24]
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_MspInit+0x5c>)
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_MspInit+0x5c>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_MspInit+0x5c>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_MspInit+0x5c>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_MspInit+0x60>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_MspInit+0x60>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40010000 	.word	0x40010000

08002d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <NMI_Handler+0x4>

08002d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d6a:	e7fe      	b.n	8002d6a <HardFault_Handler+0x4>

08002d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <MemManage_Handler+0x4>

08002d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <BusFault_Handler+0x4>

08002d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <UsageFault_Handler+0x4>

08002d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da6:	f000 f921 	bl	8002fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <CAN1_TX_IRQHandler+0x10>)
 8002db6:	f000 fd89 	bl	80038cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200001a8 	.word	0x200001a8

08002dc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <CAN1_RX0_IRQHandler+0x10>)
 8002dca:	f000 fd7f 	bl	80038cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200001a8 	.word	0x200001a8

08002dd8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <CAN1_RX1_IRQHandler+0x10>)
 8002dde:	f000 fd75 	bl	80038cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200001a8 	.word	0x200001a8

08002dec <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <CAN1_SCE_IRQHandler+0x10>)
 8002df2:	f000 fd6b 	bl	80038cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200001a8 	.word	0x200001a8

08002e00 <_read>:
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e00a      	b.n	8002e28 <_read+0x28>
 8002e12:	f3af 8000 	nop.w
 8002e16:	4601      	mov	r1, r0
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	60ba      	str	r2, [r7, #8]
 8002e1e:	b2ca      	uxtb	r2, r1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	3301      	adds	r3, #1
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbf0      	blt.n	8002e12 <_read+0x12>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <_close>:
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <_fstat>:
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	2300      	movs	r3, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <_isatty>:
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	2301      	movs	r3, #1
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <_lseek>:
 8002e82:	b480      	push	{r7}
 8002e84:	b085      	sub	sp, #20
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
	...

08002e9c <_sbrk>:
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <_sbrk+0x5c>)
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <_sbrk+0x60>)
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <_sbrk+0x64>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <_sbrk+0x22>
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <_sbrk+0x64>)
 8002eba:	4a12      	ldr	r2, [pc, #72]	; (8002f04 <_sbrk+0x68>)
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d207      	bcs.n	8002edc <_sbrk+0x40>
 8002ecc:	f003 f8b6 	bl	800603c <__errno>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	220c      	movs	r2, #12
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eda:	e009      	b.n	8002ef0 <_sbrk+0x54>
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <_sbrk+0x64>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <_sbrk+0x64>)
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20010000 	.word	0x20010000
 8002efc:	00000400 	.word	0x00000400
 8002f00:	2000014c 	.word	0x2000014c
 8002f04:	20000320 	.word	0x20000320

08002f08 <SystemInit>:
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <Reset_Handler>:
 8002f14:	480c      	ldr	r0, [pc, #48]	; (8002f48 <LoopFillZerobss+0x12>)
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <LoopFillZerobss+0x16>)
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <LoopFillZerobss+0x1a>)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:
 8002f1e:	58d4      	ldr	r4, [r2, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:
 8002f24:	18c4      	adds	r4, r0, r3
 8002f26:	428c      	cmp	r4, r1
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <LoopFillZerobss+0x1e>)
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	; (8002f58 <LoopFillZerobss+0x22>)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:
 8002f36:	42a2      	cmp	r2, r4
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>
 8002f3a:	f7ff ffe5 	bl	8002f08 <SystemInit>
 8002f3e:	f003 f883 	bl	8006048 <__libc_init_array>
 8002f42:	f7ff f8ef 	bl	8002124 <main>
 8002f46:	4770      	bx	lr
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	2000010c 	.word	0x2000010c
 8002f50:	08007758 	.word	0x08007758
 8002f54:	20000110 	.word	0x20000110
 8002f58:	20000320 	.word	0x20000320

08002f5c <ADC1_2_IRQHandler>:
 8002f5c:	e7fe      	b.n	8002f5c <ADC1_2_IRQHandler>
	...

08002f60 <HAL_Init>:
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_Init+0x28>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_Init+0x28>)
 8002f6a:	f043 0310 	orr.w	r3, r3, #16
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 ff9d 	bl	8003eb0 <HAL_NVIC_SetPriorityGrouping>
 8002f76:	200f      	movs	r0, #15
 8002f78:	f000 f808 	bl	8002f8c <HAL_InitTick>
 8002f7c:	f7ff febe 	bl	8002cfc <HAL_MspInit>
 8002f80:	2300      	movs	r3, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000

08002f8c <HAL_InitTick>:
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x54>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_InitTick+0x58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 ffb5 	bl	8003f1a <HAL_SYSTICK_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_InitTick+0x2e>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00e      	b.n	8002fd8 <HAL_InitTick+0x4c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d80a      	bhi.n	8002fd6 <HAL_InitTick+0x4a>
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fc8:	f000 ff7d 	bl	8003ec6 <HAL_NVIC_SetPriority>
 8002fcc:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <HAL_InitTick+0x5c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_InitTick+0x4c>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000098 	.word	0x20000098
 8002fe4:	200000a0 	.word	0x200000a0
 8002fe8:	2000009c 	.word	0x2000009c

08002fec <HAL_IncTick>:
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_IncTick+0x1c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_IncTick+0x20>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a03      	ldr	r2, [pc, #12]	; (800300c <HAL_IncTick+0x20>)
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	200000a0 	.word	0x200000a0
 800300c:	200002ec 	.word	0x200002ec

08003010 <HAL_GetTick>:
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
 8003014:	4b02      	ldr	r3, [pc, #8]	; (8003020 <HAL_GetTick+0x10>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	200002ec 	.word	0x200002ec

08003024 <HAL_Delay>:
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	f7ff fff0 	bl	8003010 <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800303c:	d005      	beq.n	800304a <HAL_Delay+0x26>
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_Delay+0x44>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	bf00      	nop
 800304c:	f7ff ffe0 	bl	8003010 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d8f7      	bhi.n	800304c <HAL_Delay+0x28>
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200000a0 	.word	0x200000a0

0800306c <HAL_CAN_Init>:
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_CAN_Init+0x12>
 800307a:	2301      	movs	r3, #1
 800307c:	e0ed      	b.n	800325a <HAL_CAN_Init+0x1ee>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_CAN_Init+0x24>
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe fa18 	bl	80014c0 <HAL_CAN_MspInit>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	f7ff ffb6 	bl	8003010 <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	e012      	b.n	80030ce <HAL_CAN_Init+0x62>
 80030a8:	f7ff ffb2 	bl	8003010 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b0a      	cmp	r3, #10
 80030b4:	d90b      	bls.n	80030ce <HAL_CAN_Init+0x62>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2205      	movs	r2, #5
 80030c6:	f883 2020 	strb.w	r2, [r3, #32]
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0c5      	b.n	800325a <HAL_CAN_Init+0x1ee>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0e5      	beq.n	80030a8 <HAL_CAN_Init+0x3c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0202 	bic.w	r2, r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f7ff ff90 	bl	8003010 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	e012      	b.n	800311a <HAL_CAN_Init+0xae>
 80030f4:	f7ff ff8c 	bl	8003010 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b0a      	cmp	r3, #10
 8003100:	d90b      	bls.n	800311a <HAL_CAN_Init+0xae>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2205      	movs	r2, #5
 8003112:	f883 2020 	strb.w	r2, [r3, #32]
 8003116:	2301      	movs	r3, #1
 8003118:	e09f      	b.n	800325a <HAL_CAN_Init+0x1ee>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <HAL_CAN_Init+0x88>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	7e1b      	ldrb	r3, [r3, #24]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d108      	bne.n	8003142 <HAL_CAN_Init+0xd6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e007      	b.n	8003152 <HAL_CAN_Init+0xe6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7e5b      	ldrb	r3, [r3, #25]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d108      	bne.n	800316c <HAL_CAN_Init+0x100>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e007      	b.n	800317c <HAL_CAN_Init+0x110>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7e9b      	ldrb	r3, [r3, #26]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d108      	bne.n	8003196 <HAL_CAN_Init+0x12a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0220 	orr.w	r2, r2, #32
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	e007      	b.n	80031a6 <HAL_CAN_Init+0x13a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0220 	bic.w	r2, r2, #32
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	7edb      	ldrb	r3, [r3, #27]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d108      	bne.n	80031c0 <HAL_CAN_Init+0x154>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0210 	bic.w	r2, r2, #16
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e007      	b.n	80031d0 <HAL_CAN_Init+0x164>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0210 	orr.w	r2, r2, #16
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7f1b      	ldrb	r3, [r3, #28]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d108      	bne.n	80031ea <HAL_CAN_Init+0x17e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e007      	b.n	80031fa <HAL_CAN_Init+0x18e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0208 	bic.w	r2, r2, #8
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7f5b      	ldrb	r3, [r3, #29]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d108      	bne.n	8003214 <HAL_CAN_Init+0x1a8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f042 0204 	orr.w	r2, r2, #4
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e007      	b.n	8003224 <HAL_CAN_Init+0x1b8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0204 	bic.w	r2, r2, #4
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	ea42 0103 	orr.w	r1, r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	1e5a      	subs	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	61da      	str	r2, [r3, #28]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2020 	strb.w	r2, [r3, #32]
 8003258:	2300      	movs	r3, #0
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_CAN_ConfigFilter>:
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327a:	74fb      	strb	r3, [r7, #19]
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d003      	beq.n	800328a <HAL_CAN_ConfigFilter+0x26>
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b02      	cmp	r3, #2
 8003286:	f040 80be 	bne.w	8003406 <HAL_CAN_ConfigFilter+0x1a2>
 800328a:	4b65      	ldr	r3, [pc, #404]	; (8003420 <HAL_CAN_ConfigFilter+0x1bc>)
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	431a      	orrs	r2, r3
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2201      	movs	r2, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	401a      	ands	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d123      	bne.n	8003334 <HAL_CAN_ConfigFilter+0xd0>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	0419      	lsls	r1, r3, #16
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b29b      	uxth	r3, r3
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	6952      	ldr	r2, [r2, #20]
 800330e:	4319      	orrs	r1, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	3248      	adds	r2, #72	; 0x48
 8003314:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	0419      	lsls	r1, r3, #16
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b29a      	uxth	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	430a      	orrs	r2, r1
 800332a:	6979      	ldr	r1, [r7, #20]
 800332c:	3348      	adds	r3, #72	; 0x48
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d122      	bne.n	8003382 <HAL_CAN_ConfigFilter+0x11e>
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0419      	lsls	r1, r3, #16
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b29b      	uxth	r3, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	6952      	ldr	r2, [r2, #20]
 800335c:	4319      	orrs	r1, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3248      	adds	r2, #72	; 0x48
 8003362:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0419      	lsls	r1, r3, #16
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	b29a      	uxth	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	430a      	orrs	r2, r1
 8003378:	6979      	ldr	r1, [r7, #20]
 800337a:	3348      	adds	r3, #72	; 0x48
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_CAN_ConfigFilter+0x13a>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	401a      	ands	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800339c:	e007      	b.n	80033ae <HAL_CAN_ConfigFilter+0x14a>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_CAN_ConfigFilter+0x166>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43db      	mvns	r3, r3
 80033c0:	401a      	ands	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033c8:	e007      	b.n	80033da <HAL_CAN_ConfigFilter+0x176>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_CAN_ConfigFilter+0x18e>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033f8:	f023 0201 	bic.w	r2, r3, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003402:	2300      	movs	r3, #0
 8003404:	e006      	b.n	8003414 <HAL_CAN_ConfigFilter+0x1b0>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
 8003412:	2301      	movs	r3, #1
 8003414:	4618      	mov	r0, r3
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40006400 	.word	0x40006400

08003424 <HAL_CAN_Start>:
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	d12e      	bne.n	8003496 <HAL_CAN_Start+0x72>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2020 	strb.w	r2, [r3, #32]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f7ff fdde 	bl	8003010 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	e012      	b.n	800347e <HAL_CAN_Start+0x5a>
 8003458:	f7ff fdda 	bl	8003010 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b0a      	cmp	r3, #10
 8003464:	d90b      	bls.n	800347e <HAL_CAN_Start+0x5a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2205      	movs	r2, #5
 8003476:	f883 2020 	strb.w	r2, [r3, #32]
 800347a:	2301      	movs	r3, #1
 800347c:	e012      	b.n	80034a4 <HAL_CAN_Start+0x80>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e5      	bne.n	8003458 <HAL_CAN_Start+0x34>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	625a      	str	r2, [r3, #36]	; 0x24
 8003492:	2300      	movs	r3, #0
 8003494:	e006      	b.n	80034a4 <HAL_CAN_Start+0x80>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
 80034a2:	2301      	movs	r3, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_CAN_AddTxMessage>:
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	; 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	7ffb      	ldrb	r3, [r7, #31]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d003      	beq.n	80034d8 <HAL_CAN_AddTxMessage+0x2c>
 80034d0:	7ffb      	ldrb	r3, [r7, #31]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f040 80b8 	bne.w	8003648 <HAL_CAN_AddTxMessage+0x19c>
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_CAN_AddTxMessage+0x4c>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_CAN_AddTxMessage+0x4c>
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a0 	beq.w	8003638 <HAL_CAN_AddTxMessage+0x18c>
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	0e1b      	lsrs	r3, r3, #24
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d907      	bls.n	8003518 <HAL_CAN_AddTxMessage+0x6c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24
 8003514:	2301      	movs	r3, #1
 8003516:	e09e      	b.n	8003656 <HAL_CAN_AddTxMessage+0x1aa>
 8003518:	2201      	movs	r2, #1
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	409a      	lsls	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10d      	bne.n	8003546 <HAL_CAN_AddTxMessage+0x9a>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	055a      	lsls	r2, r3, #21
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	68f9      	ldr	r1, [r7, #12]
 8003536:	6809      	ldr	r1, [r1, #0]
 8003538:	431a      	orrs	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3318      	adds	r3, #24
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	440b      	add	r3, r1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e00f      	b.n	8003566 <HAL_CAN_AddTxMessage+0xba>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	00da      	lsls	r2, r3, #3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	431a      	orrs	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68f9      	ldr	r1, [r7, #12]
 8003558:	6809      	ldr	r1, [r1, #0]
 800355a:	431a      	orrs	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3318      	adds	r3, #24
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	440b      	add	r3, r1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	3318      	adds	r3, #24
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	440b      	add	r3, r1
 8003576:	3304      	adds	r3, #4
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	7d1b      	ldrb	r3, [r3, #20]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d111      	bne.n	80035a6 <HAL_CAN_AddTxMessage+0xfa>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3318      	adds	r3, #24
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	4413      	add	r3, r2
 800358e:	3304      	adds	r3, #4
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	6811      	ldr	r1, [r2, #0]
 8003596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3318      	adds	r3, #24
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	440b      	add	r3, r1
 80035a2:	3304      	adds	r3, #4
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3307      	adds	r3, #7
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	061a      	lsls	r2, r3, #24
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3306      	adds	r3, #6
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3305      	adds	r3, #5
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	4313      	orrs	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	3204      	adds	r2, #4
 80035c6:	7812      	ldrb	r2, [r2, #0]
 80035c8:	4610      	mov	r0, r2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6811      	ldr	r1, [r2, #0]
 80035ce:	ea43 0200 	orr.w	r2, r3, r0
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	440b      	add	r3, r1
 80035d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3303      	adds	r3, #3
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	061a      	lsls	r2, r3, #24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3302      	adds	r3, #2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3301      	adds	r3, #1
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	4313      	orrs	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	4610      	mov	r0, r2
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	6811      	ldr	r1, [r2, #0]
 8003604:	ea43 0200 	orr.w	r2, r3, r0
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	440b      	add	r3, r1
 800360e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3318      	adds	r3, #24
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	4413      	add	r3, r2
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	6811      	ldr	r1, [r2, #0]
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3318      	adds	r3, #24
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	440b      	add	r3, r1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	2300      	movs	r3, #0
 8003636:	e00e      	b.n	8003656 <HAL_CAN_AddTxMessage+0x1aa>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
 8003644:	2301      	movs	r3, #1
 8003646:	e006      	b.n	8003656 <HAL_CAN_AddTxMessage+0x1aa>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24
 8003654:	2301      	movs	r3, #1
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_CAN_GetRxMessage>:
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003674:	75fb      	strb	r3, [r7, #23]
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d003      	beq.n	8003684 <HAL_CAN_GetRxMessage+0x24>
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	2b02      	cmp	r3, #2
 8003680:	f040 80f3 	bne.w	800386a <HAL_CAN_GetRxMessage+0x20a>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10e      	bne.n	80036a8 <HAL_CAN_GetRxMessage+0x48>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d116      	bne.n	80036c6 <HAL_CAN_GetRxMessage+0x66>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0e7      	b.n	8003878 <HAL_CAN_GetRxMessage+0x218>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_CAN_GetRxMessage+0x66>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0d8      	b.n	8003878 <HAL_CAN_GetRxMessage+0x218>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	331b      	adds	r3, #27
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	4413      	add	r3, r2
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0204 	and.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10c      	bne.n	80036fe <HAL_CAN_GetRxMessage+0x9e>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	331b      	adds	r3, #27
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	4413      	add	r3, r2
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0d5b      	lsrs	r3, r3, #21
 80036f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e00b      	b.n	8003716 <HAL_CAN_GetRxMessage+0xb6>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	331b      	adds	r3, #27
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	4413      	add	r3, r2
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	331b      	adds	r3, #27
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	4413      	add	r3, r2
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0202 	and.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	331b      	adds	r3, #27
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	3304      	adds	r3, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	611a      	str	r2, [r3, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	331b      	adds	r3, #27
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	b2da      	uxtb	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	619a      	str	r2, [r3, #24]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	331b      	adds	r3, #27
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	0c1b      	lsrs	r3, r3, #16
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	615a      	str	r2, [r3, #20]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	4413      	add	r3, r2
 800377e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4413      	add	r3, r2
 8003794:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0a1a      	lsrs	r2, r3, #8
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	0c1a      	lsrs	r2, r3, #16
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	3302      	adds	r3, #2
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0e1a      	lsrs	r2, r3, #24
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	3303      	adds	r3, #3
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	3304      	adds	r3, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0a1a      	lsrs	r2, r3, #8
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	3305      	adds	r3, #5
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4413      	add	r3, r2
 8003814:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	0c1a      	lsrs	r2, r3, #16
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	3306      	adds	r3, #6
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	4413      	add	r3, r2
 800382e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e1a      	lsrs	r2, r3, #24
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	3307      	adds	r3, #7
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d108      	bne.n	8003856 <HAL_CAN_GetRxMessage+0x1f6>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0220 	orr.w	r2, r2, #32
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e007      	b.n	8003866 <HAL_CAN_GetRxMessage+0x206>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0220 	orr.w	r2, r2, #32
 8003864:	611a      	str	r2, [r3, #16]
 8003866:	2300      	movs	r3, #0
 8003868:	e006      	b.n	8003878 <HAL_CAN_GetRxMessage+0x218>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
 8003876:	2301      	movs	r3, #1
 8003878:	4618      	mov	r0, r3
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_CAN_ActivateNotification>:
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d002      	beq.n	80038a0 <HAL_CAN_ActivateNotification+0x1e>
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d109      	bne.n	80038b4 <HAL_CAN_ActivateNotification+0x32>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6959      	ldr	r1, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	615a      	str	r2, [r3, #20]
 80038b0:	2300      	movs	r3, #0
 80038b2:	e006      	b.n	80038c2 <HAL_CAN_ActivateNotification+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
 80038c0:	2301      	movs	r3, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_CAN_IRQHandler>:
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d07c      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x140>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_CAN_IRQHandler+0x98>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2201      	movs	r2, #1
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_CAN_IRQHandler+0x6a>
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f983 	bl	8003c3a <HAL_CAN_TxMailbox0CompleteCallback>
 8003934:	e016      	b.n	8003964 <HAL_CAN_IRQHandler+0x98>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <HAL_CAN_IRQHandler+0x7e>
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e00c      	b.n	8003964 <HAL_CAN_IRQHandler+0x98>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_CAN_IRQHandler+0x92>
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	e002      	b.n	8003964 <HAL_CAN_IRQHandler+0x98>
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f986 	bl	8003c70 <HAL_CAN_TxMailbox0AbortCallback>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d024      	beq.n	80039b8 <HAL_CAN_IRQHandler+0xec>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_CAN_IRQHandler+0xbe>
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f962 	bl	8003c4c <HAL_CAN_TxMailbox1CompleteCallback>
 8003988:	e016      	b.n	80039b8 <HAL_CAN_IRQHandler+0xec>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_CAN_IRQHandler+0xd2>
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
 800399c:	e00c      	b.n	80039b8 <HAL_CAN_IRQHandler+0xec>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_CAN_IRQHandler+0xe6>
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	e002      	b.n	80039b8 <HAL_CAN_IRQHandler+0xec>
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f965 	bl	8003c82 <HAL_CAN_TxMailbox1AbortCallback>
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d024      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x140>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_CAN_IRQHandler+0x112>
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f941 	bl	8003c5e <HAL_CAN_TxMailbox2CompleteCallback>
 80039dc:	e016      	b.n	8003a0c <HAL_CAN_IRQHandler+0x140>
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d004      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x126>
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
 80039f0:	e00c      	b.n	8003a0c <HAL_CAN_IRQHandler+0x140>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x13a>
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	e002      	b.n	8003a0c <HAL_CAN_IRQHandler+0x140>
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f944 	bl	8003c94 <HAL_CAN_TxMailbox2AbortCallback>
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x164>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x164>
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x186>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d006      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x186>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f92a 	bl	8003ca6 <HAL_CAN_RxFifo0FullCallback>
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d009      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x1a4>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x1a4>
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe fc94 	bl	8002398 <HAL_CAN_RxFifo0MsgPendingCallback>
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x1c8>
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x1c8>
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2210      	movs	r2, #16
 8003a92:	611a      	str	r2, [r3, #16]
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x1ea>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x1ea>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2208      	movs	r2, #8
 8003aae:	611a      	str	r2, [r3, #16]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f90a 	bl	8003cca <HAL_CAN_RxFifo1FullCallback>
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x208>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x208>
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8f2 	bl	8003cb8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x22a>
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x22a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2210      	movs	r2, #16
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f8f3 	bl	8003cdc <HAL_CAN_SleepCallback>
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00b      	beq.n	8003b18 <HAL_CAN_IRQHandler+0x24c>
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_CAN_IRQHandler+0x24c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2208      	movs	r2, #8
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8eb 	bl	8003cee <HAL_CAN_WakeUpFromRxMsgCallback>
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d07b      	beq.n	8003c1a <HAL_CAN_IRQHandler+0x34e>
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d072      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x346>
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_CAN_IRQHandler+0x27c>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_CAN_IRQHandler+0x27c>
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x298>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_CAN_IRQHandler+0x298>
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f043 0302 	orr.w	r3, r3, #2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_CAN_IRQHandler+0x2b4>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_CAN_IRQHandler+0x2b4>
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d043      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x346>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d03e      	beq.n	8003c12 <HAL_CAN_IRQHandler+0x346>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b9a:	2b60      	cmp	r3, #96	; 0x60
 8003b9c:	d02b      	beq.n	8003bf6 <HAL_CAN_IRQHandler+0x32a>
 8003b9e:	2b60      	cmp	r3, #96	; 0x60
 8003ba0:	d82e      	bhi.n	8003c00 <HAL_CAN_IRQHandler+0x334>
 8003ba2:	2b50      	cmp	r3, #80	; 0x50
 8003ba4:	d022      	beq.n	8003bec <HAL_CAN_IRQHandler+0x320>
 8003ba6:	2b50      	cmp	r3, #80	; 0x50
 8003ba8:	d82a      	bhi.n	8003c00 <HAL_CAN_IRQHandler+0x334>
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d019      	beq.n	8003be2 <HAL_CAN_IRQHandler+0x316>
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d826      	bhi.n	8003c00 <HAL_CAN_IRQHandler+0x334>
 8003bb2:	2b30      	cmp	r3, #48	; 0x30
 8003bb4:	d010      	beq.n	8003bd8 <HAL_CAN_IRQHandler+0x30c>
 8003bb6:	2b30      	cmp	r3, #48	; 0x30
 8003bb8:	d822      	bhi.n	8003c00 <HAL_CAN_IRQHandler+0x334>
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d002      	beq.n	8003bc4 <HAL_CAN_IRQHandler+0x2f8>
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d005      	beq.n	8003bce <HAL_CAN_IRQHandler+0x302>
 8003bc2:	e01d      	b.n	8003c00 <HAL_CAN_IRQHandler+0x334>
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	f043 0308 	orr.w	r3, r3, #8
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	e019      	b.n	8003c02 <HAL_CAN_IRQHandler+0x336>
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	f043 0310 	orr.w	r3, r3, #16
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e014      	b.n	8003c02 <HAL_CAN_IRQHandler+0x336>
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	f043 0320 	orr.w	r3, r3, #32
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	e00f      	b.n	8003c02 <HAL_CAN_IRQHandler+0x336>
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	e00a      	b.n	8003c02 <HAL_CAN_IRQHandler+0x336>
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	e005      	b.n	8003c02 <HAL_CAN_IRQHandler+0x336>
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	e000      	b.n	8003c02 <HAL_CAN_IRQHandler+0x336>
 8003c00:	bf00      	nop
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c10:	619a      	str	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2204      	movs	r2, #4
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d008      	beq.n	8003c32 <HAL_CAN_IRQHandler+0x366>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe fcc7 	bl	80025c0 <HAL_CAN_ErrorCallback>
 8003c32:	bf00      	nop
 8003c34:	3728      	adds	r7, #40	; 0x28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_CAN_TxMailbox0CompleteCallback>:
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_CAN_TxMailbox1CompleteCallback>:
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <HAL_CAN_TxMailbox2CompleteCallback>:
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_CAN_TxMailbox0AbortCallback>:
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <HAL_CAN_TxMailbox1AbortCallback>:
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <HAL_CAN_TxMailbox2AbortCallback>:
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_CAN_RxFifo0FullCallback>:
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <HAL_CAN_RxFifo1FullCallback>:
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HAL_CAN_SleepCallback>:
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_CAN_GetError>:
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
	...

08003d18 <__NVIC_SetPriorityGrouping>:
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d34:	4013      	ands	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	60d3      	str	r3, [r2, #12]
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <__NVIC_GetPriorityGrouping>:
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <__NVIC_GetPriorityGrouping+0x18>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_EnableIRQ>:
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	db0b      	blt.n	8003da6 <__NVIC_EnableIRQ+0x2a>
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4906      	ldr	r1, [pc, #24]	; (8003db0 <__NVIC_EnableIRQ+0x34>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	e000e100 	.word	0xe000e100

08003db4 <__NVIC_SetPriority>:
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	6039      	str	r1, [r7, #0]
 8003dbe:	71fb      	strb	r3, [r7, #7]
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db0a      	blt.n	8003dde <__NVIC_SetPriority+0x2a>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	490c      	ldr	r1, [pc, #48]	; (8003e00 <__NVIC_SetPriority+0x4c>)
 8003dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003ddc:	e00a      	b.n	8003df4 <__NVIC_SetPriority+0x40>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <__NVIC_SetPriority+0x50>)
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	3b04      	subs	r3, #4
 8003dec:	0112      	lsls	r2, r2, #4
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	440b      	add	r3, r1
 8003df2:	761a      	strb	r2, [r3, #24]
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e100 	.word	0xe000e100
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <NVIC_EncodePriority>:
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f1c3 0307 	rsb	r3, r3, #7
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	bf28      	it	cs
 8003e26:	2304      	movcs	r3, #4
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	2b06      	cmp	r3, #6
 8003e30:	d902      	bls.n	8003e38 <NVIC_EncodePriority+0x30>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3b03      	subs	r3, #3
 8003e36:	e000      	b.n	8003e3a <NVIC_EncodePriority+0x32>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43da      	mvns	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5a:	43d9      	mvns	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	400b      	ands	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <SysTick_Config>:
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e7c:	d301      	bcc.n	8003e82 <SysTick_Config+0x16>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e00f      	b.n	8003ea2 <SysTick_Config+0x36>
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <SysTick_Config+0x40>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	210f      	movs	r1, #15
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e90:	f7ff ff90 	bl	8003db4 <__NVIC_SetPriority>
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <SysTick_Config+0x40>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <SysTick_Config+0x40>)
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	e000e010 	.word	0xe000e010

08003eb0 <HAL_NVIC_SetPriorityGrouping>:
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff2d 	bl	8003d18 <__NVIC_SetPriorityGrouping>
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_NVIC_SetPriority>:
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4603      	mov	r3, r0
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	f7ff ff42 	bl	8003d60 <__NVIC_GetPriorityGrouping>
 8003edc:	6178      	str	r0, [r7, #20]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	6978      	ldr	r0, [r7, #20]
 8003ee4:	f7ff ff90 	bl	8003e08 <NVIC_EncodePriority>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff5f 	bl	8003db4 <__NVIC_SetPriority>
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_NVIC_EnableIRQ>:
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	4603      	mov	r3, r0
 8003f06:	71fb      	strb	r3, [r7, #7]
 8003f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ff35 	bl	8003d7c <__NVIC_EnableIRQ>
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_SYSTICK_Config>:
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ffa2 	bl	8003e6c <SysTick_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_FLASH_Program>:
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	e9c7 2300 	strd	r2, r3, [r7]
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
 8003f46:	2300      	movs	r3, #0
 8003f48:	75bb      	strb	r3, [r7, #22]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	757b      	strb	r3, [r7, #21]
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	; (800400c <HAL_FLASH_Program+0xd8>)
 8003f50:	7e1b      	ldrb	r3, [r3, #24]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_FLASH_Program+0x26>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e054      	b.n	8004004 <HAL_FLASH_Program+0xd0>
 8003f5a:	4b2c      	ldr	r3, [pc, #176]	; (800400c <HAL_FLASH_Program+0xd8>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	761a      	strb	r2, [r3, #24]
 8003f60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f64:	f000 f898 	bl	8004098 <FLASH_WaitForLastOperation>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	75fb      	strb	r3, [r7, #23]
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d144      	bne.n	8003ffc <HAL_FLASH_Program+0xc8>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d102      	bne.n	8003f7e <HAL_FLASH_Program+0x4a>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	757b      	strb	r3, [r7, #21]
 8003f7c:	e007      	b.n	8003f8e <HAL_FLASH_Program+0x5a>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d102      	bne.n	8003f8a <HAL_FLASH_Program+0x56>
 8003f84:	2302      	movs	r3, #2
 8003f86:	757b      	strb	r3, [r7, #21]
 8003f88:	e001      	b.n	8003f8e <HAL_FLASH_Program+0x5a>
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	757b      	strb	r3, [r7, #21]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75bb      	strb	r3, [r7, #22]
 8003f92:	e02d      	b.n	8003ff0 <HAL_FLASH_Program+0xbc>
 8003f94:	7dbb      	ldrb	r3, [r7, #22]
 8003f96:	005a      	lsls	r2, r3, #1
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	eb02 0c03 	add.w	ip, r2, r3
 8003f9e:	7dbb      	ldrb	r3, [r7, #22]
 8003fa0:	0119      	lsls	r1, r3, #4
 8003fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fa6:	f1c1 0620 	rsb	r6, r1, #32
 8003faa:	f1a1 0020 	sub.w	r0, r1, #32
 8003fae:	fa22 f401 	lsr.w	r4, r2, r1
 8003fb2:	fa03 f606 	lsl.w	r6, r3, r6
 8003fb6:	4334      	orrs	r4, r6
 8003fb8:	fa23 f000 	lsr.w	r0, r3, r0
 8003fbc:	4304      	orrs	r4, r0
 8003fbe:	fa23 f501 	lsr.w	r5, r3, r1
 8003fc2:	b2a3      	uxth	r3, r4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4660      	mov	r0, ip
 8003fc8:	f000 f84a 	bl	8004060 <FLASH_Program_HalfWord>
 8003fcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fd0:	f000 f862 	bl	8004098 <FLASH_WaitForLastOperation>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	75fb      	strb	r3, [r7, #23]
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <HAL_FLASH_Program+0xdc>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <HAL_FLASH_Program+0xdc>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6113      	str	r3, [r2, #16]
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d107      	bne.n	8003ffa <HAL_FLASH_Program+0xc6>
 8003fea:	7dbb      	ldrb	r3, [r7, #22]
 8003fec:	3301      	adds	r3, #1
 8003fee:	75bb      	strb	r3, [r7, #22]
 8003ff0:	7dba      	ldrb	r2, [r7, #22]
 8003ff2:	7d7b      	ldrb	r3, [r7, #21]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3cd      	bcc.n	8003f94 <HAL_FLASH_Program+0x60>
 8003ff8:	e000      	b.n	8003ffc <HAL_FLASH_Program+0xc8>
 8003ffa:	bf00      	nop
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <HAL_FLASH_Program+0xd8>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	761a      	strb	r2, [r3, #24]
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	4618      	mov	r0, r3
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400c:	200002f0 	.word	0x200002f0
 8004010:	40022000 	.word	0x40022000

08004014 <HAL_FLASH_Unlock>:
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	2300      	movs	r3, #0
 800401c:	71fb      	strb	r3, [r7, #7]
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_FLASH_Unlock+0x40>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <HAL_FLASH_Unlock+0x32>
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_FLASH_Unlock+0x40>)
 800402c:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <HAL_FLASH_Unlock+0x44>)
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_FLASH_Unlock+0x40>)
 8004032:	4a0a      	ldr	r2, [pc, #40]	; (800405c <HAL_FLASH_Unlock+0x48>)
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_FLASH_Unlock+0x40>)
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_FLASH_Unlock+0x32>
 8004042:	2301      	movs	r3, #1
 8004044:	71fb      	strb	r3, [r7, #7]
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40022000 	.word	0x40022000
 8004058:	45670123 	.word	0x45670123
 800405c:	cdef89ab 	.word	0xcdef89ab

08004060 <FLASH_Program_HalfWord>:
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	807b      	strh	r3, [r7, #2]
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <FLASH_Program_HalfWord+0x30>)
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <FLASH_Program_HalfWord+0x34>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4a07      	ldr	r2, [pc, #28]	; (8004094 <FLASH_Program_HalfWord+0x34>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6113      	str	r3, [r2, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	887a      	ldrh	r2, [r7, #2]
 8004082:	801a      	strh	r2, [r3, #0]
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	200002f0 	.word	0x200002f0
 8004094:	40022000 	.word	0x40022000

08004098 <FLASH_WaitForLastOperation>:
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	f7fe ffb6 	bl	8003010 <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	e010      	b.n	80040ca <FLASH_WaitForLastOperation+0x32>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ae:	d00c      	beq.n	80040ca <FLASH_WaitForLastOperation+0x32>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <FLASH_WaitForLastOperation+0x2e>
 80040b6:	f7fe ffab 	bl	8003010 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d201      	bcs.n	80040ca <FLASH_WaitForLastOperation+0x32>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e025      	b.n	8004116 <FLASH_WaitForLastOperation+0x7e>
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <FLASH_WaitForLastOperation+0x88>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e8      	bne.n	80040a8 <FLASH_WaitForLastOperation+0x10>
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <FLASH_WaitForLastOperation+0x88>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <FLASH_WaitForLastOperation+0x50>
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <FLASH_WaitForLastOperation+0x88>)
 80040e4:	2220      	movs	r2, #32
 80040e6:	60da      	str	r2, [r3, #12]
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <FLASH_WaitForLastOperation+0x88>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <FLASH_WaitForLastOperation+0x74>
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <FLASH_WaitForLastOperation+0x88>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <FLASH_WaitForLastOperation+0x74>
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <FLASH_WaitForLastOperation+0x88>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <FLASH_WaitForLastOperation+0x7c>
 800410c:	f000 f80a 	bl	8004124 <FLASH_SetErrorCode>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <FLASH_WaitForLastOperation+0x7e>
 8004114:	2300      	movs	r3, #0
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40022000 	.word	0x40022000

08004124 <FLASH_SetErrorCode>:
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	2300      	movs	r3, #0
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <FLASH_SetErrorCode+0x98>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <FLASH_SetErrorCode+0x2a>
 800413a:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <FLASH_SetErrorCode+0x9c>)
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <FLASH_SetErrorCode+0x9c>)
 8004144:	61d3      	str	r3, [r2, #28]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f043 0310 	orr.w	r3, r3, #16
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <FLASH_SetErrorCode+0x98>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <FLASH_SetErrorCode+0x4a>
 800415a:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <FLASH_SetErrorCode+0x9c>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <FLASH_SetErrorCode+0x9c>)
 8004164:	61d3      	str	r3, [r2, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	607b      	str	r3, [r7, #4]
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <FLASH_SetErrorCode+0x98>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <FLASH_SetErrorCode+0x6e>
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <FLASH_SetErrorCode+0x9c>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f043 0304 	orr.w	r3, r3, #4
 8004182:	4a0f      	ldr	r2, [pc, #60]	; (80041c0 <FLASH_SetErrorCode+0x9c>)
 8004184:	61d3      	str	r3, [r2, #28]
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <FLASH_SetErrorCode+0x98>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <FLASH_SetErrorCode+0x98>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	61d3      	str	r3, [r2, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f240 1201 	movw	r2, #257	; 0x101
 8004198:	4293      	cmp	r3, r2
 800419a:	d106      	bne.n	80041aa <FLASH_SetErrorCode+0x86>
 800419c:	4b07      	ldr	r3, [pc, #28]	; (80041bc <FLASH_SetErrorCode+0x98>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	4a06      	ldr	r2, [pc, #24]	; (80041bc <FLASH_SetErrorCode+0x98>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	61d3      	str	r3, [r2, #28]
 80041a8:	e002      	b.n	80041b0 <FLASH_SetErrorCode+0x8c>
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <FLASH_SetErrorCode+0x98>)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60d3      	str	r3, [r2, #12]
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40022000 	.word	0x40022000
 80041c0:	200002f0 	.word	0x200002f0

080041c4 <HAL_FLASHEx_Erase>:
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <HAL_FLASHEx_Erase+0xd0>)
 80041d8:	7e1b      	ldrb	r3, [r3, #24]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_FLASHEx_Erase+0x1e>
 80041de:	2302      	movs	r3, #2
 80041e0:	e053      	b.n	800428a <HAL_FLASHEx_Erase+0xc6>
 80041e2:	4b2c      	ldr	r3, [pc, #176]	; (8004294 <HAL_FLASHEx_Erase+0xd0>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	761a      	strb	r2, [r3, #24]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d116      	bne.n	800421e <HAL_FLASHEx_Erase+0x5a>
 80041f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041f4:	f7ff ff50 	bl	8004098 <FLASH_WaitForLastOperation>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d141      	bne.n	8004282 <HAL_FLASHEx_Erase+0xbe>
 80041fe:	2001      	movs	r0, #1
 8004200:	f000 f84c 	bl	800429c <FLASH_MassErase>
 8004204:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004208:	f7ff ff46 	bl	8004098 <FLASH_WaitForLastOperation>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_FLASHEx_Erase+0xd4>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	4a20      	ldr	r2, [pc, #128]	; (8004298 <HAL_FLASHEx_Erase+0xd4>)
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	6113      	str	r3, [r2, #16]
 800421c:	e031      	b.n	8004282 <HAL_FLASHEx_Erase+0xbe>
 800421e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004222:	f7ff ff39 	bl	8004098 <FLASH_WaitForLastOperation>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d12a      	bne.n	8004282 <HAL_FLASHEx_Erase+0xbe>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	e019      	b.n	8004270 <HAL_FLASHEx_Erase+0xac>
 800423c:	68b8      	ldr	r0, [r7, #8]
 800423e:	f000 f849 	bl	80042d4 <FLASH_PageErase>
 8004242:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004246:	f7ff ff27 	bl	8004098 <FLASH_WaitForLastOperation>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_FLASHEx_Erase+0xd4>)
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_FLASHEx_Erase+0xd4>)
 8004254:	f023 0302 	bic.w	r3, r3, #2
 8004258:	6113      	str	r3, [r2, #16]
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_FLASHEx_Erase+0xa4>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e00c      	b.n	8004282 <HAL_FLASHEx_Erase+0xbe>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	02da      	lsls	r2, r3, #11
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4413      	add	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d3dc      	bcc.n	800423c <HAL_FLASHEx_Erase+0x78>
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <HAL_FLASHEx_Erase+0xd0>)
 8004284:	2200      	movs	r2, #0
 8004286:	761a      	strb	r2, [r3, #24]
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200002f0 	.word	0x200002f0
 8004298:	40022000 	.word	0x40022000

0800429c <FLASH_MassErase>:
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <FLASH_MassErase+0x30>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <FLASH_MassErase+0x34>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <FLASH_MassErase+0x34>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	6113      	str	r3, [r2, #16]
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <FLASH_MassErase+0x34>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <FLASH_MassErase+0x34>)
 80042bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c0:	6113      	str	r3, [r2, #16]
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	200002f0 	.word	0x200002f0
 80042d0:	40022000 	.word	0x40022000

080042d4 <FLASH_PageErase>:
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <FLASH_PageErase+0x38>)
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <FLASH_PageErase+0x3c>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <FLASH_PageErase+0x3c>)
 80042e8:	f043 0302 	orr.w	r3, r3, #2
 80042ec:	6113      	str	r3, [r2, #16]
 80042ee:	4a08      	ldr	r2, [pc, #32]	; (8004310 <FLASH_PageErase+0x3c>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6153      	str	r3, [r2, #20]
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <FLASH_PageErase+0x3c>)
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	4a05      	ldr	r2, [pc, #20]	; (8004310 <FLASH_PageErase+0x3c>)
 80042fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fe:	6113      	str	r3, [r2, #16]
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	200002f0 	.word	0x200002f0
 8004310:	40022000 	.word	0x40022000

08004314 <HAL_GPIO_Init>:
 8004314:	b480      	push	{r7}
 8004316:	b08b      	sub	sp, #44	; 0x2c
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
 8004322:	2300      	movs	r3, #0
 8004324:	623b      	str	r3, [r7, #32]
 8004326:	e169      	b.n	80045fc <HAL_GPIO_Init+0x2e8>
 8004328:	2201      	movs	r2, #1
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	429a      	cmp	r2, r3
 8004342:	f040 8158 	bne.w	80045f6 <HAL_GPIO_Init+0x2e2>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4a9a      	ldr	r2, [pc, #616]	; (80045b4 <HAL_GPIO_Init+0x2a0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d05e      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004350:	4a98      	ldr	r2, [pc, #608]	; (80045b4 <HAL_GPIO_Init+0x2a0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d875      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 8004356:	4a98      	ldr	r2, [pc, #608]	; (80045b8 <HAL_GPIO_Init+0x2a4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d058      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 800435c:	4a96      	ldr	r2, [pc, #600]	; (80045b8 <HAL_GPIO_Init+0x2a4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d86f      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 8004362:	4a96      	ldr	r2, [pc, #600]	; (80045bc <HAL_GPIO_Init+0x2a8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d052      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004368:	4a94      	ldr	r2, [pc, #592]	; (80045bc <HAL_GPIO_Init+0x2a8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d869      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 800436e:	4a94      	ldr	r2, [pc, #592]	; (80045c0 <HAL_GPIO_Init+0x2ac>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d04c      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004374:	4a92      	ldr	r2, [pc, #584]	; (80045c0 <HAL_GPIO_Init+0x2ac>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d863      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 800437a:	4a92      	ldr	r2, [pc, #584]	; (80045c4 <HAL_GPIO_Init+0x2b0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d046      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 8004380:	4a90      	ldr	r2, [pc, #576]	; (80045c4 <HAL_GPIO_Init+0x2b0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d85d      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 8004386:	2b12      	cmp	r3, #18
 8004388:	d82a      	bhi.n	80043e0 <HAL_GPIO_Init+0xcc>
 800438a:	2b12      	cmp	r3, #18
 800438c:	d859      	bhi.n	8004442 <HAL_GPIO_Init+0x12e>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <HAL_GPIO_Init+0x80>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	0800440f 	.word	0x0800440f
 8004398:	080043e9 	.word	0x080043e9
 800439c:	080043fb 	.word	0x080043fb
 80043a0:	0800443d 	.word	0x0800443d
 80043a4:	08004443 	.word	0x08004443
 80043a8:	08004443 	.word	0x08004443
 80043ac:	08004443 	.word	0x08004443
 80043b0:	08004443 	.word	0x08004443
 80043b4:	08004443 	.word	0x08004443
 80043b8:	08004443 	.word	0x08004443
 80043bc:	08004443 	.word	0x08004443
 80043c0:	08004443 	.word	0x08004443
 80043c4:	08004443 	.word	0x08004443
 80043c8:	08004443 	.word	0x08004443
 80043cc:	08004443 	.word	0x08004443
 80043d0:	08004443 	.word	0x08004443
 80043d4:	08004443 	.word	0x08004443
 80043d8:	080043f1 	.word	0x080043f1
 80043dc:	08004405 	.word	0x08004405
 80043e0:	4a79      	ldr	r2, [pc, #484]	; (80045c8 <HAL_GPIO_Init+0x2b4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_GPIO_Init+0xfa>
 80043e6:	e02c      	b.n	8004442 <HAL_GPIO_Init+0x12e>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	e029      	b.n	8004444 <HAL_GPIO_Init+0x130>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	3304      	adds	r3, #4
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	e024      	b.n	8004444 <HAL_GPIO_Init+0x130>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	3308      	adds	r3, #8
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	e01f      	b.n	8004444 <HAL_GPIO_Init+0x130>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	330c      	adds	r3, #12
 800440a:	623b      	str	r3, [r7, #32]
 800440c:	e01a      	b.n	8004444 <HAL_GPIO_Init+0x130>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <HAL_GPIO_Init+0x108>
 8004416:	2304      	movs	r3, #4
 8004418:	623b      	str	r3, [r7, #32]
 800441a:	e013      	b.n	8004444 <HAL_GPIO_Init+0x130>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_GPIO_Init+0x11c>
 8004424:	2308      	movs	r3, #8
 8004426:	623b      	str	r3, [r7, #32]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	611a      	str	r2, [r3, #16]
 800442e:	e009      	b.n	8004444 <HAL_GPIO_Init+0x130>
 8004430:	2308      	movs	r3, #8
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	615a      	str	r2, [r3, #20]
 800443a:	e003      	b.n	8004444 <HAL_GPIO_Init+0x130>
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
 8004440:	e000      	b.n	8004444 <HAL_GPIO_Init+0x130>
 8004442:	bf00      	nop
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2bff      	cmp	r3, #255	; 0xff
 8004448:	d801      	bhi.n	800444e <HAL_GPIO_Init+0x13a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	e001      	b.n	8004452 <HAL_GPIO_Init+0x13e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2bff      	cmp	r3, #255	; 0xff
 8004458:	d802      	bhi.n	8004460 <HAL_GPIO_Init+0x14c>
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	e002      	b.n	8004466 <HAL_GPIO_Init+0x152>
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	3b08      	subs	r3, #8
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	210f      	movs	r1, #15
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	401a      	ands	r2, r3
 8004478:	6a39      	ldr	r1, [r7, #32]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80b1 	beq.w	80045f6 <HAL_GPIO_Init+0x2e2>
 8004494:	4b4d      	ldr	r3, [pc, #308]	; (80045cc <HAL_GPIO_Init+0x2b8>)
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4a4c      	ldr	r2, [pc, #304]	; (80045cc <HAL_GPIO_Init+0x2b8>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6193      	str	r3, [r2, #24]
 80044a0:	4b4a      	ldr	r3, [pc, #296]	; (80045cc <HAL_GPIO_Init+0x2b8>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a48      	ldr	r2, [pc, #288]	; (80045d0 <HAL_GPIO_Init+0x2bc>)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	3302      	adds	r3, #2
 80044b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <HAL_GPIO_Init+0x2c0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_GPIO_Init+0x1ec>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3f      	ldr	r2, [pc, #252]	; (80045d8 <HAL_GPIO_Init+0x2c4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00d      	beq.n	80044fc <HAL_GPIO_Init+0x1e8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3e      	ldr	r2, [pc, #248]	; (80045dc <HAL_GPIO_Init+0x2c8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <HAL_GPIO_Init+0x1e4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3d      	ldr	r2, [pc, #244]	; (80045e0 <HAL_GPIO_Init+0x2cc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d101      	bne.n	80044f4 <HAL_GPIO_Init+0x1e0>
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044f4:	2304      	movs	r3, #4
 80044f6:	e004      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e002      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_GPIO_Init+0x1ee>
 8004500:	2300      	movs	r3, #0
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	f002 0203 	and.w	r2, r2, #3
 8004508:	0092      	lsls	r2, r2, #2
 800450a:	4093      	lsls	r3, r2
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	492f      	ldr	r1, [pc, #188]	; (80045d0 <HAL_GPIO_Init+0x2bc>)
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3302      	adds	r3, #2
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d006      	beq.n	800453a <HAL_GPIO_Init+0x226>
 800452c:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	492c      	ldr	r1, [pc, #176]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	600b      	str	r3, [r1, #0]
 8004538:	e006      	b.n	8004548 <HAL_GPIO_Init+0x234>
 800453a:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	43db      	mvns	r3, r3
 8004542:	4928      	ldr	r1, [pc, #160]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004544:	4013      	ands	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <HAL_GPIO_Init+0x24e>
 8004554:	4b23      	ldr	r3, [pc, #140]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	4922      	ldr	r1, [pc, #136]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
 8004560:	e006      	b.n	8004570 <HAL_GPIO_Init+0x25c>
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	43db      	mvns	r3, r3
 800456a:	491e      	ldr	r1, [pc, #120]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800456c:	4013      	ands	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d006      	beq.n	800458a <HAL_GPIO_Init+0x276>
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4918      	ldr	r1, [pc, #96]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	608b      	str	r3, [r1, #8]
 8004588:	e006      	b.n	8004598 <HAL_GPIO_Init+0x284>
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	43db      	mvns	r3, r3
 8004592:	4914      	ldr	r1, [pc, #80]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 8004594:	4013      	ands	r3, r2
 8004596:	608b      	str	r3, [r1, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d021      	beq.n	80045e8 <HAL_GPIO_Init+0x2d4>
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	490e      	ldr	r1, [pc, #56]	; (80045e4 <HAL_GPIO_Init+0x2d0>)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
 80045b0:	e021      	b.n	80045f6 <HAL_GPIO_Init+0x2e2>
 80045b2:	bf00      	nop
 80045b4:	10320000 	.word	0x10320000
 80045b8:	10310000 	.word	0x10310000
 80045bc:	10220000 	.word	0x10220000
 80045c0:	10210000 	.word	0x10210000
 80045c4:	10120000 	.word	0x10120000
 80045c8:	10110000 	.word	0x10110000
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40010800 	.word	0x40010800
 80045d8:	40010c00 	.word	0x40010c00
 80045dc:	40011000 	.word	0x40011000
 80045e0:	40011400 	.word	0x40011400
 80045e4:	40010400 	.word	0x40010400
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_GPIO_Init+0x304>)
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	4909      	ldr	r1, [pc, #36]	; (8004618 <HAL_GPIO_Init+0x304>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	60cb      	str	r3, [r1, #12]
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	3301      	adds	r3, #1
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	f47f ae8e 	bne.w	8004328 <HAL_GPIO_Init+0x14>
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	372c      	adds	r7, #44	; 0x2c
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr
 8004618:	40010400 	.word	0x40010400

0800461c <HAL_GPIO_ReadPin>:
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	807b      	strh	r3, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_GPIO_ReadPin+0x1e>
 8004634:	2301      	movs	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	e001      	b.n	800463e <HAL_GPIO_ReadPin+0x22>
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
	...

0800464c <HAL_I2C_Init>:
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_I2C_Init+0x12>
 800465a:	2301      	movs	r3, #1
 800465c:	e12b      	b.n	80048b6 <HAL_I2C_Init+0x26a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_I2C_Init+0x2c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fc14 	bl	8001ea0 <HAL_I2C_MspInit>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f001 fc92 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4a81      	ldr	r2, [pc, #516]	; (80048c0 <HAL_I2C_Init+0x274>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d807      	bhi.n	80046d0 <HAL_I2C_Init+0x84>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a80      	ldr	r2, [pc, #512]	; (80048c4 <HAL_I2C_Init+0x278>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	bf94      	ite	ls
 80046c8:	2301      	movls	r3, #1
 80046ca:	2300      	movhi	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e006      	b.n	80046de <HAL_I2C_Init+0x92>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a7d      	ldr	r2, [pc, #500]	; (80048c8 <HAL_I2C_Init+0x27c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	bf94      	ite	ls
 80046d8:	2301      	movls	r3, #1
 80046da:	2300      	movhi	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Init+0x9a>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e0e7      	b.n	80048b6 <HAL_I2C_Init+0x26a>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a78      	ldr	r2, [pc, #480]	; (80048cc <HAL_I2C_Init+0x280>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	0c9b      	lsrs	r3, r3, #18
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	430a      	orrs	r2, r1
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	4a6a      	ldr	r2, [pc, #424]	; (80048c0 <HAL_I2C_Init+0x274>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d802      	bhi.n	8004720 <HAL_I2C_Init+0xd4>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3301      	adds	r3, #1
 800471e:	e009      	b.n	8004734 <HAL_I2C_Init+0xe8>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	4a69      	ldr	r2, [pc, #420]	; (80048d0 <HAL_I2C_Init+0x284>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	099b      	lsrs	r3, r3, #6
 8004732:	3301      	adds	r3, #1
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	430b      	orrs	r3, r1
 800473a:	6213      	str	r3, [r2, #32]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	495c      	ldr	r1, [pc, #368]	; (80048c0 <HAL_I2C_Init+0x274>)
 8004750:	428b      	cmp	r3, r1
 8004752:	d819      	bhi.n	8004788 <HAL_I2C_Init+0x13c>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1e59      	subs	r1, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004768:	400b      	ands	r3, r1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_I2C_Init+0x138>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1e59      	subs	r1, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fbb1 f3f3 	udiv	r3, r1, r3
 800477c:	3301      	adds	r3, #1
 800477e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004782:	e051      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 8004784:	2304      	movs	r3, #4
 8004786:	e04f      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d111      	bne.n	80047b4 <HAL_I2C_Init+0x168>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e58      	subs	r0, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	440b      	add	r3, r1
 800479e:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e012      	b.n	80047da <HAL_I2C_Init+0x18e>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e58      	subs	r0, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	0099      	lsls	r1, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Init+0x196>
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10e      	bne.n	8004808 <HAL_I2C_Init+0x1bc>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1e58      	subs	r0, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	440b      	add	r3, r1
 80047f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004806:	e00f      	b.n	8004828 <HAL_I2C_Init+0x1dc>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1e58      	subs	r0, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	0099      	lsls	r1, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	fbb0 f3f3 	udiv	r3, r0, r3
 800481e:	3301      	adds	r3, #1
 8004820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	6809      	ldr	r1, [r1, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	61cb      	str	r3, [r1, #28]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6911      	ldr	r1, [r2, #16]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	430b      	orrs	r3, r1
 800486a:	6093      	str	r3, [r2, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	2300      	movs	r3, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	000186a0 	.word	0x000186a0
 80048c4:	001e847f 	.word	0x001e847f
 80048c8:	003d08ff 	.word	0x003d08ff
 80048cc:	431bde83 	.word	0x431bde83
 80048d0:	10624dd3 	.word	0x10624dd3

080048d4 <HAL_I2C_Mem_Write>:
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	4608      	mov	r0, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	461a      	mov	r2, r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	817b      	strh	r3, [r7, #10]
 80048e6:	460b      	mov	r3, r1
 80048e8:	813b      	strh	r3, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
 80048ee:	f7fe fb8f 	bl	8003010 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	f040 80d9 	bne.w	8004ab4 <HAL_I2C_Mem_Write+0x1e0>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2319      	movs	r3, #25
 8004908:	2201      	movs	r2, #1
 800490a:	496d      	ldr	r1, [pc, #436]	; (8004ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fcc1 	bl	8005294 <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Write+0x48>
 8004918:	2302      	movs	r3, #2
 800491a:	e0cc      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_I2C_Mem_Write+0x56>
 8004926:	2302      	movs	r3, #2
 8004928:	e0c5      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	d007      	beq.n	8004950 <HAL_I2C_Mem_Write+0x7c>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2221      	movs	r2, #33	; 0x21
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2240      	movs	r2, #64	; 0x40
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	625a      	str	r2, [r3, #36]	; 0x24
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004980:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	; 0x28
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a4d      	ldr	r2, [pc, #308]	; (8004ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c
 8004992:	88f8      	ldrh	r0, [r7, #6]
 8004994:	893a      	ldrh	r2, [r7, #8]
 8004996:	8979      	ldrh	r1, [r7, #10]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4603      	mov	r3, r0
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 faf8 	bl	8004f98 <I2C_RequestMemoryWrite>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d052      	beq.n	8004a54 <HAL_I2C_Mem_Write+0x180>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e081      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fd42 	bl	8005440 <I2C_WaitOnTXEFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <HAL_I2C_Mem_Write+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d107      	bne.n	80049da <HAL_I2C_Mem_Write+0x106>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	2301      	movs	r3, #1
 80049dc:	e06b      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	781a      	ldrb	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	611a      	str	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	; 0x24
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d11b      	bne.n	8004a54 <HAL_I2C_Mem_Write+0x180>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d017      	beq.n	8004a54 <HAL_I2C_Mem_Write+0x180>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1aa      	bne.n	80049b2 <HAL_I2C_Mem_Write+0xde>
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fd2e 	bl	80054c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <HAL_I2C_Mem_Write+0x1b4>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d107      	bne.n	8004a84 <HAL_I2C_Mem_Write+0x1b0>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	2301      	movs	r3, #1
 8004a86:	e016      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e000      	b.n	8004ab6 <HAL_I2C_Mem_Write+0x1e2>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	00100002 	.word	0x00100002
 8004ac4:	ffff0000 	.word	0xffff0000

08004ac8 <HAL_I2C_Mem_Read>:
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08c      	sub	sp, #48	; 0x30
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	817b      	strh	r3, [r7, #10]
 8004ada:	460b      	mov	r3, r1
 8004adc:	813b      	strh	r3, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	80fb      	strh	r3, [r7, #6]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
 8004ae6:	f7fe fa93 	bl	8003010 <HAL_GetTick>
 8004aea:	6278      	str	r0, [r7, #36]	; 0x24
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	f040 8244 	bne.w	8004f82 <HAL_I2C_Mem_Read+0x4ba>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2319      	movs	r3, #25
 8004b00:	2201      	movs	r2, #1
 8004b02:	4982      	ldr	r1, [pc, #520]	; (8004d0c <HAL_I2C_Mem_Read+0x244>)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fbc5 	bl	8005294 <I2C_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_I2C_Mem_Read+0x4c>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e237      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Mem_Read+0x5a>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e230      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d007      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x80>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2222      	movs	r2, #34	; 0x22
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a62      	ldr	r2, [pc, #392]	; (8004d10 <HAL_I2C_Mem_Read+0x248>)
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b8a:	88f8      	ldrh	r0, [r7, #6]
 8004b8c:	893a      	ldrh	r2, [r7, #8]
 8004b8e:	8979      	ldrh	r1, [r7, #10]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fa92 	bl	80050c4 <I2C_RequestMemoryRead>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Mem_Read+0xe2>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e1ec      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d113      	bne.n	8004bda <HAL_I2C_Mem_Read+0x112>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e1c0      	b.n	8004f5c <HAL_I2C_Mem_Read+0x494>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d11e      	bne.n	8004c20 <HAL_I2C_Mem_Read+0x158>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	b672      	cpsid	i
 8004bf4:	bf00      	nop
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	b662      	cpsie	i
 8004c1e:	e035      	b.n	8004c8c <HAL_I2C_Mem_Read+0x1c4>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d11e      	bne.n	8004c66 <HAL_I2C_Mem_Read+0x19e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	b672      	cpsid	i
 8004c3a:	bf00      	nop
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	b662      	cpsie	i
 8004c64:	e012      	b.n	8004c8c <HAL_I2C_Mem_Read+0x1c4>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	e166      	b.n	8004f5c <HAL_I2C_Mem_Read+0x494>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	f200 811f 	bhi.w	8004ed6 <HAL_I2C_Mem_Read+0x40e>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d123      	bne.n	8004ce8 <HAL_I2C_Mem_Read+0x220>
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 fc4d 	bl	8005544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <HAL_I2C_Mem_Read+0x1ec>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e167      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	851a      	strh	r2, [r3, #40]	; 0x28
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ce6:	e139      	b.n	8004f5c <HAL_I2C_Mem_Read+0x494>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d152      	bne.n	8004d96 <HAL_I2C_Mem_Read+0x2ce>
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	4906      	ldr	r1, [pc, #24]	; (8004d14 <HAL_I2C_Mem_Read+0x24c>)
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 faca 	bl	8005294 <I2C_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_I2C_Mem_Read+0x250>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e13c      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004d0a:	bf00      	nop
 8004d0c:	00100002 	.word	0x00100002
 8004d10:	ffff0000 	.word	0xffff0000
 8004d14:	00010004 	.word	0x00010004
 8004d18:	b672      	cpsid	i
 8004d1a:	bf00      	nop
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d5e:	b662      	cpsie	i
 8004d60:	bf00      	nop
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d94:	e0e2      	b.n	8004f5c <HAL_I2C_Mem_Read+0x494>
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	497b      	ldr	r1, [pc, #492]	; (8004f8c <HAL_I2C_Mem_Read+0x4c4>)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fa77 	bl	8005294 <I2C_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_I2C_Mem_Read+0x2e8>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0e9      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	b672      	cpsid	i
 8004dc2:	bf00      	nop
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	; 0x28
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004df6:	4b66      	ldr	r3, [pc, #408]	; (8004f90 <HAL_I2C_Mem_Read+0x4c8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	08db      	lsrs	r3, r3, #3
 8004dfc:	4a65      	ldr	r2, [pc, #404]	; (8004f94 <HAL_I2C_Mem_Read+0x4cc>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	0a1a      	lsrs	r2, r3, #8
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	00da      	lsls	r2, r3, #3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d118      	bne.n	8004e4e <HAL_I2C_Mem_Read+0x386>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0220 	orr.w	r2, r3, #32
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004e3e:	b662      	cpsie	i
 8004e40:	bf00      	nop
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e09a      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d1d9      	bne.n	8004e10 <HAL_I2C_Mem_Read+0x348>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e9e:	b662      	cpsie	i
 8004ea0:	bf00      	nop
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed4:	e042      	b.n	8004f5c <HAL_I2C_Mem_Read+0x494>
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fb32 	bl	8005544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Mem_Read+0x422>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e04c      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d118      	bne.n	8004f5c <HAL_I2C_Mem_Read+0x494>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f47f ae94 	bne.w	8004c8e <HAL_I2C_Mem_Read+0x1c6>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_I2C_Mem_Read+0x4bc>
 8004f82:	2302      	movs	r3, #2
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	00010004 	.word	0x00010004
 8004f90:	20000098 	.word	0x20000098
 8004f94:	14f8b589 	.word	0x14f8b589

08004f98 <I2C_RequestMemoryWrite>:
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	817b      	strh	r3, [r7, #10]
 8004faa:	460b      	mov	r3, r1
 8004fac:	813b      	strh	r3, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 f960 	bl	8005294 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <I2C_RequestMemoryWrite+0x5e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe8:	d103      	bne.n	8004ff2 <I2C_RequestMemoryWrite+0x5a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e05f      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005004:	611a      	str	r2, [r3, #16]
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	492d      	ldr	r1, [pc, #180]	; (80050c0 <I2C_RequestMemoryWrite+0x128>)
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f998 	bl	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <I2C_RequestMemoryWrite+0x84>
 8005018:	2301      	movs	r3, #1
 800501a:	e04c      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005034:	6a39      	ldr	r1, [r7, #32]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fa02 	bl	8005440 <I2C_WaitOnTXEFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <I2C_RequestMemoryWrite+0xc6>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	2b04      	cmp	r3, #4
 8005048:	d107      	bne.n	800505a <I2C_RequestMemoryWrite+0xc2>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	2301      	movs	r3, #1
 800505c:	e02b      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d105      	bne.n	8005070 <I2C_RequestMemoryWrite+0xd8>
 8005064:	893b      	ldrh	r3, [r7, #8]
 8005066:	b2da      	uxtb	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	611a      	str	r2, [r3, #16]
 800506e:	e021      	b.n	80050b4 <I2C_RequestMemoryWrite+0x11c>
 8005070:	893b      	ldrh	r3, [r7, #8]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	b29b      	uxth	r3, r3
 8005076:	b2da      	uxtb	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	611a      	str	r2, [r3, #16]
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	6a39      	ldr	r1, [r7, #32]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 f9dc 	bl	8005440 <I2C_WaitOnTXEFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00d      	beq.n	80050aa <I2C_RequestMemoryWrite+0x112>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	2b04      	cmp	r3, #4
 8005094:	d107      	bne.n	80050a6 <I2C_RequestMemoryWrite+0x10e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	2301      	movs	r3, #1
 80050a8:	e005      	b.n	80050b6 <I2C_RequestMemoryWrite+0x11e>
 80050aa:	893b      	ldrh	r3, [r7, #8]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	611a      	str	r2, [r3, #16]
 80050b4:	2300      	movs	r3, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	00010002 	.word	0x00010002

080050c4 <I2C_RequestMemoryRead>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	4608      	mov	r0, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	461a      	mov	r2, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	817b      	strh	r3, [r7, #10]
 80050d6:	460b      	mov	r3, r1
 80050d8:	813b      	strh	r3, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2200      	movs	r2, #0
 8005106:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f8c2 	bl	8005294 <I2C_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <I2C_RequestMemoryRead+0x6e>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005124:	d103      	bne.n	800512e <I2C_RequestMemoryRead+0x6a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
 800512e:	2303      	movs	r3, #3
 8005130:	e0aa      	b.n	8005288 <I2C_RequestMemoryRead+0x1c4>
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005140:	611a      	str	r2, [r3, #16]
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	4952      	ldr	r1, [pc, #328]	; (8005290 <I2C_RequestMemoryRead+0x1cc>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f8fa 	bl	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <I2C_RequestMemoryRead+0x94>
 8005154:	2301      	movs	r3, #1
 8005156:	e097      	b.n	8005288 <I2C_RequestMemoryRead+0x1c4>
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	6a39      	ldr	r1, [r7, #32]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f964 	bl	8005440 <I2C_WaitOnTXEFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <I2C_RequestMemoryRead+0xd6>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	2b04      	cmp	r3, #4
 8005184:	d107      	bne.n	8005196 <I2C_RequestMemoryRead+0xd2>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	2301      	movs	r3, #1
 8005198:	e076      	b.n	8005288 <I2C_RequestMemoryRead+0x1c4>
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d105      	bne.n	80051ac <I2C_RequestMemoryRead+0xe8>
 80051a0:	893b      	ldrh	r3, [r7, #8]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e021      	b.n	80051f0 <I2C_RequestMemoryRead+0x12c>
 80051ac:	893b      	ldrh	r3, [r7, #8]
 80051ae:	0a1b      	lsrs	r3, r3, #8
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f93e 	bl	8005440 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <I2C_RequestMemoryRead+0x122>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d107      	bne.n	80051e2 <I2C_RequestMemoryRead+0x11e>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	2301      	movs	r3, #1
 80051e4:	e050      	b.n	8005288 <I2C_RequestMemoryRead+0x1c4>
 80051e6:	893b      	ldrh	r3, [r7, #8]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]
 80051f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f2:	6a39      	ldr	r1, [r7, #32]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f923 	bl	8005440 <I2C_WaitOnTXEFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00d      	beq.n	800521c <I2C_RequestMemoryRead+0x158>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b04      	cmp	r3, #4
 8005206:	d107      	bne.n	8005218 <I2C_RequestMemoryRead+0x154>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	2301      	movs	r3, #1
 800521a:	e035      	b.n	8005288 <I2C_RequestMemoryRead+0x1c4>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	2200      	movs	r2, #0
 8005234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f82b 	bl	8005294 <I2C_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <I2C_RequestMemoryRead+0x19c>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005252:	d103      	bne.n	800525c <I2C_RequestMemoryRead+0x198>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800525a:	641a      	str	r2, [r3, #64]	; 0x40
 800525c:	2303      	movs	r3, #3
 800525e:	e013      	b.n	8005288 <I2C_RequestMemoryRead+0x1c4>
 8005260:	897b      	ldrh	r3, [r7, #10]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	611a      	str	r2, [r3, #16]
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	4906      	ldr	r1, [pc, #24]	; (8005290 <I2C_RequestMemoryRead+0x1cc>)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f863 	bl	8005342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_RequestMemoryRead+0x1c2>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <I2C_RequestMemoryRead+0x1c4>
 8005286:	2300      	movs	r3, #0
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	00010002 	.word	0x00010002

08005294 <I2C_WaitOnFlagUntilTimeout>:
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	71fb      	strb	r3, [r7, #7]
 80052a4:	e025      	b.n	80052f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ac:	d021      	beq.n	80052f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80052ae:	f7fd feaf 	bl	8003010 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d302      	bcc.n	80052c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d116      	bne.n	80052f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f043 0220 	orr.w	r2, r3, #32
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052ee:	2301      	movs	r3, #1
 80052f0:	e023      	b.n	800533a <I2C_WaitOnFlagUntilTimeout+0xa6>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d10d      	bne.n	8005318 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	43da      	mvns	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	e00c      	b.n	8005332 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	429a      	cmp	r2, r3
 8005336:	d0b6      	beq.n	80052a6 <I2C_WaitOnFlagUntilTimeout+0x12>
 8005338:	2300      	movs	r3, #0
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	e051      	b.n	80053f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d123      	bne.n	80053aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800537a:	615a      	str	r2, [r3, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	631a      	str	r2, [r3, #48]	; 0x30
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053a6:	2301      	movs	r3, #1
 80053a8:	e046      	b.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b0:	d021      	beq.n	80053f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80053b2:	f7fd fe2d 	bl	8003010 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d116      	bne.n	80053f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f043 0220 	orr.w	r2, r3, #32
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053f2:	2301      	movs	r3, #1
 80053f4:	e020      	b.n	8005438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d10c      	bne.n	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	43da      	mvns	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	bf14      	ite	ne
 8005412:	2301      	movne	r3, #1
 8005414:	2300      	moveq	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	e00b      	b.n	8005432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	43da      	mvns	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4013      	ands	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf14      	ite	ne
 800542c:	2301      	movne	r3, #1
 800542e:	2300      	moveq	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d18d      	bne.n	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8005436:	2300      	movs	r3, #0
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <I2C_WaitOnTXEFlagUntilTimeout>:
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	e02d      	b.n	80054aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f8ce 	bl	80055f0 <I2C_IsAcknowledgeFailed>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 800545a:	2301      	movs	r3, #1
 800545c:	e02d      	b.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005464:	d021      	beq.n	80054aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005466:	f7fd fdd3 	bl	8003010 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d116      	bne.n	80054aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	641a      	str	r2, [r3, #64]	; 0x40
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054a6:	2301      	movs	r3, #1
 80054a8:	e007      	b.n	80054ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d1ca      	bne.n	800544e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80054b8:	2300      	movs	r3, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <I2C_WaitOnBTFFlagUntilTimeout>:
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	e02d      	b.n	800552c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f88d 	bl	80055f0 <I2C_IsAcknowledgeFailed>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 80054dc:	2301      	movs	r3, #1
 80054de:	e02d      	b.n	800553c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e6:	d021      	beq.n	800552c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80054e8:	f7fd fd92 	bl	8003010 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d302      	bcc.n	80054fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d116      	bne.n	800552c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005528:	2301      	movs	r3, #1
 800552a:	e007      	b.n	800553c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b04      	cmp	r3, #4
 8005538:	d1ca      	bne.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 800553a:	2300      	movs	r3, #0
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	e042      	b.n	80055d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b10      	cmp	r3, #16
 800555e:	d119      	bne.n	8005594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0210 	mvn.w	r2, #16
 8005568:	615a      	str	r2, [r3, #20]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005590:	2301      	movs	r3, #1
 8005592:	e029      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8005594:	f7fd fd3c 	bl	8003010 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d302      	bcc.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d116      	bne.n	80055d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	f043 0220 	orr.w	r2, r3, #32
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055d4:	2301      	movs	r3, #1
 80055d6:	e007      	b.n	80055e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e2:	2b40      	cmp	r3, #64	; 0x40
 80055e4:	d1b5      	bne.n	8005552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80055e6:	2300      	movs	r3, #0
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <I2C_IsAcknowledgeFailed>:
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d11b      	bne.n	8005640 <I2C_IsAcknowledgeFailed+0x50>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005610:	615a      	str	r2, [r3, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	; 0x30
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	f043 0204 	orr.w	r2, r3, #4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <I2C_IsAcknowledgeFailed+0x52>
 8005640:	2300      	movs	r3, #0
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <HAL_RCC_OscConfig>:
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_OscConfig+0x12>
 800565a:	2301      	movs	r3, #1
 800565c:	e304      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8087 	beq.w	800577a <HAL_RCC_OscConfig+0x12e>
 800566c:	4b92      	ldr	r3, [pc, #584]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	2b04      	cmp	r3, #4
 8005676:	d00c      	beq.n	8005692 <HAL_RCC_OscConfig+0x46>
 8005678:	4b8f      	ldr	r3, [pc, #572]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b08      	cmp	r3, #8
 8005682:	d112      	bne.n	80056aa <HAL_RCC_OscConfig+0x5e>
 8005684:	4b8c      	ldr	r3, [pc, #560]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005690:	d10b      	bne.n	80056aa <HAL_RCC_OscConfig+0x5e>
 8005692:	4b89      	ldr	r3, [pc, #548]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d06c      	beq.n	8005778 <HAL_RCC_OscConfig+0x12c>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d168      	bne.n	8005778 <HAL_RCC_OscConfig+0x12c>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e2de      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d106      	bne.n	80056c2 <HAL_RCC_OscConfig+0x76>
 80056b4:	4b80      	ldr	r3, [pc, #512]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a7f      	ldr	r2, [pc, #508]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e02e      	b.n	8005720 <HAL_RCC_OscConfig+0xd4>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x98>
 80056ca:	4b7b      	ldr	r3, [pc, #492]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a7a      	ldr	r2, [pc, #488]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b78      	ldr	r3, [pc, #480]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a77      	ldr	r2, [pc, #476]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e01d      	b.n	8005720 <HAL_RCC_OscConfig+0xd4>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0xbc>
 80056ee:	4b72      	ldr	r3, [pc, #456]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a71      	ldr	r2, [pc, #452]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b6f      	ldr	r3, [pc, #444]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6e      	ldr	r2, [pc, #440]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e00b      	b.n	8005720 <HAL_RCC_OscConfig+0xd4>
 8005708:	4b6b      	ldr	r3, [pc, #428]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a6a      	ldr	r2, [pc, #424]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800570e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4b68      	ldr	r3, [pc, #416]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a67      	ldr	r2, [pc, #412]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800571a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <HAL_RCC_OscConfig+0x104>
 8005728:	f7fd fc72 	bl	8003010 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0xf6>
 8005730:	f7fd fc6e 	bl	8003010 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0xf6>
 800573e:	2303      	movs	r3, #3
 8005740:	e292      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005742:	4b5d      	ldr	r3, [pc, #372]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0xe4>
 800574e:	e014      	b.n	800577a <HAL_RCC_OscConfig+0x12e>
 8005750:	f7fd fc5e 	bl	8003010 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x11e>
 8005758:	f7fd fc5a 	bl	8003010 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b64      	cmp	r3, #100	; 0x64
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x11e>
 8005766:	2303      	movs	r3, #3
 8005768:	e27e      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 800576a:	4b53      	ldr	r3, [pc, #332]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x10c>
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x12e>
 8005778:	bf00      	nop
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d063      	beq.n	800584e <HAL_RCC_OscConfig+0x202>
 8005786:	4b4c      	ldr	r3, [pc, #304]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_RCC_OscConfig+0x15e>
 8005792:	4b49      	ldr	r3, [pc, #292]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	2b08      	cmp	r3, #8
 800579c:	d11c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x18c>
 800579e:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d116      	bne.n	80057d8 <HAL_RCC_OscConfig+0x18c>
 80057aa:	4b43      	ldr	r3, [pc, #268]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_RCC_OscConfig+0x176>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_OscConfig+0x176>
 80057be:	2301      	movs	r3, #1
 80057c0:	e252      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 80057c2:	4b3d      	ldr	r3, [pc, #244]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4939      	ldr	r1, [pc, #228]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]
 80057d6:	e03a      	b.n	800584e <HAL_RCC_OscConfig+0x202>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d020      	beq.n	8005822 <HAL_RCC_OscConfig+0x1d6>
 80057e0:	4b36      	ldr	r3, [pc, #216]	; (80058bc <HAL_RCC_OscConfig+0x270>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f7fd fc13 	bl	8003010 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x1b4>
 80057ee:	f7fd fc0f 	bl	8003010 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x1b4>
 80057fc:	2303      	movs	r3, #3
 80057fe:	e233      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005800:	4b2d      	ldr	r3, [pc, #180]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f0      	beq.n	80057ee <HAL_RCC_OscConfig+0x1a2>
 800580c:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4927      	ldr	r1, [pc, #156]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 800581c:	4313      	orrs	r3, r2
 800581e:	600b      	str	r3, [r1, #0]
 8005820:	e015      	b.n	800584e <HAL_RCC_OscConfig+0x202>
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <HAL_RCC_OscConfig+0x270>)
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f7fd fbf2 	bl	8003010 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x1f6>
 8005830:	f7fd fbee 	bl	8003010 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x1f6>
 800583e:	2303      	movs	r3, #3
 8005840:	e212      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005842:	4b1d      	ldr	r3, [pc, #116]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1f0      	bne.n	8005830 <HAL_RCC_OscConfig+0x1e4>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d03a      	beq.n	80058d0 <HAL_RCC_OscConfig+0x284>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d019      	beq.n	8005896 <HAL_RCC_OscConfig+0x24a>
 8005862:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f7fd fbd2 	bl	8003010 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x236>
 8005870:	f7fd fbce 	bl	8003010 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x236>
 800587e:	2303      	movs	r3, #3
 8005880:	e1f2      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <HAL_RCC_OscConfig+0x26c>)
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x224>
 800588e:	2001      	movs	r0, #1
 8005890:	f000 fbb6 	bl	8006000 <RCC_Delay>
 8005894:	e01c      	b.n	80058d0 <HAL_RCC_OscConfig+0x284>
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <HAL_RCC_OscConfig+0x274>)
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f7fd fbb8 	bl	8003010 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]
 80058a2:	e00f      	b.n	80058c4 <HAL_RCC_OscConfig+0x278>
 80058a4:	f7fd fbb4 	bl	8003010 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d908      	bls.n	80058c4 <HAL_RCC_OscConfig+0x278>
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1d8      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 80058b6:	bf00      	nop
 80058b8:	40021000 	.word	0x40021000
 80058bc:	42420000 	.word	0x42420000
 80058c0:	42420480 	.word	0x42420480
 80058c4:	4b9b      	ldr	r3, [pc, #620]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e9      	bne.n	80058a4 <HAL_RCC_OscConfig+0x258>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80a6 	beq.w	8005a2a <HAL_RCC_OscConfig+0x3de>
 80058de:	2300      	movs	r3, #0
 80058e0:	75fb      	strb	r3, [r7, #23]
 80058e2:	4b94      	ldr	r3, [pc, #592]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <HAL_RCC_OscConfig+0x2be>
 80058ee:	4b91      	ldr	r3, [pc, #580]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	4a90      	ldr	r2, [pc, #576]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f8:	61d3      	str	r3, [r2, #28]
 80058fa:	4b8e      	ldr	r3, [pc, #568]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
 800590a:	4b8b      	ldr	r3, [pc, #556]	; (8005b38 <HAL_RCC_OscConfig+0x4ec>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005912:	2b00      	cmp	r3, #0
 8005914:	d118      	bne.n	8005948 <HAL_RCC_OscConfig+0x2fc>
 8005916:	4b88      	ldr	r3, [pc, #544]	; (8005b38 <HAL_RCC_OscConfig+0x4ec>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a87      	ldr	r2, [pc, #540]	; (8005b38 <HAL_RCC_OscConfig+0x4ec>)
 800591c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	f7fd fb75 	bl	8003010 <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x2f0>
 800592a:	f7fd fb71 	bl	8003010 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b64      	cmp	r3, #100	; 0x64
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x2f0>
 8005938:	2303      	movs	r3, #3
 800593a:	e195      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 800593c:	4b7e      	ldr	r3, [pc, #504]	; (8005b38 <HAL_RCC_OscConfig+0x4ec>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0f0      	beq.n	800592a <HAL_RCC_OscConfig+0x2de>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x312>
 8005950:	4b78      	ldr	r3, [pc, #480]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	4a77      	ldr	r2, [pc, #476]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6213      	str	r3, [r2, #32]
 800595c:	e02d      	b.n	80059ba <HAL_RCC_OscConfig+0x36e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x334>
 8005966:	4b73      	ldr	r3, [pc, #460]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	4a72      	ldr	r2, [pc, #456]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	6213      	str	r3, [r2, #32]
 8005972:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	4a6f      	ldr	r2, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	6213      	str	r3, [r2, #32]
 800597e:	e01c      	b.n	80059ba <HAL_RCC_OscConfig+0x36e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b05      	cmp	r3, #5
 8005986:	d10c      	bne.n	80059a2 <HAL_RCC_OscConfig+0x356>
 8005988:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	4a69      	ldr	r2, [pc, #420]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	6213      	str	r3, [r2, #32]
 8005994:	4b67      	ldr	r3, [pc, #412]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	4a66      	ldr	r2, [pc, #408]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6213      	str	r3, [r2, #32]
 80059a0:	e00b      	b.n	80059ba <HAL_RCC_OscConfig+0x36e>
 80059a2:	4b64      	ldr	r3, [pc, #400]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4a63      	ldr	r2, [pc, #396]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	6213      	str	r3, [r2, #32]
 80059ae:	4b61      	ldr	r3, [pc, #388]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	4a60      	ldr	r2, [pc, #384]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	6213      	str	r3, [r2, #32]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d015      	beq.n	80059ee <HAL_RCC_OscConfig+0x3a2>
 80059c2:	f7fd fb25 	bl	8003010 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_OscConfig+0x394>
 80059ca:	f7fd fb21 	bl	8003010 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x394>
 80059dc:	2303      	movs	r3, #3
 80059de:	e143      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 80059e0:	4b54      	ldr	r3, [pc, #336]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0ee      	beq.n	80059ca <HAL_RCC_OscConfig+0x37e>
 80059ec:	e014      	b.n	8005a18 <HAL_RCC_OscConfig+0x3cc>
 80059ee:	f7fd fb0f 	bl	8003010 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]
 80059f4:	e00a      	b.n	8005a0c <HAL_RCC_OscConfig+0x3c0>
 80059f6:	f7fd fb0b 	bl	8003010 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x3c0>
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e12d      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005a0c:	4b49      	ldr	r3, [pc, #292]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ee      	bne.n	80059f6 <HAL_RCC_OscConfig+0x3aa>
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d105      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3de>
 8005a1e:	4b45      	ldr	r3, [pc, #276]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	4a44      	ldr	r2, [pc, #272]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	61d3      	str	r3, [r2, #28]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 808c 	beq.w	8005b4c <HAL_RCC_OscConfig+0x500>
 8005a34:	4b3f      	ldr	r3, [pc, #252]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d10e      	bne.n	8005a60 <HAL_RCC_OscConfig+0x414>
 8005a42:	4b3c      	ldr	r3, [pc, #240]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d108      	bne.n	8005a60 <HAL_RCC_OscConfig+0x414>
 8005a4e:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5a:	d101      	bne.n	8005a60 <HAL_RCC_OscConfig+0x414>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e103      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d14e      	bne.n	8005b06 <HAL_RCC_OscConfig+0x4ba>
 8005a68:	4b32      	ldr	r3, [pc, #200]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HAL_RCC_OscConfig+0x43c>
 8005a74:	4b2f      	ldr	r3, [pc, #188]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0x43c>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0ef      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005a88:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <HAL_RCC_OscConfig+0x4f0>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f7fd fabf 	bl	8003010 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x45c>
 8005a96:	f7fd fabb 	bl	8003010 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b64      	cmp	r3, #100	; 0x64
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x45c>
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e0df      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005aa8:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x44a>
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	491c      	ldr	r1, [pc, #112]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	4918      	ldr	r1, [pc, #96]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005ad8:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <HAL_RCC_OscConfig+0x4f0>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f7fd fa97 	bl	8003010 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x4ac>
 8005ae6:	f7fd fa93 	bl	8003010 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b64      	cmp	r3, #100	; 0x64
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x4ac>
 8005af4:	2303      	movs	r3, #3
 8005af6:	e0b7      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005af8:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x49a>
 8005b04:	e022      	b.n	8005b4c <HAL_RCC_OscConfig+0x500>
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <HAL_RCC_OscConfig+0x4e8>)
 8005b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b10:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_RCC_OscConfig+0x4f0>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	f7fd fa7a 	bl	8003010 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]
 8005b1e:	e00f      	b.n	8005b40 <HAL_RCC_OscConfig+0x4f4>
 8005b20:	f7fd fa76 	bl	8003010 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	; 0x64
 8005b2c:	d908      	bls.n	8005b40 <HAL_RCC_OscConfig+0x4f4>
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e09a      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005b32:	bf00      	nop
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40007000 	.word	0x40007000
 8005b3c:	42420068 	.word	0x42420068
 8005b40:	4b4b      	ldr	r3, [pc, #300]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e9      	bne.n	8005b20 <HAL_RCC_OscConfig+0x4d4>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8088 	beq.w	8005c66 <HAL_RCC_OscConfig+0x61a>
 8005b56:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d068      	beq.n	8005c34 <HAL_RCC_OscConfig+0x5e8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d14d      	bne.n	8005c06 <HAL_RCC_OscConfig+0x5ba>
 8005b6a:	4b42      	ldr	r3, [pc, #264]	; (8005c74 <HAL_RCC_OscConfig+0x628>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f7fd fa4e 	bl	8003010 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x53e>
 8005b78:	f7fd fa4a 	bl	8003010 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x53e>
 8005b86:	2303      	movs	r3, #3
 8005b88:	e06e      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005b8a:	4b39      	ldr	r3, [pc, #228]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0x52c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9e:	d10f      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x574>
 8005ba0:	4b33      	ldr	r3, [pc, #204]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4931      	ldr	r1, [pc, #196]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005bae:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	f023 020f 	bic.w	r2, r3, #15
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	492d      	ldr	r1, [pc, #180]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005bc0:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	4927      	ldr	r1, [pc, #156]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
 8005bd8:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <HAL_RCC_OscConfig+0x628>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f7fd fa17 	bl	8003010 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x5ac>
 8005be6:	f7fd fa13 	bl	8003010 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x5ac>
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e037      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005bf8:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x59a>
 8005c04:	e02f      	b.n	8005c66 <HAL_RCC_OscConfig+0x61a>
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_RCC_OscConfig+0x628>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f7fd fa00 	bl	8003010 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x5da>
 8005c14:	f7fd f9fc 	bl	8003010 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x5da>
 8005c22:	2303      	movs	r3, #3
 8005c24:	e020      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005c26:	4b12      	ldr	r3, [pc, #72]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x5c8>
 8005c32:	e018      	b.n	8005c66 <HAL_RCC_OscConfig+0x61a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_RCC_OscConfig+0x5f4>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e013      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCC_OscConfig+0x624>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_OscConfig+0x616>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d001      	beq.n	8005c66 <HAL_RCC_OscConfig+0x61a>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <HAL_RCC_OscConfig+0x61c>
 8005c66:	2300      	movs	r3, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	42420060 	.word	0x42420060

08005c78 <HAL_RCC_ClockConfig>:
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_RCC_ClockConfig+0x14>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0d0      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1b6>
 8005c8c:	4b6a      	ldr	r3, [pc, #424]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d910      	bls.n	8005cbc <HAL_RCC_ClockConfig+0x44>
 8005c9a:	4b67      	ldr	r3, [pc, #412]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f023 0207 	bic.w	r2, r3, #7
 8005ca2:	4965      	ldr	r1, [pc, #404]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]
 8005caa:	4b63      	ldr	r3, [pc, #396]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x44>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0b8      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1b6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d020      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x92>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x68>
 8005cd4:	4b59      	ldr	r3, [pc, #356]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a58      	ldr	r2, [pc, #352]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cde:	6053      	str	r3, [r2, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x80>
 8005cec:	4b53      	ldr	r3, [pc, #332]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a52      	ldr	r2, [pc, #328]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005cf6:	6053      	str	r3, [r2, #4]
 8005cf8:	4b50      	ldr	r3, [pc, #320]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	494d      	ldr	r1, [pc, #308]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	604b      	str	r3, [r1, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d040      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x120>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xb6>
 8005d1e:	4b47      	ldr	r3, [pc, #284]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d115      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e07f      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1b6>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xce>
 8005d36:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e073      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1b6>
 8005d46:	4b3d      	ldr	r3, [pc, #244]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xde>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e06b      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1b6>
 8005d56:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4936      	ldr	r1, [pc, #216]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	604b      	str	r3, [r1, #4]
 8005d68:	f7fd f952 	bl	8003010 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_ClockConfig+0x10e>
 8005d70:	f7fd f94e 	bl	8003010 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x10e>
 8005d82:	2303      	movs	r3, #3
 8005d84:	e053      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1b6>
 8005d86:	4b2d      	ldr	r3, [pc, #180]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 020c 	and.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1eb      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xf8>
 8005d98:	4b27      	ldr	r3, [pc, #156]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d210      	bcs.n	8005dc8 <HAL_RCC_ClockConfig+0x150>
 8005da6:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f023 0207 	bic.w	r2, r3, #7
 8005dae:	4922      	ldr	r1, [pc, #136]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]
 8005db6:	4b20      	ldr	r3, [pc, #128]	; (8005e38 <HAL_RCC_ClockConfig+0x1c0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x150>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e032      	b.n	8005e2e <HAL_RCC_ClockConfig+0x1b6>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x16e>
 8005dd4:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	4916      	ldr	r1, [pc, #88]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	604b      	str	r3, [r1, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x18e>
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	490e      	ldr	r1, [pc, #56]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	604b      	str	r3, [r1, #4]
 8005e06:	f000 f821 	bl	8005e4c <HAL_RCC_GetSysClockFreq>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <HAL_RCC_ClockConfig+0x1c4>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	490a      	ldr	r1, [pc, #40]	; (8005e40 <HAL_RCC_ClockConfig+0x1c8>)
 8005e18:	5ccb      	ldrb	r3, [r1, r3]
 8005e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1e:	4a09      	ldr	r2, [pc, #36]	; (8005e44 <HAL_RCC_ClockConfig+0x1cc>)
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <HAL_RCC_ClockConfig+0x1d0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fd f8b0 	bl	8002f8c <HAL_InitTick>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40022000 	.word	0x40022000
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	08007628 	.word	0x08007628
 8005e44:	20000098 	.word	0x20000098
 8005e48:	2000009c 	.word	0x2000009c

08005e4c <HAL_RCC_GetSysClockFreq>:
 8005e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4e:	b091      	sub	sp, #68	; 0x44
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4b56      	ldr	r3, [pc, #344]	; (8005fac <HAL_RCC_GetSysClockFreq+0x160>)
 8005e54:	f107 0414 	add.w	r4, r7, #20
 8005e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e5a:	c407      	stmia	r4!, {r0, r1, r2}
 8005e5c:	8023      	strh	r3, [r4, #0]
 8005e5e:	4b54      	ldr	r3, [pc, #336]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e60:	1d3c      	adds	r4, r7, #4
 8005e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005e68:	2300      	movs	r3, #0
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e70:	2300      	movs	r3, #0
 8005e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e74:	2300      	movs	r3, #0
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e78:	2300      	movs	r3, #0
 8005e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
 8005e84:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d002      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0x4e>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d003      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x54>
 8005e98:	e080      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x150>
 8005e9a:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9e:	e080      	b.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x156>
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea2:	0c9b      	lsrs	r3, r3, #18
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005eac:	4413      	add	r3, r2
 8005eae:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d066      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0x140>
 8005ebe:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005eca:	4413      	add	r3, r2
 8005ecc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8005ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed2:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d044      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x11c>
 8005ede:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	3301      	adds	r3, #1
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eec:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef0:	0a1b      	lsrs	r3, r3, #8
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	4618      	mov	r0, r3
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	461a      	mov	r2, r3
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	fb02 f501 	mul.w	r5, r2, r1
 8005f0e:	fb00 f403 	mul.w	r4, r0, r3
 8005f12:	442c      	add	r4, r5
 8005f14:	fba0 2302 	umull	r2, r3, r0, r2
 8005f18:	18e1      	adds	r1, r4, r3
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4926      	ldr	r1, [pc, #152]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005f1e:	fb01 f003 	mul.w	r0, r1, r3
 8005f22:	2100      	movs	r1, #0
 8005f24:	fb01 f102 	mul.w	r1, r1, r2
 8005f28:	4401      	add	r1, r0
 8005f2a:	4823      	ldr	r0, [pc, #140]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005f2c:	fba2 4500 	umull	r4, r5, r2, r0
 8005f30:	194b      	adds	r3, r1, r5
 8005f32:	461d      	mov	r5, r3
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	4618      	mov	r0, r3
 8005f38:	f04f 0100 	mov.w	r1, #0
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	fb02 fc01 	mul.w	ip, r2, r1
 8005f48:	fb00 f603 	mul.w	r6, r0, r3
 8005f4c:	4466      	add	r6, ip
 8005f4e:	fba0 2302 	umull	r2, r3, r0, r2
 8005f52:	18f1      	adds	r1, r6, r3
 8005f54:	460b      	mov	r3, r1
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f7fb f857 	bl	800100c <__aeabi_uldivmod>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	4613      	mov	r3, r2
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f66:	e007      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x12c>
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	4a13      	ldr	r2, [pc, #76]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005f6c:	fb02 f203 	mul.w	r2, r2, r3
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d108      	bne.n	8005f96 <HAL_RCC_GetSysClockFreq+0x14a>
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8a:	e004      	b.n	8005f96 <HAL_RCC_GetSysClockFreq+0x14a>
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	4a0b      	ldr	r2, [pc, #44]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x170>)
 8005f90:	fb02 f303 	mul.w	r3, r2, r3
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f9a:	e002      	b.n	8005fa2 <HAL_RCC_GetSysClockFreq+0x156>
 8005f9c:	4b08      	ldr	r3, [pc, #32]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x174>)
 8005f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fa0:	bf00      	nop
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3744      	adds	r7, #68	; 0x44
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fac:	08007608 	.word	0x08007608
 8005fb0:	08007618 	.word	0x08007618
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	017d7840 	.word	0x017d7840
 8005fbc:	003d0900 	.word	0x003d0900
 8005fc0:	007a1200 	.word	0x007a1200

08005fc4 <HAL_RCC_GetHCLKFreq>:
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	20000098 	.word	0x20000098

08005fd8 <HAL_RCC_GetPCLK1Freq>:
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	f7ff fff2 	bl	8005fc4 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	08007638 	.word	0x08007638

08006000 <RCC_Delay>:
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <RCC_Delay+0x34>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <RCC_Delay+0x38>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	0a5b      	lsrs	r3, r3, #9
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	fb02 f303 	mul.w	r3, r2, r3
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	bf00      	nop
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1e5a      	subs	r2, r3, #1
 8006022:	60fa      	str	r2, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f9      	bne.n	800601c <RCC_Delay+0x1c>
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr
 8006034:	20000098 	.word	0x20000098
 8006038:	10624dd3 	.word	0x10624dd3

0800603c <__errno>:
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <__errno+0x8>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	200000a4 	.word	0x200000a4

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	2600      	movs	r6, #0
 800604c:	4d0c      	ldr	r5, [pc, #48]	; (8006080 <__libc_init_array+0x38>)
 800604e:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 8006050:	1b64      	subs	r4, r4, r5
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	42a6      	cmp	r6, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	f001 fabc 	bl	80075d4 <_init>
 800605c:	2600      	movs	r6, #0
 800605e:	4d0a      	ldr	r5, [pc, #40]	; (8006088 <__libc_init_array+0x40>)
 8006060:	4c0a      	ldr	r4, [pc, #40]	; (800608c <__libc_init_array+0x44>)
 8006062:	1b64      	subs	r4, r4, r5
 8006064:	10a4      	asrs	r4, r4, #2
 8006066:	42a6      	cmp	r6, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006070:	4798      	blx	r3
 8006072:	3601      	adds	r6, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	f855 3b04 	ldr.w	r3, [r5], #4
 800607a:	4798      	blx	r3
 800607c:	3601      	adds	r6, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	08007750 	.word	0x08007750
 8006084:	08007750 	.word	0x08007750
 8006088:	08007750 	.word	0x08007750
 800608c:	08007754 	.word	0x08007754

08006090 <memset>:
 8006090:	4603      	mov	r3, r0
 8006092:	4402      	add	r2, r0
 8006094:	4293      	cmp	r3, r2
 8006096:	d100      	bne.n	800609a <memset+0xa>
 8006098:	4770      	bx	lr
 800609a:	f803 1b01 	strb.w	r1, [r3], #1
 800609e:	e7f9      	b.n	8006094 <memset+0x4>

080060a0 <iprintf>:
 80060a0:	b40f      	push	{r0, r1, r2, r3}
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <iprintf+0x2c>)
 80060a4:	b513      	push	{r0, r1, r4, lr}
 80060a6:	681c      	ldr	r4, [r3, #0]
 80060a8:	b124      	cbz	r4, 80060b4 <iprintf+0x14>
 80060aa:	69a3      	ldr	r3, [r4, #24]
 80060ac:	b913      	cbnz	r3, 80060b4 <iprintf+0x14>
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 f866 	bl	8006180 <__sinit>
 80060b4:	ab05      	add	r3, sp, #20
 80060b6:	4620      	mov	r0, r4
 80060b8:	9a04      	ldr	r2, [sp, #16]
 80060ba:	68a1      	ldr	r1, [r4, #8]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f000 f981 	bl	80063c4 <_vfiprintf_r>
 80060c2:	b002      	add	sp, #8
 80060c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060c8:	b004      	add	sp, #16
 80060ca:	4770      	bx	lr
 80060cc:	200000a4 	.word	0x200000a4

080060d0 <std>:
 80060d0:	2300      	movs	r3, #0
 80060d2:	b510      	push	{r4, lr}
 80060d4:	4604      	mov	r4, r0
 80060d6:	e9c0 3300 	strd	r3, r3, [r0]
 80060da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060de:	6083      	str	r3, [r0, #8]
 80060e0:	8181      	strh	r1, [r0, #12]
 80060e2:	6643      	str	r3, [r0, #100]	; 0x64
 80060e4:	81c2      	strh	r2, [r0, #14]
 80060e6:	6183      	str	r3, [r0, #24]
 80060e8:	4619      	mov	r1, r3
 80060ea:	2208      	movs	r2, #8
 80060ec:	305c      	adds	r0, #92	; 0x5c
 80060ee:	f7ff ffcf 	bl	8006090 <memset>
 80060f2:	4b05      	ldr	r3, [pc, #20]	; (8006108 <std+0x38>)
 80060f4:	6224      	str	r4, [r4, #32]
 80060f6:	6263      	str	r3, [r4, #36]	; 0x24
 80060f8:	4b04      	ldr	r3, [pc, #16]	; (800610c <std+0x3c>)
 80060fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <std+0x40>)
 80060fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <std+0x44>)
 8006102:	6323      	str	r3, [r4, #48]	; 0x30
 8006104:	bd10      	pop	{r4, pc}
 8006106:	bf00      	nop
 8006108:	08006971 	.word	0x08006971
 800610c:	08006993 	.word	0x08006993
 8006110:	080069cb 	.word	0x080069cb
 8006114:	080069ef 	.word	0x080069ef

08006118 <_cleanup_r>:
 8006118:	4901      	ldr	r1, [pc, #4]	; (8006120 <_cleanup_r+0x8>)
 800611a:	f000 b8af 	b.w	800627c <_fwalk_reent>
 800611e:	bf00      	nop
 8006120:	08006cc9 	.word	0x08006cc9

08006124 <__sfmoreglue>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	2568      	movs	r5, #104	; 0x68
 8006128:	1e4a      	subs	r2, r1, #1
 800612a:	4355      	muls	r5, r2
 800612c:	460e      	mov	r6, r1
 800612e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006132:	f000 f8c5 	bl	80062c0 <_malloc_r>
 8006136:	4604      	mov	r4, r0
 8006138:	b140      	cbz	r0, 800614c <__sfmoreglue+0x28>
 800613a:	2100      	movs	r1, #0
 800613c:	e9c0 1600 	strd	r1, r6, [r0]
 8006140:	300c      	adds	r0, #12
 8006142:	60a0      	str	r0, [r4, #8]
 8006144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006148:	f7ff ffa2 	bl	8006090 <memset>
 800614c:	4620      	mov	r0, r4
 800614e:	bd70      	pop	{r4, r5, r6, pc}

08006150 <__sfp_lock_acquire>:
 8006150:	4801      	ldr	r0, [pc, #4]	; (8006158 <__sfp_lock_acquire+0x8>)
 8006152:	f000 b8b3 	b.w	80062bc <__retarget_lock_acquire_recursive>
 8006156:	bf00      	nop
 8006158:	20000318 	.word	0x20000318

0800615c <__sfp_lock_release>:
 800615c:	4801      	ldr	r0, [pc, #4]	; (8006164 <__sfp_lock_release+0x8>)
 800615e:	f000 b8ae 	b.w	80062be <__retarget_lock_release_recursive>
 8006162:	bf00      	nop
 8006164:	20000318 	.word	0x20000318

08006168 <__sinit_lock_acquire>:
 8006168:	4801      	ldr	r0, [pc, #4]	; (8006170 <__sinit_lock_acquire+0x8>)
 800616a:	f000 b8a7 	b.w	80062bc <__retarget_lock_acquire_recursive>
 800616e:	bf00      	nop
 8006170:	20000313 	.word	0x20000313

08006174 <__sinit_lock_release>:
 8006174:	4801      	ldr	r0, [pc, #4]	; (800617c <__sinit_lock_release+0x8>)
 8006176:	f000 b8a2 	b.w	80062be <__retarget_lock_release_recursive>
 800617a:	bf00      	nop
 800617c:	20000313 	.word	0x20000313

08006180 <__sinit>:
 8006180:	b510      	push	{r4, lr}
 8006182:	4604      	mov	r4, r0
 8006184:	f7ff fff0 	bl	8006168 <__sinit_lock_acquire>
 8006188:	69a3      	ldr	r3, [r4, #24]
 800618a:	b11b      	cbz	r3, 8006194 <__sinit+0x14>
 800618c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006190:	f7ff bff0 	b.w	8006174 <__sinit_lock_release>
 8006194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006198:	6523      	str	r3, [r4, #80]	; 0x50
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <__sinit+0x68>)
 800619c:	4a13      	ldr	r2, [pc, #76]	; (80061ec <__sinit+0x6c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80061a2:	42a3      	cmp	r3, r4
 80061a4:	bf08      	it	eq
 80061a6:	2301      	moveq	r3, #1
 80061a8:	4620      	mov	r0, r4
 80061aa:	bf08      	it	eq
 80061ac:	61a3      	streq	r3, [r4, #24]
 80061ae:	f000 f81f 	bl	80061f0 <__sfp>
 80061b2:	6060      	str	r0, [r4, #4]
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 f81b 	bl	80061f0 <__sfp>
 80061ba:	60a0      	str	r0, [r4, #8]
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 f817 	bl	80061f0 <__sfp>
 80061c2:	2200      	movs	r2, #0
 80061c4:	2104      	movs	r1, #4
 80061c6:	60e0      	str	r0, [r4, #12]
 80061c8:	6860      	ldr	r0, [r4, #4]
 80061ca:	f7ff ff81 	bl	80060d0 <std>
 80061ce:	2201      	movs	r2, #1
 80061d0:	2109      	movs	r1, #9
 80061d2:	68a0      	ldr	r0, [r4, #8]
 80061d4:	f7ff ff7c 	bl	80060d0 <std>
 80061d8:	2202      	movs	r2, #2
 80061da:	2112      	movs	r1, #18
 80061dc:	68e0      	ldr	r0, [r4, #12]
 80061de:	f7ff ff77 	bl	80060d0 <std>
 80061e2:	2301      	movs	r3, #1
 80061e4:	61a3      	str	r3, [r4, #24]
 80061e6:	e7d1      	b.n	800618c <__sinit+0xc>
 80061e8:	08007640 	.word	0x08007640
 80061ec:	08006119 	.word	0x08006119

080061f0 <__sfp>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	4607      	mov	r7, r0
 80061f4:	f7ff ffac 	bl	8006150 <__sfp_lock_acquire>
 80061f8:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <__sfp+0x84>)
 80061fa:	681e      	ldr	r6, [r3, #0]
 80061fc:	69b3      	ldr	r3, [r6, #24]
 80061fe:	b913      	cbnz	r3, 8006206 <__sfp+0x16>
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff ffbd 	bl	8006180 <__sinit>
 8006206:	3648      	adds	r6, #72	; 0x48
 8006208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800620c:	3b01      	subs	r3, #1
 800620e:	d503      	bpl.n	8006218 <__sfp+0x28>
 8006210:	6833      	ldr	r3, [r6, #0]
 8006212:	b30b      	cbz	r3, 8006258 <__sfp+0x68>
 8006214:	6836      	ldr	r6, [r6, #0]
 8006216:	e7f7      	b.n	8006208 <__sfp+0x18>
 8006218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800621c:	b9d5      	cbnz	r5, 8006254 <__sfp+0x64>
 800621e:	4b16      	ldr	r3, [pc, #88]	; (8006278 <__sfp+0x88>)
 8006220:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006224:	60e3      	str	r3, [r4, #12]
 8006226:	6665      	str	r5, [r4, #100]	; 0x64
 8006228:	f000 f847 	bl	80062ba <__retarget_lock_init_recursive>
 800622c:	f7ff ff96 	bl	800615c <__sfp_lock_release>
 8006230:	2208      	movs	r2, #8
 8006232:	4629      	mov	r1, r5
 8006234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800623c:	6025      	str	r5, [r4, #0]
 800623e:	61a5      	str	r5, [r4, #24]
 8006240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006244:	f7ff ff24 	bl	8006090 <memset>
 8006248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800624c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006250:	4620      	mov	r0, r4
 8006252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006254:	3468      	adds	r4, #104	; 0x68
 8006256:	e7d9      	b.n	800620c <__sfp+0x1c>
 8006258:	2104      	movs	r1, #4
 800625a:	4638      	mov	r0, r7
 800625c:	f7ff ff62 	bl	8006124 <__sfmoreglue>
 8006260:	4604      	mov	r4, r0
 8006262:	6030      	str	r0, [r6, #0]
 8006264:	2800      	cmp	r0, #0
 8006266:	d1d5      	bne.n	8006214 <__sfp+0x24>
 8006268:	f7ff ff78 	bl	800615c <__sfp_lock_release>
 800626c:	230c      	movs	r3, #12
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	e7ee      	b.n	8006250 <__sfp+0x60>
 8006272:	bf00      	nop
 8006274:	08007640 	.word	0x08007640
 8006278:	ffff0001 	.word	0xffff0001

0800627c <_fwalk_reent>:
 800627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006280:	4606      	mov	r6, r0
 8006282:	4688      	mov	r8, r1
 8006284:	2700      	movs	r7, #0
 8006286:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800628a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800628e:	f1b9 0901 	subs.w	r9, r9, #1
 8006292:	d505      	bpl.n	80062a0 <_fwalk_reent+0x24>
 8006294:	6824      	ldr	r4, [r4, #0]
 8006296:	2c00      	cmp	r4, #0
 8006298:	d1f7      	bne.n	800628a <_fwalk_reent+0xe>
 800629a:	4638      	mov	r0, r7
 800629c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a0:	89ab      	ldrh	r3, [r5, #12]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d907      	bls.n	80062b6 <_fwalk_reent+0x3a>
 80062a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062aa:	3301      	adds	r3, #1
 80062ac:	d003      	beq.n	80062b6 <_fwalk_reent+0x3a>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4630      	mov	r0, r6
 80062b2:	47c0      	blx	r8
 80062b4:	4307      	orrs	r7, r0
 80062b6:	3568      	adds	r5, #104	; 0x68
 80062b8:	e7e9      	b.n	800628e <_fwalk_reent+0x12>

080062ba <__retarget_lock_init_recursive>:
 80062ba:	4770      	bx	lr

080062bc <__retarget_lock_acquire_recursive>:
 80062bc:	4770      	bx	lr

080062be <__retarget_lock_release_recursive>:
 80062be:	4770      	bx	lr

080062c0 <_malloc_r>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	1ccd      	adds	r5, r1, #3
 80062c4:	f025 0503 	bic.w	r5, r5, #3
 80062c8:	3508      	adds	r5, #8
 80062ca:	2d0c      	cmp	r5, #12
 80062cc:	bf38      	it	cc
 80062ce:	250c      	movcc	r5, #12
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	4606      	mov	r6, r0
 80062d4:	db01      	blt.n	80062da <_malloc_r+0x1a>
 80062d6:	42a9      	cmp	r1, r5
 80062d8:	d903      	bls.n	80062e2 <_malloc_r+0x22>
 80062da:	230c      	movs	r3, #12
 80062dc:	6033      	str	r3, [r6, #0]
 80062de:	2000      	movs	r0, #0
 80062e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e2:	f000 fdb1 	bl	8006e48 <__malloc_lock>
 80062e6:	4921      	ldr	r1, [pc, #132]	; (800636c <_malloc_r+0xac>)
 80062e8:	680a      	ldr	r2, [r1, #0]
 80062ea:	4614      	mov	r4, r2
 80062ec:	b99c      	cbnz	r4, 8006316 <_malloc_r+0x56>
 80062ee:	4f20      	ldr	r7, [pc, #128]	; (8006370 <_malloc_r+0xb0>)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	b923      	cbnz	r3, 80062fe <_malloc_r+0x3e>
 80062f4:	4621      	mov	r1, r4
 80062f6:	4630      	mov	r0, r6
 80062f8:	f000 fb2a 	bl	8006950 <_sbrk_r>
 80062fc:	6038      	str	r0, [r7, #0]
 80062fe:	4629      	mov	r1, r5
 8006300:	4630      	mov	r0, r6
 8006302:	f000 fb25 	bl	8006950 <_sbrk_r>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	d123      	bne.n	8006352 <_malloc_r+0x92>
 800630a:	230c      	movs	r3, #12
 800630c:	4630      	mov	r0, r6
 800630e:	6033      	str	r3, [r6, #0]
 8006310:	f000 fda0 	bl	8006e54 <__malloc_unlock>
 8006314:	e7e3      	b.n	80062de <_malloc_r+0x1e>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	1b5b      	subs	r3, r3, r5
 800631a:	d417      	bmi.n	800634c <_malloc_r+0x8c>
 800631c:	2b0b      	cmp	r3, #11
 800631e:	d903      	bls.n	8006328 <_malloc_r+0x68>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	441c      	add	r4, r3
 8006324:	6025      	str	r5, [r4, #0]
 8006326:	e004      	b.n	8006332 <_malloc_r+0x72>
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	42a2      	cmp	r2, r4
 800632c:	bf0c      	ite	eq
 800632e:	600b      	streq	r3, [r1, #0]
 8006330:	6053      	strne	r3, [r2, #4]
 8006332:	4630      	mov	r0, r6
 8006334:	f000 fd8e 	bl	8006e54 <__malloc_unlock>
 8006338:	f104 000b 	add.w	r0, r4, #11
 800633c:	1d23      	adds	r3, r4, #4
 800633e:	f020 0007 	bic.w	r0, r0, #7
 8006342:	1ac2      	subs	r2, r0, r3
 8006344:	d0cc      	beq.n	80062e0 <_malloc_r+0x20>
 8006346:	1a1b      	subs	r3, r3, r0
 8006348:	50a3      	str	r3, [r4, r2]
 800634a:	e7c9      	b.n	80062e0 <_malloc_r+0x20>
 800634c:	4622      	mov	r2, r4
 800634e:	6864      	ldr	r4, [r4, #4]
 8006350:	e7cc      	b.n	80062ec <_malloc_r+0x2c>
 8006352:	1cc4      	adds	r4, r0, #3
 8006354:	f024 0403 	bic.w	r4, r4, #3
 8006358:	42a0      	cmp	r0, r4
 800635a:	d0e3      	beq.n	8006324 <_malloc_r+0x64>
 800635c:	1a21      	subs	r1, r4, r0
 800635e:	4630      	mov	r0, r6
 8006360:	f000 faf6 	bl	8006950 <_sbrk_r>
 8006364:	3001      	adds	r0, #1
 8006366:	d1dd      	bne.n	8006324 <_malloc_r+0x64>
 8006368:	e7cf      	b.n	800630a <_malloc_r+0x4a>
 800636a:	bf00      	nop
 800636c:	20000150 	.word	0x20000150
 8006370:	20000154 	.word	0x20000154

08006374 <__sfputc_r>:
 8006374:	6893      	ldr	r3, [r2, #8]
 8006376:	b410      	push	{r4}
 8006378:	3b01      	subs	r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	6093      	str	r3, [r2, #8]
 800637e:	da07      	bge.n	8006390 <__sfputc_r+0x1c>
 8006380:	6994      	ldr	r4, [r2, #24]
 8006382:	42a3      	cmp	r3, r4
 8006384:	db01      	blt.n	800638a <__sfputc_r+0x16>
 8006386:	290a      	cmp	r1, #10
 8006388:	d102      	bne.n	8006390 <__sfputc_r+0x1c>
 800638a:	bc10      	pop	{r4}
 800638c:	f000 bb34 	b.w	80069f8 <__swbuf_r>
 8006390:	6813      	ldr	r3, [r2, #0]
 8006392:	1c58      	adds	r0, r3, #1
 8006394:	6010      	str	r0, [r2, #0]
 8006396:	7019      	strb	r1, [r3, #0]
 8006398:	4608      	mov	r0, r1
 800639a:	bc10      	pop	{r4}
 800639c:	4770      	bx	lr

0800639e <__sfputs_r>:
 800639e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a0:	4606      	mov	r6, r0
 80063a2:	460f      	mov	r7, r1
 80063a4:	4614      	mov	r4, r2
 80063a6:	18d5      	adds	r5, r2, r3
 80063a8:	42ac      	cmp	r4, r5
 80063aa:	d101      	bne.n	80063b0 <__sfputs_r+0x12>
 80063ac:	2000      	movs	r0, #0
 80063ae:	e007      	b.n	80063c0 <__sfputs_r+0x22>
 80063b0:	463a      	mov	r2, r7
 80063b2:	4630      	mov	r0, r6
 80063b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063b8:	f7ff ffdc 	bl	8006374 <__sfputc_r>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d1f3      	bne.n	80063a8 <__sfputs_r+0xa>
 80063c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063c4 <_vfiprintf_r>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	460d      	mov	r5, r1
 80063ca:	4614      	mov	r4, r2
 80063cc:	4698      	mov	r8, r3
 80063ce:	4606      	mov	r6, r0
 80063d0:	b09d      	sub	sp, #116	; 0x74
 80063d2:	b118      	cbz	r0, 80063dc <_vfiprintf_r+0x18>
 80063d4:	6983      	ldr	r3, [r0, #24]
 80063d6:	b90b      	cbnz	r3, 80063dc <_vfiprintf_r+0x18>
 80063d8:	f7ff fed2 	bl	8006180 <__sinit>
 80063dc:	4b89      	ldr	r3, [pc, #548]	; (8006604 <_vfiprintf_r+0x240>)
 80063de:	429d      	cmp	r5, r3
 80063e0:	d11b      	bne.n	800641a <_vfiprintf_r+0x56>
 80063e2:	6875      	ldr	r5, [r6, #4]
 80063e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	d405      	bmi.n	80063f6 <_vfiprintf_r+0x32>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	059a      	lsls	r2, r3, #22
 80063ee:	d402      	bmi.n	80063f6 <_vfiprintf_r+0x32>
 80063f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f2:	f7ff ff63 	bl	80062bc <__retarget_lock_acquire_recursive>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	071b      	lsls	r3, r3, #28
 80063fa:	d501      	bpl.n	8006400 <_vfiprintf_r+0x3c>
 80063fc:	692b      	ldr	r3, [r5, #16]
 80063fe:	b9eb      	cbnz	r3, 800643c <_vfiprintf_r+0x78>
 8006400:	4629      	mov	r1, r5
 8006402:	4630      	mov	r0, r6
 8006404:	f000 fb5c 	bl	8006ac0 <__swsetup_r>
 8006408:	b1c0      	cbz	r0, 800643c <_vfiprintf_r+0x78>
 800640a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800640c:	07dc      	lsls	r4, r3, #31
 800640e:	d50e      	bpl.n	800642e <_vfiprintf_r+0x6a>
 8006410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006414:	b01d      	add	sp, #116	; 0x74
 8006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	4b7b      	ldr	r3, [pc, #492]	; (8006608 <_vfiprintf_r+0x244>)
 800641c:	429d      	cmp	r5, r3
 800641e:	d101      	bne.n	8006424 <_vfiprintf_r+0x60>
 8006420:	68b5      	ldr	r5, [r6, #8]
 8006422:	e7df      	b.n	80063e4 <_vfiprintf_r+0x20>
 8006424:	4b79      	ldr	r3, [pc, #484]	; (800660c <_vfiprintf_r+0x248>)
 8006426:	429d      	cmp	r5, r3
 8006428:	bf08      	it	eq
 800642a:	68f5      	ldreq	r5, [r6, #12]
 800642c:	e7da      	b.n	80063e4 <_vfiprintf_r+0x20>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	0598      	lsls	r0, r3, #22
 8006432:	d4ed      	bmi.n	8006410 <_vfiprintf_r+0x4c>
 8006434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006436:	f7ff ff42 	bl	80062be <__retarget_lock_release_recursive>
 800643a:	e7e9      	b.n	8006410 <_vfiprintf_r+0x4c>
 800643c:	2300      	movs	r3, #0
 800643e:	9309      	str	r3, [sp, #36]	; 0x24
 8006440:	2320      	movs	r3, #32
 8006442:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006446:	2330      	movs	r3, #48	; 0x30
 8006448:	f04f 0901 	mov.w	r9, #1
 800644c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006450:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006610 <_vfiprintf_r+0x24c>
 8006454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006458:	4623      	mov	r3, r4
 800645a:	469a      	mov	sl, r3
 800645c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006460:	b10a      	cbz	r2, 8006466 <_vfiprintf_r+0xa2>
 8006462:	2a25      	cmp	r2, #37	; 0x25
 8006464:	d1f9      	bne.n	800645a <_vfiprintf_r+0x96>
 8006466:	ebba 0b04 	subs.w	fp, sl, r4
 800646a:	d00b      	beq.n	8006484 <_vfiprintf_r+0xc0>
 800646c:	465b      	mov	r3, fp
 800646e:	4622      	mov	r2, r4
 8006470:	4629      	mov	r1, r5
 8006472:	4630      	mov	r0, r6
 8006474:	f7ff ff93 	bl	800639e <__sfputs_r>
 8006478:	3001      	adds	r0, #1
 800647a:	f000 80aa 	beq.w	80065d2 <_vfiprintf_r+0x20e>
 800647e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006480:	445a      	add	r2, fp
 8006482:	9209      	str	r2, [sp, #36]	; 0x24
 8006484:	f89a 3000 	ldrb.w	r3, [sl]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80a2 	beq.w	80065d2 <_vfiprintf_r+0x20e>
 800648e:	2300      	movs	r3, #0
 8006490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006498:	f10a 0a01 	add.w	sl, sl, #1
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	9307      	str	r3, [sp, #28]
 80064a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064a4:	931a      	str	r3, [sp, #104]	; 0x68
 80064a6:	4654      	mov	r4, sl
 80064a8:	2205      	movs	r2, #5
 80064aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ae:	4858      	ldr	r0, [pc, #352]	; (8006610 <_vfiprintf_r+0x24c>)
 80064b0:	f000 fcbc 	bl	8006e2c <memchr>
 80064b4:	9a04      	ldr	r2, [sp, #16]
 80064b6:	b9d8      	cbnz	r0, 80064f0 <_vfiprintf_r+0x12c>
 80064b8:	06d1      	lsls	r1, r2, #27
 80064ba:	bf44      	itt	mi
 80064bc:	2320      	movmi	r3, #32
 80064be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064c2:	0713      	lsls	r3, r2, #28
 80064c4:	bf44      	itt	mi
 80064c6:	232b      	movmi	r3, #43	; 0x2b
 80064c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064cc:	f89a 3000 	ldrb.w	r3, [sl]
 80064d0:	2b2a      	cmp	r3, #42	; 0x2a
 80064d2:	d015      	beq.n	8006500 <_vfiprintf_r+0x13c>
 80064d4:	4654      	mov	r4, sl
 80064d6:	2000      	movs	r0, #0
 80064d8:	f04f 0c0a 	mov.w	ip, #10
 80064dc:	9a07      	ldr	r2, [sp, #28]
 80064de:	4621      	mov	r1, r4
 80064e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064e4:	3b30      	subs	r3, #48	; 0x30
 80064e6:	2b09      	cmp	r3, #9
 80064e8:	d94e      	bls.n	8006588 <_vfiprintf_r+0x1c4>
 80064ea:	b1b0      	cbz	r0, 800651a <_vfiprintf_r+0x156>
 80064ec:	9207      	str	r2, [sp, #28]
 80064ee:	e014      	b.n	800651a <_vfiprintf_r+0x156>
 80064f0:	eba0 0308 	sub.w	r3, r0, r8
 80064f4:	fa09 f303 	lsl.w	r3, r9, r3
 80064f8:	4313      	orrs	r3, r2
 80064fa:	46a2      	mov	sl, r4
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	e7d2      	b.n	80064a6 <_vfiprintf_r+0xe2>
 8006500:	9b03      	ldr	r3, [sp, #12]
 8006502:	1d19      	adds	r1, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	9103      	str	r1, [sp, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	bfbb      	ittet	lt
 800650c:	425b      	neglt	r3, r3
 800650e:	f042 0202 	orrlt.w	r2, r2, #2
 8006512:	9307      	strge	r3, [sp, #28]
 8006514:	9307      	strlt	r3, [sp, #28]
 8006516:	bfb8      	it	lt
 8006518:	9204      	strlt	r2, [sp, #16]
 800651a:	7823      	ldrb	r3, [r4, #0]
 800651c:	2b2e      	cmp	r3, #46	; 0x2e
 800651e:	d10c      	bne.n	800653a <_vfiprintf_r+0x176>
 8006520:	7863      	ldrb	r3, [r4, #1]
 8006522:	2b2a      	cmp	r3, #42	; 0x2a
 8006524:	d135      	bne.n	8006592 <_vfiprintf_r+0x1ce>
 8006526:	9b03      	ldr	r3, [sp, #12]
 8006528:	3402      	adds	r4, #2
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	9203      	str	r2, [sp, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	bfb8      	it	lt
 8006534:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006538:	9305      	str	r3, [sp, #20]
 800653a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006620 <_vfiprintf_r+0x25c>
 800653e:	2203      	movs	r2, #3
 8006540:	4650      	mov	r0, sl
 8006542:	7821      	ldrb	r1, [r4, #0]
 8006544:	f000 fc72 	bl	8006e2c <memchr>
 8006548:	b140      	cbz	r0, 800655c <_vfiprintf_r+0x198>
 800654a:	2340      	movs	r3, #64	; 0x40
 800654c:	eba0 000a 	sub.w	r0, r0, sl
 8006550:	fa03 f000 	lsl.w	r0, r3, r0
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	3401      	adds	r4, #1
 8006558:	4303      	orrs	r3, r0
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006560:	2206      	movs	r2, #6
 8006562:	482c      	ldr	r0, [pc, #176]	; (8006614 <_vfiprintf_r+0x250>)
 8006564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006568:	f000 fc60 	bl	8006e2c <memchr>
 800656c:	2800      	cmp	r0, #0
 800656e:	d03f      	beq.n	80065f0 <_vfiprintf_r+0x22c>
 8006570:	4b29      	ldr	r3, [pc, #164]	; (8006618 <_vfiprintf_r+0x254>)
 8006572:	bb1b      	cbnz	r3, 80065bc <_vfiprintf_r+0x1f8>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	3307      	adds	r3, #7
 8006578:	f023 0307 	bic.w	r3, r3, #7
 800657c:	3308      	adds	r3, #8
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006582:	443b      	add	r3, r7
 8006584:	9309      	str	r3, [sp, #36]	; 0x24
 8006586:	e767      	b.n	8006458 <_vfiprintf_r+0x94>
 8006588:	460c      	mov	r4, r1
 800658a:	2001      	movs	r0, #1
 800658c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006590:	e7a5      	b.n	80064de <_vfiprintf_r+0x11a>
 8006592:	2300      	movs	r3, #0
 8006594:	f04f 0c0a 	mov.w	ip, #10
 8006598:	4619      	mov	r1, r3
 800659a:	3401      	adds	r4, #1
 800659c:	9305      	str	r3, [sp, #20]
 800659e:	4620      	mov	r0, r4
 80065a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a4:	3a30      	subs	r2, #48	; 0x30
 80065a6:	2a09      	cmp	r2, #9
 80065a8:	d903      	bls.n	80065b2 <_vfiprintf_r+0x1ee>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0c5      	beq.n	800653a <_vfiprintf_r+0x176>
 80065ae:	9105      	str	r1, [sp, #20]
 80065b0:	e7c3      	b.n	800653a <_vfiprintf_r+0x176>
 80065b2:	4604      	mov	r4, r0
 80065b4:	2301      	movs	r3, #1
 80065b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065ba:	e7f0      	b.n	800659e <_vfiprintf_r+0x1da>
 80065bc:	ab03      	add	r3, sp, #12
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	462a      	mov	r2, r5
 80065c2:	4630      	mov	r0, r6
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <_vfiprintf_r+0x258>)
 80065c6:	a904      	add	r1, sp, #16
 80065c8:	f3af 8000 	nop.w
 80065cc:	4607      	mov	r7, r0
 80065ce:	1c78      	adds	r0, r7, #1
 80065d0:	d1d6      	bne.n	8006580 <_vfiprintf_r+0x1bc>
 80065d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065d4:	07d9      	lsls	r1, r3, #31
 80065d6:	d405      	bmi.n	80065e4 <_vfiprintf_r+0x220>
 80065d8:	89ab      	ldrh	r3, [r5, #12]
 80065da:	059a      	lsls	r2, r3, #22
 80065dc:	d402      	bmi.n	80065e4 <_vfiprintf_r+0x220>
 80065de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065e0:	f7ff fe6d 	bl	80062be <__retarget_lock_release_recursive>
 80065e4:	89ab      	ldrh	r3, [r5, #12]
 80065e6:	065b      	lsls	r3, r3, #25
 80065e8:	f53f af12 	bmi.w	8006410 <_vfiprintf_r+0x4c>
 80065ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065ee:	e711      	b.n	8006414 <_vfiprintf_r+0x50>
 80065f0:	ab03      	add	r3, sp, #12
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	462a      	mov	r2, r5
 80065f6:	4630      	mov	r0, r6
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <_vfiprintf_r+0x258>)
 80065fa:	a904      	add	r1, sp, #16
 80065fc:	f000 f882 	bl	8006704 <_printf_i>
 8006600:	e7e4      	b.n	80065cc <_vfiprintf_r+0x208>
 8006602:	bf00      	nop
 8006604:	08007664 	.word	0x08007664
 8006608:	08007684 	.word	0x08007684
 800660c:	08007644 	.word	0x08007644
 8006610:	080076a4 	.word	0x080076a4
 8006614:	080076ae 	.word	0x080076ae
 8006618:	00000000 	.word	0x00000000
 800661c:	0800639f 	.word	0x0800639f
 8006620:	080076aa 	.word	0x080076aa

08006624 <_printf_common>:
 8006624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	4616      	mov	r6, r2
 800662a:	4699      	mov	r9, r3
 800662c:	688a      	ldr	r2, [r1, #8]
 800662e:	690b      	ldr	r3, [r1, #16]
 8006630:	4607      	mov	r7, r0
 8006632:	4293      	cmp	r3, r2
 8006634:	bfb8      	it	lt
 8006636:	4613      	movlt	r3, r2
 8006638:	6033      	str	r3, [r6, #0]
 800663a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800663e:	460c      	mov	r4, r1
 8006640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006644:	b10a      	cbz	r2, 800664a <_printf_common+0x26>
 8006646:	3301      	adds	r3, #1
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	0699      	lsls	r1, r3, #26
 800664e:	bf42      	ittt	mi
 8006650:	6833      	ldrmi	r3, [r6, #0]
 8006652:	3302      	addmi	r3, #2
 8006654:	6033      	strmi	r3, [r6, #0]
 8006656:	6825      	ldr	r5, [r4, #0]
 8006658:	f015 0506 	ands.w	r5, r5, #6
 800665c:	d106      	bne.n	800666c <_printf_common+0x48>
 800665e:	f104 0a19 	add.w	sl, r4, #25
 8006662:	68e3      	ldr	r3, [r4, #12]
 8006664:	6832      	ldr	r2, [r6, #0]
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	42ab      	cmp	r3, r5
 800666a:	dc28      	bgt.n	80066be <_printf_common+0x9a>
 800666c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006670:	1e13      	subs	r3, r2, #0
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	bf18      	it	ne
 8006676:	2301      	movne	r3, #1
 8006678:	0692      	lsls	r2, r2, #26
 800667a:	d42d      	bmi.n	80066d8 <_printf_common+0xb4>
 800667c:	4649      	mov	r1, r9
 800667e:	4638      	mov	r0, r7
 8006680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006684:	47c0      	blx	r8
 8006686:	3001      	adds	r0, #1
 8006688:	d020      	beq.n	80066cc <_printf_common+0xa8>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	68e5      	ldr	r5, [r4, #12]
 800668e:	f003 0306 	and.w	r3, r3, #6
 8006692:	2b04      	cmp	r3, #4
 8006694:	bf18      	it	ne
 8006696:	2500      	movne	r5, #0
 8006698:	6832      	ldr	r2, [r6, #0]
 800669a:	f04f 0600 	mov.w	r6, #0
 800669e:	68a3      	ldr	r3, [r4, #8]
 80066a0:	bf08      	it	eq
 80066a2:	1aad      	subeq	r5, r5, r2
 80066a4:	6922      	ldr	r2, [r4, #16]
 80066a6:	bf08      	it	eq
 80066a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066ac:	4293      	cmp	r3, r2
 80066ae:	bfc4      	itt	gt
 80066b0:	1a9b      	subgt	r3, r3, r2
 80066b2:	18ed      	addgt	r5, r5, r3
 80066b4:	341a      	adds	r4, #26
 80066b6:	42b5      	cmp	r5, r6
 80066b8:	d11a      	bne.n	80066f0 <_printf_common+0xcc>
 80066ba:	2000      	movs	r0, #0
 80066bc:	e008      	b.n	80066d0 <_printf_common+0xac>
 80066be:	2301      	movs	r3, #1
 80066c0:	4652      	mov	r2, sl
 80066c2:	4649      	mov	r1, r9
 80066c4:	4638      	mov	r0, r7
 80066c6:	47c0      	blx	r8
 80066c8:	3001      	adds	r0, #1
 80066ca:	d103      	bne.n	80066d4 <_printf_common+0xb0>
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d4:	3501      	adds	r5, #1
 80066d6:	e7c4      	b.n	8006662 <_printf_common+0x3e>
 80066d8:	2030      	movs	r0, #48	; 0x30
 80066da:	18e1      	adds	r1, r4, r3
 80066dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066e6:	4422      	add	r2, r4
 80066e8:	3302      	adds	r3, #2
 80066ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066ee:	e7c5      	b.n	800667c <_printf_common+0x58>
 80066f0:	2301      	movs	r3, #1
 80066f2:	4622      	mov	r2, r4
 80066f4:	4649      	mov	r1, r9
 80066f6:	4638      	mov	r0, r7
 80066f8:	47c0      	blx	r8
 80066fa:	3001      	adds	r0, #1
 80066fc:	d0e6      	beq.n	80066cc <_printf_common+0xa8>
 80066fe:	3601      	adds	r6, #1
 8006700:	e7d9      	b.n	80066b6 <_printf_common+0x92>
	...

08006704 <_printf_i>:
 8006704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	460c      	mov	r4, r1
 800670a:	7e27      	ldrb	r7, [r4, #24]
 800670c:	4691      	mov	r9, r2
 800670e:	2f78      	cmp	r7, #120	; 0x78
 8006710:	4680      	mov	r8, r0
 8006712:	469a      	mov	sl, r3
 8006714:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006716:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800671a:	d807      	bhi.n	800672c <_printf_i+0x28>
 800671c:	2f62      	cmp	r7, #98	; 0x62
 800671e:	d80a      	bhi.n	8006736 <_printf_i+0x32>
 8006720:	2f00      	cmp	r7, #0
 8006722:	f000 80d9 	beq.w	80068d8 <_printf_i+0x1d4>
 8006726:	2f58      	cmp	r7, #88	; 0x58
 8006728:	f000 80a4 	beq.w	8006874 <_printf_i+0x170>
 800672c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006734:	e03a      	b.n	80067ac <_printf_i+0xa8>
 8006736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800673a:	2b15      	cmp	r3, #21
 800673c:	d8f6      	bhi.n	800672c <_printf_i+0x28>
 800673e:	a001      	add	r0, pc, #4	; (adr r0, 8006744 <_printf_i+0x40>)
 8006740:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006744:	0800679d 	.word	0x0800679d
 8006748:	080067b1 	.word	0x080067b1
 800674c:	0800672d 	.word	0x0800672d
 8006750:	0800672d 	.word	0x0800672d
 8006754:	0800672d 	.word	0x0800672d
 8006758:	0800672d 	.word	0x0800672d
 800675c:	080067b1 	.word	0x080067b1
 8006760:	0800672d 	.word	0x0800672d
 8006764:	0800672d 	.word	0x0800672d
 8006768:	0800672d 	.word	0x0800672d
 800676c:	0800672d 	.word	0x0800672d
 8006770:	080068bf 	.word	0x080068bf
 8006774:	080067e1 	.word	0x080067e1
 8006778:	080068a1 	.word	0x080068a1
 800677c:	0800672d 	.word	0x0800672d
 8006780:	0800672d 	.word	0x0800672d
 8006784:	080068e1 	.word	0x080068e1
 8006788:	0800672d 	.word	0x0800672d
 800678c:	080067e1 	.word	0x080067e1
 8006790:	0800672d 	.word	0x0800672d
 8006794:	0800672d 	.word	0x0800672d
 8006798:	080068a9 	.word	0x080068a9
 800679c:	680b      	ldr	r3, [r1, #0]
 800679e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	600a      	str	r2, [r1, #0]
 80067a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0a4      	b.n	80068fa <_printf_i+0x1f6>
 80067b0:	6825      	ldr	r5, [r4, #0]
 80067b2:	6808      	ldr	r0, [r1, #0]
 80067b4:	062e      	lsls	r6, r5, #24
 80067b6:	f100 0304 	add.w	r3, r0, #4
 80067ba:	d50a      	bpl.n	80067d2 <_printf_i+0xce>
 80067bc:	6805      	ldr	r5, [r0, #0]
 80067be:	600b      	str	r3, [r1, #0]
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	da03      	bge.n	80067cc <_printf_i+0xc8>
 80067c4:	232d      	movs	r3, #45	; 0x2d
 80067c6:	426d      	negs	r5, r5
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067cc:	230a      	movs	r3, #10
 80067ce:	485e      	ldr	r0, [pc, #376]	; (8006948 <_printf_i+0x244>)
 80067d0:	e019      	b.n	8006806 <_printf_i+0x102>
 80067d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80067d6:	6805      	ldr	r5, [r0, #0]
 80067d8:	600b      	str	r3, [r1, #0]
 80067da:	bf18      	it	ne
 80067dc:	b22d      	sxthne	r5, r5
 80067de:	e7ef      	b.n	80067c0 <_printf_i+0xbc>
 80067e0:	680b      	ldr	r3, [r1, #0]
 80067e2:	6825      	ldr	r5, [r4, #0]
 80067e4:	1d18      	adds	r0, r3, #4
 80067e6:	6008      	str	r0, [r1, #0]
 80067e8:	0628      	lsls	r0, r5, #24
 80067ea:	d501      	bpl.n	80067f0 <_printf_i+0xec>
 80067ec:	681d      	ldr	r5, [r3, #0]
 80067ee:	e002      	b.n	80067f6 <_printf_i+0xf2>
 80067f0:	0669      	lsls	r1, r5, #25
 80067f2:	d5fb      	bpl.n	80067ec <_printf_i+0xe8>
 80067f4:	881d      	ldrh	r5, [r3, #0]
 80067f6:	2f6f      	cmp	r7, #111	; 0x6f
 80067f8:	bf0c      	ite	eq
 80067fa:	2308      	moveq	r3, #8
 80067fc:	230a      	movne	r3, #10
 80067fe:	4852      	ldr	r0, [pc, #328]	; (8006948 <_printf_i+0x244>)
 8006800:	2100      	movs	r1, #0
 8006802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006806:	6866      	ldr	r6, [r4, #4]
 8006808:	2e00      	cmp	r6, #0
 800680a:	bfa8      	it	ge
 800680c:	6821      	ldrge	r1, [r4, #0]
 800680e:	60a6      	str	r6, [r4, #8]
 8006810:	bfa4      	itt	ge
 8006812:	f021 0104 	bicge.w	r1, r1, #4
 8006816:	6021      	strge	r1, [r4, #0]
 8006818:	b90d      	cbnz	r5, 800681e <_printf_i+0x11a>
 800681a:	2e00      	cmp	r6, #0
 800681c:	d04d      	beq.n	80068ba <_printf_i+0x1b6>
 800681e:	4616      	mov	r6, r2
 8006820:	fbb5 f1f3 	udiv	r1, r5, r3
 8006824:	fb03 5711 	mls	r7, r3, r1, r5
 8006828:	5dc7      	ldrb	r7, [r0, r7]
 800682a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800682e:	462f      	mov	r7, r5
 8006830:	42bb      	cmp	r3, r7
 8006832:	460d      	mov	r5, r1
 8006834:	d9f4      	bls.n	8006820 <_printf_i+0x11c>
 8006836:	2b08      	cmp	r3, #8
 8006838:	d10b      	bne.n	8006852 <_printf_i+0x14e>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	07df      	lsls	r7, r3, #31
 800683e:	d508      	bpl.n	8006852 <_printf_i+0x14e>
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	6861      	ldr	r1, [r4, #4]
 8006844:	4299      	cmp	r1, r3
 8006846:	bfde      	ittt	le
 8006848:	2330      	movle	r3, #48	; 0x30
 800684a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800684e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006852:	1b92      	subs	r2, r2, r6
 8006854:	6122      	str	r2, [r4, #16]
 8006856:	464b      	mov	r3, r9
 8006858:	4621      	mov	r1, r4
 800685a:	4640      	mov	r0, r8
 800685c:	f8cd a000 	str.w	sl, [sp]
 8006860:	aa03      	add	r2, sp, #12
 8006862:	f7ff fedf 	bl	8006624 <_printf_common>
 8006866:	3001      	adds	r0, #1
 8006868:	d14c      	bne.n	8006904 <_printf_i+0x200>
 800686a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800686e:	b004      	add	sp, #16
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006874:	4834      	ldr	r0, [pc, #208]	; (8006948 <_printf_i+0x244>)
 8006876:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800687a:	680e      	ldr	r6, [r1, #0]
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006882:	061f      	lsls	r7, r3, #24
 8006884:	600e      	str	r6, [r1, #0]
 8006886:	d514      	bpl.n	80068b2 <_printf_i+0x1ae>
 8006888:	07d9      	lsls	r1, r3, #31
 800688a:	bf44      	itt	mi
 800688c:	f043 0320 	orrmi.w	r3, r3, #32
 8006890:	6023      	strmi	r3, [r4, #0]
 8006892:	b91d      	cbnz	r5, 800689c <_printf_i+0x198>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	f023 0320 	bic.w	r3, r3, #32
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	2310      	movs	r3, #16
 800689e:	e7af      	b.n	8006800 <_printf_i+0xfc>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	f043 0320 	orr.w	r3, r3, #32
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	2378      	movs	r3, #120	; 0x78
 80068aa:	4828      	ldr	r0, [pc, #160]	; (800694c <_printf_i+0x248>)
 80068ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068b0:	e7e3      	b.n	800687a <_printf_i+0x176>
 80068b2:	065e      	lsls	r6, r3, #25
 80068b4:	bf48      	it	mi
 80068b6:	b2ad      	uxthmi	r5, r5
 80068b8:	e7e6      	b.n	8006888 <_printf_i+0x184>
 80068ba:	4616      	mov	r6, r2
 80068bc:	e7bb      	b.n	8006836 <_printf_i+0x132>
 80068be:	680b      	ldr	r3, [r1, #0]
 80068c0:	6826      	ldr	r6, [r4, #0]
 80068c2:	1d1d      	adds	r5, r3, #4
 80068c4:	6960      	ldr	r0, [r4, #20]
 80068c6:	600d      	str	r5, [r1, #0]
 80068c8:	0635      	lsls	r5, r6, #24
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	d501      	bpl.n	80068d2 <_printf_i+0x1ce>
 80068ce:	6018      	str	r0, [r3, #0]
 80068d0:	e002      	b.n	80068d8 <_printf_i+0x1d4>
 80068d2:	0671      	lsls	r1, r6, #25
 80068d4:	d5fb      	bpl.n	80068ce <_printf_i+0x1ca>
 80068d6:	8018      	strh	r0, [r3, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	4616      	mov	r6, r2
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	e7ba      	b.n	8006856 <_printf_i+0x152>
 80068e0:	680b      	ldr	r3, [r1, #0]
 80068e2:	1d1a      	adds	r2, r3, #4
 80068e4:	600a      	str	r2, [r1, #0]
 80068e6:	681e      	ldr	r6, [r3, #0]
 80068e8:	2100      	movs	r1, #0
 80068ea:	4630      	mov	r0, r6
 80068ec:	6862      	ldr	r2, [r4, #4]
 80068ee:	f000 fa9d 	bl	8006e2c <memchr>
 80068f2:	b108      	cbz	r0, 80068f8 <_printf_i+0x1f4>
 80068f4:	1b80      	subs	r0, r0, r6
 80068f6:	6060      	str	r0, [r4, #4]
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	6123      	str	r3, [r4, #16]
 80068fc:	2300      	movs	r3, #0
 80068fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006902:	e7a8      	b.n	8006856 <_printf_i+0x152>
 8006904:	4632      	mov	r2, r6
 8006906:	4649      	mov	r1, r9
 8006908:	4640      	mov	r0, r8
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	47d0      	blx	sl
 800690e:	3001      	adds	r0, #1
 8006910:	d0ab      	beq.n	800686a <_printf_i+0x166>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	079b      	lsls	r3, r3, #30
 8006916:	d413      	bmi.n	8006940 <_printf_i+0x23c>
 8006918:	68e0      	ldr	r0, [r4, #12]
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	4298      	cmp	r0, r3
 800691e:	bfb8      	it	lt
 8006920:	4618      	movlt	r0, r3
 8006922:	e7a4      	b.n	800686e <_printf_i+0x16a>
 8006924:	2301      	movs	r3, #1
 8006926:	4632      	mov	r2, r6
 8006928:	4649      	mov	r1, r9
 800692a:	4640      	mov	r0, r8
 800692c:	47d0      	blx	sl
 800692e:	3001      	adds	r0, #1
 8006930:	d09b      	beq.n	800686a <_printf_i+0x166>
 8006932:	3501      	adds	r5, #1
 8006934:	68e3      	ldr	r3, [r4, #12]
 8006936:	9903      	ldr	r1, [sp, #12]
 8006938:	1a5b      	subs	r3, r3, r1
 800693a:	42ab      	cmp	r3, r5
 800693c:	dcf2      	bgt.n	8006924 <_printf_i+0x220>
 800693e:	e7eb      	b.n	8006918 <_printf_i+0x214>
 8006940:	2500      	movs	r5, #0
 8006942:	f104 0619 	add.w	r6, r4, #25
 8006946:	e7f5      	b.n	8006934 <_printf_i+0x230>
 8006948:	080076b5 	.word	0x080076b5
 800694c:	080076c6 	.word	0x080076c6

08006950 <_sbrk_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	2300      	movs	r3, #0
 8006954:	4d05      	ldr	r5, [pc, #20]	; (800696c <_sbrk_r+0x1c>)
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	f7fc fa9e 	bl	8002e9c <_sbrk>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_sbrk_r+0x1a>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_sbrk_r+0x1a>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	2000031c 	.word	0x2000031c

08006970 <__sread>:
 8006970:	b510      	push	{r4, lr}
 8006972:	460c      	mov	r4, r1
 8006974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006978:	f000 fabe 	bl	8006ef8 <_read_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	bfab      	itete	ge
 8006980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006982:	89a3      	ldrhlt	r3, [r4, #12]
 8006984:	181b      	addge	r3, r3, r0
 8006986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800698a:	bfac      	ite	ge
 800698c:	6563      	strge	r3, [r4, #84]	; 0x54
 800698e:	81a3      	strhlt	r3, [r4, #12]
 8006990:	bd10      	pop	{r4, pc}

08006992 <__swrite>:
 8006992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	461f      	mov	r7, r3
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	4605      	mov	r5, r0
 800699c:	05db      	lsls	r3, r3, #23
 800699e:	460c      	mov	r4, r1
 80069a0:	4616      	mov	r6, r2
 80069a2:	d505      	bpl.n	80069b0 <__swrite+0x1e>
 80069a4:	2302      	movs	r3, #2
 80069a6:	2200      	movs	r2, #0
 80069a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ac:	f000 f9c8 	bl	8006d40 <_lseek_r>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	4632      	mov	r2, r6
 80069b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069b8:	81a3      	strh	r3, [r4, #12]
 80069ba:	4628      	mov	r0, r5
 80069bc:	463b      	mov	r3, r7
 80069be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069c6:	f000 b869 	b.w	8006a9c <_write_r>

080069ca <__sseek>:
 80069ca:	b510      	push	{r4, lr}
 80069cc:	460c      	mov	r4, r1
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 f9b5 	bl	8006d40 <_lseek_r>
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	bf15      	itete	ne
 80069dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069e6:	81a3      	strheq	r3, [r4, #12]
 80069e8:	bf18      	it	ne
 80069ea:	81a3      	strhne	r3, [r4, #12]
 80069ec:	bd10      	pop	{r4, pc}

080069ee <__sclose>:
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 b8d3 	b.w	8006b9c <_close_r>
	...

080069f8 <__swbuf_r>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	460e      	mov	r6, r1
 80069fc:	4614      	mov	r4, r2
 80069fe:	4605      	mov	r5, r0
 8006a00:	b118      	cbz	r0, 8006a0a <__swbuf_r+0x12>
 8006a02:	6983      	ldr	r3, [r0, #24]
 8006a04:	b90b      	cbnz	r3, 8006a0a <__swbuf_r+0x12>
 8006a06:	f7ff fbbb 	bl	8006180 <__sinit>
 8006a0a:	4b21      	ldr	r3, [pc, #132]	; (8006a90 <__swbuf_r+0x98>)
 8006a0c:	429c      	cmp	r4, r3
 8006a0e:	d12b      	bne.n	8006a68 <__swbuf_r+0x70>
 8006a10:	686c      	ldr	r4, [r5, #4]
 8006a12:	69a3      	ldr	r3, [r4, #24]
 8006a14:	60a3      	str	r3, [r4, #8]
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	071a      	lsls	r2, r3, #28
 8006a1a:	d52f      	bpl.n	8006a7c <__swbuf_r+0x84>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	b36b      	cbz	r3, 8006a7c <__swbuf_r+0x84>
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	6820      	ldr	r0, [r4, #0]
 8006a24:	b2f6      	uxtb	r6, r6
 8006a26:	1ac0      	subs	r0, r0, r3
 8006a28:	6963      	ldr	r3, [r4, #20]
 8006a2a:	4637      	mov	r7, r6
 8006a2c:	4283      	cmp	r3, r0
 8006a2e:	dc04      	bgt.n	8006a3a <__swbuf_r+0x42>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f948 	bl	8006cc8 <_fflush_r>
 8006a38:	bb30      	cbnz	r0, 8006a88 <__swbuf_r+0x90>
 8006a3a:	68a3      	ldr	r3, [r4, #8]
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	60a3      	str	r3, [r4, #8]
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	701e      	strb	r6, [r3, #0]
 8006a4a:	6963      	ldr	r3, [r4, #20]
 8006a4c:	4283      	cmp	r3, r0
 8006a4e:	d004      	beq.n	8006a5a <__swbuf_r+0x62>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	07db      	lsls	r3, r3, #31
 8006a54:	d506      	bpl.n	8006a64 <__swbuf_r+0x6c>
 8006a56:	2e0a      	cmp	r6, #10
 8006a58:	d104      	bne.n	8006a64 <__swbuf_r+0x6c>
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 f933 	bl	8006cc8 <_fflush_r>
 8006a62:	b988      	cbnz	r0, 8006a88 <__swbuf_r+0x90>
 8006a64:	4638      	mov	r0, r7
 8006a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <__swbuf_r+0x9c>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d101      	bne.n	8006a72 <__swbuf_r+0x7a>
 8006a6e:	68ac      	ldr	r4, [r5, #8]
 8006a70:	e7cf      	b.n	8006a12 <__swbuf_r+0x1a>
 8006a72:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <__swbuf_r+0xa0>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	bf08      	it	eq
 8006a78:	68ec      	ldreq	r4, [r5, #12]
 8006a7a:	e7ca      	b.n	8006a12 <__swbuf_r+0x1a>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 f81e 	bl	8006ac0 <__swsetup_r>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d0cb      	beq.n	8006a20 <__swbuf_r+0x28>
 8006a88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a8c:	e7ea      	b.n	8006a64 <__swbuf_r+0x6c>
 8006a8e:	bf00      	nop
 8006a90:	08007664 	.word	0x08007664
 8006a94:	08007684 	.word	0x08007684
 8006a98:	08007644 	.word	0x08007644

08006a9c <_write_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4d05      	ldr	r5, [pc, #20]	; (8006abc <_write_r+0x20>)
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f7fb fb1c 	bl	80020e8 <_write>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_write_r+0x1e>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_write_r+0x1e>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	2000031c 	.word	0x2000031c

08006ac0 <__swsetup_r>:
 8006ac0:	4b32      	ldr	r3, [pc, #200]	; (8006b8c <__swsetup_r+0xcc>)
 8006ac2:	b570      	push	{r4, r5, r6, lr}
 8006ac4:	681d      	ldr	r5, [r3, #0]
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	b125      	cbz	r5, 8006ad6 <__swsetup_r+0x16>
 8006acc:	69ab      	ldr	r3, [r5, #24]
 8006ace:	b913      	cbnz	r3, 8006ad6 <__swsetup_r+0x16>
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7ff fb55 	bl	8006180 <__sinit>
 8006ad6:	4b2e      	ldr	r3, [pc, #184]	; (8006b90 <__swsetup_r+0xd0>)
 8006ad8:	429c      	cmp	r4, r3
 8006ada:	d10f      	bne.n	8006afc <__swsetup_r+0x3c>
 8006adc:	686c      	ldr	r4, [r5, #4]
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ae4:	0719      	lsls	r1, r3, #28
 8006ae6:	d42c      	bmi.n	8006b42 <__swsetup_r+0x82>
 8006ae8:	06dd      	lsls	r5, r3, #27
 8006aea:	d411      	bmi.n	8006b10 <__swsetup_r+0x50>
 8006aec:	2309      	movs	r3, #9
 8006aee:	6033      	str	r3, [r6, #0]
 8006af0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	e03e      	b.n	8006b7a <__swsetup_r+0xba>
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <__swsetup_r+0xd4>)
 8006afe:	429c      	cmp	r4, r3
 8006b00:	d101      	bne.n	8006b06 <__swsetup_r+0x46>
 8006b02:	68ac      	ldr	r4, [r5, #8]
 8006b04:	e7eb      	b.n	8006ade <__swsetup_r+0x1e>
 8006b06:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <__swsetup_r+0xd8>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	bf08      	it	eq
 8006b0c:	68ec      	ldreq	r4, [r5, #12]
 8006b0e:	e7e6      	b.n	8006ade <__swsetup_r+0x1e>
 8006b10:	0758      	lsls	r0, r3, #29
 8006b12:	d512      	bpl.n	8006b3a <__swsetup_r+0x7a>
 8006b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b16:	b141      	cbz	r1, 8006b2a <__swsetup_r+0x6a>
 8006b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b1c:	4299      	cmp	r1, r3
 8006b1e:	d002      	beq.n	8006b26 <__swsetup_r+0x66>
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 f99d 	bl	8006e60 <_free_r>
 8006b26:	2300      	movs	r3, #0
 8006b28:	6363      	str	r3, [r4, #52]	; 0x34
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	2300      	movs	r3, #0
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	6923      	ldr	r3, [r4, #16]
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f043 0308 	orr.w	r3, r3, #8
 8006b40:	81a3      	strh	r3, [r4, #12]
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	b94b      	cbnz	r3, 8006b5a <__swsetup_r+0x9a>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b50:	d003      	beq.n	8006b5a <__swsetup_r+0x9a>
 8006b52:	4621      	mov	r1, r4
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 f929 	bl	8006dac <__smakebuf_r>
 8006b5a:	89a0      	ldrh	r0, [r4, #12]
 8006b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b60:	f010 0301 	ands.w	r3, r0, #1
 8006b64:	d00a      	beq.n	8006b7c <__swsetup_r+0xbc>
 8006b66:	2300      	movs	r3, #0
 8006b68:	60a3      	str	r3, [r4, #8]
 8006b6a:	6963      	ldr	r3, [r4, #20]
 8006b6c:	425b      	negs	r3, r3
 8006b6e:	61a3      	str	r3, [r4, #24]
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	b943      	cbnz	r3, 8006b86 <__swsetup_r+0xc6>
 8006b74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b78:	d1ba      	bne.n	8006af0 <__swsetup_r+0x30>
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	0781      	lsls	r1, r0, #30
 8006b7e:	bf58      	it	pl
 8006b80:	6963      	ldrpl	r3, [r4, #20]
 8006b82:	60a3      	str	r3, [r4, #8]
 8006b84:	e7f4      	b.n	8006b70 <__swsetup_r+0xb0>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e7f7      	b.n	8006b7a <__swsetup_r+0xba>
 8006b8a:	bf00      	nop
 8006b8c:	200000a4 	.word	0x200000a4
 8006b90:	08007664 	.word	0x08007664
 8006b94:	08007684 	.word	0x08007684
 8006b98:	08007644 	.word	0x08007644

08006b9c <_close_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4d05      	ldr	r5, [pc, #20]	; (8006bb8 <_close_r+0x1c>)
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fc f947 	bl	8002e3a <_close>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_close_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_close_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	2000031c 	.word	0x2000031c

08006bbc <__sflush_r>:
 8006bbc:	898a      	ldrh	r2, [r1, #12]
 8006bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	0710      	lsls	r0, r2, #28
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	d458      	bmi.n	8006c7c <__sflush_r+0xc0>
 8006bca:	684b      	ldr	r3, [r1, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dc05      	bgt.n	8006bdc <__sflush_r+0x20>
 8006bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	dc02      	bgt.n	8006bdc <__sflush_r+0x20>
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bde:	2e00      	cmp	r6, #0
 8006be0:	d0f9      	beq.n	8006bd6 <__sflush_r+0x1a>
 8006be2:	2300      	movs	r3, #0
 8006be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006be8:	682f      	ldr	r7, [r5, #0]
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	d032      	beq.n	8006c54 <__sflush_r+0x98>
 8006bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	075a      	lsls	r2, r3, #29
 8006bf4:	d505      	bpl.n	8006c02 <__sflush_r+0x46>
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	1ac0      	subs	r0, r0, r3
 8006bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bfc:	b10b      	cbz	r3, 8006c02 <__sflush_r+0x46>
 8006bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c00:	1ac0      	subs	r0, r0, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	4602      	mov	r2, r0
 8006c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c08:	4628      	mov	r0, r5
 8006c0a:	6a21      	ldr	r1, [r4, #32]
 8006c0c:	47b0      	blx	r6
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	d106      	bne.n	8006c22 <__sflush_r+0x66>
 8006c14:	6829      	ldr	r1, [r5, #0]
 8006c16:	291d      	cmp	r1, #29
 8006c18:	d82c      	bhi.n	8006c74 <__sflush_r+0xb8>
 8006c1a:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <__sflush_r+0x108>)
 8006c1c:	40ca      	lsrs	r2, r1
 8006c1e:	07d6      	lsls	r6, r2, #31
 8006c20:	d528      	bpl.n	8006c74 <__sflush_r+0xb8>
 8006c22:	2200      	movs	r2, #0
 8006c24:	6062      	str	r2, [r4, #4]
 8006c26:	6922      	ldr	r2, [r4, #16]
 8006c28:	04d9      	lsls	r1, r3, #19
 8006c2a:	6022      	str	r2, [r4, #0]
 8006c2c:	d504      	bpl.n	8006c38 <__sflush_r+0x7c>
 8006c2e:	1c42      	adds	r2, r0, #1
 8006c30:	d101      	bne.n	8006c36 <__sflush_r+0x7a>
 8006c32:	682b      	ldr	r3, [r5, #0]
 8006c34:	b903      	cbnz	r3, 8006c38 <__sflush_r+0x7c>
 8006c36:	6560      	str	r0, [r4, #84]	; 0x54
 8006c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c3a:	602f      	str	r7, [r5, #0]
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d0ca      	beq.n	8006bd6 <__sflush_r+0x1a>
 8006c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c44:	4299      	cmp	r1, r3
 8006c46:	d002      	beq.n	8006c4e <__sflush_r+0x92>
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 f909 	bl	8006e60 <_free_r>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	6360      	str	r0, [r4, #52]	; 0x34
 8006c52:	e7c1      	b.n	8006bd8 <__sflush_r+0x1c>
 8006c54:	6a21      	ldr	r1, [r4, #32]
 8006c56:	2301      	movs	r3, #1
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b0      	blx	r6
 8006c5c:	1c41      	adds	r1, r0, #1
 8006c5e:	d1c7      	bne.n	8006bf0 <__sflush_r+0x34>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0c4      	beq.n	8006bf0 <__sflush_r+0x34>
 8006c66:	2b1d      	cmp	r3, #29
 8006c68:	d001      	beq.n	8006c6e <__sflush_r+0xb2>
 8006c6a:	2b16      	cmp	r3, #22
 8006c6c:	d101      	bne.n	8006c72 <__sflush_r+0xb6>
 8006c6e:	602f      	str	r7, [r5, #0]
 8006c70:	e7b1      	b.n	8006bd6 <__sflush_r+0x1a>
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	e7ad      	b.n	8006bd8 <__sflush_r+0x1c>
 8006c7c:	690f      	ldr	r7, [r1, #16]
 8006c7e:	2f00      	cmp	r7, #0
 8006c80:	d0a9      	beq.n	8006bd6 <__sflush_r+0x1a>
 8006c82:	0793      	lsls	r3, r2, #30
 8006c84:	bf18      	it	ne
 8006c86:	2300      	movne	r3, #0
 8006c88:	680e      	ldr	r6, [r1, #0]
 8006c8a:	bf08      	it	eq
 8006c8c:	694b      	ldreq	r3, [r1, #20]
 8006c8e:	eba6 0807 	sub.w	r8, r6, r7
 8006c92:	600f      	str	r7, [r1, #0]
 8006c94:	608b      	str	r3, [r1, #8]
 8006c96:	f1b8 0f00 	cmp.w	r8, #0
 8006c9a:	dd9c      	ble.n	8006bd6 <__sflush_r+0x1a>
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	6a21      	ldr	r1, [r4, #32]
 8006ca4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ca6:	47b0      	blx	r6
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	dc06      	bgt.n	8006cba <__sflush_r+0xfe>
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	e78e      	b.n	8006bd8 <__sflush_r+0x1c>
 8006cba:	4407      	add	r7, r0
 8006cbc:	eba8 0800 	sub.w	r8, r8, r0
 8006cc0:	e7e9      	b.n	8006c96 <__sflush_r+0xda>
 8006cc2:	bf00      	nop
 8006cc4:	20400001 	.word	0x20400001

08006cc8 <_fflush_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	4605      	mov	r5, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	b913      	cbnz	r3, 8006cd8 <_fflush_r+0x10>
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	b118      	cbz	r0, 8006ce2 <_fflush_r+0x1a>
 8006cda:	6983      	ldr	r3, [r0, #24]
 8006cdc:	b90b      	cbnz	r3, 8006ce2 <_fflush_r+0x1a>
 8006cde:	f7ff fa4f 	bl	8006180 <__sinit>
 8006ce2:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <_fflush_r+0x6c>)
 8006ce4:	429c      	cmp	r4, r3
 8006ce6:	d11b      	bne.n	8006d20 <_fflush_r+0x58>
 8006ce8:	686c      	ldr	r4, [r5, #4]
 8006cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0ef      	beq.n	8006cd2 <_fflush_r+0xa>
 8006cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cf4:	07d0      	lsls	r0, r2, #31
 8006cf6:	d404      	bmi.n	8006d02 <_fflush_r+0x3a>
 8006cf8:	0599      	lsls	r1, r3, #22
 8006cfa:	d402      	bmi.n	8006d02 <_fflush_r+0x3a>
 8006cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cfe:	f7ff fadd 	bl	80062bc <__retarget_lock_acquire_recursive>
 8006d02:	4628      	mov	r0, r5
 8006d04:	4621      	mov	r1, r4
 8006d06:	f7ff ff59 	bl	8006bbc <__sflush_r>
 8006d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	07da      	lsls	r2, r3, #31
 8006d10:	d4e0      	bmi.n	8006cd4 <_fflush_r+0xc>
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	059b      	lsls	r3, r3, #22
 8006d16:	d4dd      	bmi.n	8006cd4 <_fflush_r+0xc>
 8006d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d1a:	f7ff fad0 	bl	80062be <__retarget_lock_release_recursive>
 8006d1e:	e7d9      	b.n	8006cd4 <_fflush_r+0xc>
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <_fflush_r+0x70>)
 8006d22:	429c      	cmp	r4, r3
 8006d24:	d101      	bne.n	8006d2a <_fflush_r+0x62>
 8006d26:	68ac      	ldr	r4, [r5, #8]
 8006d28:	e7df      	b.n	8006cea <_fflush_r+0x22>
 8006d2a:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <_fflush_r+0x74>)
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	bf08      	it	eq
 8006d30:	68ec      	ldreq	r4, [r5, #12]
 8006d32:	e7da      	b.n	8006cea <_fflush_r+0x22>
 8006d34:	08007664 	.word	0x08007664
 8006d38:	08007684 	.word	0x08007684
 8006d3c:	08007644 	.word	0x08007644

08006d40 <_lseek_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	4611      	mov	r1, r2
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4d05      	ldr	r5, [pc, #20]	; (8006d60 <_lseek_r+0x20>)
 8006d4c:	602a      	str	r2, [r5, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f7fc f897 	bl	8002e82 <_lseek>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_lseek_r+0x1e>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_lseek_r+0x1e>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	2000031c 	.word	0x2000031c

08006d64 <__swhatbuf_r>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	460e      	mov	r6, r1
 8006d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	461d      	mov	r5, r3
 8006d72:	b096      	sub	sp, #88	; 0x58
 8006d74:	da07      	bge.n	8006d86 <__swhatbuf_r+0x22>
 8006d76:	2300      	movs	r3, #0
 8006d78:	602b      	str	r3, [r5, #0]
 8006d7a:	89b3      	ldrh	r3, [r6, #12]
 8006d7c:	061a      	lsls	r2, r3, #24
 8006d7e:	d410      	bmi.n	8006da2 <__swhatbuf_r+0x3e>
 8006d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d84:	e00e      	b.n	8006da4 <__swhatbuf_r+0x40>
 8006d86:	466a      	mov	r2, sp
 8006d88:	f000 f8c8 	bl	8006f1c <_fstat_r>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	dbf2      	blt.n	8006d76 <__swhatbuf_r+0x12>
 8006d90:	9a01      	ldr	r2, [sp, #4]
 8006d92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d9a:	425a      	negs	r2, r3
 8006d9c:	415a      	adcs	r2, r3
 8006d9e:	602a      	str	r2, [r5, #0]
 8006da0:	e7ee      	b.n	8006d80 <__swhatbuf_r+0x1c>
 8006da2:	2340      	movs	r3, #64	; 0x40
 8006da4:	2000      	movs	r0, #0
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	b016      	add	sp, #88	; 0x58
 8006daa:	bd70      	pop	{r4, r5, r6, pc}

08006dac <__smakebuf_r>:
 8006dac:	898b      	ldrh	r3, [r1, #12]
 8006dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006db0:	079d      	lsls	r5, r3, #30
 8006db2:	4606      	mov	r6, r0
 8006db4:	460c      	mov	r4, r1
 8006db6:	d507      	bpl.n	8006dc8 <__smakebuf_r+0x1c>
 8006db8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	6123      	str	r3, [r4, #16]
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	6163      	str	r3, [r4, #20]
 8006dc4:	b002      	add	sp, #8
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	466a      	mov	r2, sp
 8006dca:	ab01      	add	r3, sp, #4
 8006dcc:	f7ff ffca 	bl	8006d64 <__swhatbuf_r>
 8006dd0:	9900      	ldr	r1, [sp, #0]
 8006dd2:	4605      	mov	r5, r0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff fa73 	bl	80062c0 <_malloc_r>
 8006dda:	b948      	cbnz	r0, 8006df0 <__smakebuf_r+0x44>
 8006ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de0:	059a      	lsls	r2, r3, #22
 8006de2:	d4ef      	bmi.n	8006dc4 <__smakebuf_r+0x18>
 8006de4:	f023 0303 	bic.w	r3, r3, #3
 8006de8:	f043 0302 	orr.w	r3, r3, #2
 8006dec:	81a3      	strh	r3, [r4, #12]
 8006dee:	e7e3      	b.n	8006db8 <__smakebuf_r+0xc>
 8006df0:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <__smakebuf_r+0x7c>)
 8006df2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	6020      	str	r0, [r4, #0]
 8006df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfc:	81a3      	strh	r3, [r4, #12]
 8006dfe:	9b00      	ldr	r3, [sp, #0]
 8006e00:	6120      	str	r0, [r4, #16]
 8006e02:	6163      	str	r3, [r4, #20]
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	b15b      	cbz	r3, 8006e20 <__smakebuf_r+0x74>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e0e:	f000 f897 	bl	8006f40 <_isatty_r>
 8006e12:	b128      	cbz	r0, 8006e20 <__smakebuf_r+0x74>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f023 0303 	bic.w	r3, r3, #3
 8006e1a:	f043 0301 	orr.w	r3, r3, #1
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	89a0      	ldrh	r0, [r4, #12]
 8006e22:	4305      	orrs	r5, r0
 8006e24:	81a5      	strh	r5, [r4, #12]
 8006e26:	e7cd      	b.n	8006dc4 <__smakebuf_r+0x18>
 8006e28:	08006119 	.word	0x08006119

08006e2c <memchr>:
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	b2c9      	uxtb	r1, r1
 8006e32:	4402      	add	r2, r0
 8006e34:	4293      	cmp	r3, r2
 8006e36:	4618      	mov	r0, r3
 8006e38:	d101      	bne.n	8006e3e <memchr+0x12>
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	e003      	b.n	8006e46 <memchr+0x1a>
 8006e3e:	7804      	ldrb	r4, [r0, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	428c      	cmp	r4, r1
 8006e44:	d1f6      	bne.n	8006e34 <memchr+0x8>
 8006e46:	bd10      	pop	{r4, pc}

08006e48 <__malloc_lock>:
 8006e48:	4801      	ldr	r0, [pc, #4]	; (8006e50 <__malloc_lock+0x8>)
 8006e4a:	f7ff ba37 	b.w	80062bc <__retarget_lock_acquire_recursive>
 8006e4e:	bf00      	nop
 8006e50:	20000314 	.word	0x20000314

08006e54 <__malloc_unlock>:
 8006e54:	4801      	ldr	r0, [pc, #4]	; (8006e5c <__malloc_unlock+0x8>)
 8006e56:	f7ff ba32 	b.w	80062be <__retarget_lock_release_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	20000314 	.word	0x20000314

08006e60 <_free_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4605      	mov	r5, r0
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d043      	beq.n	8006ef0 <_free_r+0x90>
 8006e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e6c:	1f0c      	subs	r4, r1, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfb8      	it	lt
 8006e72:	18e4      	addlt	r4, r4, r3
 8006e74:	f7ff ffe8 	bl	8006e48 <__malloc_lock>
 8006e78:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <_free_r+0x94>)
 8006e7a:	6813      	ldr	r3, [r2, #0]
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	b933      	cbnz	r3, 8006e8e <_free_r+0x2e>
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	6014      	str	r4, [r2, #0]
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e8a:	f7ff bfe3 	b.w	8006e54 <__malloc_unlock>
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	d90a      	bls.n	8006ea8 <_free_r+0x48>
 8006e92:	6821      	ldr	r1, [r4, #0]
 8006e94:	1862      	adds	r2, r4, r1
 8006e96:	4293      	cmp	r3, r2
 8006e98:	bf01      	itttt	eq
 8006e9a:	681a      	ldreq	r2, [r3, #0]
 8006e9c:	685b      	ldreq	r3, [r3, #4]
 8006e9e:	1852      	addeq	r2, r2, r1
 8006ea0:	6022      	streq	r2, [r4, #0]
 8006ea2:	6063      	str	r3, [r4, #4]
 8006ea4:	6004      	str	r4, [r0, #0]
 8006ea6:	e7ed      	b.n	8006e84 <_free_r+0x24>
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	b10b      	cbz	r3, 8006eb2 <_free_r+0x52>
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	d9fa      	bls.n	8006ea8 <_free_r+0x48>
 8006eb2:	6811      	ldr	r1, [r2, #0]
 8006eb4:	1850      	adds	r0, r2, r1
 8006eb6:	42a0      	cmp	r0, r4
 8006eb8:	d10b      	bne.n	8006ed2 <_free_r+0x72>
 8006eba:	6820      	ldr	r0, [r4, #0]
 8006ebc:	4401      	add	r1, r0
 8006ebe:	1850      	adds	r0, r2, r1
 8006ec0:	4283      	cmp	r3, r0
 8006ec2:	6011      	str	r1, [r2, #0]
 8006ec4:	d1de      	bne.n	8006e84 <_free_r+0x24>
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4401      	add	r1, r0
 8006ecc:	6011      	str	r1, [r2, #0]
 8006ece:	6053      	str	r3, [r2, #4]
 8006ed0:	e7d8      	b.n	8006e84 <_free_r+0x24>
 8006ed2:	d902      	bls.n	8006eda <_free_r+0x7a>
 8006ed4:	230c      	movs	r3, #12
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	e7d4      	b.n	8006e84 <_free_r+0x24>
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	1821      	adds	r1, r4, r0
 8006ede:	428b      	cmp	r3, r1
 8006ee0:	bf01      	itttt	eq
 8006ee2:	6819      	ldreq	r1, [r3, #0]
 8006ee4:	685b      	ldreq	r3, [r3, #4]
 8006ee6:	1809      	addeq	r1, r1, r0
 8006ee8:	6021      	streq	r1, [r4, #0]
 8006eea:	6063      	str	r3, [r4, #4]
 8006eec:	6054      	str	r4, [r2, #4]
 8006eee:	e7c9      	b.n	8006e84 <_free_r+0x24>
 8006ef0:	bd38      	pop	{r3, r4, r5, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000150 	.word	0x20000150

08006ef8 <_read_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	4d05      	ldr	r5, [pc, #20]	; (8006f18 <_read_r+0x20>)
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f7fb ff7a 	bl	8002e00 <_read>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_read_r+0x1e>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_read_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	2000031c 	.word	0x2000031c

08006f1c <_fstat_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4d06      	ldr	r5, [pc, #24]	; (8006f3c <_fstat_r+0x20>)
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7fb ff91 	bl	8002e50 <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d102      	bne.n	8006f38 <_fstat_r+0x1c>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b103      	cbz	r3, 8006f38 <_fstat_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2000031c 	.word	0x2000031c

08006f40 <_isatty_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	2300      	movs	r3, #0
 8006f44:	4d05      	ldr	r5, [pc, #20]	; (8006f5c <_isatty_r+0x1c>)
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fb ff8f 	bl	8002e6e <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_isatty_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_isatty_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	2000031c 	.word	0x2000031c

08006f60 <atan>:
 8006f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	4bb6      	ldr	r3, [pc, #728]	; (8007240 <atan+0x2e0>)
 8006f66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006f6a:	429e      	cmp	r6, r3
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	460d      	mov	r5, r1
 8006f70:	468b      	mov	fp, r1
 8006f72:	dd17      	ble.n	8006fa4 <atan+0x44>
 8006f74:	4bb3      	ldr	r3, [pc, #716]	; (8007244 <atan+0x2e4>)
 8006f76:	429e      	cmp	r6, r3
 8006f78:	dc01      	bgt.n	8006f7e <atan+0x1e>
 8006f7a:	d109      	bne.n	8006f90 <atan+0x30>
 8006f7c:	b140      	cbz	r0, 8006f90 <atan+0x30>
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	4620      	mov	r0, r4
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 f955 	bl	8000234 <__adddf3>
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	460d      	mov	r5, r1
 8006f8e:	e005      	b.n	8006f9c <atan+0x3c>
 8006f90:	f1bb 0f00 	cmp.w	fp, #0
 8006f94:	4cac      	ldr	r4, [pc, #688]	; (8007248 <atan+0x2e8>)
 8006f96:	f300 8121 	bgt.w	80071dc <atan+0x27c>
 8006f9a:	4dac      	ldr	r5, [pc, #688]	; (800724c <atan+0x2ec>)
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	4baa      	ldr	r3, [pc, #680]	; (8007250 <atan+0x2f0>)
 8006fa6:	429e      	cmp	r6, r3
 8006fa8:	dc11      	bgt.n	8006fce <atan+0x6e>
 8006faa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006fae:	429e      	cmp	r6, r3
 8006fb0:	dc0a      	bgt.n	8006fc8 <atan+0x68>
 8006fb2:	a38b      	add	r3, pc, #556	; (adr r3, 80071e0 <atan+0x280>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 f93c 	bl	8000234 <__adddf3>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4ba5      	ldr	r3, [pc, #660]	; (8007254 <atan+0x2f4>)
 8006fc0:	f7f9 fd7e 	bl	8000ac0 <__aeabi_dcmpgt>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d1e9      	bne.n	8006f9c <atan+0x3c>
 8006fc8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006fcc:	e027      	b.n	800701e <atan+0xbe>
 8006fce:	f000 f951 	bl	8007274 <fabs>
 8006fd2:	4ba1      	ldr	r3, [pc, #644]	; (8007258 <atan+0x2f8>)
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	429e      	cmp	r6, r3
 8006fd8:	460d      	mov	r5, r1
 8006fda:	f300 80b8 	bgt.w	800714e <atan+0x1ee>
 8006fde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006fe2:	429e      	cmp	r6, r3
 8006fe4:	f300 809c 	bgt.w	8007120 <atan+0x1c0>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	f7f9 f922 	bl	8000234 <__adddf3>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4b98      	ldr	r3, [pc, #608]	; (8007254 <atan+0x2f4>)
 8006ff4:	f7f9 f91c 	bl	8000230 <__aeabi_dsub>
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	460f      	mov	r7, r1
 8006ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007002:	4620      	mov	r0, r4
 8007004:	4629      	mov	r1, r5
 8007006:	f7f9 f915 	bl	8000234 <__adddf3>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4630      	mov	r0, r6
 8007010:	4639      	mov	r1, r7
 8007012:	f7f9 fbef 	bl	80007f4 <__aeabi_ddiv>
 8007016:	f04f 0a00 	mov.w	sl, #0
 800701a:	4604      	mov	r4, r0
 800701c:	460d      	mov	r5, r1
 800701e:	4622      	mov	r2, r4
 8007020:	462b      	mov	r3, r5
 8007022:	4620      	mov	r0, r4
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 fabb 	bl	80005a0 <__aeabi_dmul>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4680      	mov	r8, r0
 8007030:	4689      	mov	r9, r1
 8007032:	f7f9 fab5 	bl	80005a0 <__aeabi_dmul>
 8007036:	a36c      	add	r3, pc, #432	; (adr r3, 80071e8 <atan+0x288>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	4606      	mov	r6, r0
 800703e:	460f      	mov	r7, r1
 8007040:	f7f9 faae 	bl	80005a0 <__aeabi_dmul>
 8007044:	a36a      	add	r3, pc, #424	; (adr r3, 80071f0 <atan+0x290>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 f8f3 	bl	8000234 <__adddf3>
 800704e:	4632      	mov	r2, r6
 8007050:	463b      	mov	r3, r7
 8007052:	f7f9 faa5 	bl	80005a0 <__aeabi_dmul>
 8007056:	a368      	add	r3, pc, #416	; (adr r3, 80071f8 <atan+0x298>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 f8ea 	bl	8000234 <__adddf3>
 8007060:	4632      	mov	r2, r6
 8007062:	463b      	mov	r3, r7
 8007064:	f7f9 fa9c 	bl	80005a0 <__aeabi_dmul>
 8007068:	a365      	add	r3, pc, #404	; (adr r3, 8007200 <atan+0x2a0>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7f9 f8e1 	bl	8000234 <__adddf3>
 8007072:	4632      	mov	r2, r6
 8007074:	463b      	mov	r3, r7
 8007076:	f7f9 fa93 	bl	80005a0 <__aeabi_dmul>
 800707a:	a363      	add	r3, pc, #396	; (adr r3, 8007208 <atan+0x2a8>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f7f9 f8d8 	bl	8000234 <__adddf3>
 8007084:	4632      	mov	r2, r6
 8007086:	463b      	mov	r3, r7
 8007088:	f7f9 fa8a 	bl	80005a0 <__aeabi_dmul>
 800708c:	a360      	add	r3, pc, #384	; (adr r3, 8007210 <atan+0x2b0>)
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f7f9 f8cf 	bl	8000234 <__adddf3>
 8007096:	4642      	mov	r2, r8
 8007098:	464b      	mov	r3, r9
 800709a:	f7f9 fa81 	bl	80005a0 <__aeabi_dmul>
 800709e:	a35e      	add	r3, pc, #376	; (adr r3, 8007218 <atan+0x2b8>)
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	4680      	mov	r8, r0
 80070a6:	4689      	mov	r9, r1
 80070a8:	4630      	mov	r0, r6
 80070aa:	4639      	mov	r1, r7
 80070ac:	f7f9 fa78 	bl	80005a0 <__aeabi_dmul>
 80070b0:	a35b      	add	r3, pc, #364	; (adr r3, 8007220 <atan+0x2c0>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	f7f9 f8bb 	bl	8000230 <__aeabi_dsub>
 80070ba:	4632      	mov	r2, r6
 80070bc:	463b      	mov	r3, r7
 80070be:	f7f9 fa6f 	bl	80005a0 <__aeabi_dmul>
 80070c2:	a359      	add	r3, pc, #356	; (adr r3, 8007228 <atan+0x2c8>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 f8b2 	bl	8000230 <__aeabi_dsub>
 80070cc:	4632      	mov	r2, r6
 80070ce:	463b      	mov	r3, r7
 80070d0:	f7f9 fa66 	bl	80005a0 <__aeabi_dmul>
 80070d4:	a356      	add	r3, pc, #344	; (adr r3, 8007230 <atan+0x2d0>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 f8a9 	bl	8000230 <__aeabi_dsub>
 80070de:	4632      	mov	r2, r6
 80070e0:	463b      	mov	r3, r7
 80070e2:	f7f9 fa5d 	bl	80005a0 <__aeabi_dmul>
 80070e6:	a354      	add	r3, pc, #336	; (adr r3, 8007238 <atan+0x2d8>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f7f9 f8a0 	bl	8000230 <__aeabi_dsub>
 80070f0:	4632      	mov	r2, r6
 80070f2:	463b      	mov	r3, r7
 80070f4:	f7f9 fa54 	bl	80005a0 <__aeabi_dmul>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4640      	mov	r0, r8
 80070fe:	4649      	mov	r1, r9
 8007100:	f7f9 f898 	bl	8000234 <__adddf3>
 8007104:	4622      	mov	r2, r4
 8007106:	462b      	mov	r3, r5
 8007108:	f7f9 fa4a 	bl	80005a0 <__aeabi_dmul>
 800710c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	d144      	bne.n	80071a0 <atan+0x240>
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 f889 	bl	8000230 <__aeabi_dsub>
 800711e:	e734      	b.n	8006f8a <atan+0x2a>
 8007120:	2200      	movs	r2, #0
 8007122:	4b4c      	ldr	r3, [pc, #304]	; (8007254 <atan+0x2f4>)
 8007124:	f7f9 f884 	bl	8000230 <__aeabi_dsub>
 8007128:	2200      	movs	r2, #0
 800712a:	4606      	mov	r6, r0
 800712c:	460f      	mov	r7, r1
 800712e:	4620      	mov	r0, r4
 8007130:	4629      	mov	r1, r5
 8007132:	4b48      	ldr	r3, [pc, #288]	; (8007254 <atan+0x2f4>)
 8007134:	f7f9 f87e 	bl	8000234 <__adddf3>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4630      	mov	r0, r6
 800713e:	4639      	mov	r1, r7
 8007140:	f7f9 fb58 	bl	80007f4 <__aeabi_ddiv>
 8007144:	f04f 0a01 	mov.w	sl, #1
 8007148:	4604      	mov	r4, r0
 800714a:	460d      	mov	r5, r1
 800714c:	e767      	b.n	800701e <atan+0xbe>
 800714e:	4b43      	ldr	r3, [pc, #268]	; (800725c <atan+0x2fc>)
 8007150:	429e      	cmp	r6, r3
 8007152:	da1a      	bge.n	800718a <atan+0x22a>
 8007154:	2200      	movs	r2, #0
 8007156:	4b42      	ldr	r3, [pc, #264]	; (8007260 <atan+0x300>)
 8007158:	f7f9 f86a 	bl	8000230 <__aeabi_dsub>
 800715c:	2200      	movs	r2, #0
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	4b3e      	ldr	r3, [pc, #248]	; (8007260 <atan+0x300>)
 8007168:	f7f9 fa1a 	bl	80005a0 <__aeabi_dmul>
 800716c:	2200      	movs	r2, #0
 800716e:	4b39      	ldr	r3, [pc, #228]	; (8007254 <atan+0x2f4>)
 8007170:	f7f9 f860 	bl	8000234 <__adddf3>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 fb3a 	bl	80007f4 <__aeabi_ddiv>
 8007180:	f04f 0a02 	mov.w	sl, #2
 8007184:	4604      	mov	r4, r0
 8007186:	460d      	mov	r5, r1
 8007188:	e749      	b.n	800701e <atan+0xbe>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	2000      	movs	r0, #0
 8007190:	4934      	ldr	r1, [pc, #208]	; (8007264 <atan+0x304>)
 8007192:	f7f9 fb2f 	bl	80007f4 <__aeabi_ddiv>
 8007196:	f04f 0a03 	mov.w	sl, #3
 800719a:	4604      	mov	r4, r0
 800719c:	460d      	mov	r5, r1
 800719e:	e73e      	b.n	800701e <atan+0xbe>
 80071a0:	4b31      	ldr	r3, [pc, #196]	; (8007268 <atan+0x308>)
 80071a2:	4e32      	ldr	r6, [pc, #200]	; (800726c <atan+0x30c>)
 80071a4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80071a8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80071ac:	e9da 2300 	ldrd	r2, r3, [sl]
 80071b0:	f7f9 f83e 	bl	8000230 <__aeabi_dsub>
 80071b4:	4622      	mov	r2, r4
 80071b6:	462b      	mov	r3, r5
 80071b8:	f7f9 f83a 	bl	8000230 <__aeabi_dsub>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80071c4:	f7f9 f834 	bl	8000230 <__aeabi_dsub>
 80071c8:	f1bb 0f00 	cmp.w	fp, #0
 80071cc:	4604      	mov	r4, r0
 80071ce:	460d      	mov	r5, r1
 80071d0:	f6bf aee4 	bge.w	8006f9c <atan+0x3c>
 80071d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071d8:	461d      	mov	r5, r3
 80071da:	e6df      	b.n	8006f9c <atan+0x3c>
 80071dc:	4d24      	ldr	r5, [pc, #144]	; (8007270 <atan+0x310>)
 80071de:	e6dd      	b.n	8006f9c <atan+0x3c>
 80071e0:	8800759c 	.word	0x8800759c
 80071e4:	7e37e43c 	.word	0x7e37e43c
 80071e8:	e322da11 	.word	0xe322da11
 80071ec:	3f90ad3a 	.word	0x3f90ad3a
 80071f0:	24760deb 	.word	0x24760deb
 80071f4:	3fa97b4b 	.word	0x3fa97b4b
 80071f8:	a0d03d51 	.word	0xa0d03d51
 80071fc:	3fb10d66 	.word	0x3fb10d66
 8007200:	c54c206e 	.word	0xc54c206e
 8007204:	3fb745cd 	.word	0x3fb745cd
 8007208:	920083ff 	.word	0x920083ff
 800720c:	3fc24924 	.word	0x3fc24924
 8007210:	5555550d 	.word	0x5555550d
 8007214:	3fd55555 	.word	0x3fd55555
 8007218:	2c6a6c2f 	.word	0x2c6a6c2f
 800721c:	bfa2b444 	.word	0xbfa2b444
 8007220:	52defd9a 	.word	0x52defd9a
 8007224:	3fadde2d 	.word	0x3fadde2d
 8007228:	af749a6d 	.word	0xaf749a6d
 800722c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007230:	fe231671 	.word	0xfe231671
 8007234:	3fbc71c6 	.word	0x3fbc71c6
 8007238:	9998ebc4 	.word	0x9998ebc4
 800723c:	3fc99999 	.word	0x3fc99999
 8007240:	440fffff 	.word	0x440fffff
 8007244:	7ff00000 	.word	0x7ff00000
 8007248:	54442d18 	.word	0x54442d18
 800724c:	bff921fb 	.word	0xbff921fb
 8007250:	3fdbffff 	.word	0x3fdbffff
 8007254:	3ff00000 	.word	0x3ff00000
 8007258:	3ff2ffff 	.word	0x3ff2ffff
 800725c:	40038000 	.word	0x40038000
 8007260:	3ff80000 	.word	0x3ff80000
 8007264:	bff00000 	.word	0xbff00000
 8007268:	080076f8 	.word	0x080076f8
 800726c:	080076d8 	.word	0x080076d8
 8007270:	3ff921fb 	.word	0x3ff921fb

08007274 <fabs>:
 8007274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007278:	4770      	bx	lr

0800727a <atan2>:
 800727a:	f000 b82d 	b.w	80072d8 <__ieee754_atan2>
	...

08007280 <sqrt>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	4606      	mov	r6, r0
 8007284:	460f      	mov	r7, r1
 8007286:	f000 f8f9 	bl	800747c <__ieee754_sqrt>
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <sqrt+0x54>)
 800728c:	4604      	mov	r4, r0
 800728e:	f993 3000 	ldrsb.w	r3, [r3]
 8007292:	460d      	mov	r5, r1
 8007294:	3301      	adds	r3, #1
 8007296:	d019      	beq.n	80072cc <sqrt+0x4c>
 8007298:	4632      	mov	r2, r6
 800729a:	463b      	mov	r3, r7
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f9 fc18 	bl	8000ad4 <__aeabi_dcmpun>
 80072a4:	b990      	cbnz	r0, 80072cc <sqrt+0x4c>
 80072a6:	2200      	movs	r2, #0
 80072a8:	2300      	movs	r3, #0
 80072aa:	4630      	mov	r0, r6
 80072ac:	4639      	mov	r1, r7
 80072ae:	f7f9 fbe9 	bl	8000a84 <__aeabi_dcmplt>
 80072b2:	b158      	cbz	r0, 80072cc <sqrt+0x4c>
 80072b4:	f7fe fec2 	bl	800603c <__errno>
 80072b8:	2321      	movs	r3, #33	; 0x21
 80072ba:	2200      	movs	r2, #0
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	2300      	movs	r3, #0
 80072c0:	4610      	mov	r0, r2
 80072c2:	4619      	mov	r1, r3
 80072c4:	f7f9 fa96 	bl	80007f4 <__aeabi_ddiv>
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	4620      	mov	r0, r4
 80072ce:	4629      	mov	r1, r5
 80072d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000108 	.word	0x20000108

080072d8 <__ieee754_atan2>:
 80072d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4692      	mov	sl, r2
 80072de:	4699      	mov	r9, r3
 80072e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072e4:	461f      	mov	r7, r3
 80072e6:	f1ca 0300 	rsb	r3, sl, #0
 80072ea:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8007478 <__ieee754_atan2+0x1a0>
 80072ee:	ea43 030a 	orr.w	r3, r3, sl
 80072f2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80072f6:	4573      	cmp	r3, lr
 80072f8:	4604      	mov	r4, r0
 80072fa:	460d      	mov	r5, r1
 80072fc:	d808      	bhi.n	8007310 <__ieee754_atan2+0x38>
 80072fe:	4246      	negs	r6, r0
 8007300:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007304:	4306      	orrs	r6, r0
 8007306:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800730a:	4576      	cmp	r6, lr
 800730c:	468c      	mov	ip, r1
 800730e:	d908      	bls.n	8007322 <__ieee754_atan2+0x4a>
 8007310:	4652      	mov	r2, sl
 8007312:	464b      	mov	r3, r9
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	f7f8 ff8c 	bl	8000234 <__adddf3>
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	e019      	b.n	8007356 <__ieee754_atan2+0x7e>
 8007322:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007326:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800732a:	ea56 060a 	orrs.w	r6, r6, sl
 800732e:	d103      	bne.n	8007338 <__ieee754_atan2+0x60>
 8007330:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	f7ff be14 	b.w	8006f60 <atan>
 8007338:	17be      	asrs	r6, r7, #30
 800733a:	f006 0602 	and.w	r6, r6, #2
 800733e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007342:	ea53 0100 	orrs.w	r1, r3, r0
 8007346:	d10a      	bne.n	800735e <__ieee754_atan2+0x86>
 8007348:	2e02      	cmp	r6, #2
 800734a:	d067      	beq.n	800741c <__ieee754_atan2+0x144>
 800734c:	2e03      	cmp	r6, #3
 800734e:	d102      	bne.n	8007356 <__ieee754_atan2+0x7e>
 8007350:	a53b      	add	r5, pc, #236	; (adr r5, 8007440 <__ieee754_atan2+0x168>)
 8007352:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	ea52 010a 	orrs.w	r1, r2, sl
 8007362:	d106      	bne.n	8007372 <__ieee754_atan2+0x9a>
 8007364:	f1bc 0f00 	cmp.w	ip, #0
 8007368:	da63      	bge.n	8007432 <__ieee754_atan2+0x15a>
 800736a:	a537      	add	r5, pc, #220	; (adr r5, 8007448 <__ieee754_atan2+0x170>)
 800736c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007370:	e7f1      	b.n	8007356 <__ieee754_atan2+0x7e>
 8007372:	4572      	cmp	r2, lr
 8007374:	d10f      	bne.n	8007396 <__ieee754_atan2+0xbe>
 8007376:	4293      	cmp	r3, r2
 8007378:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800737c:	d107      	bne.n	800738e <__ieee754_atan2+0xb6>
 800737e:	2e02      	cmp	r6, #2
 8007380:	d850      	bhi.n	8007424 <__ieee754_atan2+0x14c>
 8007382:	4b3b      	ldr	r3, [pc, #236]	; (8007470 <__ieee754_atan2+0x198>)
 8007384:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007388:	e9d6 4500 	ldrd	r4, r5, [r6]
 800738c:	e7e3      	b.n	8007356 <__ieee754_atan2+0x7e>
 800738e:	2e02      	cmp	r6, #2
 8007390:	d84c      	bhi.n	800742c <__ieee754_atan2+0x154>
 8007392:	4b38      	ldr	r3, [pc, #224]	; (8007474 <__ieee754_atan2+0x19c>)
 8007394:	e7f6      	b.n	8007384 <__ieee754_atan2+0xac>
 8007396:	4573      	cmp	r3, lr
 8007398:	d0e4      	beq.n	8007364 <__ieee754_atan2+0x8c>
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80073a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073a4:	da20      	bge.n	80073e8 <__ieee754_atan2+0x110>
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	da01      	bge.n	80073ae <__ieee754_atan2+0xd6>
 80073aa:	323c      	adds	r2, #60	; 0x3c
 80073ac:	db20      	blt.n	80073f0 <__ieee754_atan2+0x118>
 80073ae:	4652      	mov	r2, sl
 80073b0:	464b      	mov	r3, r9
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 fa1d 	bl	80007f4 <__aeabi_ddiv>
 80073ba:	f7ff ff5b 	bl	8007274 <fabs>
 80073be:	f7ff fdcf 	bl	8006f60 <atan>
 80073c2:	4604      	mov	r4, r0
 80073c4:	460d      	mov	r5, r1
 80073c6:	2e01      	cmp	r6, #1
 80073c8:	d015      	beq.n	80073f6 <__ieee754_atan2+0x11e>
 80073ca:	2e02      	cmp	r6, #2
 80073cc:	d017      	beq.n	80073fe <__ieee754_atan2+0x126>
 80073ce:	2e00      	cmp	r6, #0
 80073d0:	d0c1      	beq.n	8007356 <__ieee754_atan2+0x7e>
 80073d2:	a31f      	add	r3, pc, #124	; (adr r3, 8007450 <__ieee754_atan2+0x178>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	4620      	mov	r0, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	f7f8 ff28 	bl	8000230 <__aeabi_dsub>
 80073e0:	a31d      	add	r3, pc, #116	; (adr r3, 8007458 <__ieee754_atan2+0x180>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	e016      	b.n	8007416 <__ieee754_atan2+0x13e>
 80073e8:	a51d      	add	r5, pc, #116	; (adr r5, 8007460 <__ieee754_atan2+0x188>)
 80073ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80073ee:	e7ea      	b.n	80073c6 <__ieee754_atan2+0xee>
 80073f0:	2400      	movs	r4, #0
 80073f2:	2500      	movs	r5, #0
 80073f4:	e7e7      	b.n	80073c6 <__ieee754_atan2+0xee>
 80073f6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80073fa:	461d      	mov	r5, r3
 80073fc:	e7ab      	b.n	8007356 <__ieee754_atan2+0x7e>
 80073fe:	a314      	add	r3, pc, #80	; (adr r3, 8007450 <__ieee754_atan2+0x178>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	f7f8 ff12 	bl	8000230 <__aeabi_dsub>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	a111      	add	r1, pc, #68	; (adr r1, 8007458 <__ieee754_atan2+0x180>)
 8007412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007416:	f7f8 ff0b 	bl	8000230 <__aeabi_dsub>
 800741a:	e77f      	b.n	800731c <__ieee754_atan2+0x44>
 800741c:	a50e      	add	r5, pc, #56	; (adr r5, 8007458 <__ieee754_atan2+0x180>)
 800741e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007422:	e798      	b.n	8007356 <__ieee754_atan2+0x7e>
 8007424:	a510      	add	r5, pc, #64	; (adr r5, 8007468 <__ieee754_atan2+0x190>)
 8007426:	e9d5 4500 	ldrd	r4, r5, [r5]
 800742a:	e794      	b.n	8007356 <__ieee754_atan2+0x7e>
 800742c:	2400      	movs	r4, #0
 800742e:	2500      	movs	r5, #0
 8007430:	e791      	b.n	8007356 <__ieee754_atan2+0x7e>
 8007432:	a50b      	add	r5, pc, #44	; (adr r5, 8007460 <__ieee754_atan2+0x188>)
 8007434:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007438:	e78d      	b.n	8007356 <__ieee754_atan2+0x7e>
 800743a:	bf00      	nop
 800743c:	f3af 8000 	nop.w
 8007440:	54442d18 	.word	0x54442d18
 8007444:	c00921fb 	.word	0xc00921fb
 8007448:	54442d18 	.word	0x54442d18
 800744c:	bff921fb 	.word	0xbff921fb
 8007450:	33145c07 	.word	0x33145c07
 8007454:	3ca1a626 	.word	0x3ca1a626
 8007458:	54442d18 	.word	0x54442d18
 800745c:	400921fb 	.word	0x400921fb
 8007460:	54442d18 	.word	0x54442d18
 8007464:	3ff921fb 	.word	0x3ff921fb
 8007468:	54442d18 	.word	0x54442d18
 800746c:	3fe921fb 	.word	0x3fe921fb
 8007470:	08007718 	.word	0x08007718
 8007474:	08007730 	.word	0x08007730
 8007478:	7ff00000 	.word	0x7ff00000

0800747c <__ieee754_sqrt>:
 800747c:	f8df c150 	ldr.w	ip, [pc, #336]	; 80075d0 <__ieee754_sqrt+0x154>
 8007480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007484:	ea3c 0c01 	bics.w	ip, ip, r1
 8007488:	460b      	mov	r3, r1
 800748a:	4606      	mov	r6, r0
 800748c:	460d      	mov	r5, r1
 800748e:	460a      	mov	r2, r1
 8007490:	4607      	mov	r7, r0
 8007492:	4604      	mov	r4, r0
 8007494:	d10e      	bne.n	80074b4 <__ieee754_sqrt+0x38>
 8007496:	4602      	mov	r2, r0
 8007498:	f7f9 f882 	bl	80005a0 <__aeabi_dmul>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4630      	mov	r0, r6
 80074a2:	4629      	mov	r1, r5
 80074a4:	f7f8 fec6 	bl	8000234 <__adddf3>
 80074a8:	4606      	mov	r6, r0
 80074aa:	460d      	mov	r5, r1
 80074ac:	4630      	mov	r0, r6
 80074ae:	4629      	mov	r1, r5
 80074b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b4:	2900      	cmp	r1, #0
 80074b6:	dc0d      	bgt.n	80074d4 <__ieee754_sqrt+0x58>
 80074b8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80074bc:	ea5c 0707 	orrs.w	r7, ip, r7
 80074c0:	d0f4      	beq.n	80074ac <__ieee754_sqrt+0x30>
 80074c2:	b139      	cbz	r1, 80074d4 <__ieee754_sqrt+0x58>
 80074c4:	4602      	mov	r2, r0
 80074c6:	f7f8 feb3 	bl	8000230 <__aeabi_dsub>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	f7f9 f991 	bl	80007f4 <__aeabi_ddiv>
 80074d2:	e7e9      	b.n	80074a8 <__ieee754_sqrt+0x2c>
 80074d4:	1512      	asrs	r2, r2, #20
 80074d6:	d074      	beq.n	80075c2 <__ieee754_sqrt+0x146>
 80074d8:	2000      	movs	r0, #0
 80074da:	07d5      	lsls	r5, r2, #31
 80074dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80074e4:	bf5e      	ittt	pl
 80074e6:	0fe3      	lsrpl	r3, r4, #31
 80074e8:	0064      	lslpl	r4, r4, #1
 80074ea:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80074ee:	0fe3      	lsrs	r3, r4, #31
 80074f0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80074f4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80074f8:	2516      	movs	r5, #22
 80074fa:	4601      	mov	r1, r0
 80074fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007500:	1076      	asrs	r6, r6, #1
 8007502:	0064      	lsls	r4, r4, #1
 8007504:	188f      	adds	r7, r1, r2
 8007506:	429f      	cmp	r7, r3
 8007508:	bfde      	ittt	le
 800750a:	1bdb      	suble	r3, r3, r7
 800750c:	18b9      	addle	r1, r7, r2
 800750e:	1880      	addle	r0, r0, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	3d01      	subs	r5, #1
 8007514:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007518:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800751c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007520:	d1f0      	bne.n	8007504 <__ieee754_sqrt+0x88>
 8007522:	462a      	mov	r2, r5
 8007524:	f04f 0e20 	mov.w	lr, #32
 8007528:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800752c:	428b      	cmp	r3, r1
 800752e:	eb07 0c05 	add.w	ip, r7, r5
 8007532:	dc02      	bgt.n	800753a <__ieee754_sqrt+0xbe>
 8007534:	d113      	bne.n	800755e <__ieee754_sqrt+0xe2>
 8007536:	45a4      	cmp	ip, r4
 8007538:	d811      	bhi.n	800755e <__ieee754_sqrt+0xe2>
 800753a:	f1bc 0f00 	cmp.w	ip, #0
 800753e:	eb0c 0507 	add.w	r5, ip, r7
 8007542:	da43      	bge.n	80075cc <__ieee754_sqrt+0x150>
 8007544:	2d00      	cmp	r5, #0
 8007546:	db41      	blt.n	80075cc <__ieee754_sqrt+0x150>
 8007548:	f101 0801 	add.w	r8, r1, #1
 800754c:	1a5b      	subs	r3, r3, r1
 800754e:	4641      	mov	r1, r8
 8007550:	45a4      	cmp	ip, r4
 8007552:	bf88      	it	hi
 8007554:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007558:	eba4 040c 	sub.w	r4, r4, ip
 800755c:	443a      	add	r2, r7
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	f1be 0e01 	subs.w	lr, lr, #1
 8007564:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007568:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800756c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007570:	d1dc      	bne.n	800752c <__ieee754_sqrt+0xb0>
 8007572:	4323      	orrs	r3, r4
 8007574:	d006      	beq.n	8007584 <__ieee754_sqrt+0x108>
 8007576:	1c54      	adds	r4, r2, #1
 8007578:	bf0b      	itete	eq
 800757a:	4672      	moveq	r2, lr
 800757c:	3201      	addne	r2, #1
 800757e:	3001      	addeq	r0, #1
 8007580:	f022 0201 	bicne.w	r2, r2, #1
 8007584:	1043      	asrs	r3, r0, #1
 8007586:	07c1      	lsls	r1, r0, #31
 8007588:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800758c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007590:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007594:	bf48      	it	mi
 8007596:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800759a:	4610      	mov	r0, r2
 800759c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80075a0:	e782      	b.n	80074a8 <__ieee754_sqrt+0x2c>
 80075a2:	0ae3      	lsrs	r3, r4, #11
 80075a4:	3915      	subs	r1, #21
 80075a6:	0564      	lsls	r4, r4, #21
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0fa      	beq.n	80075a2 <__ieee754_sqrt+0x126>
 80075ac:	02de      	lsls	r6, r3, #11
 80075ae:	d50a      	bpl.n	80075c6 <__ieee754_sqrt+0x14a>
 80075b0:	f1c2 0020 	rsb	r0, r2, #32
 80075b4:	fa24 f000 	lsr.w	r0, r4, r0
 80075b8:	1e55      	subs	r5, r2, #1
 80075ba:	4094      	lsls	r4, r2
 80075bc:	4303      	orrs	r3, r0
 80075be:	1b4a      	subs	r2, r1, r5
 80075c0:	e78a      	b.n	80074d8 <__ieee754_sqrt+0x5c>
 80075c2:	4611      	mov	r1, r2
 80075c4:	e7f0      	b.n	80075a8 <__ieee754_sqrt+0x12c>
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	3201      	adds	r2, #1
 80075ca:	e7ef      	b.n	80075ac <__ieee754_sqrt+0x130>
 80075cc:	4688      	mov	r8, r1
 80075ce:	e7bd      	b.n	800754c <__ieee754_sqrt+0xd0>
 80075d0:	7ff00000 	.word	0x7ff00000

080075d4 <_init>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	bf00      	nop
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr

080075e0 <_fini>:
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e2:	bf00      	nop
 80075e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	469e      	mov	lr, r3
 80075ea:	4770      	bx	lr
