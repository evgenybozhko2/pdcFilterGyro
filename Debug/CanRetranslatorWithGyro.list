
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004fc0  08004fc0  00014fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005068  08005068  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005070  08005070  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005078  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000108  0800517c  00020108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  0800517c  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a44e  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b92  00000000  00000000  0002a57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e2c2  00000000  00000000  0002d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b737  00000000  00000000  0004b472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ad7f0  00000000  00000000  00056ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002604  00000000  00000000  001043ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000108 	.word	0x20000108
 8000204:	00000000 	.word	0x00000000
 8000208:	08004fa4 	.word	0x08004fa4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000010c 	.word	0x2000010c
 8000224:	08004fa4 	.word	0x08004fa4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 b96e 	b.w	8000e44 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	468e      	mov	lr, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 8083 	bne.w	8000c98 <__udivmoddi4+0x118>
 8000b92:	428a      	cmp	r2, r1
 8000b94:	4617      	mov	r7, r2
 8000b96:	d947      	bls.n	8000c28 <__udivmoddi4+0xa8>
 8000b98:	fab2 f382 	clz	r3, r2
 8000b9c:	b14b      	cbz	r3, 8000bb2 <__udivmoddi4+0x32>
 8000b9e:	f1c3 0120 	rsb	r1, r3, #32
 8000ba2:	fa05 fe03 	lsl.w	lr, r5, r3
 8000ba6:	fa20 f101 	lsr.w	r1, r0, r1
 8000baa:	409f      	lsls	r7, r3
 8000bac:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bb0:	409c      	lsls	r4, r3
 8000bb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bb6:	fbbe fcf8 	udiv	ip, lr, r8
 8000bba:	fa1f f987 	uxth.w	r9, r7
 8000bbe:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bc2:	fb0c f009 	mul.w	r0, ip, r9
 8000bc6:	0c21      	lsrs	r1, r4, #16
 8000bc8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x66>
 8000bd0:	18ba      	adds	r2, r7, r2
 8000bd2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000bd6:	f080 8118 	bcs.w	8000e0a <__udivmoddi4+0x28a>
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	f240 8115 	bls.w	8000e0a <__udivmoddi4+0x28a>
 8000be0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000be4:	443a      	add	r2, r7
 8000be6:	1a12      	subs	r2, r2, r0
 8000be8:	fbb2 f0f8 	udiv	r0, r2, r8
 8000bec:	fb08 2210 	mls	r2, r8, r0, r2
 8000bf0:	fb00 f109 	mul.w	r1, r0, r9
 8000bf4:	b2a4      	uxth	r4, r4
 8000bf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfa:	42a1      	cmp	r1, r4
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfe:	193c      	adds	r4, r7, r4
 8000c00:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c04:	f080 8103 	bcs.w	8000e0e <__udivmoddi4+0x28e>
 8000c08:	42a1      	cmp	r1, r4
 8000c0a:	f240 8100 	bls.w	8000e0e <__udivmoddi4+0x28e>
 8000c0e:	3802      	subs	r0, #2
 8000c10:	443c      	add	r4, r7
 8000c12:	1a64      	subs	r4, r4, r1
 8000c14:	2100      	movs	r1, #0
 8000c16:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c1a:	b11e      	cbz	r6, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	40dc      	lsrs	r4, r3
 8000c20:	e9c6 4200 	strd	r4, r2, [r6]
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xac>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f382 	clz	r3, r2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14f      	bne.n	8000cd4 <__udivmoddi4+0x154>
 8000c34:	1a8d      	subs	r5, r1, r2
 8000c36:	2101      	movs	r1, #1
 8000c38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c3c:	fa1f f882 	uxth.w	r8, r2
 8000c40:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c44:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c48:	fb08 f00c 	mul.w	r0, r8, ip
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c52:	42a8      	cmp	r0, r5
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0xe6>
 8000c56:	197d      	adds	r5, r7, r5
 8000c58:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0xe4>
 8000c5e:	42a8      	cmp	r0, r5
 8000c60:	f200 80e9 	bhi.w	8000e36 <__udivmoddi4+0x2b6>
 8000c64:	4694      	mov	ip, r2
 8000c66:	1a2d      	subs	r5, r5, r0
 8000c68:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c6c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	b2a4      	uxth	r4, r4
 8000c76:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c7a:	45a0      	cmp	r8, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x10e>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0x10c>
 8000c86:	45a0      	cmp	r8, r4
 8000c88:	f200 80d9 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	eba4 0408 	sub.w	r4, r4, r8
 8000c92:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c96:	e7c0      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x12e>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	f000 80b1 	beq.w	8000e04 <__udivmoddi4+0x284>
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca8:	4608      	mov	r0, r1
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0x1ce>
 8000cb6:	42ab      	cmp	r3, r5
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0x140>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80b9 	bhi.w	8000e32 <__udivmoddi4+0x2b2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb65 0303 	sbc.w	r3, r5, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d0aa      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000cce:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cd2:	e7a7      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000cd4:	409f      	lsls	r7, r3
 8000cd6:	f1c3 0220 	rsb	r2, r3, #32
 8000cda:	40d1      	lsrs	r1, r2
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cec:	fa24 f202 	lsr.w	r2, r4, r2
 8000cf0:	409d      	lsls	r5, r3
 8000cf2:	fb00 fc08 	mul.w	ip, r0, r8
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	0c15      	lsrs	r5, r2, #16
 8000cfa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000cfe:	45ac      	cmp	ip, r5
 8000d00:	fa04 f403 	lsl.w	r4, r4, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x19a>
 8000d06:	197d      	adds	r5, r7, r5
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 808f 	bcs.w	8000e2e <__udivmoddi4+0x2ae>
 8000d10:	45ac      	cmp	ip, r5
 8000d12:	f240 808c 	bls.w	8000e2e <__udivmoddi4+0x2ae>
 8000d16:	3802      	subs	r0, #2
 8000d18:	443d      	add	r5, r7
 8000d1a:	eba5 050c 	sub.w	r5, r5, ip
 8000d1e:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d22:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d26:	fb01 f908 	mul.w	r9, r1, r8
 8000d2a:	b295      	uxth	r5, r2
 8000d2c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d30:	45a9      	cmp	r9, r5
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x1c4>
 8000d34:	197d      	adds	r5, r7, r5
 8000d36:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000d3a:	d274      	bcs.n	8000e26 <__udivmoddi4+0x2a6>
 8000d3c:	45a9      	cmp	r9, r5
 8000d3e:	d972      	bls.n	8000e26 <__udivmoddi4+0x2a6>
 8000d40:	3902      	subs	r1, #2
 8000d42:	443d      	add	r5, r7
 8000d44:	eba5 0509 	sub.w	r5, r5, r9
 8000d48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d4c:	e778      	b.n	8000c40 <__udivmoddi4+0xc0>
 8000d4e:	f1c1 0720 	rsb	r7, r1, #32
 8000d52:	408b      	lsls	r3, r1
 8000d54:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d58:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5c:	fa25 f407 	lsr.w	r4, r5, r7
 8000d60:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d64:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d68:	fa1f f88c 	uxth.w	r8, ip
 8000d6c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d70:	fa20 f307 	lsr.w	r3, r0, r7
 8000d74:	fb09 fa08 	mul.w	sl, r9, r8
 8000d78:	408d      	lsls	r5, r1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	0c2b      	lsrs	r3, r5, #16
 8000d7e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d82:	45a2      	cmp	sl, r4
 8000d84:	fa02 f201 	lsl.w	r2, r2, r1
 8000d88:	fa00 f301 	lsl.w	r3, r0, r1
 8000d8c:	d909      	bls.n	8000da2 <__udivmoddi4+0x222>
 8000d8e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d92:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d96:	d248      	bcs.n	8000e2a <__udivmoddi4+0x2aa>
 8000d98:	45a2      	cmp	sl, r4
 8000d9a:	d946      	bls.n	8000e2a <__udivmoddi4+0x2aa>
 8000d9c:	f1a9 0902 	sub.w	r9, r9, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	eba4 040a 	sub.w	r4, r4, sl
 8000da6:	fbb4 f0fe 	udiv	r0, r4, lr
 8000daa:	fb0e 4410 	mls	r4, lr, r0, r4
 8000dae:	fb00 fa08 	mul.w	sl, r0, r8
 8000db2:	b2ad      	uxth	r5, r5
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	45a2      	cmp	sl, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x24e>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000dc4:	d22d      	bcs.n	8000e22 <__udivmoddi4+0x2a2>
 8000dc6:	45a2      	cmp	sl, r4
 8000dc8:	d92b      	bls.n	8000e22 <__udivmoddi4+0x2a2>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4464      	add	r4, ip
 8000dce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd6:	eba4 040a 	sub.w	r4, r4, sl
 8000dda:	454c      	cmp	r4, r9
 8000ddc:	46c6      	mov	lr, r8
 8000dde:	464d      	mov	r5, r9
 8000de0:	d319      	bcc.n	8000e16 <__udivmoddi4+0x296>
 8000de2:	d016      	beq.n	8000e12 <__udivmoddi4+0x292>
 8000de4:	b15e      	cbz	r6, 8000dfe <__udivmoddi4+0x27e>
 8000de6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dea:	eb64 0405 	sbc.w	r4, r4, r5
 8000dee:	fa04 f707 	lsl.w	r7, r4, r7
 8000df2:	fa22 f301 	lsr.w	r3, r2, r1
 8000df6:	431f      	orrs	r7, r3
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	e9c6 7400 	strd	r7, r4, [r6]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e04:	4631      	mov	r1, r6
 8000e06:	4630      	mov	r0, r6
 8000e08:	e70c      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	e6eb      	b.n	8000be6 <__udivmoddi4+0x66>
 8000e0e:	4610      	mov	r0, r2
 8000e10:	e6ff      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e12:	4543      	cmp	r3, r8
 8000e14:	d2e6      	bcs.n	8000de4 <__udivmoddi4+0x264>
 8000e16:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e1a:	eb69 050c 	sbc.w	r5, r9, ip
 8000e1e:	3801      	subs	r0, #1
 8000e20:	e7e0      	b.n	8000de4 <__udivmoddi4+0x264>
 8000e22:	4628      	mov	r0, r5
 8000e24:	e7d3      	b.n	8000dce <__udivmoddi4+0x24e>
 8000e26:	4611      	mov	r1, r2
 8000e28:	e78c      	b.n	8000d44 <__udivmoddi4+0x1c4>
 8000e2a:	4681      	mov	r9, r0
 8000e2c:	e7b9      	b.n	8000da2 <__udivmoddi4+0x222>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e773      	b.n	8000d1a <__udivmoddi4+0x19a>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e749      	b.n	8000cca <__udivmoddi4+0x14a>
 8000e36:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3a:	443d      	add	r5, r7
 8000e3c:	e713      	b.n	8000c66 <__udivmoddi4+0xe6>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	443c      	add	r4, r7
 8000e42:	e724      	b.n	8000c8e <__udivmoddi4+0x10e>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <MX_CAN1_Init+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e6a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e6e:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000e72:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_CAN1_Init+0x64>)
 8000e9a:	f001 f819 	bl	8001ed0 <HAL_CAN_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ea4:	f000 fbc2 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000150 	.word	0x20000150
 8000eb0:	40006400 	.word	0x40006400

08000eb4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <MX_CAN2_Init+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 32;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000ed2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000ed6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000eda:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8000ede:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_CAN2_Init+0x64>)
 8000f06:	f000 ffe3 	bl	8001ed0 <HAL_CAN_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f10:	f000 fb8c 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000128 	.word	0x20000128
 8000f1c:	40006800 	.word	0x40006800

08000f20 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a5d      	ldr	r2, [pc, #372]	; (80010b0 <HAL_CAN_MspInit+0x190>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d15b      	bne.n	8000ff8 <HAL_CAN_MspInit+0xd8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f40:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_CAN_MspInit+0x194>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a5b      	ldr	r2, [pc, #364]	; (80010b4 <HAL_CAN_MspInit+0x194>)
 8000f48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f4a:	4b5a      	ldr	r3, [pc, #360]	; (80010b4 <HAL_CAN_MspInit+0x194>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d10b      	bne.n	8000f6a <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f52:	4b59      	ldr	r3, [pc, #356]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a58      	ldr	r2, [pc, #352]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8000f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b53      	ldr	r3, [pc, #332]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a52      	ldr	r2, [pc, #328]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4849      	ldr	r0, [pc, #292]	; (80010bc <HAL_CAN_MspInit+0x19c>)
 8000f98:	f001 fe1a 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4842      	ldr	r0, [pc, #264]	; (80010bc <HAL_CAN_MspInit+0x19c>)
 8000fb2:	f001 fe0d 	bl	8002bd0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2013      	movs	r0, #19
 8000fbc:	f001 fdd1 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000fc0:	2013      	movs	r0, #19
 8000fc2:	f001 fdea 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2014      	movs	r0, #20
 8000fcc:	f001 fdc9 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000fd0:	2014      	movs	r0, #20
 8000fd2:	f001 fde2 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2015      	movs	r0, #21
 8000fdc:	f001 fdc1 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000fe0:	2015      	movs	r0, #21
 8000fe2:	f001 fdda 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2016      	movs	r0, #22
 8000fec:	f001 fdb9 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000ff0:	2016      	movs	r0, #22
 8000ff2:	f001 fdd2 	bl	8002b9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000ff6:	e057      	b.n	80010a8 <HAL_CAN_MspInit+0x188>
  else if(canHandle->Instance==CAN2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <HAL_CAN_MspInit+0x1a0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d152      	bne.n	80010a8 <HAL_CAN_MspInit+0x188>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8001008:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_CAN_MspInit+0x194>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_CAN_MspInit+0x194>)
 8001022:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_CAN_MspInit+0x194>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d10b      	bne.n	8001044 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8001032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001036:	61d3      	str	r3, [r2, #28]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_CAN_MspInit+0x198>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800105c:	2320      	movs	r3, #32
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4815      	ldr	r0, [pc, #84]	; (80010c4 <HAL_CAN_MspInit+0x1a4>)
 8001070:	f001 fdae 	bl	8002bd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001074:	2340      	movs	r3, #64	; 0x40
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <HAL_CAN_MspInit+0x1a4>)
 8001088:	f001 fda2 	bl	8002bd0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_CAN_MspInit+0x1a8>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_CAN_MspInit+0x1a8>)
 80010a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a6:	6053      	str	r3, [r2, #4]
}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40006400 	.word	0x40006400
 80010b4:	20000124 	.word	0x20000124
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40006800 	.word	0x40006800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40010000 	.word	0x40010000

080010cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_GPIO_Init+0x58>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <MX_GPIO_Init+0x58>)
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	6193      	str	r3, [r2, #24]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_GPIO_Init+0x58>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_GPIO_Init+0x58>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <MX_GPIO_Init+0x58>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_GPIO_Init+0x58>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_GPIO_Init+0x58>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <MX_GPIO_Init+0x58>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <MX_GPIO_Init+0x58>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	40021000 	.word	0x40021000

08001128 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C1_Init+0x50>)
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <MX_I2C1_Init+0x54>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C1_Init+0x50>)
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_I2C1_Init+0x58>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_I2C1_Init+0x50>)
 8001146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_I2C1_Init+0x50>)
 8001166:	f001 feb7 	bl	8002ed8 <HAL_I2C_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001170:	f000 fa5c 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000178 	.word	0x20000178
 800117c:	40005400 	.word	0x40005400
 8001180:	00061a80 	.word	0x00061a80

08001184 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_I2C_MspInit+0x90>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d132      	bne.n	800120a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_I2C_MspInit+0x94>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_I2C_MspInit+0x94>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_I2C_MspInit+0x94>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c2:	2312      	movs	r3, #18
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <HAL_I2C_MspInit+0x98>)
 80011d2:	f001 fcfd 	bl	8002bd0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_I2C_MspInit+0x9c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
 80011ec:	4a0c      	ldr	r2, [pc, #48]	; (8001220 <HAL_I2C_MspInit+0x9c>)
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_I2C_MspInit+0x94>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_I2C_MspInit+0x94>)
 80011f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_I2C_MspInit+0x94>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40005400 	.word	0x40005400
 8001218:	40021000 	.word	0x40021000
 800121c:	40010c00 	.word	0x40010c00
 8001220:	40010000 	.word	0x40010000

08001224 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800122a:	f000 fdcb 	bl	8001dc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800122e:	f000 f8b9 	bl	80013a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001232:	f7ff ff4b 	bl	80010cc <MX_GPIO_Init>
	MX_CAN1_Init();
 8001236:	f7ff fe07 	bl	8000e48 <MX_CAN1_Init>
	MX_CAN2_Init();
 800123a:	f7ff fe3b 	bl	8000eb4 <MX_CAN2_Init>
	MX_I2C1_Init();
 800123e:	f7ff ff73 	bl	8001128 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	while (MPU6050_Init(&hi2c1) == 1)
 8001242:	e007      	b.n	8001254 <main+0x30>

		if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001244:	484e      	ldr	r0, [pc, #312]	; (8001380 <main+0x15c>)
 8001246:	f000 ff3e 	bl	80020c6 <HAL_CAN_Start>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <main+0x30>
			Error_Handler();
 8001250:	f000 f9ec 	bl	800162c <Error_Handler>
	while (MPU6050_Init(&hi2c1) == 1)
 8001254:	484b      	ldr	r0, [pc, #300]	; (8001384 <main+0x160>)
 8001256:	f000 f9ee 	bl	8001636 <MPU6050_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b01      	cmp	r3, #1
 800125e:	d0f1      	beq.n	8001244 <main+0x20>
		}
	if (HAL_CAN_ActivateNotification(&hcan1,
 8001260:	2103      	movs	r1, #3
 8001262:	4847      	ldr	r0, [pc, #284]	; (8001380 <main+0x15c>)
 8001264:	f001 f95e 	bl	8002524 <HAL_CAN_ActivateNotification>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <main+0x4e>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 800126e:	f000 f9dd 	bl	800162c <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001272:	4845      	ldr	r0, [pc, #276]	; (8001388 <main+0x164>)
 8001274:	f000 ff27 	bl	80020c6 <HAL_CAN_Start>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <main+0x5e>
		Error_Handler();
 800127e:	f000 f9d5 	bl	800162c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 8001282:	2103      	movs	r1, #3
 8001284:	4840      	ldr	r0, [pc, #256]	; (8001388 <main+0x164>)
 8001286:	f001 f94d 	bl	8002524 <HAL_CAN_ActivateNotification>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <main+0x70>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8001290:	f000 f9cc 	bl	800162c <Error_Handler>
	}

	while (1) {
		MPU6050_Read_Gyro(&hi2c1, &MPU6050);
 8001294:	493d      	ldr	r1, [pc, #244]	; (800138c <main+0x168>)
 8001296:	483b      	ldr	r0, [pc, #236]	; (8001384 <main+0x160>)
 8001298:	f000 fa26 	bl	80016e8 <MPU6050_Read_Gyro>
		HAL_Delay(100);
 800129c:	2064      	movs	r0, #100	; 0x64
 800129e:	f000 fdf3 	bl	8001e88 <HAL_Delay>

		double pitch = MPU6050.KalmanAngleX;
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <main+0x168>)
 80012a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80012a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double roll = MPU6050.KalmanAngleY;
 80012ac:	4b37      	ldr	r3, [pc, #220]	; (800138c <main+0x168>)
 80012ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80012b2:	e9c7 2300 	strd	r2, r3, [r7]

		if (pitch > 40) {
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <main+0x16c>)
 80012bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012c0:	f7ff fbfe 	bl	8000ac0 <__aeabi_dcmpgt>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <main+0xb0>
			pitch = 40;
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <main+0x16c>)
 80012d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		if (pitch < -40) {
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <main+0x170>)
 80012da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012de:	f7ff fbd1 	bl	8000a84 <__aeabi_dcmplt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <main+0xce>
			pitch = -40;
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <main+0x170>)
 80012ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		if (roll > 60) {
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <main+0x174>)
 80012f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fc:	f7ff fbe0 	bl	8000ac0 <__aeabi_dcmpgt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d004      	beq.n	8001310 <main+0xec>
			roll = 60;
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <main+0x174>)
 800130c:	e9c7 2300 	strd	r2, r3, [r7]
		}
		if (roll < -60) {
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <main+0x178>)
 8001316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800131a:	f7ff fbb3 	bl	8000a84 <__aeabi_dcmplt>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <main+0x10a>
			roll = -60;
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <main+0x178>)
 800132a:	e9c7 2300 	strd	r2, r3, [r7]
		}

		//20 & -20 degree max
		pitch += 0x78;
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <main+0x17c>)
 8001334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001338:	f7fe ff7c 	bl	8000234 <__adddf3>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	e9c7 2302 	strd	r2, r3, [r7, #8]
		//29 & -29 degree max
		roll += 0x78;
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <main+0x17c>)
 800134a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800134e:	f7fe ff71 	bl	8000234 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	e9c7 2300 	strd	r2, r3, [r7]

		sendGyroData(pitch, roll);
 800135a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135e:	f7ff fbcf 	bl	8000b00 <__aeabi_d2iz>
 8001362:	4604      	mov	r4, r0
 8001364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001368:	f7ff fbca 	bl	8000b00 <__aeabi_d2iz>
 800136c:	4603      	mov	r3, r0
 800136e:	4619      	mov	r1, r3
 8001370:	4620      	mov	r0, r4
 8001372:	f000 f925 	bl	80015c0 <sendGyroData>

		HAL_Delay(200);
 8001376:	20c8      	movs	r0, #200	; 0xc8
 8001378:	f000 fd86 	bl	8001e88 <HAL_Delay>
	while (1) {
 800137c:	e78a      	b.n	8001294 <main+0x70>
 800137e:	bf00      	nop
 8001380:	20000150 	.word	0x20000150
 8001384:	20000178 	.word	0x20000178
 8001388:	20000128 	.word	0x20000128
 800138c:	200001d8 	.word	0x200001d8
 8001390:	40440000 	.word	0x40440000
 8001394:	c0440000 	.word	0xc0440000
 8001398:	404e0000 	.word	0x404e0000
 800139c:	c04e0000 	.word	0xc04e0000
 80013a0:	405e0000 	.word	0x405e0000

080013a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2238      	movs	r2, #56	; 0x38
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 fab2 	bl	800491c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ca:	2301      	movs	r3, #1
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 25;
 80013ce:	2319      	movs	r3, #25
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fd7a 	bl	8003ed8 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x4a>
		Error_Handler();
 80013ea:	f000 f91f 	bl	800162c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f87c 	bl	8004504 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x72>
		Error_Handler();
 8001412:	f000 f90b 	bl	800162c <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8001416:	4b03      	ldr	r3, [pc, #12]	; (8001424 <SystemClock_Config+0x80>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	; 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	42420070 	.word	0x42420070

08001428 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001434:	2100      	movs	r1, #0
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 ff63 	bl	8002302 <HAL_CAN_GetRxMessage>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d129      	bne.n	8001496 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>

		switch ((uint32_t) hcan->Instance) {
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d122      	bne.n	8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN2:
			CAN1_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800145a:	6912      	ldr	r2, [r2, #16]
 800145c:	b2d1      	uxtb	r1, r2
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001460:	4618      	mov	r0, r3
 8001462:	f000 f825 	bl	80014b0 <CAN1_Transmit_manual>
			break;
 8001466:	e017      	b.n	8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN1:
			if (RxHeader.StdId == 0x350 && RxData[0] == 0xc7) {
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8001470:	d106      	bne.n	8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2bc7      	cmp	r3, #199	; 0xc7
 8001478:	d102      	bne.n	8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
				RxData[0] = 0xc6;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800147c:	22c6      	movs	r2, #198	; 0xc6
 800147e:	701a      	strb	r2, [r3, #0]
			}

			CAN2_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001488:	6912      	ldr	r2, [r2, #16]
 800148a:	b2d1      	uxtb	r1, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f852 	bl	8001538 <CAN2_Transmit_manual>
			break;
 8001494:	e000      	b.n	8001498 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		}

	}
 8001496:	bf00      	nop

}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000254 	.word	0x20000254
 80014a4:	20000274 	.word	0x20000274
 80014a8:	40006400 	.word	0x40006400
 80014ac:	40006800 	.word	0x40006800

080014b0 <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	603a      	str	r2, [r7, #0]
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	460b      	mov	r3, r1
 80014be:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <CAN1_Transmit_manual+0x74>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <CAN1_Transmit_manual+0x78>)
 80014c6:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <CAN1_Transmit_manual+0x74>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4a16      	ldr	r2, [pc, #88]	; (8001528 <CAN1_Transmit_manual+0x78>)
 80014ce:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <CAN1_Transmit_manual+0x7c>)
 80014d6:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	785a      	ldrb	r2, [r3, #1]
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <CAN1_Transmit_manual+0x7c>)
 80014de:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	789a      	ldrb	r2, [r3, #2]
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <CAN1_Transmit_manual+0x7c>)
 80014e6:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	78da      	ldrb	r2, [r3, #3]
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <CAN1_Transmit_manual+0x7c>)
 80014ee:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	791a      	ldrb	r2, [r3, #4]
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <CAN1_Transmit_manual+0x7c>)
 80014f6:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	795a      	ldrb	r2, [r3, #5]
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <CAN1_Transmit_manual+0x7c>)
 80014fe:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	799a      	ldrb	r2, [r3, #6]
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <CAN1_Transmit_manual+0x7c>)
 8001506:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	79da      	ldrb	r2, [r3, #7]
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <CAN1_Transmit_manual+0x7c>)
 800150e:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <CAN1_Transmit_manual+0x80>)
 8001512:	4a06      	ldr	r2, [pc, #24]	; (800152c <CAN1_Transmit_manual+0x7c>)
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <CAN1_Transmit_manual+0x78>)
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <CAN1_Transmit_manual+0x84>)
 8001518:	f000 fe19 	bl	800214e <HAL_CAN_AddTxMessage>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000274 	.word	0x20000274
 8001528:	2000025c 	.word	0x2000025c
 800152c:	20000248 	.word	0x20000248
 8001530:	20000250 	.word	0x20000250
 8001534:	20000150 	.word	0x20000150

08001538 <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	603a      	str	r2, [r7, #0]
 8001542:	80fb      	strh	r3, [r7, #6]
 8001544:	460b      	mov	r3, r1
 8001546:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <CAN2_Transmit_manual+0x74>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a18      	ldr	r2, [pc, #96]	; (80015b0 <CAN2_Transmit_manual+0x78>)
 800154e:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <CAN2_Transmit_manual+0x74>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <CAN2_Transmit_manual+0x78>)
 8001556:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 800155e:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	785a      	ldrb	r2, [r3, #1]
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 8001566:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	789a      	ldrb	r2, [r3, #2]
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 800156e:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	78da      	ldrb	r2, [r3, #3]
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 8001576:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	791a      	ldrb	r2, [r3, #4]
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 800157e:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	795a      	ldrb	r2, [r3, #5]
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 8001586:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	799a      	ldrb	r2, [r3, #6]
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 800158e:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	79da      	ldrb	r2, [r3, #7]
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 8001596:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <CAN2_Transmit_manual+0x80>)
 800159a:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <CAN2_Transmit_manual+0x7c>)
 800159c:	4904      	ldr	r1, [pc, #16]	; (80015b0 <CAN2_Transmit_manual+0x78>)
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <CAN2_Transmit_manual+0x84>)
 80015a0:	f000 fdd5 	bl	800214e <HAL_CAN_AddTxMessage>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000274 	.word	0x20000274
 80015b0:	2000025c 	.word	0x2000025c
 80015b4:	20000248 	.word	0x20000248
 80015b8:	20000250 	.word	0x20000250
 80015bc:	20000128 	.word	0x20000128

080015c0 <sendGyroData>:
void sendGyroData(int x, int y) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	gyroHeader.StdId = 0x685;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <sendGyroData+0x5c>)
 80015cc:	f240 6285 	movw	r2, #1669	; 0x685
 80015d0:	601a      	str	r2, [r3, #0]
	gyroHeader.DLC = 8;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <sendGyroData+0x5c>)
 80015d4:	2208      	movs	r2, #8
 80015d6:	611a      	str	r2, [r3, #16]
	gyroData[0] = y;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <sendGyroData+0x60>)
 80015de:	701a      	strb	r2, [r3, #0]
	gyroData[1] = x;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <sendGyroData+0x60>)
 80015e6:	705a      	strb	r2, [r3, #1]
	gyroData[3] = 0x00;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <sendGyroData+0x60>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	70da      	strb	r2, [r3, #3]
	gyroData[4] = 0x00;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <sendGyroData+0x60>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	711a      	strb	r2, [r3, #4]
	gyroData[5] = 0x00;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <sendGyroData+0x60>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	715a      	strb	r2, [r3, #5]
	gyroData[6] = 0x00;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <sendGyroData+0x60>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	719a      	strb	r2, [r3, #6]
	gyroData[7] = 0x00;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <sendGyroData+0x60>)
 8001602:	2200      	movs	r2, #0
 8001604:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan1, &gyroHeader, gyroData, &TxMailbox);
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <sendGyroData+0x64>)
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <sendGyroData+0x60>)
 800160a:	4904      	ldr	r1, [pc, #16]	; (800161c <sendGyroData+0x5c>)
 800160c:	4806      	ldr	r0, [pc, #24]	; (8001628 <sendGyroData+0x68>)
 800160e:	f000 fd9e 	bl	800214e <HAL_CAN_AddTxMessage>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000230 	.word	0x20000230
 8001620:	200001d0 	.word	0x200001d0
 8001624:	20000250 	.word	0x20000250
 8001628:	20000150 	.word	0x20000150

0800162c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>

08001636 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001636:	b580      	push	{r7, lr}
 8001638:	b088      	sub	sp, #32
 800163a:	af04      	add	r7, sp, #16
 800163c:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 800163e:	2364      	movs	r3, #100	; 0x64
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	2301      	movs	r3, #1
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	f107 030f 	add.w	r3, r7, #15
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2301      	movs	r3, #1
 800164e:	2275      	movs	r2, #117	; 0x75
 8001650:	21d0      	movs	r1, #208	; 0xd0
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 fe7e 	bl	8003354 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b68      	cmp	r3, #104	; 0x68
 800165c:	d13d      	bne.n	80016da <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	f107 030e 	add.w	r3, r7, #14
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	226b      	movs	r2, #107	; 0x6b
 8001674:	21d0      	movs	r1, #208	; 0xd0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f001 fd72 	bl	8003160 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800167c:	2307      	movs	r3, #7
 800167e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	f107 030e 	add.w	r3, r7, #14
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	2219      	movs	r2, #25
 8001692:	21d0      	movs	r1, #208	; 0xd0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f001 fd63 	bl	8003160 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 800169a:	2300      	movs	r3, #0
 800169c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 800169e:	2364      	movs	r3, #100	; 0x64
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2301      	movs	r3, #1
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	f107 030e 	add.w	r3, r7, #14
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	221c      	movs	r2, #28
 80016b0:	21d0      	movs	r1, #208	; 0xd0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f001 fd54 	bl	8003160 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 80016bc:	2364      	movs	r3, #100	; 0x64
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2301      	movs	r3, #1
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	f107 030e 	add.w	r3, r7, #14
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	221b      	movs	r2, #27
 80016ce:	21d0      	movs	r1, #208	; 0xd0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f001 fd45 	bl	8003160 <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <MPU6050_Init+0xa6>
	}
	return 1;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	0000      	movs	r0, r0
	...

080016e8 <MPU6050_Read_Gyro>:
	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b090      	sub	sp, #64	; 0x40
 80016ee:	af04      	add	r7, sp, #16
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6,
 80016f4:	2364      	movs	r3, #100	; 0x64
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2306      	movs	r3, #6
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	2243      	movs	r2, #67	; 0x43
 8001706:	21d0      	movs	r1, #208	; 0xd0
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f001 fe23 	bl	8003354 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800170e:	7a3b      	ldrb	r3, [r7, #8]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	7a7b      	ldrb	r3, [r7, #9]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21a      	sxth	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001720:	7abb      	ldrb	r3, [r7, #10]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b21a      	sxth	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001732:	7b3b      	ldrb	r3, [r7, #12]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	7b7b      	ldrb	r3, [r7, #13]
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21a      	sxth	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	849a      	strh	r2, [r3, #36]	; 0x24
	/*** convert the RAW values into dps (�/s)
	 we have to divide according to the Full scale value set in FS_SEL
	 I have configured FS_SEL = 0. So I am dividing by 131.0
	 for more details check GYRO_CONFIG Register              ****/

	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe febe 	bl	80004cc <__aeabi_i2d>
 8001750:	a391      	add	r3, pc, #580	; (adr r3, 8001998 <MPU6050_Read_Gyro+0x2b0>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7ff f84d 	bl	80007f4 <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe feae 	bl	80004cc <__aeabi_i2d>
 8001770:	a389      	add	r3, pc, #548	; (adr r3, 8001998 <MPU6050_Read_Gyro+0x2b0>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7ff f83d 	bl	80007f4 <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fe9e 	bl	80004cc <__aeabi_i2d>
 8001790:	a381      	add	r3, pc, #516	; (adr r3, 8001998 <MPU6050_Read_Gyro+0x2b0>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7ff f82d 	bl	80007f4 <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 80017a4:	f000 fb66 	bl	8001e74 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b7f      	ldr	r3, [pc, #508]	; (80019a8 <MPU6050_Read_Gyro+0x2c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fe7b 	bl	80004ac <__aeabi_ui2d>
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b7c      	ldr	r3, [pc, #496]	; (80019ac <MPU6050_Read_Gyro+0x2c4>)
 80017bc:	f7ff f81a 	bl	80007f4 <__aeabi_ddiv>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	timer = HAL_GetTick();
 80017c8:	f000 fb54 	bl	8001e74 <HAL_GetTick>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a76      	ldr	r2, [pc, #472]	; (80019a8 <MPU6050_Read_Gyro+0x2c0>)
 80017d0:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d8:	461a      	mov	r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	fb03 f202 	mul.w	r2, r3, r2
					+ DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ea:	4619      	mov	r1, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017f2:	fb03 f301 	mul.w	r3, r3, r1
 80017f6:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe67 	bl	80004cc <__aeabi_i2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f003 fa23 	bl	8004c50 <sqrt>
 800180a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	if (roll_sqrt != 0.0) {
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800181a:	f7ff f929 	bl	8000a70 <__aeabi_dcmpeq>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d119      	bne.n	8001858 <MPU6050_Read_Gyro+0x170>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe4e 	bl	80004cc <__aeabi_i2d>
 8001830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001834:	f7fe ffde 	bl	80007f4 <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f003 f876 	bl	8004930 <atan>
 8001844:	a356      	add	r3, pc, #344	; (adr r3, 80019a0 <MPU6050_Read_Gyro+0x2b8>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fea9 	bl	80005a0 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001856:	e005      	b.n	8001864 <MPU6050_Read_Gyro+0x17c>
	} else {
		roll = 0.0;
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186a:	425b      	negs	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe2d 	bl	80004cc <__aeabi_i2d>
 8001872:	4682      	mov	sl, r0
 8001874:	468b      	mov	fp, r1
			DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe25 	bl	80004cc <__aeabi_i2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4650      	mov	r0, sl
 8001888:	4659      	mov	r1, fp
 800188a:	f003 f9de 	bl	8004c4a <atan2>
 800188e:	a344      	add	r3, pc, #272	; (adr r3, 80019a0 <MPU6050_Read_Gyro+0x2b8>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fe84 	bl	80005a0 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90)
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <MPU6050_Read_Gyro+0x2c8>)
 80018a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018aa:	f7ff f8eb 	bl	8000a84 <__aeabi_dcmplt>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <MPU6050_Read_Gyro+0x1e2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <MPU6050_Read_Gyro+0x2cc>)
 80018c0:	f7ff f8fe 	bl	8000ac0 <__aeabi_dcmpgt>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d114      	bne.n	80018f4 <MPU6050_Read_Gyro+0x20c>
			|| (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <MPU6050_Read_Gyro+0x2cc>)
 80018d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018d4:	f7ff f8f4 	bl	8000ac0 <__aeabi_dcmpgt>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d015      	beq.n	800190a <MPU6050_Read_Gyro+0x222>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <MPU6050_Read_Gyro+0x2c8>)
 80018ea:	f7ff f8cb 	bl	8000a84 <__aeabi_dcmplt>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00a      	beq.n	800190a <MPU6050_Read_Gyro+0x222>
		KalmanY.angle = pitch;
 80018f4:	4930      	ldr	r1, [pc, #192]	; (80019b8 <MPU6050_Read_Gyro+0x2d0>)
 80018f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001904:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001908:	e012      	b.n	8001930 <MPU6050_Read_Gyro+0x248>
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001910:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001918:	e9cd 2300 	strd	r2, r3, [sp]
 800191c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001920:	4825      	ldr	r0, [pc, #148]	; (80019b8 <MPU6050_Read_Gyro+0x2d0>)
 8001922:	f000 f84d 	bl	80019c0 <Kalman_getAngle>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				DataStruct->Gy, dt);
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001936:	4690      	mov	r8, r2
 8001938:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <MPU6050_Read_Gyro+0x2cc>)
 8001942:	4640      	mov	r0, r8
 8001944:	4649      	mov	r1, r9
 8001946:	f7ff f8bb 	bl	8000ac0 <__aeabi_dcmpgt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <MPU6050_Read_Gyro+0x27a>
		DataStruct->Gx = -DataStruct->Gx;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001956:	4614      	mov	r4, r2
 8001958:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001968:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800196c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001970:	e9cd 2300 	strd	r2, r3, [sp]
 8001974:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001978:	4810      	ldr	r0, [pc, #64]	; (80019bc <MPU6050_Read_Gyro+0x2d4>)
 800197a:	f000 f821 	bl	80019c0 <Kalman_getAngle>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			dt);
}
 8001988:	bf00      	nop
 800198a:	3730      	adds	r7, #48	; 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	f3af 8000 	nop.w
 8001998:	00000000 	.word	0x00000000
 800199c:	40606000 	.word	0x40606000
 80019a0:	1a63c1f8 	.word	0x1a63c1f8
 80019a4:	404ca5dc 	.word	0x404ca5dc
 80019a8:	20000290 	.word	0x20000290
 80019ac:	408f4000 	.word	0x408f4000
 80019b0:	c0568000 	.word	0xc0568000
 80019b4:	40568000 	.word	0x40568000
 80019b8:	20000048 	.word	0x20000048
 80019bc:	20000000 	.word	0x20000000

080019c0 <Kalman_getAngle>:
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
			dt);
}

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b092      	sub	sp, #72	; 0x48
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019d6:	f7fe fc2b 	bl	8000230 <__aeabi_dsub>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80019ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80019f0:	f7fe fdd6 	bl	80005a0 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc1a 	bl	8000234 <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a1a:	f7fe fdc1 	bl	80005a0 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a2c:	f7fe fc00 	bl	8000230 <__aeabi_dsub>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001a3e:	f7fe fbf7 	bl	8000230 <__aeabi_dsub>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fbf0 	bl	8000234 <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8001a5c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a60:	f7fe fd9e 	bl	80005a0 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fbe2 	bl	8000234 <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	68f9      	ldr	r1, [r7, #12]
 8001a76:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001a86:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a8a:	f7fe fd89 	bl	80005a0 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fbcb 	bl	8000230 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ab0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ab4:	f7fe fd74 	bl	80005a0 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4620      	mov	r0, r4
 8001abe:	4629      	mov	r1, r5
 8001ac0:	f7fe fbb6 	bl	8000230 <__aeabi_dsub>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ada:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ade:	f7fe fd5f 	bl	80005a0 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	f7fe fba3 	bl	8000234 <__adddf3>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b04:	f7fe fb96 	bl	8000234 <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b1a:	f7fe fe6b 	bl	80007f4 <__aeabi_ddiv>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001b30:	f7fe fe60 	bl	80007f4 <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b46:	f7fe fb73 	bl	8000230 <__aeabi_dsub>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b60:	f7fe fd1e 	bl	80005a0 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fb62 	bl	8000234 <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001b80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b88:	f7fe fd0a 	bl	80005a0 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4620      	mov	r0, r4
 8001b92:	4629      	mov	r1, r5
 8001b94:	f7fe fb4e 	bl	8000234 <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001ba8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001bb2:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bc4:	f7fe fcec 	bl	80005a0 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb2e 	bl	8000230 <__aeabi_dsub>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001be4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bec:	f7fe fcd8 	bl	80005a0 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe fb1a 	bl	8000230 <__aeabi_dsub>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001c0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c14:	f7fe fcc4 	bl	80005a0 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe fb06 	bl	8000230 <__aeabi_dsub>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001c34:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c3c:	f7fe fcb0 	bl	80005a0 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4620      	mov	r0, r4
 8001c46:	4629      	mov	r1, r5
 8001c48:	f7fe faf2 	bl	8000230 <__aeabi_dsub>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	3748      	adds	r7, #72	; 0x48
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_MspInit+0x5c>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <HAL_MspInit+0x5c>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6193      	str	r3, [r2, #24]
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_MspInit+0x5c>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_MspInit+0x5c>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	; (8001cc4 <HAL_MspInit+0x5c>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_MspInit+0x5c>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_MspInit+0x60>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_MspInit+0x60>)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010000 	.word	0x40010000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d12:	f000 f89d 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <CAN1_TX_IRQHandler+0x10>)
 8001d22:	f000 fc24 	bl	800256e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000150 	.word	0x20000150

08001d30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <CAN1_RX0_IRQHandler+0x10>)
 8001d36:	f000 fc1a 	bl	800256e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000150 	.word	0x20000150

08001d44 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <CAN1_RX1_IRQHandler+0x10>)
 8001d4a:	f000 fc10 	bl	800256e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000150 	.word	0x20000150

08001d58 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <CAN1_SCE_IRQHandler+0x10>)
 8001d5e:	f000 fc06 	bl	800256e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000150 	.word	0x20000150

08001d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	; (8001db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	; (8001dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d9e:	f7ff ffe5 	bl	8001d6c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001da2:	f002 fd97 	bl	80048d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da6:	f7ff fa3d 	bl	8001224 <main>
  bx lr
 8001daa:	4770      	bx	lr
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001db4:	08005078 	.word	0x08005078
  ldr r2, =_sbss
 8001db8:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001dbc:	20000298 	.word	0x20000298

08001dc0 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_Init+0x28>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <HAL_Init+0x28>)
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 feb9 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f000 f808 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de0:	f7ff ff42 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_InitTick+0x54>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x58>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fed1 	bl	8002bb6 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00e      	b.n	8001e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d80a      	bhi.n	8001e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e2c:	f000 fe99 	bl	8002b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <HAL_InitTick+0x5c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000090 	.word	0x20000090
 8001e48:	20000098 	.word	0x20000098
 8001e4c:	20000094 	.word	0x20000094

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_IncTick+0x20>)
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000098 	.word	0x20000098
 8001e70:	20000294 	.word	0x20000294

08001e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	20000294 	.word	0x20000294

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffe0 	bl	8001e74 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000098 	.word	0x20000098

08001ed0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0ed      	b.n	80020be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff f816 	bl	8000f20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f04:	f7ff ffb6 	bl	8001e74 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f0a:	e012      	b.n	8001f32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f0c:	f7ff ffb2 	bl	8001e74 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b0a      	cmp	r3, #10
 8001f18:	d90b      	bls.n	8001f32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2205      	movs	r2, #5
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0c5      	b.n	80020be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0e5      	beq.n	8001f0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0202 	bic.w	r2, r2, #2
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f50:	f7ff ff90 	bl	8001e74 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f56:	e012      	b.n	8001f7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f58:	f7ff ff8c 	bl	8001e74 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b0a      	cmp	r3, #10
 8001f64:	d90b      	bls.n	8001f7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2205      	movs	r2, #5
 8001f76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e09f      	b.n	80020be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1e5      	bne.n	8001f58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7e1b      	ldrb	r3, [r3, #24]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e007      	b.n	8001fb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7e5b      	ldrb	r3, [r3, #25]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d108      	bne.n	8001fd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e007      	b.n	8001fe0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7e9b      	ldrb	r3, [r3, #26]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d108      	bne.n	8001ffa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e007      	b.n	800200a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0220 	bic.w	r2, r2, #32
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7edb      	ldrb	r3, [r3, #27]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d108      	bne.n	8002024 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0210 	bic.w	r2, r2, #16
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e007      	b.n	8002034 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0210 	orr.w	r2, r2, #16
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7f1b      	ldrb	r3, [r3, #28]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d108      	bne.n	800204e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0208 	orr.w	r2, r2, #8
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e007      	b.n	800205e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0208 	bic.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7f5b      	ldrb	r3, [r3, #29]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d108      	bne.n	8002078 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0204 	orr.w	r2, r2, #4
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e007      	b.n	8002088 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0204 	bic.w	r2, r2, #4
 8002086:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	ea42 0103 	orr.w	r1, r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	1e5a      	subs	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d12e      	bne.n	8002138 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020f2:	f7ff febf 	bl	8001e74 <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020f8:	e012      	b.n	8002120 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020fa:	f7ff febb 	bl	8001e74 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b0a      	cmp	r3, #10
 8002106:	d90b      	bls.n	8002120 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2205      	movs	r2, #5
 8002118:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e012      	b.n	8002146 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e5      	bne.n	80020fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e006      	b.n	8002146 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800214e:	b480      	push	{r7}
 8002150:	b089      	sub	sp, #36	; 0x24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002162:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d003      	beq.n	800217a <HAL_CAN_AddTxMessage+0x2c>
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	2b02      	cmp	r3, #2
 8002176:	f040 80b8 	bne.w	80022ea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800218a:	2b00      	cmp	r3, #0
 800218c:	d105      	bne.n	800219a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a0 	beq.w	80022da <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d907      	bls.n	80021ba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e09e      	b.n	80022f8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021ba:	2201      	movs	r2, #1
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021d6:	68f9      	ldr	r1, [r7, #12]
 80021d8:	6809      	ldr	r1, [r1, #0]
 80021da:	431a      	orrs	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3318      	adds	r3, #24
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	440b      	add	r3, r1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e00f      	b.n	8002208 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3318      	adds	r3, #24
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	440b      	add	r3, r1
 8002206:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3318      	adds	r3, #24
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	440b      	add	r3, r1
 8002218:	3304      	adds	r3, #4
 800221a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	7d1b      	ldrb	r3, [r3, #20]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d111      	bne.n	8002248 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3318      	adds	r3, #24
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	4413      	add	r3, r2
 8002230:	3304      	adds	r3, #4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6811      	ldr	r1, [r2, #0]
 8002238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3318      	adds	r3, #24
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	440b      	add	r3, r1
 8002244:	3304      	adds	r3, #4
 8002246:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3307      	adds	r3, #7
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	061a      	lsls	r2, r3, #24
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3306      	adds	r3, #6
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3305      	adds	r3, #5
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	4313      	orrs	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	3204      	adds	r2, #4
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	4610      	mov	r0, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	6811      	ldr	r1, [r2, #0]
 8002270:	ea43 0200 	orr.w	r2, r3, r0
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	440b      	add	r3, r1
 800227a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800227e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3303      	adds	r3, #3
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	061a      	lsls	r2, r3, #24
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3302      	adds	r3, #2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3301      	adds	r3, #1
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	4313      	orrs	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	4610      	mov	r0, r2
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	6811      	ldr	r1, [r2, #0]
 80022a6:	ea43 0200 	orr.w	r2, r3, r0
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	440b      	add	r3, r1
 80022b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3318      	adds	r3, #24
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4413      	add	r3, r2
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	6811      	ldr	r1, [r2, #0]
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3318      	adds	r3, #24
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	440b      	add	r3, r1
 80022d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e00e      	b.n	80022f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e006      	b.n	80022f8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
  }
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3724      	adds	r7, #36	; 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002302:	b480      	push	{r7}
 8002304:	b087      	sub	sp, #28
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002316:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d003      	beq.n	8002326 <HAL_CAN_GetRxMessage+0x24>
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b02      	cmp	r3, #2
 8002322:	f040 80f3 	bne.w	800250c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10e      	bne.n	800234a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d116      	bne.n	8002368 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0e7      	b.n	800251a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0d8      	b.n	800251a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	331b      	adds	r3, #27
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	4413      	add	r3, r2
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0204 	and.w	r2, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	331b      	adds	r3, #27
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0d5b      	lsrs	r3, r3, #21
 8002396:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	331b      	adds	r3, #27
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	08db      	lsrs	r3, r3, #3
 80023b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	331b      	adds	r3, #27
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4413      	add	r3, r2
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0202 	and.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	331b      	adds	r3, #27
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	3304      	adds	r3, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 020f 	and.w	r2, r3, #15
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	331b      	adds	r3, #27
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	3304      	adds	r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	331b      	adds	r3, #27
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4413      	add	r3, r2
 8002436:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0a1a      	lsrs	r2, r3, #8
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	4413      	add	r3, r2
 8002450:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	0c1a      	lsrs	r2, r3, #16
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	3302      	adds	r3, #2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e1a      	lsrs	r2, r3, #24
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3303      	adds	r3, #3
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	4413      	add	r3, r2
 8002484:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	3304      	adds	r3, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	4413      	add	r3, r2
 800249c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0a1a      	lsrs	r2, r3, #8
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3305      	adds	r3, #5
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0c1a      	lsrs	r2, r3, #16
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	3306      	adds	r3, #6
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0e1a      	lsrs	r2, r3, #24
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	3307      	adds	r3, #7
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d108      	bne.n	80024f8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0220 	orr.w	r2, r2, #32
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	e007      	b.n	8002508 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0220 	orr.w	r2, r2, #32
 8002506:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e006      	b.n	800251a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002534:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d002      	beq.n	8002542 <HAL_CAN_ActivateNotification+0x1e>
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d109      	bne.n	8002556 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6959      	ldr	r1, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	e006      	b.n	8002564 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b08a      	sub	sp, #40	; 0x28
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d07c      	beq.n	80026ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d023      	beq.n	8002606 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2201      	movs	r2, #1
 80025c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f983 	bl	80028dc <HAL_CAN_TxMailbox0CompleteCallback>
 80025d6:	e016      	b.n	8002606 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ea:	e00c      	b.n	8002606 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	e002      	b.n	8002606 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f986 	bl	8002912 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d024      	beq.n	800265a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002618:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f962 	bl	80028ee <HAL_CAN_TxMailbox1CompleteCallback>
 800262a:	e016      	b.n	800265a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	e00c      	b.n	800265a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e002      	b.n	800265a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f965 	bl	8002924 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d024      	beq.n	80026ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800266c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f941 	bl	8002900 <HAL_CAN_TxMailbox2CompleteCallback>
 800267e:	e016      	b.n	80026ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
 8002692:	e00c      	b.n	80026ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
 80026a6:	e002      	b.n	80026ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f944 	bl	8002936 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2210      	movs	r2, #16
 80026d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2208      	movs	r2, #8
 80026ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f92a 	bl	8002948 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fe fe8b 	bl	8001428 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00c      	beq.n	8002736 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2210      	movs	r2, #16
 8002734:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f90a 	bl	800296c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8f2 	bl	800295a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8f3 	bl	800297e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f8eb 	bl	8002990 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d07b      	beq.n	80028bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d072      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002828:	2b00      	cmp	r3, #0
 800282a:	d043      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03e      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d02b      	beq.n	8002898 <HAL_CAN_IRQHandler+0x32a>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d82e      	bhi.n	80028a2 <HAL_CAN_IRQHandler+0x334>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d022      	beq.n	800288e <HAL_CAN_IRQHandler+0x320>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d82a      	bhi.n	80028a2 <HAL_CAN_IRQHandler+0x334>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d019      	beq.n	8002884 <HAL_CAN_IRQHandler+0x316>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d826      	bhi.n	80028a2 <HAL_CAN_IRQHandler+0x334>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d010      	beq.n	800287a <HAL_CAN_IRQHandler+0x30c>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d822      	bhi.n	80028a2 <HAL_CAN_IRQHandler+0x334>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d002      	beq.n	8002866 <HAL_CAN_IRQHandler+0x2f8>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d005      	beq.n	8002870 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002864:	e01d      	b.n	80028a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800286e:	e019      	b.n	80028a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f043 0310 	orr.w	r3, r3, #16
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002878:	e014      	b.n	80028a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f043 0320 	orr.w	r3, r3, #32
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002882:	e00f      	b.n	80028a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800288c:	e00a      	b.n	80028a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002896:	e005      	b.n	80028a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028a0:	e000      	b.n	80028a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80028a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2204      	movs	r2, #4
 80028ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f867 	bl	80029a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4906      	ldr	r1, [pc, #24]	; (8002a4c <__NVIC_EnableIRQ+0x34>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	; (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b18:	d301      	bcc.n	8002b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <SysTick_Config+0x40>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b26:	210f      	movs	r1, #15
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b2c:	f7ff ff90 	bl	8002a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <SysTick_Config+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SysTick_Config+0x40>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff2d 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b74:	f7ff ff42 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff ff90 	bl	8002aa4 <NVIC_EncodePriority>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5f 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff35 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ffa2 	bl	8002b08 <SysTick_Config>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b08b      	sub	sp, #44	; 0x2c
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be2:	e169      	b.n	8002eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002be4:	2201      	movs	r2, #1
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8158 	bne.w	8002eb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a9a      	ldr	r2, [pc, #616]	; (8002e70 <HAL_GPIO_Init+0x2a0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d05e      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c0c:	4a98      	ldr	r2, [pc, #608]	; (8002e70 <HAL_GPIO_Init+0x2a0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d875      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c12:	4a98      	ldr	r2, [pc, #608]	; (8002e74 <HAL_GPIO_Init+0x2a4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d058      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c18:	4a96      	ldr	r2, [pc, #600]	; (8002e74 <HAL_GPIO_Init+0x2a4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d86f      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c1e:	4a96      	ldr	r2, [pc, #600]	; (8002e78 <HAL_GPIO_Init+0x2a8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d052      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c24:	4a94      	ldr	r2, [pc, #592]	; (8002e78 <HAL_GPIO_Init+0x2a8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d869      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c2a:	4a94      	ldr	r2, [pc, #592]	; (8002e7c <HAL_GPIO_Init+0x2ac>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d04c      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c30:	4a92      	ldr	r2, [pc, #584]	; (8002e7c <HAL_GPIO_Init+0x2ac>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d863      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c36:	4a92      	ldr	r2, [pc, #584]	; (8002e80 <HAL_GPIO_Init+0x2b0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d046      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
 8002c3c:	4a90      	ldr	r2, [pc, #576]	; (8002e80 <HAL_GPIO_Init+0x2b0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d85d      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	d82a      	bhi.n	8002c9c <HAL_GPIO_Init+0xcc>
 8002c46:	2b12      	cmp	r3, #18
 8002c48:	d859      	bhi.n	8002cfe <HAL_GPIO_Init+0x12e>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <HAL_GPIO_Init+0x80>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002ccb 	.word	0x08002ccb
 8002c54:	08002ca5 	.word	0x08002ca5
 8002c58:	08002cb7 	.word	0x08002cb7
 8002c5c:	08002cf9 	.word	0x08002cf9
 8002c60:	08002cff 	.word	0x08002cff
 8002c64:	08002cff 	.word	0x08002cff
 8002c68:	08002cff 	.word	0x08002cff
 8002c6c:	08002cff 	.word	0x08002cff
 8002c70:	08002cff 	.word	0x08002cff
 8002c74:	08002cff 	.word	0x08002cff
 8002c78:	08002cff 	.word	0x08002cff
 8002c7c:	08002cff 	.word	0x08002cff
 8002c80:	08002cff 	.word	0x08002cff
 8002c84:	08002cff 	.word	0x08002cff
 8002c88:	08002cff 	.word	0x08002cff
 8002c8c:	08002cff 	.word	0x08002cff
 8002c90:	08002cff 	.word	0x08002cff
 8002c94:	08002cad 	.word	0x08002cad
 8002c98:	08002cc1 	.word	0x08002cc1
 8002c9c:	4a79      	ldr	r2, [pc, #484]	; (8002e84 <HAL_GPIO_Init+0x2b4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ca2:	e02c      	b.n	8002cfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	623b      	str	r3, [r7, #32]
          break;
 8002caa:	e029      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	e024      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	3308      	adds	r3, #8
 8002cbc:	623b      	str	r3, [r7, #32]
          break;
 8002cbe:	e01f      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	623b      	str	r3, [r7, #32]
          break;
 8002cc8:	e01a      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	623b      	str	r3, [r7, #32]
          break;
 8002cd6:	e013      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	611a      	str	r2, [r3, #16]
          break;
 8002cea:	e009      	b.n	8002d00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cec:	2308      	movs	r3, #8
 8002cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	615a      	str	r2, [r3, #20]
          break;
 8002cf6:	e003      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
          break;
 8002cfc:	e000      	b.n	8002d00 <HAL_GPIO_Init+0x130>
          break;
 8002cfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d801      	bhi.n	8002d0a <HAL_GPIO_Init+0x13a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	e001      	b.n	8002d0e <HAL_GPIO_Init+0x13e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2bff      	cmp	r3, #255	; 0xff
 8002d14:	d802      	bhi.n	8002d1c <HAL_GPIO_Init+0x14c>
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	e002      	b.n	8002d22 <HAL_GPIO_Init+0x152>
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	3b08      	subs	r3, #8
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	210f      	movs	r1, #15
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80b1 	beq.w	8002eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d50:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <HAL_GPIO_Init+0x2b8>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	4a4c      	ldr	r2, [pc, #304]	; (8002e88 <HAL_GPIO_Init+0x2b8>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6193      	str	r3, [r2, #24]
 8002d5c:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <HAL_GPIO_Init+0x2b8>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d68:	4a48      	ldr	r2, [pc, #288]	; (8002e8c <HAL_GPIO_Init+0x2bc>)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	3302      	adds	r3, #2
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	220f      	movs	r2, #15
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a40      	ldr	r2, [pc, #256]	; (8002e90 <HAL_GPIO_Init+0x2c0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_GPIO_Init+0x1ec>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a3f      	ldr	r2, [pc, #252]	; (8002e94 <HAL_GPIO_Init+0x2c4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00d      	beq.n	8002db8 <HAL_GPIO_Init+0x1e8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	; (8002e98 <HAL_GPIO_Init+0x2c8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <HAL_GPIO_Init+0x1e4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3d      	ldr	r2, [pc, #244]	; (8002e9c <HAL_GPIO_Init+0x2cc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_GPIO_Init+0x1e0>
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002db0:	2304      	movs	r3, #4
 8002db2:	e004      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e002      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <HAL_GPIO_Init+0x1ee>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	f002 0203 	and.w	r2, r2, #3
 8002dc4:	0092      	lsls	r2, r2, #2
 8002dc6:	4093      	lsls	r3, r2
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dce:	492f      	ldr	r1, [pc, #188]	; (8002e8c <HAL_GPIO_Init+0x2bc>)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	492c      	ldr	r1, [pc, #176]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002df6:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4928      	ldr	r1, [pc, #160]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e10:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4922      	ldr	r1, [pc, #136]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e1e:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	491e      	ldr	r1, [pc, #120]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4918      	ldr	r1, [pc, #96]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
 8002e44:	e006      	b.n	8002e54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	4914      	ldr	r1, [pc, #80]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d021      	beq.n	8002ea4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
 8002e6c:	e021      	b.n	8002eb2 <HAL_GPIO_Init+0x2e2>
 8002e6e:	bf00      	nop
 8002e70:	10320000 	.word	0x10320000
 8002e74:	10310000 	.word	0x10310000
 8002e78:	10220000 	.word	0x10220000
 8002e7c:	10210000 	.word	0x10210000
 8002e80:	10120000 	.word	0x10120000
 8002e84:	10110000 	.word	0x10110000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40010800 	.word	0x40010800
 8002e94:	40010c00 	.word	0x40010c00
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40011400 	.word	0x40011400
 8002ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_GPIO_Init+0x304>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	4909      	ldr	r1, [pc, #36]	; (8002ed4 <HAL_GPIO_Init+0x304>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f47f ae8e 	bne.w	8002be4 <HAL_GPIO_Init+0x14>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	372c      	adds	r7, #44	; 0x2c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e12b      	b.n	8003142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f940 	bl	8001184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2224      	movs	r2, #36	; 0x24
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f001 fc92 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a81      	ldr	r2, [pc, #516]	; (800314c <HAL_I2C_Init+0x274>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d807      	bhi.n	8002f5c <HAL_I2C_Init+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	; (8003150 <HAL_I2C_Init+0x278>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e006      	b.n	8002f6a <HAL_I2C_Init+0x92>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a7d      	ldr	r2, [pc, #500]	; (8003154 <HAL_I2C_Init+0x27c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0e7      	b.n	8003142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a78      	ldr	r2, [pc, #480]	; (8003158 <HAL_I2C_Init+0x280>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	; (800314c <HAL_I2C_Init+0x274>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d802      	bhi.n	8002fac <HAL_I2C_Init+0xd4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	e009      	b.n	8002fc0 <HAL_I2C_Init+0xe8>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_I2C_Init+0x284>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	495c      	ldr	r1, [pc, #368]	; (800314c <HAL_I2C_Init+0x274>)
 8002fdc:	428b      	cmp	r3, r1
 8002fde:	d819      	bhi.n	8003014 <HAL_I2C_Init+0x13c>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e59      	subs	r1, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_I2C_Init+0x138>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1e59      	subs	r1, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fbb1 f3f3 	udiv	r3, r1, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	e051      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003010:	2304      	movs	r3, #4
 8003012:	e04f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d111      	bne.n	8003040 <HAL_I2C_Init+0x168>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e012      	b.n	8003066 <HAL_I2C_Init+0x18e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Init+0x196>
 800306a:	2301      	movs	r3, #1
 800306c:	e022      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10e      	bne.n	8003094 <HAL_I2C_Init+0x1bc>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1e58      	subs	r0, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	440b      	add	r3, r1
 8003084:	fbb0 f3f3 	udiv	r3, r0, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003092:	e00f      	b.n	80030b4 <HAL_I2C_Init+0x1dc>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e58      	subs	r0, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	0099      	lsls	r1, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030aa:	3301      	adds	r3, #1
 80030ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6809      	ldr	r1, [r1, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6911      	ldr	r1, [r2, #16]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68d2      	ldr	r2, [r2, #12]
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	000186a0 	.word	0x000186a0
 8003150:	001e847f 	.word	0x001e847f
 8003154:	003d08ff 	.word	0x003d08ff
 8003158:	431bde83 	.word	0x431bde83
 800315c:	10624dd3 	.word	0x10624dd3

08003160 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800317a:	f7fe fe7b 	bl	8001e74 <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b20      	cmp	r3, #32
 800318a:	f040 80d9 	bne.w	8003340 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2319      	movs	r3, #25
 8003194:	2201      	movs	r2, #1
 8003196:	496d      	ldr	r1, [pc, #436]	; (800334c <HAL_I2C_Mem_Write+0x1ec>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fcc1 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0cc      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Mem_Write+0x56>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0c5      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d007      	beq.n	80031dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2221      	movs	r2, #33	; 0x21
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2240      	movs	r2, #64	; 0x40
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a3a      	ldr	r2, [r7, #32]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <HAL_I2C_Mem_Write+0x1f0>)
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800321e:	88f8      	ldrh	r0, [r7, #6]
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	4603      	mov	r3, r0
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 faf8 	bl	8003824 <I2C_RequestMemoryWrite>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d052      	beq.n	80032e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e081      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fd42 	bl	8003ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b04      	cmp	r3, #4
 8003254:	d107      	bne.n	8003266 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003264:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06b      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d11b      	bne.n	80032e0 <HAL_I2C_Mem_Write+0x180>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d017      	beq.n	80032e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1aa      	bne.n	800323e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fd2e 	bl	8003d4e <I2C_WaitOnBTFFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d107      	bne.n	8003310 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e016      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	00100002 	.word	0x00100002
 8003350:	ffff0000 	.word	0xffff0000

08003354 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08c      	sub	sp, #48	; 0x30
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003372:	f7fe fd7f 	bl	8001e74 <HAL_GetTick>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b20      	cmp	r3, #32
 8003382:	f040 8244 	bne.w	800380e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2319      	movs	r3, #25
 800338c:	2201      	movs	r2, #1
 800338e:	4982      	ldr	r1, [pc, #520]	; (8003598 <HAL_I2C_Mem_Read+0x244>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fbc5 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
 800339e:	e237      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Mem_Read+0x5a>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e230      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d007      	beq.n	80033d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2222      	movs	r2, #34	; 0x22
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2240      	movs	r2, #64	; 0x40
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a62      	ldr	r2, [pc, #392]	; (800359c <HAL_I2C_Mem_Read+0x248>)
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003416:	88f8      	ldrh	r0, [r7, #6]
 8003418:	893a      	ldrh	r2, [r7, #8]
 800341a:	8979      	ldrh	r1, [r7, #10]
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	4603      	mov	r3, r0
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fa92 	bl	8003950 <I2C_RequestMemoryRead>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1ec      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d113      	bne.n	8003466 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e1c0      	b.n	80037e8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b01      	cmp	r3, #1
 800346c:	d11e      	bne.n	80034ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800347e:	b672      	cpsid	i
}
 8003480:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034a8:	b662      	cpsie	i
}
 80034aa:	e035      	b.n	8003518 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d11e      	bne.n	80034f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80034c4:	b672      	cpsid	i
}
 80034c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80034ee:	b662      	cpsie	i
}
 80034f0:	e012      	b.n	8003518 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003500:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003518:	e166      	b.n	80037e8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	2b03      	cmp	r3, #3
 8003520:	f200 811f 	bhi.w	8003762 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	2b01      	cmp	r3, #1
 800352a:	d123      	bne.n	8003574 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fc4d 	bl	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e167      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003572:	e139      	b.n	80037e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	2b02      	cmp	r3, #2
 800357a:	d152      	bne.n	8003622 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	2200      	movs	r2, #0
 8003584:	4906      	ldr	r1, [pc, #24]	; (80035a0 <HAL_I2C_Mem_Read+0x24c>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 faca 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e13c      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
 8003596:	bf00      	nop
 8003598:	00100002 	.word	0x00100002
 800359c:	ffff0000 	.word	0xffff0000
 80035a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80035a4:	b672      	cpsid	i
}
 80035a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035ea:	b662      	cpsie	i
}
 80035ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003620:	e0e2      	b.n	80037e8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	2200      	movs	r2, #0
 800362a:	497b      	ldr	r1, [pc, #492]	; (8003818 <HAL_I2C_Mem_Read+0x4c4>)
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fa77 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0e9      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800364c:	b672      	cpsid	i
}
 800364e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003682:	4b66      	ldr	r3, [pc, #408]	; (800381c <HAL_I2C_Mem_Read+0x4c8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	08db      	lsrs	r3, r3, #3
 8003688:	4a65      	ldr	r2, [pc, #404]	; (8003820 <HAL_I2C_Mem_Read+0x4cc>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0a1a      	lsrs	r2, r3, #8
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	00da      	lsls	r2, r3, #3
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	3b01      	subs	r3, #1
 80036a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d118      	bne.n	80036da <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f043 0220 	orr.w	r2, r3, #32
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80036ca:	b662      	cpsie	i
}
 80036cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e09a      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d1d9      	bne.n	800369c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800372a:	b662      	cpsie	i
}
 800372c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003760:	e042      	b.n	80037e8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fb32 	bl	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e04c      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d118      	bne.n	80037e8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f ae94 	bne.w	800351a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	e000      	b.n	8003810 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800380e:	2302      	movs	r3, #2
  }
}
 8003810:	4618      	mov	r0, r3
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	00010004 	.word	0x00010004
 800381c:	20000090 	.word	0x20000090
 8003820:	14f8b589 	.word	0x14f8b589

08003824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	4608      	mov	r0, r1
 800382e:	4611      	mov	r1, r2
 8003830:	461a      	mov	r2, r3
 8003832:	4603      	mov	r3, r0
 8003834:	817b      	strh	r3, [r7, #10]
 8003836:	460b      	mov	r3, r1
 8003838:	813b      	strh	r3, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2200      	movs	r2, #0
 8003856:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f960 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003874:	d103      	bne.n	800387e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e05f      	b.n	8003942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003882:	897b      	ldrh	r3, [r7, #10]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	492d      	ldr	r1, [pc, #180]	; (800394c <I2C_RequestMemoryWrite+0x128>)
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f998 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e04c      	b.n	8003942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fa02 	bl	8003ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d107      	bne.n	80038e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e02b      	b.n	8003942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	e021      	b.n	8003940 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038fc:	893b      	ldrh	r3, [r7, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	b29b      	uxth	r3, r3
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	6a39      	ldr	r1, [r7, #32]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f9dc 	bl	8003ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b04      	cmp	r3, #4
 8003920:	d107      	bne.n	8003932 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e005      	b.n	8003942 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	00010002 	.word	0x00010002

08003950 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	817b      	strh	r3, [r7, #10]
 8003962:	460b      	mov	r3, r1
 8003964:	813b      	strh	r3, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003978:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	2200      	movs	r2, #0
 8003992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f8c2 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b0:	d103      	bne.n	80039ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0aa      	b.n	8003b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	4952      	ldr	r1, [pc, #328]	; (8003b1c <I2C_RequestMemoryRead+0x1cc>)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f8fa 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e097      	b.n	8003b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	6a39      	ldr	r1, [r7, #32]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f964 	bl	8003ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d107      	bne.n	8003a22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e076      	b.n	8003b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2c:	893b      	ldrh	r3, [r7, #8]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]
 8003a36:	e021      	b.n	8003a7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a38:	893b      	ldrh	r3, [r7, #8]
 8003a3a:	0a1b      	lsrs	r3, r3, #8
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	6a39      	ldr	r1, [r7, #32]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f93e 	bl	8003ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00d      	beq.n	8003a72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d107      	bne.n	8003a6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e050      	b.n	8003b14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a72:	893b      	ldrh	r3, [r7, #8]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7e:	6a39      	ldr	r1, [r7, #32]
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f923 	bl	8003ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d107      	bne.n	8003aa4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e035      	b.n	8003b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f82b 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ade:	d103      	bne.n	8003ae8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e013      	b.n	8003b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003aec:	897b      	ldrh	r3, [r7, #10]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	6a3a      	ldr	r2, [r7, #32]
 8003b00:	4906      	ldr	r1, [pc, #24]	; (8003b1c <I2C_RequestMemoryRead+0x1cc>)
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f863 	bl	8003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	00010002 	.word	0x00010002

08003b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	e025      	b.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b38:	d021      	beq.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe f99b 	bl	8001e74 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d116      	bne.n	8003b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e023      	b.n	8003bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10d      	bne.n	8003ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	e00c      	b.n	8003bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	43da      	mvns	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d0b6      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bdc:	e051      	b.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d123      	bne.n	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e046      	b.n	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3c:	d021      	beq.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fe f919 	bl	8001e74 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e020      	b.n	8003cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10c      	bne.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e00b      	b.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	43da      	mvns	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf14      	ite	ne
 8003cb8:	2301      	movne	r3, #1
 8003cba:	2300      	moveq	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d18d      	bne.n	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cd8:	e02d      	b.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f8ce 	bl	8003e7c <I2C_IsAcknowledgeFailed>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e02d      	b.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf0:	d021      	beq.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7fe f8bf 	bl	8001e74 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d116      	bne.n	8003d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e007      	b.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d40:	2b80      	cmp	r3, #128	; 0x80
 8003d42:	d1ca      	bne.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d5a:	e02d      	b.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f88d 	bl	8003e7c <I2C_IsAcknowledgeFailed>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e02d      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d72:	d021      	beq.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d74:	f7fe f87e 	bl	8001e74 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d1ca      	bne.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ddc:	e042      	b.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d119      	bne.n	8003e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0210 	mvn.w	r2, #16
 8003df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e029      	b.n	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e20:	f7fe f828 	bl	8001e74 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d1b5      	bne.n	8003dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e92:	d11b      	bne.n	8003ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e304      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8087 	beq.w	8004006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef8:	4b92      	ldr	r3, [pc, #584]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d00c      	beq.n	8003f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f04:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d112      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
 8003f10:	4b8c      	ldr	r3, [pc, #560]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1e:	4b89      	ldr	r3, [pc, #548]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d06c      	beq.n	8004004 <HAL_RCC_OscConfig+0x12c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d168      	bne.n	8004004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e2de      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3e:	d106      	bne.n	8003f4e <HAL_RCC_OscConfig+0x76>
 8003f40:	4b80      	ldr	r3, [pc, #512]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7f      	ldr	r2, [pc, #508]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	e02e      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCC_OscConfig+0x98>
 8003f56:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a7a      	ldr	r2, [pc, #488]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b78      	ldr	r3, [pc, #480]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a77      	ldr	r2, [pc, #476]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0xbc>
 8003f7a:	4b72      	ldr	r3, [pc, #456]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a71      	ldr	r2, [pc, #452]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a6e      	ldr	r2, [pc, #440]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xd4>
 8003f94:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6a      	ldr	r2, [pc, #424]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd ff5e 	bl	8001e74 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd ff5a 	bl	8001e74 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e292      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b5d      	ldr	r3, [pc, #372]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xe4>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd ff4a 	bl	8001e74 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd ff46 	bl	8001e74 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e27e      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x10c>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004012:	4b4c      	ldr	r3, [pc, #304]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800401e:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
 800402a:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b43      	ldr	r3, [pc, #268]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e252      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4939      	ldr	r1, [pc, #228]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004072:	f7fd feff 	bl	8001e74 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fd fefb 	bl	8001e74 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e233      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4927      	ldr	r1, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <HAL_RCC_OscConfig+0x270>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fede 	bl	8001e74 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fd feda 	bl	8001e74 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e212      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b1d      	ldr	r3, [pc, #116]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d03a      	beq.n	800415c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d019      	beq.n	8004122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f4:	f7fd febe 	bl	8001e74 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd feba 	bl	8001e74 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1f2      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_RCC_OscConfig+0x26c>)
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f000 fbb6 	bl	800488c <RCC_Delay>
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7fd fea4 	bl	8001e74 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412e:	e00f      	b.n	8004150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004130:	f7fd fea0 	bl	8001e74 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d908      	bls.n	8004150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1d8      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	42420000 	.word	0x42420000
 800414c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004150:	4b9b      	ldr	r3, [pc, #620]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e9      	bne.n	8004130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a6 	beq.w	80042b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416e:	4b94      	ldr	r3, [pc, #592]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b91      	ldr	r3, [pc, #580]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4a90      	ldr	r2, [pc, #576]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	61d3      	str	r3, [r2, #28]
 8004186:	4b8e      	ldr	r3, [pc, #568]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <HAL_RCC_OscConfig+0x4ec>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d118      	bne.n	80041d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x4ec>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a87      	ldr	r2, [pc, #540]	; (80043c4 <HAL_RCC_OscConfig+0x4ec>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ae:	f7fd fe61 	bl	8001e74 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b6:	f7fd fe5d 	bl	8001e74 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b64      	cmp	r3, #100	; 0x64
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e195      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x4ec>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d106      	bne.n	80041ea <HAL_RCC_OscConfig+0x312>
 80041dc:	4b78      	ldr	r3, [pc, #480]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a77      	ldr	r2, [pc, #476]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	e02d      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x334>
 80041f2:	4b73      	ldr	r3, [pc, #460]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	4a72      	ldr	r2, [pc, #456]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	6213      	str	r3, [r2, #32]
 80041fe:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a6f      	ldr	r2, [pc, #444]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	e01c      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d10c      	bne.n	800422e <HAL_RCC_OscConfig+0x356>
 8004214:	4b6a      	ldr	r3, [pc, #424]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4a69      	ldr	r2, [pc, #420]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	6213      	str	r3, [r2, #32]
 8004220:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4a66      	ldr	r2, [pc, #408]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6213      	str	r3, [r2, #32]
 800422c:	e00b      	b.n	8004246 <HAL_RCC_OscConfig+0x36e>
 800422e:	4b64      	ldr	r3, [pc, #400]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a63      	ldr	r2, [pc, #396]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b61      	ldr	r3, [pc, #388]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a60      	ldr	r2, [pc, #384]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fd fe11 	bl	8001e74 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd fe0d 	bl	8001e74 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e143      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	4b54      	ldr	r3, [pc, #336]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ee      	beq.n	8004256 <HAL_RCC_OscConfig+0x37e>
 8004278:	e014      	b.n	80042a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427a:	f7fd fdfb 	bl	8001e74 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fd fdf7 	bl	8001e74 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e12d      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ee      	bne.n	8004282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4a44      	ldr	r2, [pc, #272]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 808c 	beq.w	80043d8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80042c0:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042cc:	d10e      	bne.n	80042ec <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80042ce:	4b3c      	ldr	r3, [pc, #240]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d108      	bne.n	80042ec <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80042da:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e103      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d14e      	bne.n	8004392 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80042f4:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0ef      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004314:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <HAL_RCC_OscConfig+0x4f0>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fd fdab 	bl	8001e74 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004322:	f7fd fda7 	bl	8001e74 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b64      	cmp	r3, #100	; 0x64
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0df      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004334:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004340:	4b1f      	ldr	r3, [pc, #124]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434c:	491c      	ldr	r1, [pc, #112]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	4918      	ldr	r1, [pc, #96]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004364:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <HAL_RCC_OscConfig+0x4f0>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fd fd83 	bl	8001e74 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004372:	f7fd fd7f 	bl	8001e74 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b64      	cmp	r3, #100	; 0x64
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0b7      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x49a>
 8004390:	e022      	b.n	80043d8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <HAL_RCC_OscConfig+0x4e8>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_RCC_OscConfig+0x4f0>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fd fd66 	bl	8001e74 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80043aa:	e00f      	b.n	80043cc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043ac:	f7fd fd62 	bl	8001e74 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d908      	bls.n	80043cc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e09a      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80043cc:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e9      	bne.n	80043ac <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8088 	beq.w	80044f2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e2:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d068      	beq.n	80044c0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d14d      	bne.n	8004492 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b42      	ldr	r3, [pc, #264]	; (8004500 <HAL_RCC_OscConfig+0x628>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd fd3a 	bl	8001e74 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fd36 	bl	8001e74 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e06e      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442a:	d10f      	bne.n	800444c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4931      	ldr	r1, [pc, #196]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 8004436:	4313      	orrs	r3, r2
 8004438:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800443a:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	f023 020f 	bic.w	r2, r3, #15
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	492d      	ldr	r1, [pc, #180]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 8004448:	4313      	orrs	r3, r2
 800444a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	430b      	orrs	r3, r1
 800445e:	4927      	ldr	r1, [pc, #156]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b26      	ldr	r3, [pc, #152]	; (8004500 <HAL_RCC_OscConfig+0x628>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446a:	f7fd fd03 	bl	8001e74 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004472:	f7fd fcff 	bl	8001e74 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e037      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004484:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x59a>
 8004490:	e02f      	b.n	80044f2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x628>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fd fcec 	bl	8001e74 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a0:	f7fd fce8 	bl	8001e74 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e020      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x5c8>
 80044be:	e018      	b.n	80044f2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e013      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x624>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	429a      	cmp	r2, r3
 80044de:	d106      	bne.n	80044ee <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	42420060 	.word	0x42420060

08004504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0d0      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d910      	bls.n	8004548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b67      	ldr	r3, [pc, #412]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 0207 	bic.w	r2, r3, #7
 800452e:	4965      	ldr	r1, [pc, #404]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	4313      	orrs	r3, r2
 8004534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b63      	ldr	r3, [pc, #396]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b8      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800456a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004582:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	494d      	ldr	r1, [pc, #308]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d040      	beq.n	8004624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d115      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e073      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	4b3d      	ldr	r3, [pc, #244]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e06b      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4936      	ldr	r1, [pc, #216]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f4:	f7fd fc3e 	bl	8001e74 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7fd fc3a 	bl	8001e74 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e053      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d210      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 0207 	bic.w	r2, r3, #7
 800463a:	4922      	ldr	r1, [pc, #136]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e032      	b.n	80046ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4916      	ldr	r1, [pc, #88]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004692:	f000 f821 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 8004696:	4602      	mov	r2, r0
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	490a      	ldr	r1, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	5ccb      	ldrb	r3, [r1, r3]
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <HAL_RCC_ClockConfig+0x1cc>)
 80046ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1d0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd fb9c 	bl	8001df0 <HAL_InitTick>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40022000 	.word	0x40022000
 80046c8:	40021000 	.word	0x40021000
 80046cc:	08004fe0 	.word	0x08004fe0
 80046d0:	20000090 	.word	0x20000090
 80046d4:	20000094 	.word	0x20000094

080046d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b091      	sub	sp, #68	; 0x44
 80046dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80046de:	4b56      	ldr	r3, [pc, #344]	; (8004838 <HAL_RCC_GetSysClockFreq+0x160>)
 80046e0:	f107 0414 	add.w	r4, r7, #20
 80046e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e6:	c407      	stmia	r4!, {r0, r1, r2}
 80046e8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80046ea:	4b54      	ldr	r3, [pc, #336]	; (800483c <HAL_RCC_GetSysClockFreq+0x164>)
 80046ec:	1d3c      	adds	r4, r7, #4
 80046ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
 80046f8:	2300      	movs	r3, #0
 80046fa:	633b      	str	r3, [r7, #48]	; 0x30
 80046fc:	2300      	movs	r3, #0
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004700:	2300      	movs	r3, #0
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
 800470c:	2300      	movs	r3, #0
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004710:	4b4b      	ldr	r3, [pc, #300]	; (8004840 <HAL_RCC_GetSysClockFreq+0x168>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b04      	cmp	r3, #4
 800471e:	d002      	beq.n	8004726 <HAL_RCC_GetSysClockFreq+0x4e>
 8004720:	2b08      	cmp	r3, #8
 8004722:	d003      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x54>
 8004724:	e080      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004728:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800472a:	e080      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	0c9b      	lsrs	r3, r3, #18
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004738:	4413      	add	r3, r2
 800473a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d066      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800474a:	4b3d      	ldr	r3, [pc, #244]	; (8004840 <HAL_RCC_GetSysClockFreq+0x168>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004756:	4413      	add	r3, r2
 8004758:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800475c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800475e:	4b38      	ldr	r3, [pc, #224]	; (8004840 <HAL_RCC_GetSysClockFreq+0x168>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d044      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800476a:	4b35      	ldr	r3, [pc, #212]	; (8004840 <HAL_RCC_GetSysClockFreq+0x168>)
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	091b      	lsrs	r3, r3, #4
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	3301      	adds	r3, #1
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCC_GetSysClockFreq+0x168>)
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3302      	adds	r3, #2
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	4618      	mov	r0, r3
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	461a      	mov	r2, r3
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	fb02 f501 	mul.w	r5, r2, r1
 800479a:	fb00 f403 	mul.w	r4, r0, r3
 800479e:	442c      	add	r4, r5
 80047a0:	fba0 2302 	umull	r2, r3, r0, r2
 80047a4:	18e1      	adds	r1, r4, r3
 80047a6:	460b      	mov	r3, r1
 80047a8:	4926      	ldr	r1, [pc, #152]	; (8004844 <HAL_RCC_GetSysClockFreq+0x16c>)
 80047aa:	fb01 f003 	mul.w	r0, r1, r3
 80047ae:	2100      	movs	r1, #0
 80047b0:	fb01 f102 	mul.w	r1, r1, r2
 80047b4:	4401      	add	r1, r0
 80047b6:	4823      	ldr	r0, [pc, #140]	; (8004844 <HAL_RCC_GetSysClockFreq+0x16c>)
 80047b8:	fba2 4500 	umull	r4, r5, r2, r0
 80047bc:	194b      	adds	r3, r1, r5
 80047be:	461d      	mov	r5, r3
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	4618      	mov	r0, r3
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	461a      	mov	r2, r3
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	fb02 fc01 	mul.w	ip, r2, r1
 80047d4:	fb00 f603 	mul.w	r6, r0, r3
 80047d8:	4466      	add	r6, ip
 80047da:	fba0 2302 	umull	r2, r3, r0, r2
 80047de:	18f1      	adds	r1, r6, r3
 80047e0:	460b      	mov	r3, r1
 80047e2:	4620      	mov	r0, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	f7fc f9b3 	bl	8000b50 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4613      	mov	r3, r2
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f2:	e007      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <HAL_RCC_GetSysClockFreq+0x16c>)
 80047f8:	fb02 f203 	mul.w	r2, r2, r3
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004804:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004808:	461a      	mov	r2, r3
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8004810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004812:	085b      	lsrs	r3, r3, #1
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004816:	e004      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <HAL_RCC_GetSysClockFreq+0x170>)
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004826:	e002      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_RCC_GetSysClockFreq+0x174>)
 800482a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800482c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004830:	4618      	mov	r0, r3
 8004832:	3744      	adds	r7, #68	; 0x44
 8004834:	46bd      	mov	sp, r7
 8004836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004838:	08004fc0 	.word	0x08004fc0
 800483c:	08004fd0 	.word	0x08004fd0
 8004840:	40021000 	.word	0x40021000
 8004844:	017d7840 	.word	0x017d7840
 8004848:	003d0900 	.word	0x003d0900
 800484c:	007a1200 	.word	0x007a1200

08004850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004854:	4b02      	ldr	r3, [pc, #8]	; (8004860 <HAL_RCC_GetHCLKFreq+0x10>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	20000090 	.word	0x20000090

08004864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004868:	f7ff fff2 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 800486c:	4602      	mov	r2, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4903      	ldr	r1, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487a:	5ccb      	ldrb	r3, [r1, r3]
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	08004ff0 	.word	0x08004ff0

0800488c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <RCC_Delay+0x34>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a0a      	ldr	r2, [pc, #40]	; (80048c4 <RCC_Delay+0x38>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a5b      	lsrs	r3, r3, #9
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048a8:	bf00      	nop
  }
  while (Delay --);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1e5a      	subs	r2, r3, #1
 80048ae:	60fa      	str	r2, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f9      	bne.n	80048a8 <RCC_Delay+0x1c>
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	20000090 	.word	0x20000090
 80048c4:	10624dd3 	.word	0x10624dd3

080048c8 <__errno>:
 80048c8:	4b01      	ldr	r3, [pc, #4]	; (80048d0 <__errno+0x8>)
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	2000009c 	.word	0x2000009c

080048d4 <__libc_init_array>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	2600      	movs	r6, #0
 80048d8:	4d0c      	ldr	r5, [pc, #48]	; (800490c <__libc_init_array+0x38>)
 80048da:	4c0d      	ldr	r4, [pc, #52]	; (8004910 <__libc_init_array+0x3c>)
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	42a6      	cmp	r6, r4
 80048e2:	d109      	bne.n	80048f8 <__libc_init_array+0x24>
 80048e4:	f000 fb5e 	bl	8004fa4 <_init>
 80048e8:	2600      	movs	r6, #0
 80048ea:	4d0a      	ldr	r5, [pc, #40]	; (8004914 <__libc_init_array+0x40>)
 80048ec:	4c0a      	ldr	r4, [pc, #40]	; (8004918 <__libc_init_array+0x44>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	42a6      	cmp	r6, r4
 80048f4:	d105      	bne.n	8004902 <__libc_init_array+0x2e>
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fc:	4798      	blx	r3
 80048fe:	3601      	adds	r6, #1
 8004900:	e7ee      	b.n	80048e0 <__libc_init_array+0xc>
 8004902:	f855 3b04 	ldr.w	r3, [r5], #4
 8004906:	4798      	blx	r3
 8004908:	3601      	adds	r6, #1
 800490a:	e7f2      	b.n	80048f2 <__libc_init_array+0x1e>
 800490c:	08005070 	.word	0x08005070
 8004910:	08005070 	.word	0x08005070
 8004914:	08005070 	.word	0x08005070
 8004918:	08005074 	.word	0x08005074

0800491c <memset>:
 800491c:	4603      	mov	r3, r0
 800491e:	4402      	add	r2, r0
 8004920:	4293      	cmp	r3, r2
 8004922:	d100      	bne.n	8004926 <memset+0xa>
 8004924:	4770      	bx	lr
 8004926:	f803 1b01 	strb.w	r1, [r3], #1
 800492a:	e7f9      	b.n	8004920 <memset+0x4>
 800492c:	0000      	movs	r0, r0
	...

08004930 <atan>:
 8004930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004934:	4bb6      	ldr	r3, [pc, #728]	; (8004c10 <atan+0x2e0>)
 8004936:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800493a:	429e      	cmp	r6, r3
 800493c:	4604      	mov	r4, r0
 800493e:	460d      	mov	r5, r1
 8004940:	468b      	mov	fp, r1
 8004942:	dd17      	ble.n	8004974 <atan+0x44>
 8004944:	4bb3      	ldr	r3, [pc, #716]	; (8004c14 <atan+0x2e4>)
 8004946:	429e      	cmp	r6, r3
 8004948:	dc01      	bgt.n	800494e <atan+0x1e>
 800494a:	d109      	bne.n	8004960 <atan+0x30>
 800494c:	b140      	cbz	r0, 8004960 <atan+0x30>
 800494e:	4622      	mov	r2, r4
 8004950:	462b      	mov	r3, r5
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fb fc6d 	bl	8000234 <__adddf3>
 800495a:	4604      	mov	r4, r0
 800495c:	460d      	mov	r5, r1
 800495e:	e005      	b.n	800496c <atan+0x3c>
 8004960:	f1bb 0f00 	cmp.w	fp, #0
 8004964:	4cac      	ldr	r4, [pc, #688]	; (8004c18 <atan+0x2e8>)
 8004966:	f300 8121 	bgt.w	8004bac <atan+0x27c>
 800496a:	4dac      	ldr	r5, [pc, #688]	; (8004c1c <atan+0x2ec>)
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004974:	4baa      	ldr	r3, [pc, #680]	; (8004c20 <atan+0x2f0>)
 8004976:	429e      	cmp	r6, r3
 8004978:	dc11      	bgt.n	800499e <atan+0x6e>
 800497a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800497e:	429e      	cmp	r6, r3
 8004980:	dc0a      	bgt.n	8004998 <atan+0x68>
 8004982:	a38b      	add	r3, pc, #556	; (adr r3, 8004bb0 <atan+0x280>)
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f7fb fc54 	bl	8000234 <__adddf3>
 800498c:	2200      	movs	r2, #0
 800498e:	4ba5      	ldr	r3, [pc, #660]	; (8004c24 <atan+0x2f4>)
 8004990:	f7fc f896 	bl	8000ac0 <__aeabi_dcmpgt>
 8004994:	2800      	cmp	r0, #0
 8004996:	d1e9      	bne.n	800496c <atan+0x3c>
 8004998:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800499c:	e027      	b.n	80049ee <atan+0xbe>
 800499e:	f000 f951 	bl	8004c44 <fabs>
 80049a2:	4ba1      	ldr	r3, [pc, #644]	; (8004c28 <atan+0x2f8>)
 80049a4:	4604      	mov	r4, r0
 80049a6:	429e      	cmp	r6, r3
 80049a8:	460d      	mov	r5, r1
 80049aa:	f300 80b8 	bgt.w	8004b1e <atan+0x1ee>
 80049ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80049b2:	429e      	cmp	r6, r3
 80049b4:	f300 809c 	bgt.w	8004af0 <atan+0x1c0>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	f7fb fc3a 	bl	8000234 <__adddf3>
 80049c0:	2200      	movs	r2, #0
 80049c2:	4b98      	ldr	r3, [pc, #608]	; (8004c24 <atan+0x2f4>)
 80049c4:	f7fb fc34 	bl	8000230 <__aeabi_dsub>
 80049c8:	2200      	movs	r2, #0
 80049ca:	4606      	mov	r6, r0
 80049cc:	460f      	mov	r7, r1
 80049ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fb fc2d 	bl	8000234 <__adddf3>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4630      	mov	r0, r6
 80049e0:	4639      	mov	r1, r7
 80049e2:	f7fb ff07 	bl	80007f4 <__aeabi_ddiv>
 80049e6:	f04f 0a00 	mov.w	sl, #0
 80049ea:	4604      	mov	r4, r0
 80049ec:	460d      	mov	r5, r1
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	4620      	mov	r0, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	f7fb fdd3 	bl	80005a0 <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4680      	mov	r8, r0
 8004a00:	4689      	mov	r9, r1
 8004a02:	f7fb fdcd 	bl	80005a0 <__aeabi_dmul>
 8004a06:	a36c      	add	r3, pc, #432	; (adr r3, 8004bb8 <atan+0x288>)
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460f      	mov	r7, r1
 8004a10:	f7fb fdc6 	bl	80005a0 <__aeabi_dmul>
 8004a14:	a36a      	add	r3, pc, #424	; (adr r3, 8004bc0 <atan+0x290>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fc0b 	bl	8000234 <__adddf3>
 8004a1e:	4632      	mov	r2, r6
 8004a20:	463b      	mov	r3, r7
 8004a22:	f7fb fdbd 	bl	80005a0 <__aeabi_dmul>
 8004a26:	a368      	add	r3, pc, #416	; (adr r3, 8004bc8 <atan+0x298>)
 8004a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2c:	f7fb fc02 	bl	8000234 <__adddf3>
 8004a30:	4632      	mov	r2, r6
 8004a32:	463b      	mov	r3, r7
 8004a34:	f7fb fdb4 	bl	80005a0 <__aeabi_dmul>
 8004a38:	a365      	add	r3, pc, #404	; (adr r3, 8004bd0 <atan+0x2a0>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	f7fb fbf9 	bl	8000234 <__adddf3>
 8004a42:	4632      	mov	r2, r6
 8004a44:	463b      	mov	r3, r7
 8004a46:	f7fb fdab 	bl	80005a0 <__aeabi_dmul>
 8004a4a:	a363      	add	r3, pc, #396	; (adr r3, 8004bd8 <atan+0x2a8>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fbf0 	bl	8000234 <__adddf3>
 8004a54:	4632      	mov	r2, r6
 8004a56:	463b      	mov	r3, r7
 8004a58:	f7fb fda2 	bl	80005a0 <__aeabi_dmul>
 8004a5c:	a360      	add	r3, pc, #384	; (adr r3, 8004be0 <atan+0x2b0>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	f7fb fbe7 	bl	8000234 <__adddf3>
 8004a66:	4642      	mov	r2, r8
 8004a68:	464b      	mov	r3, r9
 8004a6a:	f7fb fd99 	bl	80005a0 <__aeabi_dmul>
 8004a6e:	a35e      	add	r3, pc, #376	; (adr r3, 8004be8 <atan+0x2b8>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	4680      	mov	r8, r0
 8004a76:	4689      	mov	r9, r1
 8004a78:	4630      	mov	r0, r6
 8004a7a:	4639      	mov	r1, r7
 8004a7c:	f7fb fd90 	bl	80005a0 <__aeabi_dmul>
 8004a80:	a35b      	add	r3, pc, #364	; (adr r3, 8004bf0 <atan+0x2c0>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fbd3 	bl	8000230 <__aeabi_dsub>
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	463b      	mov	r3, r7
 8004a8e:	f7fb fd87 	bl	80005a0 <__aeabi_dmul>
 8004a92:	a359      	add	r3, pc, #356	; (adr r3, 8004bf8 <atan+0x2c8>)
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f7fb fbca 	bl	8000230 <__aeabi_dsub>
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	f7fb fd7e 	bl	80005a0 <__aeabi_dmul>
 8004aa4:	a356      	add	r3, pc, #344	; (adr r3, 8004c00 <atan+0x2d0>)
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	f7fb fbc1 	bl	8000230 <__aeabi_dsub>
 8004aae:	4632      	mov	r2, r6
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	f7fb fd75 	bl	80005a0 <__aeabi_dmul>
 8004ab6:	a354      	add	r3, pc, #336	; (adr r3, 8004c08 <atan+0x2d8>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb fbb8 	bl	8000230 <__aeabi_dsub>
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	f7fb fd6c 	bl	80005a0 <__aeabi_dmul>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4640      	mov	r0, r8
 8004ace:	4649      	mov	r1, r9
 8004ad0:	f7fb fbb0 	bl	8000234 <__adddf3>
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	462b      	mov	r3, r5
 8004ad8:	f7fb fd62 	bl	80005a0 <__aeabi_dmul>
 8004adc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	d144      	bne.n	8004b70 <atan+0x240>
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	4629      	mov	r1, r5
 8004aea:	f7fb fba1 	bl	8000230 <__aeabi_dsub>
 8004aee:	e734      	b.n	800495a <atan+0x2a>
 8004af0:	2200      	movs	r2, #0
 8004af2:	4b4c      	ldr	r3, [pc, #304]	; (8004c24 <atan+0x2f4>)
 8004af4:	f7fb fb9c 	bl	8000230 <__aeabi_dsub>
 8004af8:	2200      	movs	r2, #0
 8004afa:	4606      	mov	r6, r0
 8004afc:	460f      	mov	r7, r1
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <atan+0x2f4>)
 8004b04:	f7fb fb96 	bl	8000234 <__adddf3>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4630      	mov	r0, r6
 8004b0e:	4639      	mov	r1, r7
 8004b10:	f7fb fe70 	bl	80007f4 <__aeabi_ddiv>
 8004b14:	f04f 0a01 	mov.w	sl, #1
 8004b18:	4604      	mov	r4, r0
 8004b1a:	460d      	mov	r5, r1
 8004b1c:	e767      	b.n	80049ee <atan+0xbe>
 8004b1e:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <atan+0x2fc>)
 8004b20:	429e      	cmp	r6, r3
 8004b22:	da1a      	bge.n	8004b5a <atan+0x22a>
 8004b24:	2200      	movs	r2, #0
 8004b26:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <atan+0x300>)
 8004b28:	f7fb fb82 	bl	8000230 <__aeabi_dsub>
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	4606      	mov	r6, r0
 8004b30:	460f      	mov	r7, r1
 8004b32:	4620      	mov	r0, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <atan+0x300>)
 8004b38:	f7fb fd32 	bl	80005a0 <__aeabi_dmul>
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <atan+0x2f4>)
 8004b40:	f7fb fb78 	bl	8000234 <__adddf3>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4630      	mov	r0, r6
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	f7fb fe52 	bl	80007f4 <__aeabi_ddiv>
 8004b50:	f04f 0a02 	mov.w	sl, #2
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
 8004b58:	e749      	b.n	80049ee <atan+0xbe>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	2000      	movs	r0, #0
 8004b60:	4934      	ldr	r1, [pc, #208]	; (8004c34 <atan+0x304>)
 8004b62:	f7fb fe47 	bl	80007f4 <__aeabi_ddiv>
 8004b66:	f04f 0a03 	mov.w	sl, #3
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	e73e      	b.n	80049ee <atan+0xbe>
 8004b70:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <atan+0x308>)
 8004b72:	4e32      	ldr	r6, [pc, #200]	; (8004c3c <atan+0x30c>)
 8004b74:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004b78:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004b7c:	e9da 2300 	ldrd	r2, r3, [sl]
 8004b80:	f7fb fb56 	bl	8000230 <__aeabi_dsub>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	f7fb fb52 	bl	8000230 <__aeabi_dsub>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004b94:	f7fb fb4c 	bl	8000230 <__aeabi_dsub>
 8004b98:	f1bb 0f00 	cmp.w	fp, #0
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	460d      	mov	r5, r1
 8004ba0:	f6bf aee4 	bge.w	800496c <atan+0x3c>
 8004ba4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ba8:	461d      	mov	r5, r3
 8004baa:	e6df      	b.n	800496c <atan+0x3c>
 8004bac:	4d24      	ldr	r5, [pc, #144]	; (8004c40 <atan+0x310>)
 8004bae:	e6dd      	b.n	800496c <atan+0x3c>
 8004bb0:	8800759c 	.word	0x8800759c
 8004bb4:	7e37e43c 	.word	0x7e37e43c
 8004bb8:	e322da11 	.word	0xe322da11
 8004bbc:	3f90ad3a 	.word	0x3f90ad3a
 8004bc0:	24760deb 	.word	0x24760deb
 8004bc4:	3fa97b4b 	.word	0x3fa97b4b
 8004bc8:	a0d03d51 	.word	0xa0d03d51
 8004bcc:	3fb10d66 	.word	0x3fb10d66
 8004bd0:	c54c206e 	.word	0xc54c206e
 8004bd4:	3fb745cd 	.word	0x3fb745cd
 8004bd8:	920083ff 	.word	0x920083ff
 8004bdc:	3fc24924 	.word	0x3fc24924
 8004be0:	5555550d 	.word	0x5555550d
 8004be4:	3fd55555 	.word	0x3fd55555
 8004be8:	2c6a6c2f 	.word	0x2c6a6c2f
 8004bec:	bfa2b444 	.word	0xbfa2b444
 8004bf0:	52defd9a 	.word	0x52defd9a
 8004bf4:	3fadde2d 	.word	0x3fadde2d
 8004bf8:	af749a6d 	.word	0xaf749a6d
 8004bfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8004c00:	fe231671 	.word	0xfe231671
 8004c04:	3fbc71c6 	.word	0x3fbc71c6
 8004c08:	9998ebc4 	.word	0x9998ebc4
 8004c0c:	3fc99999 	.word	0x3fc99999
 8004c10:	440fffff 	.word	0x440fffff
 8004c14:	7ff00000 	.word	0x7ff00000
 8004c18:	54442d18 	.word	0x54442d18
 8004c1c:	bff921fb 	.word	0xbff921fb
 8004c20:	3fdbffff 	.word	0x3fdbffff
 8004c24:	3ff00000 	.word	0x3ff00000
 8004c28:	3ff2ffff 	.word	0x3ff2ffff
 8004c2c:	40038000 	.word	0x40038000
 8004c30:	3ff80000 	.word	0x3ff80000
 8004c34:	bff00000 	.word	0xbff00000
 8004c38:	08005018 	.word	0x08005018
 8004c3c:	08004ff8 	.word	0x08004ff8
 8004c40:	3ff921fb 	.word	0x3ff921fb

08004c44 <fabs>:
 8004c44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004c48:	4770      	bx	lr

08004c4a <atan2>:
 8004c4a:	f000 b82d 	b.w	8004ca8 <__ieee754_atan2>
	...

08004c50 <sqrt>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	4606      	mov	r6, r0
 8004c54:	460f      	mov	r7, r1
 8004c56:	f000 f8f9 	bl	8004e4c <__ieee754_sqrt>
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <sqrt+0x54>)
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8004c62:	460d      	mov	r5, r1
 8004c64:	3301      	adds	r3, #1
 8004c66:	d019      	beq.n	8004c9c <sqrt+0x4c>
 8004c68:	4632      	mov	r2, r6
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f7fb ff30 	bl	8000ad4 <__aeabi_dcmpun>
 8004c74:	b990      	cbnz	r0, 8004c9c <sqrt+0x4c>
 8004c76:	2200      	movs	r2, #0
 8004c78:	2300      	movs	r3, #0
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	f7fb ff01 	bl	8000a84 <__aeabi_dcmplt>
 8004c82:	b158      	cbz	r0, 8004c9c <sqrt+0x4c>
 8004c84:	f7ff fe20 	bl	80048c8 <__errno>
 8004c88:	2321      	movs	r3, #33	; 0x21
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	6003      	str	r3, [r0, #0]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	f7fb fdae 	bl	80007f4 <__aeabi_ddiv>
 8004c98:	4604      	mov	r4, r0
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000100 	.word	0x20000100

08004ca8 <__ieee754_atan2>:
 8004ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	4692      	mov	sl, r2
 8004cae:	4699      	mov	r9, r3
 8004cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cb4:	461f      	mov	r7, r3
 8004cb6:	f1ca 0300 	rsb	r3, sl, #0
 8004cba:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8004e48 <__ieee754_atan2+0x1a0>
 8004cbe:	ea43 030a 	orr.w	r3, r3, sl
 8004cc2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004cc6:	4573      	cmp	r3, lr
 8004cc8:	4604      	mov	r4, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	d808      	bhi.n	8004ce0 <__ieee754_atan2+0x38>
 8004cce:	4246      	negs	r6, r0
 8004cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004cd4:	4306      	orrs	r6, r0
 8004cd6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8004cda:	4576      	cmp	r6, lr
 8004cdc:	468c      	mov	ip, r1
 8004cde:	d908      	bls.n	8004cf2 <__ieee754_atan2+0x4a>
 8004ce0:	4652      	mov	r2, sl
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	f7fb faa4 	bl	8000234 <__adddf3>
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	e019      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004cf2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8004cf6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8004cfa:	ea56 060a 	orrs.w	r6, r6, sl
 8004cfe:	d103      	bne.n	8004d08 <__ieee754_atan2+0x60>
 8004d00:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	f7ff be14 	b.w	8004930 <atan>
 8004d08:	17be      	asrs	r6, r7, #30
 8004d0a:	f006 0602 	and.w	r6, r6, #2
 8004d0e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8004d12:	ea53 0100 	orrs.w	r1, r3, r0
 8004d16:	d10a      	bne.n	8004d2e <__ieee754_atan2+0x86>
 8004d18:	2e02      	cmp	r6, #2
 8004d1a:	d067      	beq.n	8004dec <__ieee754_atan2+0x144>
 8004d1c:	2e03      	cmp	r6, #3
 8004d1e:	d102      	bne.n	8004d26 <__ieee754_atan2+0x7e>
 8004d20:	a53b      	add	r5, pc, #236	; (adr r5, 8004e10 <__ieee754_atan2+0x168>)
 8004d22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004d26:	4620      	mov	r0, r4
 8004d28:	4629      	mov	r1, r5
 8004d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	ea52 010a 	orrs.w	r1, r2, sl
 8004d32:	d106      	bne.n	8004d42 <__ieee754_atan2+0x9a>
 8004d34:	f1bc 0f00 	cmp.w	ip, #0
 8004d38:	da63      	bge.n	8004e02 <__ieee754_atan2+0x15a>
 8004d3a:	a537      	add	r5, pc, #220	; (adr r5, 8004e18 <__ieee754_atan2+0x170>)
 8004d3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004d40:	e7f1      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004d42:	4572      	cmp	r2, lr
 8004d44:	d10f      	bne.n	8004d66 <__ieee754_atan2+0xbe>
 8004d46:	4293      	cmp	r3, r2
 8004d48:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8004d4c:	d107      	bne.n	8004d5e <__ieee754_atan2+0xb6>
 8004d4e:	2e02      	cmp	r6, #2
 8004d50:	d850      	bhi.n	8004df4 <__ieee754_atan2+0x14c>
 8004d52:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <__ieee754_atan2+0x198>)
 8004d54:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004d58:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004d5c:	e7e3      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004d5e:	2e02      	cmp	r6, #2
 8004d60:	d84c      	bhi.n	8004dfc <__ieee754_atan2+0x154>
 8004d62:	4b38      	ldr	r3, [pc, #224]	; (8004e44 <__ieee754_atan2+0x19c>)
 8004d64:	e7f6      	b.n	8004d54 <__ieee754_atan2+0xac>
 8004d66:	4573      	cmp	r3, lr
 8004d68:	d0e4      	beq.n	8004d34 <__ieee754_atan2+0x8c>
 8004d6a:	1a9b      	subs	r3, r3, r2
 8004d6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004d70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004d74:	da20      	bge.n	8004db8 <__ieee754_atan2+0x110>
 8004d76:	2f00      	cmp	r7, #0
 8004d78:	da01      	bge.n	8004d7e <__ieee754_atan2+0xd6>
 8004d7a:	323c      	adds	r2, #60	; 0x3c
 8004d7c:	db20      	blt.n	8004dc0 <__ieee754_atan2+0x118>
 8004d7e:	4652      	mov	r2, sl
 8004d80:	464b      	mov	r3, r9
 8004d82:	4620      	mov	r0, r4
 8004d84:	4629      	mov	r1, r5
 8004d86:	f7fb fd35 	bl	80007f4 <__aeabi_ddiv>
 8004d8a:	f7ff ff5b 	bl	8004c44 <fabs>
 8004d8e:	f7ff fdcf 	bl	8004930 <atan>
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	2e01      	cmp	r6, #1
 8004d98:	d015      	beq.n	8004dc6 <__ieee754_atan2+0x11e>
 8004d9a:	2e02      	cmp	r6, #2
 8004d9c:	d017      	beq.n	8004dce <__ieee754_atan2+0x126>
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	d0c1      	beq.n	8004d26 <__ieee754_atan2+0x7e>
 8004da2:	a31f      	add	r3, pc, #124	; (adr r3, 8004e20 <__ieee754_atan2+0x178>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	4620      	mov	r0, r4
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7fb fa40 	bl	8000230 <__aeabi_dsub>
 8004db0:	a31d      	add	r3, pc, #116	; (adr r3, 8004e28 <__ieee754_atan2+0x180>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	e016      	b.n	8004de6 <__ieee754_atan2+0x13e>
 8004db8:	a51d      	add	r5, pc, #116	; (adr r5, 8004e30 <__ieee754_atan2+0x188>)
 8004dba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dbe:	e7ea      	b.n	8004d96 <__ieee754_atan2+0xee>
 8004dc0:	2400      	movs	r4, #0
 8004dc2:	2500      	movs	r5, #0
 8004dc4:	e7e7      	b.n	8004d96 <__ieee754_atan2+0xee>
 8004dc6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004dca:	461d      	mov	r5, r3
 8004dcc:	e7ab      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004dce:	a314      	add	r3, pc, #80	; (adr r3, 8004e20 <__ieee754_atan2+0x178>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	f7fb fa2a 	bl	8000230 <__aeabi_dsub>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	a111      	add	r1, pc, #68	; (adr r1, 8004e28 <__ieee754_atan2+0x180>)
 8004de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004de6:	f7fb fa23 	bl	8000230 <__aeabi_dsub>
 8004dea:	e77f      	b.n	8004cec <__ieee754_atan2+0x44>
 8004dec:	a50e      	add	r5, pc, #56	; (adr r5, 8004e28 <__ieee754_atan2+0x180>)
 8004dee:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004df2:	e798      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004df4:	a510      	add	r5, pc, #64	; (adr r5, 8004e38 <__ieee754_atan2+0x190>)
 8004df6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004dfa:	e794      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004dfc:	2400      	movs	r4, #0
 8004dfe:	2500      	movs	r5, #0
 8004e00:	e791      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004e02:	a50b      	add	r5, pc, #44	; (adr r5, 8004e30 <__ieee754_atan2+0x188>)
 8004e04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e08:	e78d      	b.n	8004d26 <__ieee754_atan2+0x7e>
 8004e0a:	bf00      	nop
 8004e0c:	f3af 8000 	nop.w
 8004e10:	54442d18 	.word	0x54442d18
 8004e14:	c00921fb 	.word	0xc00921fb
 8004e18:	54442d18 	.word	0x54442d18
 8004e1c:	bff921fb 	.word	0xbff921fb
 8004e20:	33145c07 	.word	0x33145c07
 8004e24:	3ca1a626 	.word	0x3ca1a626
 8004e28:	54442d18 	.word	0x54442d18
 8004e2c:	400921fb 	.word	0x400921fb
 8004e30:	54442d18 	.word	0x54442d18
 8004e34:	3ff921fb 	.word	0x3ff921fb
 8004e38:	54442d18 	.word	0x54442d18
 8004e3c:	3fe921fb 	.word	0x3fe921fb
 8004e40:	08005038 	.word	0x08005038
 8004e44:	08005050 	.word	0x08005050
 8004e48:	7ff00000 	.word	0x7ff00000

08004e4c <__ieee754_sqrt>:
 8004e4c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8004fa0 <__ieee754_sqrt+0x154>
 8004e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e54:	ea3c 0c01 	bics.w	ip, ip, r1
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	460d      	mov	r5, r1
 8004e5e:	460a      	mov	r2, r1
 8004e60:	4607      	mov	r7, r0
 8004e62:	4604      	mov	r4, r0
 8004e64:	d10e      	bne.n	8004e84 <__ieee754_sqrt+0x38>
 8004e66:	4602      	mov	r2, r0
 8004e68:	f7fb fb9a 	bl	80005a0 <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4630      	mov	r0, r6
 8004e72:	4629      	mov	r1, r5
 8004e74:	f7fb f9de 	bl	8000234 <__adddf3>
 8004e78:	4606      	mov	r6, r0
 8004e7a:	460d      	mov	r5, r1
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4629      	mov	r1, r5
 8004e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e84:	2900      	cmp	r1, #0
 8004e86:	dc0d      	bgt.n	8004ea4 <__ieee754_sqrt+0x58>
 8004e88:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004e8c:	ea5c 0707 	orrs.w	r7, ip, r7
 8004e90:	d0f4      	beq.n	8004e7c <__ieee754_sqrt+0x30>
 8004e92:	b139      	cbz	r1, 8004ea4 <__ieee754_sqrt+0x58>
 8004e94:	4602      	mov	r2, r0
 8004e96:	f7fb f9cb 	bl	8000230 <__aeabi_dsub>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	f7fb fca9 	bl	80007f4 <__aeabi_ddiv>
 8004ea2:	e7e9      	b.n	8004e78 <__ieee754_sqrt+0x2c>
 8004ea4:	1512      	asrs	r2, r2, #20
 8004ea6:	d074      	beq.n	8004f92 <__ieee754_sqrt+0x146>
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	07d5      	lsls	r5, r2, #31
 8004eac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eb0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8004eb4:	bf5e      	ittt	pl
 8004eb6:	0fe3      	lsrpl	r3, r4, #31
 8004eb8:	0064      	lslpl	r4, r4, #1
 8004eba:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8004ebe:	0fe3      	lsrs	r3, r4, #31
 8004ec0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004ec4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004ec8:	2516      	movs	r5, #22
 8004eca:	4601      	mov	r1, r0
 8004ecc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ed0:	1076      	asrs	r6, r6, #1
 8004ed2:	0064      	lsls	r4, r4, #1
 8004ed4:	188f      	adds	r7, r1, r2
 8004ed6:	429f      	cmp	r7, r3
 8004ed8:	bfde      	ittt	le
 8004eda:	1bdb      	suble	r3, r3, r7
 8004edc:	18b9      	addle	r1, r7, r2
 8004ede:	1880      	addle	r0, r0, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	3d01      	subs	r5, #1
 8004ee4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004ee8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004eec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004ef0:	d1f0      	bne.n	8004ed4 <__ieee754_sqrt+0x88>
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	f04f 0e20 	mov.w	lr, #32
 8004ef8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004efc:	428b      	cmp	r3, r1
 8004efe:	eb07 0c05 	add.w	ip, r7, r5
 8004f02:	dc02      	bgt.n	8004f0a <__ieee754_sqrt+0xbe>
 8004f04:	d113      	bne.n	8004f2e <__ieee754_sqrt+0xe2>
 8004f06:	45a4      	cmp	ip, r4
 8004f08:	d811      	bhi.n	8004f2e <__ieee754_sqrt+0xe2>
 8004f0a:	f1bc 0f00 	cmp.w	ip, #0
 8004f0e:	eb0c 0507 	add.w	r5, ip, r7
 8004f12:	da43      	bge.n	8004f9c <__ieee754_sqrt+0x150>
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	db41      	blt.n	8004f9c <__ieee754_sqrt+0x150>
 8004f18:	f101 0801 	add.w	r8, r1, #1
 8004f1c:	1a5b      	subs	r3, r3, r1
 8004f1e:	4641      	mov	r1, r8
 8004f20:	45a4      	cmp	ip, r4
 8004f22:	bf88      	it	hi
 8004f24:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8004f28:	eba4 040c 	sub.w	r4, r4, ip
 8004f2c:	443a      	add	r2, r7
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	f1be 0e01 	subs.w	lr, lr, #1
 8004f34:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004f38:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8004f3c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004f40:	d1dc      	bne.n	8004efc <__ieee754_sqrt+0xb0>
 8004f42:	4323      	orrs	r3, r4
 8004f44:	d006      	beq.n	8004f54 <__ieee754_sqrt+0x108>
 8004f46:	1c54      	adds	r4, r2, #1
 8004f48:	bf0b      	itete	eq
 8004f4a:	4672      	moveq	r2, lr
 8004f4c:	3201      	addne	r2, #1
 8004f4e:	3001      	addeq	r0, #1
 8004f50:	f022 0201 	bicne.w	r2, r2, #1
 8004f54:	1043      	asrs	r3, r0, #1
 8004f56:	07c1      	lsls	r1, r0, #31
 8004f58:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004f5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004f60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004f64:	bf48      	it	mi
 8004f66:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004f70:	e782      	b.n	8004e78 <__ieee754_sqrt+0x2c>
 8004f72:	0ae3      	lsrs	r3, r4, #11
 8004f74:	3915      	subs	r1, #21
 8004f76:	0564      	lsls	r4, r4, #21
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0fa      	beq.n	8004f72 <__ieee754_sqrt+0x126>
 8004f7c:	02de      	lsls	r6, r3, #11
 8004f7e:	d50a      	bpl.n	8004f96 <__ieee754_sqrt+0x14a>
 8004f80:	f1c2 0020 	rsb	r0, r2, #32
 8004f84:	fa24 f000 	lsr.w	r0, r4, r0
 8004f88:	1e55      	subs	r5, r2, #1
 8004f8a:	4094      	lsls	r4, r2
 8004f8c:	4303      	orrs	r3, r0
 8004f8e:	1b4a      	subs	r2, r1, r5
 8004f90:	e78a      	b.n	8004ea8 <__ieee754_sqrt+0x5c>
 8004f92:	4611      	mov	r1, r2
 8004f94:	e7f0      	b.n	8004f78 <__ieee754_sqrt+0x12c>
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	3201      	adds	r2, #1
 8004f9a:	e7ef      	b.n	8004f7c <__ieee754_sqrt+0x130>
 8004f9c:	4688      	mov	r8, r1
 8004f9e:	e7bd      	b.n	8004f1c <__ieee754_sqrt+0xd0>
 8004fa0:	7ff00000 	.word	0x7ff00000

08004fa4 <_init>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr

08004fb0 <_fini>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr
