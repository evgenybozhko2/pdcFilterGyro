
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005b80  08005b80  00015b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c28  08005c28  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c30  08005c30  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005c38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000110  08005d44  00020110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08005d44  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c00b  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002218  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002ed78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f060  00000000  00000000  0002f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5cc  00000000  00000000  0004e708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aedaa  00000000  00000000  0005bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010aa7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c34  00000000  00000000  0010aad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000110 	.word	0x20000110
 8000204:	00000000 	.word	0x00000000
 8000208:	08005b64 	.word	0x08005b64

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000114 	.word	0x20000114
 8000224:	08005b64 	.word	0x08005b64

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__aeabi_uldivmod>:
 800100c:	b953      	cbnz	r3, 8001024 <__aeabi_uldivmod+0x18>
 800100e:	b94a      	cbnz	r2, 8001024 <__aeabi_uldivmod+0x18>
 8001010:	2900      	cmp	r1, #0
 8001012:	bf08      	it	eq
 8001014:	2800      	cmpeq	r0, #0
 8001016:	bf1c      	itt	ne
 8001018:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800101c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001020:	f000 b98c 	b.w	800133c <__aeabi_idiv0>
 8001024:	f1ad 0c08 	sub.w	ip, sp, #8
 8001028:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800102c:	f000 f824 	bl	8001078 <__udivmoddi4>
 8001030:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr

0800103c <__aeabi_d2ulz>:
 800103c:	b5d0      	push	{r4, r6, r7, lr}
 800103e:	2200      	movs	r2, #0
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__aeabi_d2ulz+0x34>)
 8001042:	4606      	mov	r6, r0
 8001044:	460f      	mov	r7, r1
 8001046:	f7ff faab 	bl	80005a0 <__aeabi_dmul>
 800104a:	f000 f979 	bl	8001340 <__aeabi_d2uiz>
 800104e:	4604      	mov	r4, r0
 8001050:	f7ff fa2c 	bl	80004ac <__aeabi_ui2d>
 8001054:	2200      	movs	r2, #0
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <__aeabi_d2ulz+0x38>)
 8001058:	f7ff faa2 	bl	80005a0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4630      	mov	r0, r6
 8001062:	4639      	mov	r1, r7
 8001064:	f7ff f8e4 	bl	8000230 <__aeabi_dsub>
 8001068:	f000 f96a 	bl	8001340 <__aeabi_d2uiz>
 800106c:	4621      	mov	r1, r4
 800106e:	bdd0      	pop	{r4, r6, r7, pc}
 8001070:	3df00000 	.word	0x3df00000
 8001074:	41f00000 	.word	0x41f00000

08001078 <__udivmoddi4>:
 8001078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	9e08      	ldr	r6, [sp, #32]
 800107e:	460d      	mov	r5, r1
 8001080:	4604      	mov	r4, r0
 8001082:	468e      	mov	lr, r1
 8001084:	2b00      	cmp	r3, #0
 8001086:	f040 8083 	bne.w	8001190 <__udivmoddi4+0x118>
 800108a:	428a      	cmp	r2, r1
 800108c:	4617      	mov	r7, r2
 800108e:	d947      	bls.n	8001120 <__udivmoddi4+0xa8>
 8001090:	fab2 f382 	clz	r3, r2
 8001094:	b14b      	cbz	r3, 80010aa <__udivmoddi4+0x32>
 8001096:	f1c3 0120 	rsb	r1, r3, #32
 800109a:	fa05 fe03 	lsl.w	lr, r5, r3
 800109e:	fa20 f101 	lsr.w	r1, r0, r1
 80010a2:	409f      	lsls	r7, r3
 80010a4:	ea41 0e0e 	orr.w	lr, r1, lr
 80010a8:	409c      	lsls	r4, r3
 80010aa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80010ae:	fbbe fcf8 	udiv	ip, lr, r8
 80010b2:	fa1f f987 	uxth.w	r9, r7
 80010b6:	fb08 e21c 	mls	r2, r8, ip, lr
 80010ba:	fb0c f009 	mul.w	r0, ip, r9
 80010be:	0c21      	lsrs	r1, r4, #16
 80010c0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80010c4:	4290      	cmp	r0, r2
 80010c6:	d90a      	bls.n	80010de <__udivmoddi4+0x66>
 80010c8:	18ba      	adds	r2, r7, r2
 80010ca:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80010ce:	f080 8118 	bcs.w	8001302 <__udivmoddi4+0x28a>
 80010d2:	4290      	cmp	r0, r2
 80010d4:	f240 8115 	bls.w	8001302 <__udivmoddi4+0x28a>
 80010d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010dc:	443a      	add	r2, r7
 80010de:	1a12      	subs	r2, r2, r0
 80010e0:	fbb2 f0f8 	udiv	r0, r2, r8
 80010e4:	fb08 2210 	mls	r2, r8, r0, r2
 80010e8:	fb00 f109 	mul.w	r1, r0, r9
 80010ec:	b2a4      	uxth	r4, r4
 80010ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010f2:	42a1      	cmp	r1, r4
 80010f4:	d909      	bls.n	800110a <__udivmoddi4+0x92>
 80010f6:	193c      	adds	r4, r7, r4
 80010f8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80010fc:	f080 8103 	bcs.w	8001306 <__udivmoddi4+0x28e>
 8001100:	42a1      	cmp	r1, r4
 8001102:	f240 8100 	bls.w	8001306 <__udivmoddi4+0x28e>
 8001106:	3802      	subs	r0, #2
 8001108:	443c      	add	r4, r7
 800110a:	1a64      	subs	r4, r4, r1
 800110c:	2100      	movs	r1, #0
 800110e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001112:	b11e      	cbz	r6, 800111c <__udivmoddi4+0xa4>
 8001114:	2200      	movs	r2, #0
 8001116:	40dc      	lsrs	r4, r3
 8001118:	e9c6 4200 	strd	r4, r2, [r6]
 800111c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001120:	b902      	cbnz	r2, 8001124 <__udivmoddi4+0xac>
 8001122:	deff      	udf	#255	; 0xff
 8001124:	fab2 f382 	clz	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d14f      	bne.n	80011cc <__udivmoddi4+0x154>
 800112c:	1a8d      	subs	r5, r1, r2
 800112e:	2101      	movs	r1, #1
 8001130:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001134:	fa1f f882 	uxth.w	r8, r2
 8001138:	fbb5 fcfe 	udiv	ip, r5, lr
 800113c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001140:	fb08 f00c 	mul.w	r0, r8, ip
 8001144:	0c22      	lsrs	r2, r4, #16
 8001146:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800114a:	42a8      	cmp	r0, r5
 800114c:	d907      	bls.n	800115e <__udivmoddi4+0xe6>
 800114e:	197d      	adds	r5, r7, r5
 8001150:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8001154:	d202      	bcs.n	800115c <__udivmoddi4+0xe4>
 8001156:	42a8      	cmp	r0, r5
 8001158:	f200 80e9 	bhi.w	800132e <__udivmoddi4+0x2b6>
 800115c:	4694      	mov	ip, r2
 800115e:	1a2d      	subs	r5, r5, r0
 8001160:	fbb5 f0fe 	udiv	r0, r5, lr
 8001164:	fb0e 5510 	mls	r5, lr, r0, r5
 8001168:	fb08 f800 	mul.w	r8, r8, r0
 800116c:	b2a4      	uxth	r4, r4
 800116e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001172:	45a0      	cmp	r8, r4
 8001174:	d907      	bls.n	8001186 <__udivmoddi4+0x10e>
 8001176:	193c      	adds	r4, r7, r4
 8001178:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800117c:	d202      	bcs.n	8001184 <__udivmoddi4+0x10c>
 800117e:	45a0      	cmp	r8, r4
 8001180:	f200 80d9 	bhi.w	8001336 <__udivmoddi4+0x2be>
 8001184:	4610      	mov	r0, r2
 8001186:	eba4 0408 	sub.w	r4, r4, r8
 800118a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800118e:	e7c0      	b.n	8001112 <__udivmoddi4+0x9a>
 8001190:	428b      	cmp	r3, r1
 8001192:	d908      	bls.n	80011a6 <__udivmoddi4+0x12e>
 8001194:	2e00      	cmp	r6, #0
 8001196:	f000 80b1 	beq.w	80012fc <__udivmoddi4+0x284>
 800119a:	2100      	movs	r1, #0
 800119c:	e9c6 0500 	strd	r0, r5, [r6]
 80011a0:	4608      	mov	r0, r1
 80011a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a6:	fab3 f183 	clz	r1, r3
 80011aa:	2900      	cmp	r1, #0
 80011ac:	d14b      	bne.n	8001246 <__udivmoddi4+0x1ce>
 80011ae:	42ab      	cmp	r3, r5
 80011b0:	d302      	bcc.n	80011b8 <__udivmoddi4+0x140>
 80011b2:	4282      	cmp	r2, r0
 80011b4:	f200 80b9 	bhi.w	800132a <__udivmoddi4+0x2b2>
 80011b8:	1a84      	subs	r4, r0, r2
 80011ba:	eb65 0303 	sbc.w	r3, r5, r3
 80011be:	2001      	movs	r0, #1
 80011c0:	469e      	mov	lr, r3
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d0aa      	beq.n	800111c <__udivmoddi4+0xa4>
 80011c6:	e9c6 4e00 	strd	r4, lr, [r6]
 80011ca:	e7a7      	b.n	800111c <__udivmoddi4+0xa4>
 80011cc:	409f      	lsls	r7, r3
 80011ce:	f1c3 0220 	rsb	r2, r3, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80011dc:	fa1f f887 	uxth.w	r8, r7
 80011e0:	fb0e 1110 	mls	r1, lr, r0, r1
 80011e4:	fa24 f202 	lsr.w	r2, r4, r2
 80011e8:	409d      	lsls	r5, r3
 80011ea:	fb00 fc08 	mul.w	ip, r0, r8
 80011ee:	432a      	orrs	r2, r5
 80011f0:	0c15      	lsrs	r5, r2, #16
 80011f2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011f6:	45ac      	cmp	ip, r5
 80011f8:	fa04 f403 	lsl.w	r4, r4, r3
 80011fc:	d909      	bls.n	8001212 <__udivmoddi4+0x19a>
 80011fe:	197d      	adds	r5, r7, r5
 8001200:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001204:	f080 808f 	bcs.w	8001326 <__udivmoddi4+0x2ae>
 8001208:	45ac      	cmp	ip, r5
 800120a:	f240 808c 	bls.w	8001326 <__udivmoddi4+0x2ae>
 800120e:	3802      	subs	r0, #2
 8001210:	443d      	add	r5, r7
 8001212:	eba5 050c 	sub.w	r5, r5, ip
 8001216:	fbb5 f1fe 	udiv	r1, r5, lr
 800121a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800121e:	fb01 f908 	mul.w	r9, r1, r8
 8001222:	b295      	uxth	r5, r2
 8001224:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001228:	45a9      	cmp	r9, r5
 800122a:	d907      	bls.n	800123c <__udivmoddi4+0x1c4>
 800122c:	197d      	adds	r5, r7, r5
 800122e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8001232:	d274      	bcs.n	800131e <__udivmoddi4+0x2a6>
 8001234:	45a9      	cmp	r9, r5
 8001236:	d972      	bls.n	800131e <__udivmoddi4+0x2a6>
 8001238:	3902      	subs	r1, #2
 800123a:	443d      	add	r5, r7
 800123c:	eba5 0509 	sub.w	r5, r5, r9
 8001240:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001244:	e778      	b.n	8001138 <__udivmoddi4+0xc0>
 8001246:	f1c1 0720 	rsb	r7, r1, #32
 800124a:	408b      	lsls	r3, r1
 800124c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001250:	ea4c 0c03 	orr.w	ip, ip, r3
 8001254:	fa25 f407 	lsr.w	r4, r5, r7
 8001258:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800125c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001260:	fa1f f88c 	uxth.w	r8, ip
 8001264:	fb0e 4419 	mls	r4, lr, r9, r4
 8001268:	fa20 f307 	lsr.w	r3, r0, r7
 800126c:	fb09 fa08 	mul.w	sl, r9, r8
 8001270:	408d      	lsls	r5, r1
 8001272:	431d      	orrs	r5, r3
 8001274:	0c2b      	lsrs	r3, r5, #16
 8001276:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800127a:	45a2      	cmp	sl, r4
 800127c:	fa02 f201 	lsl.w	r2, r2, r1
 8001280:	fa00 f301 	lsl.w	r3, r0, r1
 8001284:	d909      	bls.n	800129a <__udivmoddi4+0x222>
 8001286:	eb1c 0404 	adds.w	r4, ip, r4
 800128a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800128e:	d248      	bcs.n	8001322 <__udivmoddi4+0x2aa>
 8001290:	45a2      	cmp	sl, r4
 8001292:	d946      	bls.n	8001322 <__udivmoddi4+0x2aa>
 8001294:	f1a9 0902 	sub.w	r9, r9, #2
 8001298:	4464      	add	r4, ip
 800129a:	eba4 040a 	sub.w	r4, r4, sl
 800129e:	fbb4 f0fe 	udiv	r0, r4, lr
 80012a2:	fb0e 4410 	mls	r4, lr, r0, r4
 80012a6:	fb00 fa08 	mul.w	sl, r0, r8
 80012aa:	b2ad      	uxth	r5, r5
 80012ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80012b0:	45a2      	cmp	sl, r4
 80012b2:	d908      	bls.n	80012c6 <__udivmoddi4+0x24e>
 80012b4:	eb1c 0404 	adds.w	r4, ip, r4
 80012b8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80012bc:	d22d      	bcs.n	800131a <__udivmoddi4+0x2a2>
 80012be:	45a2      	cmp	sl, r4
 80012c0:	d92b      	bls.n	800131a <__udivmoddi4+0x2a2>
 80012c2:	3802      	subs	r0, #2
 80012c4:	4464      	add	r4, ip
 80012c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012ca:	fba0 8902 	umull	r8, r9, r0, r2
 80012ce:	eba4 040a 	sub.w	r4, r4, sl
 80012d2:	454c      	cmp	r4, r9
 80012d4:	46c6      	mov	lr, r8
 80012d6:	464d      	mov	r5, r9
 80012d8:	d319      	bcc.n	800130e <__udivmoddi4+0x296>
 80012da:	d016      	beq.n	800130a <__udivmoddi4+0x292>
 80012dc:	b15e      	cbz	r6, 80012f6 <__udivmoddi4+0x27e>
 80012de:	ebb3 020e 	subs.w	r2, r3, lr
 80012e2:	eb64 0405 	sbc.w	r4, r4, r5
 80012e6:	fa04 f707 	lsl.w	r7, r4, r7
 80012ea:	fa22 f301 	lsr.w	r3, r2, r1
 80012ee:	431f      	orrs	r7, r3
 80012f0:	40cc      	lsrs	r4, r1
 80012f2:	e9c6 7400 	strd	r7, r4, [r6]
 80012f6:	2100      	movs	r1, #0
 80012f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fc:	4631      	mov	r1, r6
 80012fe:	4630      	mov	r0, r6
 8001300:	e70c      	b.n	800111c <__udivmoddi4+0xa4>
 8001302:	468c      	mov	ip, r1
 8001304:	e6eb      	b.n	80010de <__udivmoddi4+0x66>
 8001306:	4610      	mov	r0, r2
 8001308:	e6ff      	b.n	800110a <__udivmoddi4+0x92>
 800130a:	4543      	cmp	r3, r8
 800130c:	d2e6      	bcs.n	80012dc <__udivmoddi4+0x264>
 800130e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001312:	eb69 050c 	sbc.w	r5, r9, ip
 8001316:	3801      	subs	r0, #1
 8001318:	e7e0      	b.n	80012dc <__udivmoddi4+0x264>
 800131a:	4628      	mov	r0, r5
 800131c:	e7d3      	b.n	80012c6 <__udivmoddi4+0x24e>
 800131e:	4611      	mov	r1, r2
 8001320:	e78c      	b.n	800123c <__udivmoddi4+0x1c4>
 8001322:	4681      	mov	r9, r0
 8001324:	e7b9      	b.n	800129a <__udivmoddi4+0x222>
 8001326:	4608      	mov	r0, r1
 8001328:	e773      	b.n	8001212 <__udivmoddi4+0x19a>
 800132a:	4608      	mov	r0, r1
 800132c:	e749      	b.n	80011c2 <__udivmoddi4+0x14a>
 800132e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001332:	443d      	add	r5, r7
 8001334:	e713      	b.n	800115e <__udivmoddi4+0xe6>
 8001336:	3802      	subs	r0, #2
 8001338:	443c      	add	r4, r7
 800133a:	e724      	b.n	8001186 <__udivmoddi4+0x10e>

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <__aeabi_d2uiz>:
 8001340:	004a      	lsls	r2, r1, #1
 8001342:	d211      	bcs.n	8001368 <__aeabi_d2uiz+0x28>
 8001344:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001348:	d211      	bcs.n	800136e <__aeabi_d2uiz+0x2e>
 800134a:	d50d      	bpl.n	8001368 <__aeabi_d2uiz+0x28>
 800134c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001350:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001354:	d40e      	bmi.n	8001374 <__aeabi_d2uiz+0x34>
 8001356:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800135a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800135e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001362:	fa23 f002 	lsr.w	r0, r3, r2
 8001366:	4770      	bx	lr
 8001368:	f04f 0000 	mov.w	r0, #0
 800136c:	4770      	bx	lr
 800136e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001372:	d102      	bne.n	800137a <__aeabi_d2uiz+0x3a>
 8001374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001378:	4770      	bx	lr
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	4770      	bx	lr

08001380 <BUTTON_STATE>:
#include "stm32f1xx_hal_gpio.h"
#include "button.h"

enum BUTTON num;

uint8_t BUTTON_STATE(uint8_t num) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d112      	bne.n	80013b6 <BUTTON_STATE+0x36>

	case CALIBRATE_MPU_BUTTON:

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 8001390:	2101      	movs	r1, #1
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <BUTTON_STATE+0x40>)
 8001394:	f002 fb6a 	bl	8003a6c <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <BUTTON_STATE+0x22>
			return 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	e009      	b.n	80013b6 <BUTTON_STATE+0x36>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80013a2:	2101      	movs	r1, #1
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <BUTTON_STATE+0x40>)
 80013a6:	f002 fb61 	bl	8003a6c <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <BUTTON_STATE+0x34>
			return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e000      	b.n	80013b6 <BUTTON_STATE+0x36>
		}
		break;
 80013b4:	bf00      	nop
	}
};
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40011000 	.word	0x40011000

080013c4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_CAN1_Init+0x64>)
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <MX_CAN1_Init+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_CAN1_Init+0x64>)
 80013d0:	2205      	movs	r2, #5
 80013d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_CAN1_Init+0x64>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_CAN1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_CAN1_Init+0x64>)
 80013e2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80013e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_CAN1_Init+0x64>)
 80013ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MX_CAN1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_CAN1_Init+0x64>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <MX_CAN1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_CAN1_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <MX_CAN1_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_CAN1_Init+0x64>)
 8001410:	2201      	movs	r2, #1
 8001412:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_CAN1_Init+0x64>)
 8001416:	f001 f925 	bl	8002664 <HAL_CAN_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001420:	f000 fc62 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000158 	.word	0x20000158
 800142c:	40006400 	.word	0x40006400

08001430 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_CAN2_Init+0x64>)
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <MX_CAN2_Init+0x68>)
 8001438:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 32;
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_CAN2_Init+0x64>)
 800143c:	2220      	movs	r2, #32
 800143e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_CAN2_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_CAN2_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_CAN2_Init+0x64>)
 800144e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001452:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_CAN2_Init+0x64>)
 8001456:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 800145a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_CAN2_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_CAN2_Init+0x64>)
 8001464:	2201      	movs	r2, #1
 8001466:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_CAN2_Init+0x64>)
 800146a:	2200      	movs	r2, #0
 800146c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_CAN2_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_CAN2_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_CAN2_Init+0x64>)
 800147c:	2201      	movs	r2, #1
 800147e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_CAN2_Init+0x64>)
 8001482:	f001 f8ef 	bl	8002664 <HAL_CAN_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800148c:	f000 fc2c 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000130 	.word	0x20000130
 8001498:	40006800 	.word	0x40006800

0800149c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a5d      	ldr	r2, [pc, #372]	; (800162c <HAL_CAN_MspInit+0x190>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d15b      	bne.n	8001574 <HAL_CAN_MspInit+0xd8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014bc:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <HAL_CAN_MspInit+0x194>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a5b      	ldr	r2, [pc, #364]	; (8001630 <HAL_CAN_MspInit+0x194>)
 80014c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80014c6:	4b5a      	ldr	r3, [pc, #360]	; (8001630 <HAL_CAN_MspInit+0x194>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10b      	bne.n	80014e6 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80014ce:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80014d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b56      	ldr	r3, [pc, #344]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	4619      	mov	r1, r3
 8001512:	4849      	ldr	r0, [pc, #292]	; (8001638 <HAL_CAN_MspInit+0x19c>)
 8001514:	f002 f926 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4842      	ldr	r0, [pc, #264]	; (8001638 <HAL_CAN_MspInit+0x19c>)
 800152e:	f002 f919 	bl	8003764 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2013      	movs	r0, #19
 8001538:	f001 fedd 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800153c:	2013      	movs	r0, #19
 800153e:	f001 fef6 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2014      	movs	r0, #20
 8001548:	f001 fed5 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800154c:	2014      	movs	r0, #20
 800154e:	f001 feee 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2015      	movs	r0, #21
 8001558:	f001 fecd 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800155c:	2015      	movs	r0, #21
 800155e:	f001 fee6 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2016      	movs	r0, #22
 8001568:	f001 fec5 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800156c:	2016      	movs	r0, #22
 800156e:	f001 fede 	bl	800332e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001572:	e057      	b.n	8001624 <HAL_CAN_MspInit+0x188>
  else if(canHandle->Instance==CAN2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <HAL_CAN_MspInit+0x1a0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d152      	bne.n	8001624 <HAL_CAN_MspInit+0x188>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_CAN_MspInit+0x198>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a2c      	ldr	r2, [pc, #176]	; (8001634 <HAL_CAN_MspInit+0x198>)
 8001584:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_CAN_MspInit+0x198>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_CAN_MspInit+0x194>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	4a24      	ldr	r2, [pc, #144]	; (8001630 <HAL_CAN_MspInit+0x194>)
 800159e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_CAN_MspInit+0x194>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10b      	bne.n	80015c0 <HAL_CAN_MspInit+0x124>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80015ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015b2:	61d3      	str	r3, [r2, #28]
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_CAN_MspInit+0x198>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015d8:	2320      	movs	r3, #32
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <HAL_CAN_MspInit+0x1a4>)
 80015ec:	f002 f8ba 	bl	8003764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	480f      	ldr	r0, [pc, #60]	; (8001640 <HAL_CAN_MspInit+0x1a4>)
 8001604:	f002 f8ae 	bl	8003764 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_CAN_MspInit+0x1a8>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_CAN_MspInit+0x1a8>)
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	6053      	str	r3, [r2, #4]
}
 8001624:	bf00      	nop
 8001626:	3730      	adds	r7, #48	; 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40006400 	.word	0x40006400
 8001630:	2000012c 	.word	0x2000012c
 8001634:	40021000 	.word	0x40021000
 8001638:	40010800 	.word	0x40010800
 800163c:	40006800 	.word	0x40006800
 8001640:	40010c00 	.word	0x40010c00
 8001644:	40010000 	.word	0x40010000

08001648 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_GPIO_Init+0x80>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <MX_GPIO_Init+0x80>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_GPIO_Init+0x80>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_GPIO_Init+0x80>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <MX_GPIO_Init+0x80>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_GPIO_Init+0x80>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_GPIO_Init+0x80>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <MX_GPIO_Init+0x80>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_GPIO_Init+0x80>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_GPIO_Init+0x84>)
 80016ba:	f002 f853 	bl	8003764 <HAL_GPIO_Init>

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010c00 	.word	0x40010c00

080016d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MX_I2C1_Init+0x50>)
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <MX_I2C1_Init+0x54>)
 80016d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_I2C1_Init+0x50>)
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <MX_I2C1_Init+0x58>)
 80016de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_I2C1_Init+0x50>)
 80016ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <MX_I2C1_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_I2C1_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_I2C1_Init+0x50>)
 800170e:	f002 f9c5 	bl	8003a9c <HAL_I2C_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001718:	f000 fae6 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000180 	.word	0x20000180
 8001724:	40005400 	.word	0x40005400
 8001728:	00061a80 	.word	0x00061a80

0800172c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_I2C_MspInit+0x90>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d132      	bne.n	80017b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <HAL_I2C_MspInit+0x94>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <HAL_I2C_MspInit+0x94>)
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_I2C_MspInit+0x94>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001764:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4812      	ldr	r0, [pc, #72]	; (80017c4 <HAL_I2C_MspInit+0x98>)
 800177a:	f001 fff3 	bl	8003764 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_I2C_MspInit+0x9c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_I2C_MspInit+0x9c>)
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_I2C_MspInit+0x94>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_I2C_MspInit+0x94>)
 80017a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_I2C_MspInit+0x94>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010c00 	.word	0x40010c00
 80017c8:	40010000 	.word	0x40010000

080017cc <saveXToFlash>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint32_t address);
void writeFlash(uint32_t address, double data);

void saveXToFlash(double x) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	e9c7 0100 	strd	r0, r1, [r7]
	writeFlash(xAddress, x);
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <saveXToFlash+0x20>)
 80017d8:	6819      	ldr	r1, [r3, #0]
 80017da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017de:	4608      	mov	r0, r1
 80017e0:	f000 f834 	bl	800184c <writeFlash>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000

080017f0 <saveYToFlash>:

void saveYToFlash(double y) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	e9c7 0100 	strd	r0, r1, [r7]
	writeFlash(yAddress, y);
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <saveYToFlash+0x20>)
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001802:	4608      	mov	r0, r1
 8001804:	f000 f822 	bl	800184c <writeFlash>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000004 	.word	0x20000004

08001814 <readXFromFlash>:

double readXFromFlash() {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	return readFlash(xAddress);
 8001818:	4b04      	ldr	r3, [pc, #16]	; (800182c <readXFromFlash+0x18>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f835 	bl	800188c <readFlash>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
}
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000

08001830 <readYFromFlash>:

double readYFromFlash() {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	return readFlash(yAddress);
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <readYFromFlash+0x18>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f827 	bl	800188c <readFlash>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
}
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000004 	.word	0x20000004

0800184c <writeFlash>:

void writeFlash(uint32_t address, double data) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_Unlock();
 8001858:	f001 fdf4 	bl	8003444 <HAL_FLASH_Unlock>

	uint32_t pageError = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
	HAL_FLASHEx_Erase(address, pageError);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fed4 	bl	8003614 <HAL_FLASHEx_Erase>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800186c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001870:	f7ff fbe4 	bl	800103c <__aeabi_d2ulz>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2003      	movs	r0, #3
 800187c:	f001 fd72 	bl	8003364 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8001880:	f001 fe06 	bl	8003490 <HAL_FLASH_Lock>
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <readFlash>:

double readFlash(uint32_t address) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	return *(__IO uint32_t*) address;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe07 	bl	80004ac <__aeabi_ui2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
}
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <main>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int main(void) {
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0

	HAL_Init();
 80018b2:	f000 fe51 	bl	8002558 <HAL_Init>

	SystemClock_Config();
 80018b6:	f000 f8d3 	bl	8001a60 <SystemClock_Config>

	MX_GPIO_Init();
 80018ba:	f7ff fec5 	bl	8001648 <MX_GPIO_Init>
	MX_CAN1_Init();
 80018be:	f7ff fd81 	bl	80013c4 <MX_CAN1_Init>
	MX_CAN2_Init();
 80018c2:	f7ff fdb5 	bl	8001430 <MX_CAN2_Init>
	MX_I2C1_Init();
 80018c6:	f7ff ff03 	bl	80016d0 <MX_I2C1_Init>

	//MPU initialize
	while (MPU6050_Init(&hi2c1) == 1)
 80018ca:	e007      	b.n	80018dc <main+0x30>

		if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80018cc:	485b      	ldr	r0, [pc, #364]	; (8001a3c <main+0x190>)
 80018ce:	f000 ffc4 	bl	800285a <HAL_CAN_Start>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <main+0x30>
			Error_Handler();
 80018d8:	f000 fa06 	bl	8001ce8 <Error_Handler>
	while (MPU6050_Init(&hi2c1) == 1)
 80018dc:	4858      	ldr	r0, [pc, #352]	; (8001a40 <main+0x194>)
 80018de:	f000 fa08 	bl	8001cf2 <MPU6050_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d0f1      	beq.n	80018cc <main+0x20>
		}
	if (HAL_CAN_ActivateNotification(&hcan1,
 80018e8:	2103      	movs	r1, #3
 80018ea:	4854      	ldr	r0, [pc, #336]	; (8001a3c <main+0x190>)
 80018ec:	f001 f9e4 	bl	8002cb8 <HAL_CAN_ActivateNotification>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <main+0x4e>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 80018f6:	f000 f9f7 	bl	8001ce8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 80018fa:	4852      	ldr	r0, [pc, #328]	; (8001a44 <main+0x198>)
 80018fc:	f000 ffad 	bl	800285a <HAL_CAN_Start>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <main+0x5e>
		Error_Handler();
 8001906:	f000 f9ef 	bl	8001ce8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 800190a:	2103      	movs	r1, #3
 800190c:	484d      	ldr	r0, [pc, #308]	; (8001a44 <main+0x198>)
 800190e:	f001 f9d3 	bl	8002cb8 <HAL_CAN_ActivateNotification>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <main+0x70>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8001918:	f000 f9e6 	bl	8001ce8 <Error_Handler>
	}

	//loop
	while (1) {
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800191c:	494a      	ldr	r1, [pc, #296]	; (8001a48 <main+0x19c>)
 800191e:	4848      	ldr	r0, [pc, #288]	; (8001a40 <main+0x194>)
 8001920:	f000 fa3e 	bl	8001da0 <MPU6050_Read_All>
		HAL_Delay(100);
 8001924:	2064      	movs	r0, #100	; 0x64
 8001926:	f000 fe79 	bl	800261c <HAL_Delay>

		double pitch = readXFromFlash() - MPU6050.KalmanAngleX;
 800192a:	f7ff ff73 	bl	8001814 <readXFromFlash>
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <main+0x19c>)
 8001930:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001934:	f7fe fc7c 	bl	8000230 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double roll = readYFromFlash() - MPU6050.KalmanAngleY;
 8001940:	f7ff ff76 	bl	8001830 <readYFromFlash>
 8001944:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <main+0x19c>)
 8001946:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800194a:	f7fe fc71 	bl	8000230 <__aeabi_dsub>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	e9c7 2300 	strd	r2, r3, [r7]

		if (pitch > 40) {
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <main+0x1a0>)
 800195c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001960:	f7ff f8ae 	bl	8000ac0 <__aeabi_dcmpgt>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <main+0xc8>
			pitch = 40;
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <main+0x1a0>)
 8001970:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		if (pitch < -40) {
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <main+0x1a4>)
 800197a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800197e:	f7ff f881 	bl	8000a84 <__aeabi_dcmplt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <main+0xe6>
			pitch = -40;
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <main+0x1a4>)
 800198e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		if (roll > 60) {
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <main+0x1a8>)
 8001998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800199c:	f7ff f890 	bl	8000ac0 <__aeabi_dcmpgt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <main+0x104>
			roll = 60;
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <main+0x1a8>)
 80019ac:	e9c7 2300 	strd	r2, r3, [r7]
		}
		if (roll < -60) {
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <main+0x1ac>)
 80019b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019ba:	f7ff f863 	bl	8000a84 <__aeabi_dcmplt>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <main+0x122>
			roll = -60;
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <main+0x1ac>)
 80019ca:	e9c7 2300 	strd	r2, r3, [r7]
		}

		//20 & -20 degree max
		pitch += 0x78;
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <main+0x1b0>)
 80019d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019d8:	f7fe fc2c 	bl	8000234 <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		//29 & -29 degree max
		roll += 0x78;
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <main+0x1b0>)
 80019ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019ee:	f7fe fc21 	bl	8000234 <__adddf3>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9c7 2300 	strd	r2, r3, [r7]

		sendGyroData(pitch, roll);
 80019fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019fe:	f7ff f87f 	bl	8000b00 <__aeabi_d2iz>
 8001a02:	4604      	mov	r4, r0
 8001a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a08:	f7ff f87a 	bl	8000b00 <__aeabi_d2iz>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4620      	mov	r0, r4
 8001a12:	f000 f933 	bl	8001c7c <sendGyroData>

		if (BUTTON_STATE(CALIBRATE_MPU_BUTTON) == 1) {
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fcb2 	bl	8001380 <BUTTON_STATE>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <main+0x186>
			saveXToFlash(pitch);
 8001a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a26:	f7ff fed1 	bl	80017cc <saveXToFlash>
			saveYToFlash(roll);
 8001a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a2e:	f7ff fedf 	bl	80017f0 <saveYToFlash>
		}

		HAL_Delay(200);
 8001a32:	20c8      	movs	r0, #200	; 0xc8
 8001a34:	f000 fdf2 	bl	800261c <HAL_Delay>
	while (1) {
 8001a38:	e770      	b.n	800191c <main+0x70>
 8001a3a:	bf00      	nop
 8001a3c:	20000158 	.word	0x20000158
 8001a40:	20000180 	.word	0x20000180
 8001a44:	20000130 	.word	0x20000130
 8001a48:	200001e0 	.word	0x200001e0
 8001a4c:	40440000 	.word	0x40440000
 8001a50:	c0440000 	.word	0xc0440000
 8001a54:	404e0000 	.word	0x404e0000
 8001a58:	c04e0000 	.word	0xc04e0000
 8001a5c:	405e0000 	.word	0x405e0000

08001a60 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	; 0x50
 8001a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	2238      	movs	r2, #56	; 0x38
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fd36 	bl	80054e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a86:	2301      	movs	r3, #1
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = 25;
 8001a8a:	2319      	movs	r3, #25
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fffe 	bl	8004a9c <HAL_RCC_OscConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0x4a>
		Error_Handler();
 8001aa6:	f000 f91f 	bl	8001ce8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001aaa:	230f      	movs	r3, #15
 8001aac:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fb00 	bl	80050c8 <HAL_RCC_ClockConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0x72>
		Error_Handler();
 8001ace:	f000 f90b 	bl	8001ce8 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8001ad2:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <SystemClock_Config+0x80>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	3750      	adds	r7, #80	; 0x50
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	42420070 	.word	0x42420070

08001ae4 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001aee:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001af0:	2100      	movs	r1, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 ffcf 	bl	8002a96 <HAL_CAN_GetRxMessage>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d129      	bne.n	8001b52 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>

		switch ((uint32_t) hcan->Instance) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a18      	ldr	r2, [pc, #96]	; (8001b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001b08:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d122      	bne.n	8001b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN2:
			CAN1_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001b16:	6912      	ldr	r2, [r2, #16]
 8001b18:	b2d1      	uxtb	r1, r2
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f825 	bl	8001b6c <CAN1_Transmit_manual>
			break;
 8001b22:	e017      	b.n	8001b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		case (uint32_t) CAN1:
			if (RxHeader.StdId == 0x350 && RxData[0] == 0xc7) {
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8001b2c:	d106      	bne.n	8001b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2bc7      	cmp	r3, #199	; 0xc7
 8001b34:	d102      	bne.n	8001b3c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
				RxData[0] = 0xc6;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001b38:	22c6      	movs	r2, #198	; 0xc6
 8001b3a:	701a      	strb	r2, [r3, #0]
			}

			CAN2_Transmit_manual(RxHeader.StdId, RxHeader.DLC, RxData);
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001b44:	6912      	ldr	r2, [r2, #16]
 8001b46:	b2d1      	uxtb	r1, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f852 	bl	8001bf4 <CAN2_Transmit_manual>
			break;
 8001b50:	e000      	b.n	8001b54 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
		}

	}
 8001b52:	bf00      	nop

}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000025c 	.word	0x2000025c
 8001b60:	2000027c 	.word	0x2000027c
 8001b64:	40006400 	.word	0x40006400
 8001b68:	40006800 	.word	0x40006800

08001b6c <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	603a      	str	r2, [r7, #0]
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <CAN1_Transmit_manual+0x74>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a18      	ldr	r2, [pc, #96]	; (8001be4 <CAN1_Transmit_manual+0x78>)
 8001b82:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <CAN1_Transmit_manual+0x74>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <CAN1_Transmit_manual+0x78>)
 8001b8a:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001b92:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	785a      	ldrb	r2, [r3, #1]
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001b9a:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	789a      	ldrb	r2, [r3, #2]
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001ba2:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	78da      	ldrb	r2, [r3, #3]
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001baa:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	791a      	ldrb	r2, [r3, #4]
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001bb2:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	795a      	ldrb	r2, [r3, #5]
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001bba:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	799a      	ldrb	r2, [r3, #6]
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001bc2:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	79da      	ldrb	r2, [r3, #7]
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001bca:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <CAN1_Transmit_manual+0x80>)
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <CAN1_Transmit_manual+0x7c>)
 8001bd0:	4904      	ldr	r1, [pc, #16]	; (8001be4 <CAN1_Transmit_manual+0x78>)
 8001bd2:	4807      	ldr	r0, [pc, #28]	; (8001bf0 <CAN1_Transmit_manual+0x84>)
 8001bd4:	f000 fe85 	bl	80028e2 <HAL_CAN_AddTxMessage>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000027c 	.word	0x2000027c
 8001be4:	20000264 	.word	0x20000264
 8001be8:	20000250 	.word	0x20000250
 8001bec:	20000258 	.word	0x20000258
 8001bf0:	20000158 	.word	0x20000158

08001bf4 <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	603a      	str	r2, [r7, #0]
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	460b      	mov	r3, r1
 8001c02:	717b      	strb	r3, [r7, #5]
	TxHeader.StdId = RxHeader.StdId;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <CAN2_Transmit_manual+0x74>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <CAN2_Transmit_manual+0x78>)
 8001c0a:	6013      	str	r3, [r2, #0]
	TxHeader.DLC = RxHeader.DLC;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <CAN2_Transmit_manual+0x74>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	4a16      	ldr	r2, [pc, #88]	; (8001c6c <CAN2_Transmit_manual+0x78>)
 8001c12:	6113      	str	r3, [r2, #16]
	TxData[0] = DATA_CAN[0];
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c1a:	701a      	strb	r2, [r3, #0]
	TxData[1] = DATA_CAN[1];
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	785a      	ldrb	r2, [r3, #1]
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c22:	705a      	strb	r2, [r3, #1]
	TxData[2] = DATA_CAN[2];
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	789a      	ldrb	r2, [r3, #2]
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c2a:	709a      	strb	r2, [r3, #2]
	TxData[3] = DATA_CAN[3];
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	78da      	ldrb	r2, [r3, #3]
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c32:	70da      	strb	r2, [r3, #3]
	TxData[4] = DATA_CAN[4];
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	791a      	ldrb	r2, [r3, #4]
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c3a:	711a      	strb	r2, [r3, #4]
	TxData[5] = DATA_CAN[5];
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	795a      	ldrb	r2, [r3, #5]
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c42:	715a      	strb	r2, [r3, #5]
	TxData[6] = DATA_CAN[6];
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	799a      	ldrb	r2, [r3, #6]
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c4a:	719a      	strb	r2, [r3, #6]
	TxData[7] = DATA_CAN[7];
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	79da      	ldrb	r2, [r3, #7]
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c52:	71da      	strb	r2, [r3, #7]
	HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <CAN2_Transmit_manual+0x80>)
 8001c56:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <CAN2_Transmit_manual+0x7c>)
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <CAN2_Transmit_manual+0x78>)
 8001c5a:	4807      	ldr	r0, [pc, #28]	; (8001c78 <CAN2_Transmit_manual+0x84>)
 8001c5c:	f000 fe41 	bl	80028e2 <HAL_CAN_AddTxMessage>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2000027c 	.word	0x2000027c
 8001c6c:	20000264 	.word	0x20000264
 8001c70:	20000250 	.word	0x20000250
 8001c74:	20000258 	.word	0x20000258
 8001c78:	20000130 	.word	0x20000130

08001c7c <sendGyroData>:
void sendGyroData(int x, int y) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	gyroHeader.StdId = 0x685;
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <sendGyroData+0x5c>)
 8001c88:	f240 6285 	movw	r2, #1669	; 0x685
 8001c8c:	601a      	str	r2, [r3, #0]
	gyroHeader.DLC = 8;
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <sendGyroData+0x5c>)
 8001c90:	2208      	movs	r2, #8
 8001c92:	611a      	str	r2, [r3, #16]
	gyroData[0] = y;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <sendGyroData+0x60>)
 8001c9a:	701a      	strb	r2, [r3, #0]
	gyroData[1] = x;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <sendGyroData+0x60>)
 8001ca2:	705a      	strb	r2, [r3, #1]
	gyroData[3] = 0x00;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <sendGyroData+0x60>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	70da      	strb	r2, [r3, #3]
	gyroData[4] = 0x00;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <sendGyroData+0x60>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	711a      	strb	r2, [r3, #4]
	gyroData[5] = 0x00;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <sendGyroData+0x60>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	715a      	strb	r2, [r3, #5]
	gyroData[6] = 0x00;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <sendGyroData+0x60>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	719a      	strb	r2, [r3, #6]
	gyroData[7] = 0x00;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <sendGyroData+0x60>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan1, &gyroHeader, gyroData, &TxMailbox);
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <sendGyroData+0x64>)
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <sendGyroData+0x60>)
 8001cc6:	4904      	ldr	r1, [pc, #16]	; (8001cd8 <sendGyroData+0x5c>)
 8001cc8:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <sendGyroData+0x68>)
 8001cca:	f000 fe0a 	bl	80028e2 <HAL_CAN_AddTxMessage>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000238 	.word	0x20000238
 8001cdc:	200001d8 	.word	0x200001d8
 8001ce0:	20000258 	.word	0x20000258
 8001ce4:	20000158 	.word	0x20000158

08001ce8 <Error_Handler>:

void Error_Handler(void) {
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cf0:	e7fe      	b.n	8001cf0 <Error_Handler+0x8>

08001cf2 <MPU6050_Init>:

Kalman_t KalmanX = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f };

Kalman_t KalmanY = { .Q_angle = 0.001f, .Q_bias = 0.003f, .R_measure = 0.03f, };

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b088      	sub	sp, #32
 8001cf6:	af04      	add	r7, sp, #16
 8001cf8:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	f107 030f 	add.w	r3, r7, #15
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	2275      	movs	r2, #117	; 0x75
 8001d0c:	21d0      	movs	r1, #208	; 0xd0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f002 f902 	bl	8003f18 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b68      	cmp	r3, #104	; 0x68
 8001d18:	d13d      	bne.n	8001d96 <MPU6050_Init+0xa4>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 8001d1e:	2364      	movs	r3, #100	; 0x64
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	f107 030e 	add.w	r3, r7, #14
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	226b      	movs	r2, #107	; 0x6b
 8001d30:	21d0      	movs	r1, #208	; 0xd0
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f001 fff6 	bl	8003d24 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 8001d3c:	2364      	movs	r3, #100	; 0x64
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	f107 030e 	add.w	r3, r7, #14
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	2219      	movs	r2, #25
 8001d4e:	21d0      	movs	r1, #208	; 0xd0
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 ffe7 	bl	8003d24 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 8001d5a:	2364      	movs	r3, #100	; 0x64
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	2301      	movs	r3, #1
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	f107 030e 	add.w	r3, r7, #14
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	221c      	movs	r2, #28
 8001d6c:	21d0      	movs	r1, #208	; 0xd0
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f001 ffd8 	bl	8003d24 <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x00;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,
 8001d78:	2364      	movs	r3, #100	; 0x64
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	f107 030e 	add.w	r3, r7, #14
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2301      	movs	r3, #1
 8001d88:	221b      	movs	r2, #27
 8001d8a:	21d0      	movs	r1, #208	; 0xd0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f001 ffc9 	bl	8003d24 <HAL_I2C_Mem_Write>
				i2c_timeout);
		return 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	e000      	b.n	8001d98 <MPU6050_Init+0xa6>
	}
	return 1;
 8001d96:	2301      	movs	r3, #1
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <MPU6050_Read_All>:
	temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
			+ (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da4:	b094      	sub	sp, #80	; 0x50
 8001da6:	af04      	add	r7, sp, #16
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14,
 8001dac:	2364      	movs	r3, #100	; 0x64
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	230e      	movs	r3, #14
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	223b      	movs	r2, #59	; 0x3b
 8001dbe:	21d0      	movs	r1, #208	; 0xd0
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f002 f8a9 	bl	8003f18 <HAL_I2C_Mem_Read>
			i2c_timeout);

	DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001dc6:	7a3b      	ldrb	r3, [r7, #8]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001dd8:	7abb      	ldrb	r3, [r7, #10]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001dea:	7b3b      	ldrb	r3, [r7, #12]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	7b7b      	ldrb	r3, [r7, #13]
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	809a      	strh	r2, [r3, #4]
	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	4313      	orrs	r3, r2
 8001e08:	86fb      	strh	r3, [r7, #54]	; 0x36
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001e0a:	7c3b      	ldrb	r3, [r7, #16]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	7c7b      	ldrb	r3, [r7, #17]
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001e1c:	7cbb      	ldrb	r3, [r7, #18]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	7cfb      	ldrb	r3, [r7, #19]
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	4313      	orrs	r3, r2
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001e2e:	7d3b      	ldrb	r3, [r7, #20]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	7d7b      	ldrb	r3, [r7, #21]
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b21a      	sxth	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb40 	bl	80004cc <__aeabi_i2d>
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4bb7      	ldr	r3, [pc, #732]	; (8002130 <MPU6050_Read_All+0x390>)
 8001e52:	f7fe fccf 	bl	80007f4 <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb30 	bl	80004cc <__aeabi_i2d>
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	4baf      	ldr	r3, [pc, #700]	; (8002130 <MPU6050_Read_All+0x390>)
 8001e72:	f7fe fcbf 	bl	80007f4 <__aeabi_ddiv>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb20 	bl	80004cc <__aeabi_i2d>
 8001e8c:	a3a2      	add	r3, pc, #648	; (adr r3, 8002118 <MPU6050_Read_All+0x378>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fcaf 	bl	80007f4 <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0
 8001ea0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff0d 	bl	8000cc4 <__aeabi_i2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	49a1      	ldr	r1, [pc, #644]	; (8002134 <MPU6050_Read_All+0x394>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f810 	bl	8000ed4 <__aeabi_fdiv>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	49a0      	ldr	r1, [pc, #640]	; (8002138 <MPU6050_Read_All+0x398>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fe4f 	bl	8000b5c <__addsf3>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
			+ (float) 36.53);
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fafd 	bl	80004cc <__aeabi_i2d>
 8001ed2:	a393      	add	r3, pc, #588	; (adr r3, 8002120 <MPU6050_Read_All+0x380>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fc8c 	bl	80007f4 <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe faed 	bl	80004cc <__aeabi_i2d>
 8001ef2:	a38b      	add	r3, pc, #556	; (adr r3, 8002120 <MPU6050_Read_All+0x380>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fc7c 	bl	80007f4 <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fadd 	bl	80004cc <__aeabi_i2d>
 8001f12:	a383      	add	r3, pc, #524	; (adr r3, 8002120 <MPU6050_Read_All+0x380>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe fc6c 	bl	80007f4 <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	6839      	ldr	r1, [r7, #0]
 8001f22:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve
	double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001f26:	f000 fb6f 	bl	8002608 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b83      	ldr	r3, [pc, #524]	; (800213c <MPU6050_Read_All+0x39c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe faba 	bl	80004ac <__aeabi_ui2d>
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b80      	ldr	r3, [pc, #512]	; (8002140 <MPU6050_Read_All+0x3a0>)
 8001f3e:	f7fe fc59 	bl	80007f4 <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	timer = HAL_GetTick();
 8001f4a:	f000 fb5d 	bl	8002608 <HAL_GetTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a7a      	ldr	r2, [pc, #488]	; (800213c <MPU6050_Read_All+0x39c>)
 8001f52:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f62:	fb03 f202 	mul.w	r2, r3, r2
					+ DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f74:	fb03 f301 	mul.w	r3, r3, r1
 8001f78:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe faa6 	bl	80004cc <__aeabi_i2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f003 fc42 	bl	8005810 <sqrt>
 8001f8c:	e9c7 0108 	strd	r0, r1, [r7, #32]
	if (roll_sqrt != 0.0) {
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f9c:	f7fe fd68 	bl	8000a70 <__aeabi_dcmpeq>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <MPU6050_Read_All+0x23a>
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fa8d 	bl	80004cc <__aeabi_i2d>
 8001fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fb6:	f7fe fc1d 	bl	80007f4 <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f003 fa95 	bl	80054f0 <atan>
 8001fc6:	a358      	add	r3, pc, #352	; (adr r3, 8002128 <MPU6050_Read_All+0x388>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fae8 	bl	80005a0 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001fd8:	e005      	b.n	8001fe6 <MPU6050_Read_All+0x246>
	} else {
		roll = 0.0;
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fec:	425b      	negs	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa6c 	bl	80004cc <__aeabi_i2d>
 8001ff4:	4682      	mov	sl, r0
 8001ff6:	468b      	mov	fp, r1
			DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	double pitch = atan2(-DataStruct->Accel_X_RAW,
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa64 	bl	80004cc <__aeabi_i2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4650      	mov	r0, sl
 800200a:	4659      	mov	r1, fp
 800200c:	f003 fbfd 	bl	800580a <atan2>
 8002010:	a345      	add	r3, pc, #276	; (adr r3, 8002128 <MPU6050_Read_All+0x388>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fac3 	bl	80005a0 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90)
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <MPU6050_Read_All+0x3a4>)
 8002028:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800202c:	f7fe fd2a 	bl	8000a84 <__aeabi_dcmplt>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <MPU6050_Read_All+0x2ac>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <MPU6050_Read_All+0x3a8>)
 8002042:	f7fe fd3d 	bl	8000ac0 <__aeabi_dcmpgt>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d114      	bne.n	8002076 <MPU6050_Read_All+0x2d6>
			|| (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <MPU6050_Read_All+0x3a8>)
 8002052:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002056:	f7fe fd33 	bl	8000ac0 <__aeabi_dcmpgt>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <MPU6050_Read_All+0x2ec>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <MPU6050_Read_All+0x3a4>)
 800206c:	f7fe fd0a 	bl	8000a84 <__aeabi_dcmplt>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <MPU6050_Read_All+0x2ec>
		KalmanY.angle = pitch;
 8002076:	4935      	ldr	r1, [pc, #212]	; (800214c <MPU6050_Read_All+0x3ac>)
 8002078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800207c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 8002080:	6839      	ldr	r1, [r7, #0]
 8002082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002086:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800208a:	e012      	b.n	80020b2 <MPU6050_Read_All+0x312>
	} else {
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch,
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002092:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800209a:	e9cd 2300 	strd	r2, r3, [sp]
 800209e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a2:	482a      	ldr	r0, [pc, #168]	; (800214c <MPU6050_Read_All+0x3ac>)
 80020a4:	f000 f856 	bl	8002154 <Kalman_getAngle>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	6839      	ldr	r1, [r7, #0]
 80020ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
				DataStruct->Gy, dt);
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80020b8:	4690      	mov	r8, r2
 80020ba:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MPU6050_Read_All+0x3a8>)
 80020c4:	4640      	mov	r0, r8
 80020c6:	4649      	mov	r1, r9
 80020c8:	f7fe fcfa 	bl	8000ac0 <__aeabi_dcmpgt>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <MPU6050_Read_All+0x344>
		DataStruct->Gx = -DataStruct->Gx;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020d8:	4614      	mov	r4, r2
 80020da:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx,
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020f2:	e9cd 2300 	strd	r2, r3, [sp]
 80020f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020fa:	4815      	ldr	r0, [pc, #84]	; (8002150 <MPU6050_Read_All+0x3b0>)
 80020fc:	f000 f82a 	bl	8002154 <Kalman_getAngle>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	6839      	ldr	r1, [r7, #0]
 8002106:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			dt);
}
 800210a:	bf00      	nop
 800210c:	3740      	adds	r7, #64	; 0x40
 800210e:	46bd      	mov	sp, r7
 8002110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002114:	f3af 8000 	nop.w
 8002118:	00000000 	.word	0x00000000
 800211c:	40cc2900 	.word	0x40cc2900
 8002120:	00000000 	.word	0x00000000
 8002124:	40606000 	.word	0x40606000
 8002128:	1a63c1f8 	.word	0x1a63c1f8
 800212c:	404ca5dc 	.word	0x404ca5dc
 8002130:	40d00000 	.word	0x40d00000
 8002134:	43aa0000 	.word	0x43aa0000
 8002138:	42121eb8 	.word	0x42121eb8
 800213c:	20000298 	.word	0x20000298
 8002140:	408f4000 	.word	0x408f4000
 8002144:	c0568000 	.word	0xc0568000
 8002148:	40568000 	.word	0x40568000
 800214c:	20000050 	.word	0x20000050
 8002150:	20000008 	.word	0x20000008

08002154 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate,
		double dt) {
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b092      	sub	sp, #72	; 0x48
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	e9c7 2300 	strd	r2, r3, [r7]
	double rate = newRate - Kalman->bias;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002166:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800216a:	f7fe f861 	bl	8000230 <__aeabi_dsub>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt * rate;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800217c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002180:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002184:	f7fe fa0c 	bl	80005a0 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	f7fe f850 	bl	8000234 <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Kalman->P[0][0] += dt
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80021aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80021ae:	f7fe f9f7 	bl	80005a0 <__aeabi_dmul>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021c0:	f7fe f836 	bl	8000230 <__aeabi_dsub>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80021d2:	f7fe f82d 	bl	8000230 <__aeabi_dsub>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
					+ Kalman->Q_angle);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe f826 	bl	8000234 <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 80021f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80021f4:	f7fe f9d4 	bl	80005a0 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
	Kalman->P[0][0] += dt
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe f818 	bl	8000234 <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800221a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800221e:	f7fe f9bf 	bl	80005a0 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f7fe f801 	bl	8000230 <__aeabi_dsub>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	68f9      	ldr	r1, [r7, #12]
 8002234:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002244:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002248:	f7fe f9aa 	bl	80005a0 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4620      	mov	r0, r4
 8002252:	4629      	mov	r1, r5
 8002254:	f7fd ffec 	bl	8000230 <__aeabi_dsub>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800226e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002272:	f7fe f995 	bl	80005a0 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4620      	mov	r0, r4
 800227c:	4629      	mov	r1, r5
 800227e:	f7fd ffd9 	bl	8000234 <__adddf3>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	double S = Kalman->P[0][0] + Kalman->R_measure;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002298:	f7fd ffcc 	bl	8000234 <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double K[2];
	K[0] = Kalman->P[0][0] / S;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80022aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022ae:	f7fe faa1 	bl	80007f4 <__aeabi_ddiv>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022c4:	f7fe fa96 	bl	80007f4 <__aeabi_ddiv>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double y = newAngle - Kalman->angle;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022da:	f7fd ffa9 	bl	8000230 <__aeabi_dsub>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	Kalman->angle += K[0] * y;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80022ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022f4:	f7fe f954 	bl	80005a0 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4620      	mov	r0, r4
 80022fe:	4629      	mov	r1, r5
 8002300:	f7fd ff98 	bl	8000234 <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias += K[1] * y;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002314:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800231c:	f7fe f940 	bl	80005a0 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4620      	mov	r0, r4
 8002326:	4629      	mov	r1, r5
 8002328:	f7fd ff84 	bl	8000234 <__adddf3>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	68f9      	ldr	r1, [r7, #12]
 8002332:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800233c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002346:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002350:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002358:	f7fe f922 	bl	80005a0 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4620      	mov	r0, r4
 8002362:	4629      	mov	r1, r5
 8002364:	f7fd ff64 	bl	8000230 <__aeabi_dsub>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002378:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800237c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002380:	f7fe f90e 	bl	80005a0 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4620      	mov	r0, r4
 800238a:	4629      	mov	r1, r5
 800238c:	f7fd ff50 	bl	8000230 <__aeabi_dsub>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80023a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023a8:	f7fe f8fa 	bl	80005a0 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4620      	mov	r0, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	f7fd ff3c 	bl	8000230 <__aeabi_dsub>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80023c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023d0:	f7fe f8e6 	bl	80005a0 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fd ff28 	bl	8000230 <__aeabi_dsub>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	3748      	adds	r7, #72	; 0x48
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_MspInit+0x5c>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_MspInit+0x5c>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6193      	str	r3, [r2, #24]
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_MspInit+0x5c>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_MspInit+0x5c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_MspInit+0x5c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	61d3      	str	r3, [r2, #28]
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_MspInit+0x5c>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_MspInit+0x60>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_MspInit+0x60>)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000

08002460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <NMI_Handler+0x4>

08002466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <MemManage_Handler+0x4>

08002472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <UsageFault_Handler+0x4>

0800247e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a6:	f000 f89d 	bl	80025e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <CAN1_TX_IRQHandler+0x10>)
 80024b6:	f000 fc24 	bl	8002d02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000158 	.word	0x20000158

080024c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <CAN1_RX0_IRQHandler+0x10>)
 80024ca:	f000 fc1a 	bl	8002d02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000158 	.word	0x20000158

080024d8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <CAN1_RX1_IRQHandler+0x10>)
 80024de:	f000 fc10 	bl	8002d02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000158 	.word	0x20000158

080024ec <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <CAN1_SCE_IRQHandler+0x10>)
 80024f2:	f000 fc06 	bl	8002d02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000158 	.word	0x20000158

08002500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250e:	490d      	ldr	r1, [pc, #52]	; (8002544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002514:	e002      	b.n	800251c <LoopCopyDataInit>

08002516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251a:	3304      	adds	r3, #4

0800251c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800251c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002520:	d3f9      	bcc.n	8002516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002524:	4c0a      	ldr	r4, [pc, #40]	; (8002550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002528:	e001      	b.n	800252e <LoopFillZerobss>

0800252a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800252c:	3204      	adds	r2, #4

0800252e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002530:	d3fb      	bcc.n	800252a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002532:	f7ff ffe5 	bl	8002500 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002536:	f002 ffaf 	bl	8005498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800253a:	f7ff f9b7 	bl	80018ac <main>
  bx lr
 800253e:	4770      	bx	lr
  ldr r0, =_sdata
 8002540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002544:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8002548:	08005c38 	.word	0x08005c38
  ldr r2, =_sbss
 800254c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002550:	200002c0 	.word	0x200002c0

08002554 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC1_2_IRQHandler>
	...

08002558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_Init+0x28>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_Init+0x28>)
 8002562:	f043 0310 	orr.w	r3, r3, #16
 8002566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002568:	2003      	movs	r0, #3
 800256a:	f000 feb9 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800256e:	200f      	movs	r0, #15
 8002570:	f000 f808 	bl	8002584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002574:	f7ff ff42 	bl	80023fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000

08002584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_InitTick+0x54>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259a:	fbb3 f3f1 	udiv	r3, r3, r1
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fed1 	bl	800334a <HAL_SYSTICK_Config>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00e      	b.n	80025d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	d80a      	bhi.n	80025ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c0:	f000 fe99 	bl	80032f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c4:	4a06      	ldr	r2, [pc, #24]	; (80025e0 <HAL_InitTick+0x5c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000098 	.word	0x20000098
 80025dc:	200000a0 	.word	0x200000a0
 80025e0:	2000009c 	.word	0x2000009c

080025e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_IncTick+0x1c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_IncTick+0x20>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	4a03      	ldr	r2, [pc, #12]	; (8002604 <HAL_IncTick+0x20>)
 80025f6:	6013      	str	r3, [r2, #0]
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	200000a0 	.word	0x200000a0
 8002604:	2000029c 	.word	0x2000029c

08002608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <HAL_GetTick+0x10>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	2000029c 	.word	0x2000029c

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff fff0 	bl	8002608 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffe0 	bl	8002608 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200000a0 	.word	0x200000a0

08002664 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0ed      	b.n	8002852 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe ff0a 	bl	800149c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002698:	f7ff ffb6 	bl	8002608 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800269e:	e012      	b.n	80026c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026a0:	f7ff ffb2 	bl	8002608 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	d90b      	bls.n	80026c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2205      	movs	r2, #5
 80026be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0c5      	b.n	8002852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0e5      	beq.n	80026a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0202 	bic.w	r2, r2, #2
 80026e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e4:	f7ff ff90 	bl	8002608 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026ea:	e012      	b.n	8002712 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ec:	f7ff ff8c 	bl	8002608 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b0a      	cmp	r3, #10
 80026f8:	d90b      	bls.n	8002712 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2205      	movs	r2, #5
 800270a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e09f      	b.n	8002852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e5      	bne.n	80026ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e007      	b.n	800274a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7e5b      	ldrb	r3, [r3, #25]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e007      	b.n	8002774 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e9b      	ldrb	r3, [r3, #26]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d108      	bne.n	800278e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e007      	b.n	800279e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0220 	bic.w	r2, r2, #32
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7edb      	ldrb	r3, [r3, #27]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0210 	bic.w	r2, r2, #16
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e007      	b.n	80027c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0210 	orr.w	r2, r2, #16
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7f1b      	ldrb	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d108      	bne.n	80027e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e007      	b.n	80027f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7f5b      	ldrb	r3, [r3, #29]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d108      	bne.n	800280c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0204 	orr.w	r2, r2, #4
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e007      	b.n	800281c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	ea42 0103 	orr.w	r1, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d12e      	bne.n	80028cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002886:	f7ff febf 	bl	8002608 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800288c:	e012      	b.n	80028b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800288e:	f7ff febb 	bl	8002608 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b0a      	cmp	r3, #10
 800289a:	d90b      	bls.n	80028b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2205      	movs	r2, #5
 80028ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e012      	b.n	80028da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e5      	bne.n	800288e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e006      	b.n	80028da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b089      	sub	sp, #36	; 0x24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002900:	7ffb      	ldrb	r3, [r7, #31]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d003      	beq.n	800290e <HAL_CAN_AddTxMessage+0x2c>
 8002906:	7ffb      	ldrb	r3, [r7, #31]
 8002908:	2b02      	cmp	r3, #2
 800290a:	f040 80b8 	bne.w	8002a7e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a0 	beq.w	8002a6e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	0e1b      	lsrs	r3, r3, #24
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d907      	bls.n	800294e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e09e      	b.n	8002a8c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800294e:	2201      	movs	r2, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10d      	bne.n	800297c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800296a:	68f9      	ldr	r1, [r7, #12]
 800296c:	6809      	ldr	r1, [r1, #0]
 800296e:	431a      	orrs	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3318      	adds	r3, #24
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	440b      	add	r3, r1
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e00f      	b.n	800299c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002986:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002990:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3318      	adds	r3, #24
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	440b      	add	r3, r1
 800299a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6819      	ldr	r1, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3318      	adds	r3, #24
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	440b      	add	r3, r1
 80029ac:	3304      	adds	r3, #4
 80029ae:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	7d1b      	ldrb	r3, [r3, #20]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d111      	bne.n	80029dc <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3318      	adds	r3, #24
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	4413      	add	r3, r2
 80029c4:	3304      	adds	r3, #4
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	6811      	ldr	r1, [r2, #0]
 80029cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3318      	adds	r3, #24
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	440b      	add	r3, r1
 80029d8:	3304      	adds	r3, #4
 80029da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3307      	adds	r3, #7
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	061a      	lsls	r2, r3, #24
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3306      	adds	r3, #6
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3305      	adds	r3, #5
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	4313      	orrs	r3, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	3204      	adds	r2, #4
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	4610      	mov	r0, r2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	6811      	ldr	r1, [r2, #0]
 8002a04:	ea43 0200 	orr.w	r2, r3, r0
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3303      	adds	r3, #3
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	061a      	lsls	r2, r3, #24
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3302      	adds	r3, #2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	4610      	mov	r0, r2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	6811      	ldr	r1, [r2, #0]
 8002a3a:	ea43 0200 	orr.w	r2, r3, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3318      	adds	r3, #24
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	4413      	add	r3, r2
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	6811      	ldr	r1, [r2, #0]
 8002a5c:	f043 0201 	orr.w	r2, r3, #1
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3318      	adds	r3, #24
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	440b      	add	r3, r1
 8002a68:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e00e      	b.n	8002a8c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e006      	b.n	8002a8c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
  }
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3724      	adds	r7, #36	; 0x24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aaa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d003      	beq.n	8002aba <HAL_CAN_GetRxMessage+0x24>
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	f040 80f3 	bne.w	8002ca0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10e      	bne.n	8002ade <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0e7      	b.n	8002cae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0d8      	b.n	8002cae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	331b      	adds	r3, #27
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0204 	and.w	r2, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	331b      	adds	r3, #27
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	4413      	add	r3, r2
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0d5b      	lsrs	r3, r3, #21
 8002b2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e00b      	b.n	8002b4c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	331b      	adds	r3, #27
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4413      	add	r3, r2
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	08db      	lsrs	r3, r3, #3
 8002b44:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	331b      	adds	r3, #27
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	4413      	add	r3, r2
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0202 	and.w	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	331b      	adds	r3, #27
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3304      	adds	r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	331b      	adds	r3, #27
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	331b      	adds	r3, #27
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0a1a      	lsrs	r2, r3, #8
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0c1a      	lsrs	r2, r3, #16
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	3302      	adds	r3, #2
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0e1a      	lsrs	r2, r3, #24
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	3303      	adds	r3, #3
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3304      	adds	r3, #4
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0a1a      	lsrs	r2, r3, #8
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	3305      	adds	r3, #5
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0c1a      	lsrs	r2, r3, #16
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3306      	adds	r3, #6
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0e1a      	lsrs	r2, r3, #24
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3307      	adds	r3, #7
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0220 	orr.w	r2, r2, #32
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	e007      	b.n	8002c9c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0220 	orr.w	r2, r2, #32
 8002c9a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e006      	b.n	8002cae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d002      	beq.n	8002cd6 <HAL_CAN_ActivateNotification+0x1e>
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d109      	bne.n	8002cea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6959      	ldr	r1, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e006      	b.n	8002cf8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
  }
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b08a      	sub	sp, #40	; 0x28
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d07c      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d023      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f983 	bl	8003070 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d6a:	e016      	b.n	8002d9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	e00c      	b.n	8002d9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d004      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	e002      	b.n	8002d9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f986 	bl	80030a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d024      	beq.n	8002dee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f962 	bl	8003082 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dbe:	e016      	b.n	8002dee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e00c      	b.n	8002dee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e002      	b.n	8002dee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f965 	bl	80030b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d024      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f941 	bl	8003094 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e12:	e016      	b.n	8002e42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	e00c      	b.n	8002e42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3a:	e002      	b.n	8002e42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f944 	bl	80030ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00c      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2210      	movs	r2, #16
 8002e64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2208      	movs	r2, #8
 8002e80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f92a 	bl	80030dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fe fe1f 	bl	8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f90a 	bl	8003100 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8f2 	bl	80030ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2210      	movs	r2, #16
 8002f24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8f3 	bl	8003112 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2208      	movs	r2, #8
 8002f46:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f8eb 	bl	8003124 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d07b      	beq.n	8003050 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d072      	beq.n	8003048 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d043      	beq.n	8003048 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03e      	beq.n	8003048 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd0:	2b60      	cmp	r3, #96	; 0x60
 8002fd2:	d02b      	beq.n	800302c <HAL_CAN_IRQHandler+0x32a>
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d82e      	bhi.n	8003036 <HAL_CAN_IRQHandler+0x334>
 8002fd8:	2b50      	cmp	r3, #80	; 0x50
 8002fda:	d022      	beq.n	8003022 <HAL_CAN_IRQHandler+0x320>
 8002fdc:	2b50      	cmp	r3, #80	; 0x50
 8002fde:	d82a      	bhi.n	8003036 <HAL_CAN_IRQHandler+0x334>
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d019      	beq.n	8003018 <HAL_CAN_IRQHandler+0x316>
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	d826      	bhi.n	8003036 <HAL_CAN_IRQHandler+0x334>
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d010      	beq.n	800300e <HAL_CAN_IRQHandler+0x30c>
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d822      	bhi.n	8003036 <HAL_CAN_IRQHandler+0x334>
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d002      	beq.n	8002ffa <HAL_CAN_IRQHandler+0x2f8>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d005      	beq.n	8003004 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ff8:	e01d      	b.n	8003036 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003002:	e019      	b.n	8003038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	f043 0310 	orr.w	r3, r3, #16
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800300c:	e014      	b.n	8003038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003016:	e00f      	b.n	8003038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003020:	e00a      	b.n	8003038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800302a:	e005      	b.n	8003038 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003034:	e000      	b.n	8003038 <HAL_CAN_IRQHandler+0x336>
            break;
 8003036:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003046:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2204      	movs	r2, #4
 800304e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f867 	bl	8003136 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003068:	bf00      	nop
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003164:	4013      	ands	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	60d3      	str	r3, [r2, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 0307 	and.w	r3, r3, #7
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db0b      	blt.n	80031d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4906      	ldr	r1, [pc, #24]	; (80031e0 <__NVIC_EnableIRQ+0x34>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	6039      	str	r1, [r7, #0]
 80031ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db0a      	blt.n	800320e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <__NVIC_SetPriority+0x4c>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	440b      	add	r3, r1
 8003208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800320c:	e00a      	b.n	8003224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	4908      	ldr	r1, [pc, #32]	; (8003234 <__NVIC_SetPriority+0x50>)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	3b04      	subs	r3, #4
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	440b      	add	r3, r1
 8003222:	761a      	strb	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	e000e100 	.word	0xe000e100
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	; 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f1c3 0307 	rsb	r3, r3, #7
 8003252:	2b04      	cmp	r3, #4
 8003254:	bf28      	it	cs
 8003256:	2304      	movcs	r3, #4
 8003258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3304      	adds	r3, #4
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <NVIC_EncodePriority+0x30>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3b03      	subs	r3, #3
 8003266:	e000      	b.n	800326a <NVIC_EncodePriority+0x32>
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	401a      	ands	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43d9      	mvns	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	4313      	orrs	r3, r2
         );
}
 8003292:	4618      	mov	r0, r3
 8003294:	3724      	adds	r7, #36	; 0x24
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ac:	d301      	bcc.n	80032b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00f      	b.n	80032d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <SysTick_Config+0x40>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ba:	210f      	movs	r1, #15
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c0:	f7ff ff90 	bl	80031e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <SysTick_Config+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <SysTick_Config+0x40>)
 80032cc:	2207      	movs	r2, #7
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff2d 	bl	8003148 <__NVIC_SetPriorityGrouping>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003308:	f7ff ff42 	bl	8003190 <__NVIC_GetPriorityGrouping>
 800330c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f7ff ff90 	bl	8003238 <NVIC_EncodePriority>
 8003318:	4602      	mov	r2, r0
 800331a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff5f 	bl	80031e4 <__NVIC_SetPriority>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff35 	bl	80031ac <__NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ffa2 	bl	800329c <SysTick_Config>
 8003358:	4603      	mov	r3, r0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800337e:	4b2f      	ldr	r3, [pc, #188]	; (800343c <HAL_FLASH_Program+0xd8>)
 8003380:	7e1b      	ldrb	r3, [r3, #24]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_FLASH_Program+0x26>
 8003386:	2302      	movs	r3, #2
 8003388:	e054      	b.n	8003434 <HAL_FLASH_Program+0xd0>
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <HAL_FLASH_Program+0xd8>)
 800338c:	2201      	movs	r2, #1
 800338e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003390:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003394:	f000 f8a8 	bl	80034e8 <FLASH_WaitForLastOperation>
 8003398:	4603      	mov	r3, r0
 800339a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d144      	bne.n	800342c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d102      	bne.n	80033ae <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80033a8:	2301      	movs	r3, #1
 80033aa:	757b      	strb	r3, [r7, #21]
 80033ac:	e007      	b.n	80033be <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d102      	bne.n	80033ba <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80033b4:	2302      	movs	r3, #2
 80033b6:	757b      	strb	r3, [r7, #21]
 80033b8:	e001      	b.n	80033be <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80033ba:	2304      	movs	r3, #4
 80033bc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80033be:	2300      	movs	r3, #0
 80033c0:	75bb      	strb	r3, [r7, #22]
 80033c2:	e02d      	b.n	8003420 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80033c4:	7dbb      	ldrb	r3, [r7, #22]
 80033c6:	005a      	lsls	r2, r3, #1
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	eb02 0c03 	add.w	ip, r2, r3
 80033ce:	7dbb      	ldrb	r3, [r7, #22]
 80033d0:	0119      	lsls	r1, r3, #4
 80033d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d6:	f1c1 0620 	rsb	r6, r1, #32
 80033da:	f1a1 0020 	sub.w	r0, r1, #32
 80033de:	fa22 f401 	lsr.w	r4, r2, r1
 80033e2:	fa03 f606 	lsl.w	r6, r3, r6
 80033e6:	4334      	orrs	r4, r6
 80033e8:	fa23 f000 	lsr.w	r0, r3, r0
 80033ec:	4304      	orrs	r4, r0
 80033ee:	fa23 f501 	lsr.w	r5, r3, r1
 80033f2:	b2a3      	uxth	r3, r4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4660      	mov	r0, ip
 80033f8:	f000 f85a 	bl	80034b0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003400:	f000 f872 	bl	80034e8 <FLASH_WaitForLastOperation>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003408:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HAL_FLASH_Program+0xdc>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <HAL_FLASH_Program+0xdc>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800341a:	7dbb      	ldrb	r3, [r7, #22]
 800341c:	3301      	adds	r3, #1
 800341e:	75bb      	strb	r3, [r7, #22]
 8003420:	7dba      	ldrb	r2, [r7, #22]
 8003422:	7d7b      	ldrb	r3, [r7, #21]
 8003424:	429a      	cmp	r2, r3
 8003426:	d3cd      	bcc.n	80033c4 <HAL_FLASH_Program+0x60>
 8003428:	e000      	b.n	800342c <HAL_FLASH_Program+0xc8>
      {
        break;
 800342a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_FLASH_Program+0xd8>)
 800342e:	2200      	movs	r2, #0
 8003430:	761a      	strb	r2, [r3, #24]

  return status;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
}
 8003434:	4618      	mov	r0, r3
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343c:	200002a0 	.word	0x200002a0
 8003440:	40022000 	.word	0x40022000

08003444 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_FLASH_Unlock+0x40>)
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00d      	beq.n	8003476 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_FLASH_Unlock+0x40>)
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_FLASH_Unlock+0x44>)
 800345e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_FLASH_Unlock+0x40>)
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_FLASH_Unlock+0x48>)
 8003464:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_FLASH_Unlock+0x40>)
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003476:	79fb      	ldrb	r3, [r7, #7]
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000
 8003488:	45670123 	.word	0x45670123
 800348c:	cdef89ab 	.word	0xcdef89ab

08003490 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_FLASH_Lock+0x1c>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_FLASH_Lock+0x1c>)
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000

080034b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <FLASH_Program_HalfWord+0x30>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <FLASH_Program_HalfWord+0x34>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	4a07      	ldr	r2, [pc, #28]	; (80034e4 <FLASH_Program_HalfWord+0x34>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	887a      	ldrh	r2, [r7, #2]
 80034d2:	801a      	strh	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	200002a0 	.word	0x200002a0
 80034e4:	40022000 	.word	0x40022000

080034e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80034f0:	f7ff f88a 	bl	8002608 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80034f6:	e010      	b.n	800351a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034fe:	d00c      	beq.n	800351a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <FLASH_WaitForLastOperation+0x2e>
 8003506:	f7ff f87f 	bl	8002608 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d201      	bcs.n	800351a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e025      	b.n	8003566 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <FLASH_WaitForLastOperation+0x88>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e8      	bne.n	80034f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <FLASH_WaitForLastOperation+0x88>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <FLASH_WaitForLastOperation+0x88>)
 8003534:	2220      	movs	r2, #32
 8003536:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <FLASH_WaitForLastOperation+0x88>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <FLASH_WaitForLastOperation+0x88>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <FLASH_WaitForLastOperation+0x88>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800355c:	f000 f80a 	bl	8003574 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40022000 	.word	0x40022000

08003574 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800357e:	4b23      	ldr	r3, [pc, #140]	; (800360c <FLASH_SetErrorCode+0x98>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800358a:	4b21      	ldr	r3, [pc, #132]	; (8003610 <FLASH_SetErrorCode+0x9c>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <FLASH_SetErrorCode+0x9c>)
 8003594:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f043 0310 	orr.w	r3, r3, #16
 800359c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <FLASH_SetErrorCode+0x98>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <FLASH_SetErrorCode+0x9c>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <FLASH_SetErrorCode+0x9c>)
 80035b4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f043 0304 	orr.w	r3, r3, #4
 80035bc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <FLASH_SetErrorCode+0x98>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <FLASH_SetErrorCode+0x9c>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <FLASH_SetErrorCode+0x9c>)
 80035d4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <FLASH_SetErrorCode+0x98>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <FLASH_SetErrorCode+0x98>)
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f240 1201 	movw	r2, #257	; 0x101
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d106      	bne.n	80035fa <FLASH_SetErrorCode+0x86>
 80035ec:	4b07      	ldr	r3, [pc, #28]	; (800360c <FLASH_SetErrorCode+0x98>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4a06      	ldr	r2, [pc, #24]	; (800360c <FLASH_SetErrorCode+0x98>)
 80035f2:	f023 0301 	bic.w	r3, r3, #1
 80035f6:	61d3      	str	r3, [r2, #28]
}  
 80035f8:	e002      	b.n	8003600 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035fa:	4a04      	ldr	r2, [pc, #16]	; (800360c <FLASH_SetErrorCode+0x98>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60d3      	str	r3, [r2, #12]
}  
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40022000 	.word	0x40022000
 8003610:	200002a0 	.word	0x200002a0

08003614 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003626:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <HAL_FLASHEx_Erase+0xd0>)
 8003628:	7e1b      	ldrb	r3, [r3, #24]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_FLASHEx_Erase+0x1e>
 800362e:	2302      	movs	r3, #2
 8003630:	e053      	b.n	80036da <HAL_FLASHEx_Erase+0xc6>
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_FLASHEx_Erase+0xd0>)
 8003634:	2201      	movs	r2, #1
 8003636:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d116      	bne.n	800366e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003640:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003644:	f7ff ff50 	bl	80034e8 <FLASH_WaitForLastOperation>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d141      	bne.n	80036d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800364e:	2001      	movs	r0, #1
 8003650:	f000 f84c 	bl	80036ec <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003654:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003658:	f7ff ff46 	bl	80034e8 <FLASH_WaitForLastOperation>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_FLASHEx_Erase+0xd4>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_FLASHEx_Erase+0xd4>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6113      	str	r3, [r2, #16]
 800366c:	e031      	b.n	80036d2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800366e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003672:	f7ff ff39 	bl	80034e8 <FLASH_WaitForLastOperation>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d12a      	bne.n	80036d2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003682:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	e019      	b.n	80036c0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800368c:	68b8      	ldr	r0, [r7, #8]
 800368e:	f000 f849 	bl	8003724 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003692:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003696:	f7ff ff27 	bl	80034e8 <FLASH_WaitForLastOperation>
 800369a:	4603      	mov	r3, r0
 800369c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_FLASHEx_Erase+0xd4>)
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	4a11      	ldr	r2, [pc, #68]	; (80036e8 <HAL_FLASHEx_Erase+0xd4>)
 80036a4:	f023 0302 	bic.w	r3, r3, #2
 80036a8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	601a      	str	r2, [r3, #0]
            break;
 80036b6:	e00c      	b.n	80036d2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	02da      	lsls	r2, r3, #11
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d3dc      	bcc.n	800368c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <HAL_FLASHEx_Erase+0xd0>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	761a      	strb	r2, [r3, #24]

  return status;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200002a0 	.word	0x200002a0
 80036e8:	40022000 	.word	0x40022000

080036ec <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <FLASH_MassErase+0x30>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <FLASH_MassErase+0x34>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <FLASH_MassErase+0x34>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <FLASH_MassErase+0x34>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <FLASH_MassErase+0x34>)
 800370c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003710:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	200002a0 	.word	0x200002a0
 8003720:	40022000 	.word	0x40022000

08003724 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <FLASH_PageErase+0x38>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <FLASH_PageErase+0x3c>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <FLASH_PageErase+0x3c>)
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <FLASH_PageErase+0x3c>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <FLASH_PageErase+0x3c>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <FLASH_PageErase+0x3c>)
 800374a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200002a0 	.word	0x200002a0
 8003760:	40022000 	.word	0x40022000

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b08b      	sub	sp, #44	; 0x2c
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003776:	e169      	b.n	8003a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003778:	2201      	movs	r2, #1
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	429a      	cmp	r2, r3
 8003792:	f040 8158 	bne.w	8003a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a9a      	ldr	r2, [pc, #616]	; (8003a04 <HAL_GPIO_Init+0x2a0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d05e      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037a0:	4a98      	ldr	r2, [pc, #608]	; (8003a04 <HAL_GPIO_Init+0x2a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d875      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037a6:	4a98      	ldr	r2, [pc, #608]	; (8003a08 <HAL_GPIO_Init+0x2a4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d058      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037ac:	4a96      	ldr	r2, [pc, #600]	; (8003a08 <HAL_GPIO_Init+0x2a4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d86f      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037b2:	4a96      	ldr	r2, [pc, #600]	; (8003a0c <HAL_GPIO_Init+0x2a8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d052      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037b8:	4a94      	ldr	r2, [pc, #592]	; (8003a0c <HAL_GPIO_Init+0x2a8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d869      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037be:	4a94      	ldr	r2, [pc, #592]	; (8003a10 <HAL_GPIO_Init+0x2ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d04c      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037c4:	4a92      	ldr	r2, [pc, #584]	; (8003a10 <HAL_GPIO_Init+0x2ac>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d863      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037ca:	4a92      	ldr	r2, [pc, #584]	; (8003a14 <HAL_GPIO_Init+0x2b0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d046      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037d0:	4a90      	ldr	r2, [pc, #576]	; (8003a14 <HAL_GPIO_Init+0x2b0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d85d      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d82a      	bhi.n	8003830 <HAL_GPIO_Init+0xcc>
 80037da:	2b12      	cmp	r3, #18
 80037dc:	d859      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037de:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <HAL_GPIO_Init+0x80>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	0800385f 	.word	0x0800385f
 80037e8:	08003839 	.word	0x08003839
 80037ec:	0800384b 	.word	0x0800384b
 80037f0:	0800388d 	.word	0x0800388d
 80037f4:	08003893 	.word	0x08003893
 80037f8:	08003893 	.word	0x08003893
 80037fc:	08003893 	.word	0x08003893
 8003800:	08003893 	.word	0x08003893
 8003804:	08003893 	.word	0x08003893
 8003808:	08003893 	.word	0x08003893
 800380c:	08003893 	.word	0x08003893
 8003810:	08003893 	.word	0x08003893
 8003814:	08003893 	.word	0x08003893
 8003818:	08003893 	.word	0x08003893
 800381c:	08003893 	.word	0x08003893
 8003820:	08003893 	.word	0x08003893
 8003824:	08003893 	.word	0x08003893
 8003828:	08003841 	.word	0x08003841
 800382c:	08003855 	.word	0x08003855
 8003830:	4a79      	ldr	r2, [pc, #484]	; (8003a18 <HAL_GPIO_Init+0x2b4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003836:	e02c      	b.n	8003892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	623b      	str	r3, [r7, #32]
          break;
 800383e:	e029      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	623b      	str	r3, [r7, #32]
          break;
 8003848:	e024      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	3308      	adds	r3, #8
 8003850:	623b      	str	r3, [r7, #32]
          break;
 8003852:	e01f      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	330c      	adds	r3, #12
 800385a:	623b      	str	r3, [r7, #32]
          break;
 800385c:	e01a      	b.n	8003894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003866:	2304      	movs	r3, #4
 8003868:	623b      	str	r3, [r7, #32]
          break;
 800386a:	e013      	b.n	8003894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003874:	2308      	movs	r3, #8
 8003876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	611a      	str	r2, [r3, #16]
          break;
 800387e:	e009      	b.n	8003894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003880:	2308      	movs	r3, #8
 8003882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	615a      	str	r2, [r3, #20]
          break;
 800388a:	e003      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
          break;
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x130>
          break;
 8003892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2bff      	cmp	r3, #255	; 0xff
 8003898:	d801      	bhi.n	800389e <HAL_GPIO_Init+0x13a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	e001      	b.n	80038a2 <HAL_GPIO_Init+0x13e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d802      	bhi.n	80038b0 <HAL_GPIO_Init+0x14c>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	e002      	b.n	80038b6 <HAL_GPIO_Init+0x152>
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	3b08      	subs	r3, #8
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	210f      	movs	r1, #15
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	6a39      	ldr	r1, [r7, #32]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	431a      	orrs	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80b1 	beq.w	8003a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038e4:	4b4d      	ldr	r3, [pc, #308]	; (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	4a4c      	ldr	r2, [pc, #304]	; (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6193      	str	r3, [r2, #24]
 80038f0:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038fc:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_GPIO_Init+0x2bc>)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	; (8003a24 <HAL_GPIO_Init+0x2c0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_GPIO_Init+0x1ec>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3f      	ldr	r2, [pc, #252]	; (8003a28 <HAL_GPIO_Init+0x2c4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00d      	beq.n	800394c <HAL_GPIO_Init+0x1e8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3e      	ldr	r2, [pc, #248]	; (8003a2c <HAL_GPIO_Init+0x2c8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d007      	beq.n	8003948 <HAL_GPIO_Init+0x1e4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3d      	ldr	r2, [pc, #244]	; (8003a30 <HAL_GPIO_Init+0x2cc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_GPIO_Init+0x1e0>
 8003940:	2303      	movs	r3, #3
 8003942:	e006      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003944:	2304      	movs	r3, #4
 8003946:	e004      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003948:	2302      	movs	r3, #2
 800394a:	e002      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003950:	2300      	movs	r3, #0
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	f002 0203 	and.w	r2, r2, #3
 8003958:	0092      	lsls	r2, r2, #2
 800395a:	4093      	lsls	r3, r2
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003962:	492f      	ldr	r1, [pc, #188]	; (8003a20 <HAL_GPIO_Init+0x2bc>)
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800397c:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	492c      	ldr	r1, [pc, #176]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800398a:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	43db      	mvns	r3, r3
 8003992:	4928      	ldr	r1, [pc, #160]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003994:	4013      	ands	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039a4:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4922      	ldr	r1, [pc, #136]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	491e      	ldr	r1, [pc, #120]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	4918      	ldr	r1, [pc, #96]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039da:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4914      	ldr	r1, [pc, #80]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	490e      	ldr	r1, [pc, #56]	; (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60cb      	str	r3, [r1, #12]
 8003a00:	e021      	b.n	8003a46 <HAL_GPIO_Init+0x2e2>
 8003a02:	bf00      	nop
 8003a04:	10320000 	.word	0x10320000
 8003a08:	10310000 	.word	0x10310000
 8003a0c:	10220000 	.word	0x10220000
 8003a10:	10210000 	.word	0x10210000
 8003a14:	10120000 	.word	0x10120000
 8003a18:	10110000 	.word	0x10110000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010800 	.word	0x40010800
 8003a28:	40010c00 	.word	0x40010c00
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40011400 	.word	0x40011400
 8003a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	4909      	ldr	r1, [pc, #36]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	3301      	adds	r3, #1
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f47f ae8e 	bne.w	8003778 <HAL_GPIO_Init+0x14>
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	372c      	adds	r7, #44	; 0x2c
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40010400 	.word	0x40010400

08003a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e001      	b.n	8003a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e12b      	b.n	8003d06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fe32 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b00:	f001 fc92 	bl	8005428 <HAL_RCC_GetPCLK1Freq>
 8003b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4a81      	ldr	r2, [pc, #516]	; (8003d10 <HAL_I2C_Init+0x274>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d807      	bhi.n	8003b20 <HAL_I2C_Init+0x84>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a80      	ldr	r2, [pc, #512]	; (8003d14 <HAL_I2C_Init+0x278>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf94      	ite	ls
 8003b18:	2301      	movls	r3, #1
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e006      	b.n	8003b2e <HAL_I2C_Init+0x92>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a7d      	ldr	r2, [pc, #500]	; (8003d18 <HAL_I2C_Init+0x27c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	bf94      	ite	ls
 8003b28:	2301      	movls	r3, #1
 8003b2a:	2300      	movhi	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0e7      	b.n	8003d06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a78      	ldr	r2, [pc, #480]	; (8003d1c <HAL_I2C_Init+0x280>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0c9b      	lsrs	r3, r3, #18
 8003b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a6a      	ldr	r2, [pc, #424]	; (8003d10 <HAL_I2C_Init+0x274>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d802      	bhi.n	8003b70 <HAL_I2C_Init+0xd4>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	e009      	b.n	8003b84 <HAL_I2C_Init+0xe8>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <HAL_I2C_Init+0x284>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	099b      	lsrs	r3, r3, #6
 8003b82:	3301      	adds	r3, #1
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	495c      	ldr	r1, [pc, #368]	; (8003d10 <HAL_I2C_Init+0x274>)
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	d819      	bhi.n	8003bd8 <HAL_I2C_Init+0x13c>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e59      	subs	r1, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb2:	1c59      	adds	r1, r3, #1
 8003bb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bb8:	400b      	ands	r3, r1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <HAL_I2C_Init+0x138>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1e59      	subs	r1, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	e051      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	e04f      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d111      	bne.n	8003c04 <HAL_I2C_Init+0x168>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e58      	subs	r0, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	440b      	add	r3, r1
 8003bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf0c      	ite	eq
 8003bfc:	2301      	moveq	r3, #1
 8003bfe:	2300      	movne	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e012      	b.n	8003c2a <HAL_I2C_Init+0x18e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	0099      	lsls	r1, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Init+0x196>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e022      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <HAL_I2C_Init+0x1bc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1e58      	subs	r0, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	440b      	add	r3, r1
 8003c48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c56:	e00f      	b.n	8003c78 <HAL_I2C_Init+0x1dc>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1e58      	subs	r0, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	0099      	lsls	r1, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	6809      	ldr	r1, [r1, #0]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6911      	ldr	r1, [r2, #16]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68d2      	ldr	r2, [r2, #12]
 8003cb2:	4311      	orrs	r1, r2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6812      	ldr	r2, [r2, #0]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	000186a0 	.word	0x000186a0
 8003d14:	001e847f 	.word	0x001e847f
 8003d18:	003d08ff 	.word	0x003d08ff
 8003d1c:	431bde83 	.word	0x431bde83
 8003d20:	10624dd3 	.word	0x10624dd3

08003d24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d3e:	f7fe fc63 	bl	8002608 <HAL_GetTick>
 8003d42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	f040 80d9 	bne.w	8003f04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2319      	movs	r3, #25
 8003d58:	2201      	movs	r2, #1
 8003d5a:	496d      	ldr	r1, [pc, #436]	; (8003f10 <HAL_I2C_Mem_Write+0x1ec>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fcc1 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e0cc      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_I2C_Mem_Write+0x56>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e0c5      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d007      	beq.n	8003da0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2221      	movs	r2, #33	; 0x21
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a3a      	ldr	r2, [r7, #32]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a4d      	ldr	r2, [pc, #308]	; (8003f14 <HAL_I2C_Mem_Write+0x1f0>)
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003de2:	88f8      	ldrh	r0, [r7, #6]
 8003de4:	893a      	ldrh	r2, [r7, #8]
 8003de6:	8979      	ldrh	r1, [r7, #10]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4603      	mov	r3, r0
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 faf8 	bl	80043e8 <I2C_RequestMemoryWrite>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d052      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e081      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fd42 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d107      	bne.n	8003e2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06b      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d017      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	781a      	ldrb	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1aa      	bne.n	8003e02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fd2e 	bl	8004912 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d107      	bne.n	8003ed4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e016      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	00100002 	.word	0x00100002
 8003f14:	ffff0000 	.word	0xffff0000

08003f18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	813b      	strh	r3, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f36:	f7fe fb67 	bl	8002608 <HAL_GetTick>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	f040 8244 	bne.w	80043d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	2319      	movs	r3, #25
 8003f50:	2201      	movs	r2, #1
 8003f52:	4982      	ldr	r1, [pc, #520]	; (800415c <HAL_I2C_Mem_Read+0x244>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fbc5 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	e237      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x5a>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e230      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d007      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2222      	movs	r2, #34	; 0x22
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2240      	movs	r2, #64	; 0x40
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a62      	ldr	r2, [pc, #392]	; (8004160 <HAL_I2C_Mem_Read+0x248>)
 8003fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fda:	88f8      	ldrh	r0, [r7, #6]
 8003fdc:	893a      	ldrh	r2, [r7, #8]
 8003fde:	8979      	ldrh	r1, [r7, #10]
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	4603      	mov	r3, r0
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fa92 	bl	8004514 <I2C_RequestMemoryRead>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e1ec      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d113      	bne.n	800402a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e1c0      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	2b01      	cmp	r3, #1
 8004030:	d11e      	bne.n	8004070 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004042:	b672      	cpsid	i
}
 8004044:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800406c:	b662      	cpsie	i
}
 800406e:	e035      	b.n	80040dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11e      	bne.n	80040b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004086:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004088:	b672      	cpsid	i
}
 800408a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040b2:	b662      	cpsie	i
}
 80040b4:	e012      	b.n	80040dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040dc:	e166      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	f200 811f 	bhi.w	8004326 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d123      	bne.n	8004138 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fc4d 	bl	8004994 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e167      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004136:	e139      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	2b02      	cmp	r3, #2
 800413e:	d152      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	2200      	movs	r2, #0
 8004148:	4906      	ldr	r1, [pc, #24]	; (8004164 <HAL_I2C_Mem_Read+0x24c>)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 faca 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e13c      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
 800415a:	bf00      	nop
 800415c:	00100002 	.word	0x00100002
 8004160:	ffff0000 	.word	0xffff0000
 8004164:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004168:	b672      	cpsid	i
}
 800416a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041ae:	b662      	cpsie	i
}
 80041b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e4:	e0e2      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2200      	movs	r2, #0
 80041ee:	497b      	ldr	r1, [pc, #492]	; (80043dc <HAL_I2C_Mem_Read+0x4c4>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa77 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0e9      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004210:	b672      	cpsid	i
}
 8004212:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004246:	4b66      	ldr	r3, [pc, #408]	; (80043e0 <HAL_I2C_Mem_Read+0x4c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	08db      	lsrs	r3, r3, #3
 800424c:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <HAL_I2C_Mem_Read+0x4cc>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0a1a      	lsrs	r2, r3, #8
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00da      	lsls	r2, r3, #3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	3b01      	subs	r3, #1
 8004264:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d118      	bne.n	800429e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f043 0220 	orr.w	r2, r3, #32
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800428e:	b662      	cpsie	i
}
 8004290:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e09a      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d1d9      	bne.n	8004260 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042ee:	b662      	cpsie	i
}
 80042f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004324:	e042      	b.n	80043ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fb32 	bl	8004994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e04c      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d118      	bne.n	80043ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f47f ae94 	bne.w	80040de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	00010004 	.word	0x00010004
 80043e0:	20000098 	.word	0x20000098
 80043e4:	14f8b589 	.word	0x14f8b589

080043e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	460b      	mov	r3, r1
 80043fc:	813b      	strh	r3, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004410:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2200      	movs	r2, #0
 800441a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f960 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004438:	d103      	bne.n	8004442 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e05f      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004446:	897b      	ldrh	r3, [r7, #10]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004454:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	6a3a      	ldr	r2, [r7, #32]
 800445a:	492d      	ldr	r1, [pc, #180]	; (8004510 <I2C_RequestMemoryWrite+0x128>)
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f998 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e04c      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	6a39      	ldr	r1, [r7, #32]
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa02 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00d      	beq.n	80044ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	2b04      	cmp	r3, #4
 8004498:	d107      	bne.n	80044aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e02b      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d105      	bne.n	80044c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b4:	893b      	ldrh	r3, [r7, #8]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]
 80044be:	e021      	b.n	8004504 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044c0:	893b      	ldrh	r3, [r7, #8]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f9dc 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d107      	bne.n	80044f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e005      	b.n	8004506 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044fa:	893b      	ldrh	r3, [r7, #8]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	00010002 	.word	0x00010002

08004514 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	4608      	mov	r0, r1
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	4603      	mov	r3, r0
 8004524:	817b      	strh	r3, [r7, #10]
 8004526:	460b      	mov	r3, r1
 8004528:	813b      	strh	r3, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800453c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800454c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	2200      	movs	r2, #0
 8004556:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8c2 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004574:	d103      	bne.n	800457e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0aa      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004582:	897b      	ldrh	r3, [r7, #10]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004590:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	4952      	ldr	r1, [pc, #328]	; (80046e0 <I2C_RequestMemoryRead+0x1cc>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f8fa 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e097      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f964 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d107      	bne.n	80045e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e076      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045f0:	893b      	ldrh	r3, [r7, #8]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	611a      	str	r2, [r3, #16]
 80045fa:	e021      	b.n	8004640 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	0a1b      	lsrs	r3, r3, #8
 8004600:	b29b      	uxth	r3, r3
 8004602:	b2da      	uxtb	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	6a39      	ldr	r1, [r7, #32]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f93e 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00d      	beq.n	8004636 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b04      	cmp	r3, #4
 8004620:	d107      	bne.n	8004632 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e050      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004636:	893b      	ldrh	r3, [r7, #8]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	6a39      	ldr	r1, [r7, #32]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f923 	bl	8004890 <I2C_WaitOnTXEFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b04      	cmp	r3, #4
 8004656:	d107      	bne.n	8004668 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e035      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800467a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2200      	movs	r2, #0
 8004684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f82b 	bl	80046e4 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	d103      	bne.n	80046ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e013      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046b0:	897b      	ldrh	r3, [r7, #10]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	4906      	ldr	r1, [pc, #24]	; (80046e0 <I2C_RequestMemoryRead+0x1cc>)
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f863 	bl	8004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	00010002 	.word	0x00010002

080046e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f4:	e025      	b.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fc:	d021      	beq.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fd ff83 	bl	8002608 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnFlagUntilTimeout+0x30>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e023      	b.n	800478a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d10d      	bne.n	8004768 <I2C_WaitOnFlagUntilTimeout+0x84>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	e00c      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	43da      	mvns	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4013      	ands	r3, r2
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	429a      	cmp	r2, r3
 8004786:	d0b6      	beq.n	80046f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a0:	e051      	b.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d123      	bne.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e046      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004800:	d021      	beq.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fd ff01 	bl	8002608 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d116      	bne.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e020      	b.n	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10c      	bne.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	e00b      	b.n	8004882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	43da      	mvns	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d18d      	bne.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489c:	e02d      	b.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f8ce 	bl	8004a40 <I2C_IsAcknowledgeFailed>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e02d      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b4:	d021      	beq.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fd fea7 	bl	8002608 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d116      	bne.n	80048fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e007      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d1ca      	bne.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800491e:	e02d      	b.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f88d 	bl	8004a40 <I2C_IsAcknowledgeFailed>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e02d      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004936:	d021      	beq.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7fd fe66 	bl	8002608 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d116      	bne.n	800497c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e007      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d1ca      	bne.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a0:	e042      	b.n	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d119      	bne.n	80049e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e029      	b.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e4:	f7fd fe10 	bl	8002608 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d302      	bcc.n	80049fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e007      	b.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d1b5      	bne.n	80049a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a56:	d11b      	bne.n	8004a90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0204 	orr.w	r2, r3, #4
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e304      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 8087 	beq.w	8004bca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004abc:	4b92      	ldr	r3, [pc, #584]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ac8:	4b8f      	ldr	r3, [pc, #572]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d112      	bne.n	8004afa <HAL_RCC_OscConfig+0x5e>
 8004ad4:	4b8c      	ldr	r3, [pc, #560]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d10b      	bne.n	8004afa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae2:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d06c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x12c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d168      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e2de      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x76>
 8004b04:	4b80      	ldr	r3, [pc, #512]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7f      	ldr	r2, [pc, #508]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	e02e      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b7b      	ldr	r3, [pc, #492]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7a      	ldr	r2, [pc, #488]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b78      	ldr	r3, [pc, #480]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a77      	ldr	r2, [pc, #476]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e01d      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCC_OscConfig+0xbc>
 8004b3e:	4b72      	ldr	r3, [pc, #456]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a71      	ldr	r2, [pc, #452]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b6f      	ldr	r3, [pc, #444]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6e      	ldr	r2, [pc, #440]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e00b      	b.n	8004b70 <HAL_RCC_OscConfig+0xd4>
 8004b58:	4b6b      	ldr	r3, [pc, #428]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a6a      	ldr	r2, [pc, #424]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b68      	ldr	r3, [pc, #416]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a67      	ldr	r2, [pc, #412]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fd fd46 	bl	8002608 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd fd42 	bl	8002608 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e292      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b92:	4b5d      	ldr	r3, [pc, #372]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0xe4>
 8004b9e:	e014      	b.n	8004bca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fd fd32 	bl	8002608 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fd2e 	bl	8002608 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	; 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e27e      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bba:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x10c>
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d063      	beq.n	8004c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bd6:	4b4c      	ldr	r3, [pc, #304]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00b      	beq.n	8004bfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004be2:	4b49      	ldr	r3, [pc, #292]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d11c      	bne.n	8004c28 <HAL_RCC_OscConfig+0x18c>
 8004bee:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d116      	bne.n	8004c28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfa:	4b43      	ldr	r3, [pc, #268]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_RCC_OscConfig+0x176>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d001      	beq.n	8004c12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e252      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4939      	ldr	r1, [pc, #228]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c26:	e03a      	b.n	8004c9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d020      	beq.n	8004c72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c30:	4b36      	ldr	r3, [pc, #216]	; (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7fd fce7 	bl	8002608 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c3e:	f7fd fce3 	bl	8002608 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e233      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4927      	ldr	r1, [pc, #156]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]
 8004c70:	e015      	b.n	8004c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c72:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <HAL_RCC_OscConfig+0x270>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fd fcc6 	bl	8002608 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c80:	f7fd fcc2 	bl	8002608 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e212      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d03a      	beq.n	8004d20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d019      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_RCC_OscConfig+0x274>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb8:	f7fd fca6 	bl	8002608 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc0:	f7fd fca2 	bl	8002608 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e1f2      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f000 fbb6 	bl	8005450 <RCC_Delay>
 8004ce4:	e01c      	b.n	8004d20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <HAL_RCC_OscConfig+0x274>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cec:	f7fd fc8c 	bl	8002608 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf2:	e00f      	b.n	8004d14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf4:	f7fd fc88 	bl	8002608 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d908      	bls.n	8004d14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e1d8      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	42420000 	.word	0x42420000
 8004d10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d14:	4b9b      	ldr	r3, [pc, #620]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e9      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a6 	beq.w	8004e7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d32:	4b94      	ldr	r3, [pc, #592]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10d      	bne.n	8004d5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	4b91      	ldr	r3, [pc, #580]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4a90      	ldr	r2, [pc, #576]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	61d3      	str	r3, [r2, #28]
 8004d4a:	4b8e      	ldr	r3, [pc, #568]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b8b      	ldr	r3, [pc, #556]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d118      	bne.n	8004d98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d66:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a87      	ldr	r2, [pc, #540]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d72:	f7fd fc49 	bl	8002608 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7a:	f7fd fc45 	bl	8002608 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b64      	cmp	r3, #100	; 0x64
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e195      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8c:	4b7e      	ldr	r3, [pc, #504]	; (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d106      	bne.n	8004dae <HAL_RCC_OscConfig+0x312>
 8004da0:	4b78      	ldr	r3, [pc, #480]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4a77      	ldr	r2, [pc, #476]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6213      	str	r3, [r2, #32]
 8004dac:	e02d      	b.n	8004e0a <HAL_RCC_OscConfig+0x36e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x334>
 8004db6:	4b73      	ldr	r3, [pc, #460]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4a72      	ldr	r2, [pc, #456]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dbc:	f023 0301 	bic.w	r3, r3, #1
 8004dc0:	6213      	str	r3, [r2, #32]
 8004dc2:	4b70      	ldr	r3, [pc, #448]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4a6f      	ldr	r2, [pc, #444]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	6213      	str	r3, [r2, #32]
 8004dce:	e01c      	b.n	8004e0a <HAL_RCC_OscConfig+0x36e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d10c      	bne.n	8004df2 <HAL_RCC_OscConfig+0x356>
 8004dd8:	4b6a      	ldr	r3, [pc, #424]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	4a69      	ldr	r2, [pc, #420]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dde:	f043 0304 	orr.w	r3, r3, #4
 8004de2:	6213      	str	r3, [r2, #32]
 8004de4:	4b67      	ldr	r3, [pc, #412]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4a66      	ldr	r2, [pc, #408]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6213      	str	r3, [r2, #32]
 8004df0:	e00b      	b.n	8004e0a <HAL_RCC_OscConfig+0x36e>
 8004df2:	4b64      	ldr	r3, [pc, #400]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	4a63      	ldr	r2, [pc, #396]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004df8:	f023 0301 	bic.w	r3, r3, #1
 8004dfc:	6213      	str	r3, [r2, #32]
 8004dfe:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4a60      	ldr	r2, [pc, #384]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e04:	f023 0304 	bic.w	r3, r3, #4
 8004e08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d015      	beq.n	8004e3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e12:	f7fd fbf9 	bl	8002608 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fd fbf5 	bl	8002608 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e143      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e30:	4b54      	ldr	r3, [pc, #336]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0ee      	beq.n	8004e1a <HAL_RCC_OscConfig+0x37e>
 8004e3c:	e014      	b.n	8004e68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3e:	f7fd fbe3 	bl	8002608 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e44:	e00a      	b.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e46:	f7fd fbdf 	bl	8002608 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e12d      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5c:	4b49      	ldr	r3, [pc, #292]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ee      	bne.n	8004e46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d105      	bne.n	8004e7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6e:	4b45      	ldr	r3, [pc, #276]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4a44      	ldr	r2, [pc, #272]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e78:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 808c 	beq.w	8004f9c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004e84:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e90:	d10e      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004e92:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d108      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004e9e:	4b39      	ldr	r3, [pc, #228]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e103      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d14e      	bne.n	8004f56 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004eb8:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004ec4:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0ef      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004ed8:	4b2c      	ldr	r3, [pc, #176]	; (8004f8c <HAL_RCC_OscConfig+0x4f0>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ede:	f7fd fb93 	bl	8002608 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ee6:	f7fd fb8f 	bl	8002608 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b64      	cmp	r3, #100	; 0x64
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0df      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f0      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004f04:	4b1f      	ldr	r3, [pc, #124]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f10:	491c      	ldr	r1, [pc, #112]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004f16:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4918      	ldr	r1, [pc, #96]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004f28:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <HAL_RCC_OscConfig+0x4f0>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2e:	f7fd fb6b 	bl	8002608 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f36:	f7fd fb67 	bl	8002608 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b64      	cmp	r3, #100	; 0x64
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0b7      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x49a>
 8004f54:	e022      	b.n	8004f9c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <HAL_RCC_OscConfig+0x4e8>)
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <HAL_RCC_OscConfig+0x4f0>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fd fb4e 	bl	8002608 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004f6e:	e00f      	b.n	8004f90 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f70:	f7fd fb4a 	bl	8002608 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	; 0x64
 8004f7c:	d908      	bls.n	8004f90 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e09a      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004f90:	4b4b      	ldr	r3, [pc, #300]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e9      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 8088 	beq.w	80050b6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fa6:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d068      	beq.n	8005084 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d14d      	bne.n	8005056 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fba:	4b42      	ldr	r3, [pc, #264]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fb22 	bl	8002608 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc8:	f7fd fb1e 	bl	8002608 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e06e      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fda:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fee:	d10f      	bne.n	8005010 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8004ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4931      	ldr	r1, [pc, #196]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ffe:	4b30      	ldr	r3, [pc, #192]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	f023 020f 	bic.w	r2, r3, #15
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	492d      	ldr	r1, [pc, #180]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 800500c:	4313      	orrs	r3, r2
 800500e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	430b      	orrs	r3, r1
 8005022:	4927      	ldr	r1, [pc, #156]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005028:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502e:	f7fd faeb 	bl	8002608 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005036:	f7fd fae7 	bl	8002608 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e037      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005048:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x59a>
 8005054:	e02f      	b.n	80050b6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005056:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd fad4 	bl	8002608 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005064:	f7fd fad0 	bl	8002608 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e020      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x5c8>
 8005082:	e018      	b.n	80050b6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e013      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_OscConfig+0x624>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d106      	bne.n	80050b2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d001      	beq.n	80050b6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40021000 	.word	0x40021000
 80050c4:	42420060 	.word	0x42420060

080050c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0d0      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050dc:	4b6a      	ldr	r3, [pc, #424]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d910      	bls.n	800510c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b67      	ldr	r3, [pc, #412]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f023 0207 	bic.w	r2, r3, #7
 80050f2:	4965      	ldr	r1, [pc, #404]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b63      	ldr	r3, [pc, #396]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0b8      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d020      	beq.n	800515a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005124:	4b59      	ldr	r3, [pc, #356]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a58      	ldr	r2, [pc, #352]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800512a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800512e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800513c:	4b53      	ldr	r3, [pc, #332]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a52      	ldr	r2, [pc, #328]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005148:	4b50      	ldr	r3, [pc, #320]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	494d      	ldr	r1, [pc, #308]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d040      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d107      	bne.n	800517e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	4b47      	ldr	r3, [pc, #284]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d115      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e07f      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d107      	bne.n	8005196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	4b41      	ldr	r3, [pc, #260]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e073      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005196:	4b3d      	ldr	r3, [pc, #244]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e06b      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4936      	ldr	r1, [pc, #216]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fd fa26 	bl	8002608 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fd fa22 	bl	8002608 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e053      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 020c 	and.w	r2, r3, #12
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1eb      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d210      	bcs.n	8005218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 0207 	bic.w	r2, r3, #7
 80051fe:	4922      	ldr	r1, [pc, #136]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e032      	b.n	800527e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4916      	ldr	r1, [pc, #88]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	490e      	ldr	r1, [pc, #56]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	4313      	orrs	r3, r2
 8005254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005256:	f000 f821 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800525a:	4602      	mov	r2, r0
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	490a      	ldr	r1, [pc, #40]	; (8005290 <HAL_RCC_ClockConfig+0x1c8>)
 8005268:	5ccb      	ldrb	r3, [r1, r3]
 800526a:	fa22 f303 	lsr.w	r3, r2, r3
 800526e:	4a09      	ldr	r2, [pc, #36]	; (8005294 <HAL_RCC_ClockConfig+0x1cc>)
 8005270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCC_ClockConfig+0x1d0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd f984 	bl	8002584 <HAL_InitTick>

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40022000 	.word	0x40022000
 800528c:	40021000 	.word	0x40021000
 8005290:	08005ba0 	.word	0x08005ba0
 8005294:	20000098 	.word	0x20000098
 8005298:	2000009c 	.word	0x2000009c

0800529c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529e:	b091      	sub	sp, #68	; 0x44
 80052a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80052a2:	4b56      	ldr	r3, [pc, #344]	; (80053fc <HAL_RCC_GetSysClockFreq+0x160>)
 80052a4:	f107 0414 	add.w	r4, r7, #20
 80052a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052aa:	c407      	stmia	r4!, {r0, r1, r2}
 80052ac:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80052ae:	4b54      	ldr	r3, [pc, #336]	; (8005400 <HAL_RCC_GetSysClockFreq+0x164>)
 80052b0:	1d3c      	adds	r4, r7, #4
 80052b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
 80052bc:	2300      	movs	r3, #0
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
 80052c0:	2300      	movs	r3, #0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c4:	2300      	movs	r3, #0
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052d4:	4b4b      	ldr	r3, [pc, #300]	; (8005404 <HAL_RCC_GetSysClockFreq+0x168>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d002      	beq.n	80052ea <HAL_RCC_GetSysClockFreq+0x4e>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d003      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0x54>
 80052e8:	e080      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_GetSysClockFreq+0x16c>)
 80052ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052ee:	e080      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	0c9b      	lsrs	r3, r3, #18
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80052fc:	4413      	add	r3, r2
 80052fe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d066      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800530e:	4b3d      	ldr	r3, [pc, #244]	; (8005404 <HAL_RCC_GetSysClockFreq+0x168>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800531a:	4413      	add	r3, r2
 800531c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8005320:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <HAL_RCC_GetSysClockFreq+0x168>)
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d044      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800532e:	4b35      	ldr	r3, [pc, #212]	; (8005404 <HAL_RCC_GetSysClockFreq+0x168>)
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	3301      	adds	r3, #1
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800533c:	4b31      	ldr	r3, [pc, #196]	; (8005404 <HAL_RCC_GetSysClockFreq+0x168>)
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	0a1b      	lsrs	r3, r3, #8
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	3302      	adds	r3, #2
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	4618      	mov	r0, r3
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005354:	461a      	mov	r2, r3
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	fb02 f501 	mul.w	r5, r2, r1
 800535e:	fb00 f403 	mul.w	r4, r0, r3
 8005362:	442c      	add	r4, r5
 8005364:	fba0 2302 	umull	r2, r3, r0, r2
 8005368:	18e1      	adds	r1, r4, r3
 800536a:	460b      	mov	r3, r1
 800536c:	4926      	ldr	r1, [pc, #152]	; (8005408 <HAL_RCC_GetSysClockFreq+0x16c>)
 800536e:	fb01 f003 	mul.w	r0, r1, r3
 8005372:	2100      	movs	r1, #0
 8005374:	fb01 f102 	mul.w	r1, r1, r2
 8005378:	4401      	add	r1, r0
 800537a:	4823      	ldr	r0, [pc, #140]	; (8005408 <HAL_RCC_GetSysClockFreq+0x16c>)
 800537c:	fba2 4500 	umull	r4, r5, r2, r0
 8005380:	194b      	adds	r3, r1, r5
 8005382:	461d      	mov	r5, r3
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	4618      	mov	r0, r3
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	461a      	mov	r2, r3
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	fb02 fc01 	mul.w	ip, r2, r1
 8005398:	fb00 f603 	mul.w	r6, r0, r3
 800539c:	4466      	add	r6, ip
 800539e:	fba0 2302 	umull	r2, r3, r0, r2
 80053a2:	18f1      	adds	r1, r6, r3
 80053a4:	460b      	mov	r3, r1
 80053a6:	4620      	mov	r0, r4
 80053a8:	4629      	mov	r1, r5
 80053aa:	f7fb fe2f 	bl	800100c <__aeabi_uldivmod>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4613      	mov	r3, r2
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b6:	e007      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <HAL_RCC_GetSysClockFreq+0x16c>)
 80053bc:	fb02 f203 	mul.w	r2, r2, r3
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80053c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80053cc:	461a      	mov	r2, r3
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d108      	bne.n	80053e6 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053da:	e004      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	4a0b      	ldr	r2, [pc, #44]	; (800540c <HAL_RCC_GetSysClockFreq+0x170>)
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80053e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053ea:	e002      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053ec:	4b08      	ldr	r3, [pc, #32]	; (8005410 <HAL_RCC_GetSysClockFreq+0x174>)
 80053ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80053f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3744      	adds	r7, #68	; 0x44
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fc:	08005b80 	.word	0x08005b80
 8005400:	08005b90 	.word	0x08005b90
 8005404:	40021000 	.word	0x40021000
 8005408:	017d7840 	.word	0x017d7840
 800540c:	003d0900 	.word	0x003d0900
 8005410:	007a1200 	.word	0x007a1200

08005414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005418:	4b02      	ldr	r3, [pc, #8]	; (8005424 <HAL_RCC_GetHCLKFreq+0x10>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	20000098 	.word	0x20000098

08005428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800542c:	f7ff fff2 	bl	8005414 <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <HAL_RCC_GetPCLK1Freq+0x24>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	08005bb0 	.word	0x08005bb0

08005450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <RCC_Delay+0x34>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <RCC_Delay+0x38>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	0a5b      	lsrs	r3, r3, #9
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800546c:	bf00      	nop
  }
  while (Delay --);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f9      	bne.n	800546c <RCC_Delay+0x1c>
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	20000098 	.word	0x20000098
 8005488:	10624dd3 	.word	0x10624dd3

0800548c <__errno>:
 800548c:	4b01      	ldr	r3, [pc, #4]	; (8005494 <__errno+0x8>)
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	200000a4 	.word	0x200000a4

08005498 <__libc_init_array>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	2600      	movs	r6, #0
 800549c:	4d0c      	ldr	r5, [pc, #48]	; (80054d0 <__libc_init_array+0x38>)
 800549e:	4c0d      	ldr	r4, [pc, #52]	; (80054d4 <__libc_init_array+0x3c>)
 80054a0:	1b64      	subs	r4, r4, r5
 80054a2:	10a4      	asrs	r4, r4, #2
 80054a4:	42a6      	cmp	r6, r4
 80054a6:	d109      	bne.n	80054bc <__libc_init_array+0x24>
 80054a8:	f000 fb5c 	bl	8005b64 <_init>
 80054ac:	2600      	movs	r6, #0
 80054ae:	4d0a      	ldr	r5, [pc, #40]	; (80054d8 <__libc_init_array+0x40>)
 80054b0:	4c0a      	ldr	r4, [pc, #40]	; (80054dc <__libc_init_array+0x44>)
 80054b2:	1b64      	subs	r4, r4, r5
 80054b4:	10a4      	asrs	r4, r4, #2
 80054b6:	42a6      	cmp	r6, r4
 80054b8:	d105      	bne.n	80054c6 <__libc_init_array+0x2e>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c0:	4798      	blx	r3
 80054c2:	3601      	adds	r6, #1
 80054c4:	e7ee      	b.n	80054a4 <__libc_init_array+0xc>
 80054c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ca:	4798      	blx	r3
 80054cc:	3601      	adds	r6, #1
 80054ce:	e7f2      	b.n	80054b6 <__libc_init_array+0x1e>
 80054d0:	08005c30 	.word	0x08005c30
 80054d4:	08005c30 	.word	0x08005c30
 80054d8:	08005c30 	.word	0x08005c30
 80054dc:	08005c34 	.word	0x08005c34

080054e0 <memset>:
 80054e0:	4603      	mov	r3, r0
 80054e2:	4402      	add	r2, r0
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d100      	bne.n	80054ea <memset+0xa>
 80054e8:	4770      	bx	lr
 80054ea:	f803 1b01 	strb.w	r1, [r3], #1
 80054ee:	e7f9      	b.n	80054e4 <memset+0x4>

080054f0 <atan>:
 80054f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	4bb6      	ldr	r3, [pc, #728]	; (80057d0 <atan+0x2e0>)
 80054f6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80054fa:	429e      	cmp	r6, r3
 80054fc:	4604      	mov	r4, r0
 80054fe:	460d      	mov	r5, r1
 8005500:	468b      	mov	fp, r1
 8005502:	dd17      	ble.n	8005534 <atan+0x44>
 8005504:	4bb3      	ldr	r3, [pc, #716]	; (80057d4 <atan+0x2e4>)
 8005506:	429e      	cmp	r6, r3
 8005508:	dc01      	bgt.n	800550e <atan+0x1e>
 800550a:	d109      	bne.n	8005520 <atan+0x30>
 800550c:	b140      	cbz	r0, 8005520 <atan+0x30>
 800550e:	4622      	mov	r2, r4
 8005510:	462b      	mov	r3, r5
 8005512:	4620      	mov	r0, r4
 8005514:	4629      	mov	r1, r5
 8005516:	f7fa fe8d 	bl	8000234 <__adddf3>
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
 800551e:	e005      	b.n	800552c <atan+0x3c>
 8005520:	f1bb 0f00 	cmp.w	fp, #0
 8005524:	4cac      	ldr	r4, [pc, #688]	; (80057d8 <atan+0x2e8>)
 8005526:	f300 8121 	bgt.w	800576c <atan+0x27c>
 800552a:	4dac      	ldr	r5, [pc, #688]	; (80057dc <atan+0x2ec>)
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005534:	4baa      	ldr	r3, [pc, #680]	; (80057e0 <atan+0x2f0>)
 8005536:	429e      	cmp	r6, r3
 8005538:	dc11      	bgt.n	800555e <atan+0x6e>
 800553a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800553e:	429e      	cmp	r6, r3
 8005540:	dc0a      	bgt.n	8005558 <atan+0x68>
 8005542:	a38b      	add	r3, pc, #556	; (adr r3, 8005770 <atan+0x280>)
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	f7fa fe74 	bl	8000234 <__adddf3>
 800554c:	2200      	movs	r2, #0
 800554e:	4ba5      	ldr	r3, [pc, #660]	; (80057e4 <atan+0x2f4>)
 8005550:	f7fb fab6 	bl	8000ac0 <__aeabi_dcmpgt>
 8005554:	2800      	cmp	r0, #0
 8005556:	d1e9      	bne.n	800552c <atan+0x3c>
 8005558:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800555c:	e027      	b.n	80055ae <atan+0xbe>
 800555e:	f000 f951 	bl	8005804 <fabs>
 8005562:	4ba1      	ldr	r3, [pc, #644]	; (80057e8 <atan+0x2f8>)
 8005564:	4604      	mov	r4, r0
 8005566:	429e      	cmp	r6, r3
 8005568:	460d      	mov	r5, r1
 800556a:	f300 80b8 	bgt.w	80056de <atan+0x1ee>
 800556e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005572:	429e      	cmp	r6, r3
 8005574:	f300 809c 	bgt.w	80056b0 <atan+0x1c0>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	f7fa fe5a 	bl	8000234 <__adddf3>
 8005580:	2200      	movs	r2, #0
 8005582:	4b98      	ldr	r3, [pc, #608]	; (80057e4 <atan+0x2f4>)
 8005584:	f7fa fe54 	bl	8000230 <__aeabi_dsub>
 8005588:	2200      	movs	r2, #0
 800558a:	4606      	mov	r6, r0
 800558c:	460f      	mov	r7, r1
 800558e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	f7fa fe4d 	bl	8000234 <__adddf3>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fb f927 	bl	80007f4 <__aeabi_ddiv>
 80055a6:	f04f 0a00 	mov.w	sl, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	460d      	mov	r5, r1
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fa fff3 	bl	80005a0 <__aeabi_dmul>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4680      	mov	r8, r0
 80055c0:	4689      	mov	r9, r1
 80055c2:	f7fa ffed 	bl	80005a0 <__aeabi_dmul>
 80055c6:	a36c      	add	r3, pc, #432	; (adr r3, 8005778 <atan+0x288>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	f7fa ffe6 	bl	80005a0 <__aeabi_dmul>
 80055d4:	a36a      	add	r3, pc, #424	; (adr r3, 8005780 <atan+0x290>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa fe2b 	bl	8000234 <__adddf3>
 80055de:	4632      	mov	r2, r6
 80055e0:	463b      	mov	r3, r7
 80055e2:	f7fa ffdd 	bl	80005a0 <__aeabi_dmul>
 80055e6:	a368      	add	r3, pc, #416	; (adr r3, 8005788 <atan+0x298>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fa fe22 	bl	8000234 <__adddf3>
 80055f0:	4632      	mov	r2, r6
 80055f2:	463b      	mov	r3, r7
 80055f4:	f7fa ffd4 	bl	80005a0 <__aeabi_dmul>
 80055f8:	a365      	add	r3, pc, #404	; (adr r3, 8005790 <atan+0x2a0>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fe19 	bl	8000234 <__adddf3>
 8005602:	4632      	mov	r2, r6
 8005604:	463b      	mov	r3, r7
 8005606:	f7fa ffcb 	bl	80005a0 <__aeabi_dmul>
 800560a:	a363      	add	r3, pc, #396	; (adr r3, 8005798 <atan+0x2a8>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fe10 	bl	8000234 <__adddf3>
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	f7fa ffc2 	bl	80005a0 <__aeabi_dmul>
 800561c:	a360      	add	r3, pc, #384	; (adr r3, 80057a0 <atan+0x2b0>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fe07 	bl	8000234 <__adddf3>
 8005626:	4642      	mov	r2, r8
 8005628:	464b      	mov	r3, r9
 800562a:	f7fa ffb9 	bl	80005a0 <__aeabi_dmul>
 800562e:	a35e      	add	r3, pc, #376	; (adr r3, 80057a8 <atan+0x2b8>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa ffb0 	bl	80005a0 <__aeabi_dmul>
 8005640:	a35b      	add	r3, pc, #364	; (adr r3, 80057b0 <atan+0x2c0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fa fdf3 	bl	8000230 <__aeabi_dsub>
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	f7fa ffa7 	bl	80005a0 <__aeabi_dmul>
 8005652:	a359      	add	r3, pc, #356	; (adr r3, 80057b8 <atan+0x2c8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fdea 	bl	8000230 <__aeabi_dsub>
 800565c:	4632      	mov	r2, r6
 800565e:	463b      	mov	r3, r7
 8005660:	f7fa ff9e 	bl	80005a0 <__aeabi_dmul>
 8005664:	a356      	add	r3, pc, #344	; (adr r3, 80057c0 <atan+0x2d0>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fde1 	bl	8000230 <__aeabi_dsub>
 800566e:	4632      	mov	r2, r6
 8005670:	463b      	mov	r3, r7
 8005672:	f7fa ff95 	bl	80005a0 <__aeabi_dmul>
 8005676:	a354      	add	r3, pc, #336	; (adr r3, 80057c8 <atan+0x2d8>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fa fdd8 	bl	8000230 <__aeabi_dsub>
 8005680:	4632      	mov	r2, r6
 8005682:	463b      	mov	r3, r7
 8005684:	f7fa ff8c 	bl	80005a0 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4640      	mov	r0, r8
 800568e:	4649      	mov	r1, r9
 8005690:	f7fa fdd0 	bl	8000234 <__adddf3>
 8005694:	4622      	mov	r2, r4
 8005696:	462b      	mov	r3, r5
 8005698:	f7fa ff82 	bl	80005a0 <__aeabi_dmul>
 800569c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	d144      	bne.n	8005730 <atan+0x240>
 80056a6:	4620      	mov	r0, r4
 80056a8:	4629      	mov	r1, r5
 80056aa:	f7fa fdc1 	bl	8000230 <__aeabi_dsub>
 80056ae:	e734      	b.n	800551a <atan+0x2a>
 80056b0:	2200      	movs	r2, #0
 80056b2:	4b4c      	ldr	r3, [pc, #304]	; (80057e4 <atan+0x2f4>)
 80056b4:	f7fa fdbc 	bl	8000230 <__aeabi_dsub>
 80056b8:	2200      	movs	r2, #0
 80056ba:	4606      	mov	r6, r0
 80056bc:	460f      	mov	r7, r1
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	4b48      	ldr	r3, [pc, #288]	; (80057e4 <atan+0x2f4>)
 80056c4:	f7fa fdb6 	bl	8000234 <__adddf3>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4630      	mov	r0, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	f7fb f890 	bl	80007f4 <__aeabi_ddiv>
 80056d4:	f04f 0a01 	mov.w	sl, #1
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	e767      	b.n	80055ae <atan+0xbe>
 80056de:	4b43      	ldr	r3, [pc, #268]	; (80057ec <atan+0x2fc>)
 80056e0:	429e      	cmp	r6, r3
 80056e2:	da1a      	bge.n	800571a <atan+0x22a>
 80056e4:	2200      	movs	r2, #0
 80056e6:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <atan+0x300>)
 80056e8:	f7fa fda2 	bl	8000230 <__aeabi_dsub>
 80056ec:	2200      	movs	r2, #0
 80056ee:	4606      	mov	r6, r0
 80056f0:	460f      	mov	r7, r1
 80056f2:	4620      	mov	r0, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	4b3e      	ldr	r3, [pc, #248]	; (80057f0 <atan+0x300>)
 80056f8:	f7fa ff52 	bl	80005a0 <__aeabi_dmul>
 80056fc:	2200      	movs	r2, #0
 80056fe:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <atan+0x2f4>)
 8005700:	f7fa fd98 	bl	8000234 <__adddf3>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4630      	mov	r0, r6
 800570a:	4639      	mov	r1, r7
 800570c:	f7fb f872 	bl	80007f4 <__aeabi_ddiv>
 8005710:	f04f 0a02 	mov.w	sl, #2
 8005714:	4604      	mov	r4, r0
 8005716:	460d      	mov	r5, r1
 8005718:	e749      	b.n	80055ae <atan+0xbe>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	2000      	movs	r0, #0
 8005720:	4934      	ldr	r1, [pc, #208]	; (80057f4 <atan+0x304>)
 8005722:	f7fb f867 	bl	80007f4 <__aeabi_ddiv>
 8005726:	f04f 0a03 	mov.w	sl, #3
 800572a:	4604      	mov	r4, r0
 800572c:	460d      	mov	r5, r1
 800572e:	e73e      	b.n	80055ae <atan+0xbe>
 8005730:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <atan+0x308>)
 8005732:	4e32      	ldr	r6, [pc, #200]	; (80057fc <atan+0x30c>)
 8005734:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005738:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800573c:	e9da 2300 	ldrd	r2, r3, [sl]
 8005740:	f7fa fd76 	bl	8000230 <__aeabi_dsub>
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	f7fa fd72 	bl	8000230 <__aeabi_dsub>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005754:	f7fa fd6c 	bl	8000230 <__aeabi_dsub>
 8005758:	f1bb 0f00 	cmp.w	fp, #0
 800575c:	4604      	mov	r4, r0
 800575e:	460d      	mov	r5, r1
 8005760:	f6bf aee4 	bge.w	800552c <atan+0x3c>
 8005764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005768:	461d      	mov	r5, r3
 800576a:	e6df      	b.n	800552c <atan+0x3c>
 800576c:	4d24      	ldr	r5, [pc, #144]	; (8005800 <atan+0x310>)
 800576e:	e6dd      	b.n	800552c <atan+0x3c>
 8005770:	8800759c 	.word	0x8800759c
 8005774:	7e37e43c 	.word	0x7e37e43c
 8005778:	e322da11 	.word	0xe322da11
 800577c:	3f90ad3a 	.word	0x3f90ad3a
 8005780:	24760deb 	.word	0x24760deb
 8005784:	3fa97b4b 	.word	0x3fa97b4b
 8005788:	a0d03d51 	.word	0xa0d03d51
 800578c:	3fb10d66 	.word	0x3fb10d66
 8005790:	c54c206e 	.word	0xc54c206e
 8005794:	3fb745cd 	.word	0x3fb745cd
 8005798:	920083ff 	.word	0x920083ff
 800579c:	3fc24924 	.word	0x3fc24924
 80057a0:	5555550d 	.word	0x5555550d
 80057a4:	3fd55555 	.word	0x3fd55555
 80057a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80057ac:	bfa2b444 	.word	0xbfa2b444
 80057b0:	52defd9a 	.word	0x52defd9a
 80057b4:	3fadde2d 	.word	0x3fadde2d
 80057b8:	af749a6d 	.word	0xaf749a6d
 80057bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80057c0:	fe231671 	.word	0xfe231671
 80057c4:	3fbc71c6 	.word	0x3fbc71c6
 80057c8:	9998ebc4 	.word	0x9998ebc4
 80057cc:	3fc99999 	.word	0x3fc99999
 80057d0:	440fffff 	.word	0x440fffff
 80057d4:	7ff00000 	.word	0x7ff00000
 80057d8:	54442d18 	.word	0x54442d18
 80057dc:	bff921fb 	.word	0xbff921fb
 80057e0:	3fdbffff 	.word	0x3fdbffff
 80057e4:	3ff00000 	.word	0x3ff00000
 80057e8:	3ff2ffff 	.word	0x3ff2ffff
 80057ec:	40038000 	.word	0x40038000
 80057f0:	3ff80000 	.word	0x3ff80000
 80057f4:	bff00000 	.word	0xbff00000
 80057f8:	08005bd8 	.word	0x08005bd8
 80057fc:	08005bb8 	.word	0x08005bb8
 8005800:	3ff921fb 	.word	0x3ff921fb

08005804 <fabs>:
 8005804:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005808:	4770      	bx	lr

0800580a <atan2>:
 800580a:	f000 b82d 	b.w	8005868 <__ieee754_atan2>
	...

08005810 <sqrt>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	4606      	mov	r6, r0
 8005814:	460f      	mov	r7, r1
 8005816:	f000 f8f9 	bl	8005a0c <__ieee754_sqrt>
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <sqrt+0x54>)
 800581c:	4604      	mov	r4, r0
 800581e:	f993 3000 	ldrsb.w	r3, [r3]
 8005822:	460d      	mov	r5, r1
 8005824:	3301      	adds	r3, #1
 8005826:	d019      	beq.n	800585c <sqrt+0x4c>
 8005828:	4632      	mov	r2, r6
 800582a:	463b      	mov	r3, r7
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	f7fb f950 	bl	8000ad4 <__aeabi_dcmpun>
 8005834:	b990      	cbnz	r0, 800585c <sqrt+0x4c>
 8005836:	2200      	movs	r2, #0
 8005838:	2300      	movs	r3, #0
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fb f921 	bl	8000a84 <__aeabi_dcmplt>
 8005842:	b158      	cbz	r0, 800585c <sqrt+0x4c>
 8005844:	f7ff fe22 	bl	800548c <__errno>
 8005848:	2321      	movs	r3, #33	; 0x21
 800584a:	2200      	movs	r2, #0
 800584c:	6003      	str	r3, [r0, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	f7fa ffce 	bl	80007f4 <__aeabi_ddiv>
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	4620      	mov	r0, r4
 800585e:	4629      	mov	r1, r5
 8005860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005862:	bf00      	nop
 8005864:	20000108 	.word	0x20000108

08005868 <__ieee754_atan2>:
 8005868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800586c:	4692      	mov	sl, r2
 800586e:	4699      	mov	r9, r3
 8005870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005874:	461f      	mov	r7, r3
 8005876:	f1ca 0300 	rsb	r3, sl, #0
 800587a:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8005a08 <__ieee754_atan2+0x1a0>
 800587e:	ea43 030a 	orr.w	r3, r3, sl
 8005882:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005886:	4573      	cmp	r3, lr
 8005888:	4604      	mov	r4, r0
 800588a:	460d      	mov	r5, r1
 800588c:	d808      	bhi.n	80058a0 <__ieee754_atan2+0x38>
 800588e:	4246      	negs	r6, r0
 8005890:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005894:	4306      	orrs	r6, r0
 8005896:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800589a:	4576      	cmp	r6, lr
 800589c:	468c      	mov	ip, r1
 800589e:	d908      	bls.n	80058b2 <__ieee754_atan2+0x4a>
 80058a0:	4652      	mov	r2, sl
 80058a2:	464b      	mov	r3, r9
 80058a4:	4620      	mov	r0, r4
 80058a6:	4629      	mov	r1, r5
 80058a8:	f7fa fcc4 	bl	8000234 <__adddf3>
 80058ac:	4604      	mov	r4, r0
 80058ae:	460d      	mov	r5, r1
 80058b0:	e019      	b.n	80058e6 <__ieee754_atan2+0x7e>
 80058b2:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80058b6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80058ba:	ea56 060a 	orrs.w	r6, r6, sl
 80058be:	d103      	bne.n	80058c8 <__ieee754_atan2+0x60>
 80058c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	f7ff be14 	b.w	80054f0 <atan>
 80058c8:	17be      	asrs	r6, r7, #30
 80058ca:	f006 0602 	and.w	r6, r6, #2
 80058ce:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80058d2:	ea53 0100 	orrs.w	r1, r3, r0
 80058d6:	d10a      	bne.n	80058ee <__ieee754_atan2+0x86>
 80058d8:	2e02      	cmp	r6, #2
 80058da:	d067      	beq.n	80059ac <__ieee754_atan2+0x144>
 80058dc:	2e03      	cmp	r6, #3
 80058de:	d102      	bne.n	80058e6 <__ieee754_atan2+0x7e>
 80058e0:	a53b      	add	r5, pc, #236	; (adr r5, 80059d0 <__ieee754_atan2+0x168>)
 80058e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ee:	ea52 010a 	orrs.w	r1, r2, sl
 80058f2:	d106      	bne.n	8005902 <__ieee754_atan2+0x9a>
 80058f4:	f1bc 0f00 	cmp.w	ip, #0
 80058f8:	da63      	bge.n	80059c2 <__ieee754_atan2+0x15a>
 80058fa:	a537      	add	r5, pc, #220	; (adr r5, 80059d8 <__ieee754_atan2+0x170>)
 80058fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005900:	e7f1      	b.n	80058e6 <__ieee754_atan2+0x7e>
 8005902:	4572      	cmp	r2, lr
 8005904:	d10f      	bne.n	8005926 <__ieee754_atan2+0xbe>
 8005906:	4293      	cmp	r3, r2
 8005908:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800590c:	d107      	bne.n	800591e <__ieee754_atan2+0xb6>
 800590e:	2e02      	cmp	r6, #2
 8005910:	d850      	bhi.n	80059b4 <__ieee754_atan2+0x14c>
 8005912:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <__ieee754_atan2+0x198>)
 8005914:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005918:	e9d6 4500 	ldrd	r4, r5, [r6]
 800591c:	e7e3      	b.n	80058e6 <__ieee754_atan2+0x7e>
 800591e:	2e02      	cmp	r6, #2
 8005920:	d84c      	bhi.n	80059bc <__ieee754_atan2+0x154>
 8005922:	4b38      	ldr	r3, [pc, #224]	; (8005a04 <__ieee754_atan2+0x19c>)
 8005924:	e7f6      	b.n	8005914 <__ieee754_atan2+0xac>
 8005926:	4573      	cmp	r3, lr
 8005928:	d0e4      	beq.n	80058f4 <__ieee754_atan2+0x8c>
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005930:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005934:	da20      	bge.n	8005978 <__ieee754_atan2+0x110>
 8005936:	2f00      	cmp	r7, #0
 8005938:	da01      	bge.n	800593e <__ieee754_atan2+0xd6>
 800593a:	323c      	adds	r2, #60	; 0x3c
 800593c:	db20      	blt.n	8005980 <__ieee754_atan2+0x118>
 800593e:	4652      	mov	r2, sl
 8005940:	464b      	mov	r3, r9
 8005942:	4620      	mov	r0, r4
 8005944:	4629      	mov	r1, r5
 8005946:	f7fa ff55 	bl	80007f4 <__aeabi_ddiv>
 800594a:	f7ff ff5b 	bl	8005804 <fabs>
 800594e:	f7ff fdcf 	bl	80054f0 <atan>
 8005952:	4604      	mov	r4, r0
 8005954:	460d      	mov	r5, r1
 8005956:	2e01      	cmp	r6, #1
 8005958:	d015      	beq.n	8005986 <__ieee754_atan2+0x11e>
 800595a:	2e02      	cmp	r6, #2
 800595c:	d017      	beq.n	800598e <__ieee754_atan2+0x126>
 800595e:	2e00      	cmp	r6, #0
 8005960:	d0c1      	beq.n	80058e6 <__ieee754_atan2+0x7e>
 8005962:	a31f      	add	r3, pc, #124	; (adr r3, 80059e0 <__ieee754_atan2+0x178>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	4620      	mov	r0, r4
 800596a:	4629      	mov	r1, r5
 800596c:	f7fa fc60 	bl	8000230 <__aeabi_dsub>
 8005970:	a31d      	add	r3, pc, #116	; (adr r3, 80059e8 <__ieee754_atan2+0x180>)
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	e016      	b.n	80059a6 <__ieee754_atan2+0x13e>
 8005978:	a51d      	add	r5, pc, #116	; (adr r5, 80059f0 <__ieee754_atan2+0x188>)
 800597a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800597e:	e7ea      	b.n	8005956 <__ieee754_atan2+0xee>
 8005980:	2400      	movs	r4, #0
 8005982:	2500      	movs	r5, #0
 8005984:	e7e7      	b.n	8005956 <__ieee754_atan2+0xee>
 8005986:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800598a:	461d      	mov	r5, r3
 800598c:	e7ab      	b.n	80058e6 <__ieee754_atan2+0x7e>
 800598e:	a314      	add	r3, pc, #80	; (adr r3, 80059e0 <__ieee754_atan2+0x178>)
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	4620      	mov	r0, r4
 8005996:	4629      	mov	r1, r5
 8005998:	f7fa fc4a 	bl	8000230 <__aeabi_dsub>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	a111      	add	r1, pc, #68	; (adr r1, 80059e8 <__ieee754_atan2+0x180>)
 80059a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059a6:	f7fa fc43 	bl	8000230 <__aeabi_dsub>
 80059aa:	e77f      	b.n	80058ac <__ieee754_atan2+0x44>
 80059ac:	a50e      	add	r5, pc, #56	; (adr r5, 80059e8 <__ieee754_atan2+0x180>)
 80059ae:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059b2:	e798      	b.n	80058e6 <__ieee754_atan2+0x7e>
 80059b4:	a510      	add	r5, pc, #64	; (adr r5, 80059f8 <__ieee754_atan2+0x190>)
 80059b6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059ba:	e794      	b.n	80058e6 <__ieee754_atan2+0x7e>
 80059bc:	2400      	movs	r4, #0
 80059be:	2500      	movs	r5, #0
 80059c0:	e791      	b.n	80058e6 <__ieee754_atan2+0x7e>
 80059c2:	a50b      	add	r5, pc, #44	; (adr r5, 80059f0 <__ieee754_atan2+0x188>)
 80059c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059c8:	e78d      	b.n	80058e6 <__ieee754_atan2+0x7e>
 80059ca:	bf00      	nop
 80059cc:	f3af 8000 	nop.w
 80059d0:	54442d18 	.word	0x54442d18
 80059d4:	c00921fb 	.word	0xc00921fb
 80059d8:	54442d18 	.word	0x54442d18
 80059dc:	bff921fb 	.word	0xbff921fb
 80059e0:	33145c07 	.word	0x33145c07
 80059e4:	3ca1a626 	.word	0x3ca1a626
 80059e8:	54442d18 	.word	0x54442d18
 80059ec:	400921fb 	.word	0x400921fb
 80059f0:	54442d18 	.word	0x54442d18
 80059f4:	3ff921fb 	.word	0x3ff921fb
 80059f8:	54442d18 	.word	0x54442d18
 80059fc:	3fe921fb 	.word	0x3fe921fb
 8005a00:	08005bf8 	.word	0x08005bf8
 8005a04:	08005c10 	.word	0x08005c10
 8005a08:	7ff00000 	.word	0x7ff00000

08005a0c <__ieee754_sqrt>:
 8005a0c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8005b60 <__ieee754_sqrt+0x154>
 8005a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a14:	ea3c 0c01 	bics.w	ip, ip, r1
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460d      	mov	r5, r1
 8005a1e:	460a      	mov	r2, r1
 8005a20:	4607      	mov	r7, r0
 8005a22:	4604      	mov	r4, r0
 8005a24:	d10e      	bne.n	8005a44 <__ieee754_sqrt+0x38>
 8005a26:	4602      	mov	r2, r0
 8005a28:	f7fa fdba 	bl	80005a0 <__aeabi_dmul>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4630      	mov	r0, r6
 8005a32:	4629      	mov	r1, r5
 8005a34:	f7fa fbfe 	bl	8000234 <__adddf3>
 8005a38:	4606      	mov	r6, r0
 8005a3a:	460d      	mov	r5, r1
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	4629      	mov	r1, r5
 8005a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a44:	2900      	cmp	r1, #0
 8005a46:	dc0d      	bgt.n	8005a64 <__ieee754_sqrt+0x58>
 8005a48:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005a4c:	ea5c 0707 	orrs.w	r7, ip, r7
 8005a50:	d0f4      	beq.n	8005a3c <__ieee754_sqrt+0x30>
 8005a52:	b139      	cbz	r1, 8005a64 <__ieee754_sqrt+0x58>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f7fa fbeb 	bl	8000230 <__aeabi_dsub>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	f7fa fec9 	bl	80007f4 <__aeabi_ddiv>
 8005a62:	e7e9      	b.n	8005a38 <__ieee754_sqrt+0x2c>
 8005a64:	1512      	asrs	r2, r2, #20
 8005a66:	d074      	beq.n	8005b52 <__ieee754_sqrt+0x146>
 8005a68:	2000      	movs	r0, #0
 8005a6a:	07d5      	lsls	r5, r2, #31
 8005a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a70:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8005a74:	bf5e      	ittt	pl
 8005a76:	0fe3      	lsrpl	r3, r4, #31
 8005a78:	0064      	lslpl	r4, r4, #1
 8005a7a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8005a7e:	0fe3      	lsrs	r3, r4, #31
 8005a80:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005a84:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8005a88:	2516      	movs	r5, #22
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a90:	1076      	asrs	r6, r6, #1
 8005a92:	0064      	lsls	r4, r4, #1
 8005a94:	188f      	adds	r7, r1, r2
 8005a96:	429f      	cmp	r7, r3
 8005a98:	bfde      	ittt	le
 8005a9a:	1bdb      	suble	r3, r3, r7
 8005a9c:	18b9      	addle	r1, r7, r2
 8005a9e:	1880      	addle	r0, r0, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	3d01      	subs	r5, #1
 8005aa4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005aa8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005aac:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005ab0:	d1f0      	bne.n	8005a94 <__ieee754_sqrt+0x88>
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	f04f 0e20 	mov.w	lr, #32
 8005ab8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005abc:	428b      	cmp	r3, r1
 8005abe:	eb07 0c05 	add.w	ip, r7, r5
 8005ac2:	dc02      	bgt.n	8005aca <__ieee754_sqrt+0xbe>
 8005ac4:	d113      	bne.n	8005aee <__ieee754_sqrt+0xe2>
 8005ac6:	45a4      	cmp	ip, r4
 8005ac8:	d811      	bhi.n	8005aee <__ieee754_sqrt+0xe2>
 8005aca:	f1bc 0f00 	cmp.w	ip, #0
 8005ace:	eb0c 0507 	add.w	r5, ip, r7
 8005ad2:	da43      	bge.n	8005b5c <__ieee754_sqrt+0x150>
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	db41      	blt.n	8005b5c <__ieee754_sqrt+0x150>
 8005ad8:	f101 0801 	add.w	r8, r1, #1
 8005adc:	1a5b      	subs	r3, r3, r1
 8005ade:	4641      	mov	r1, r8
 8005ae0:	45a4      	cmp	ip, r4
 8005ae2:	bf88      	it	hi
 8005ae4:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8005ae8:	eba4 040c 	sub.w	r4, r4, ip
 8005aec:	443a      	add	r2, r7
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	f1be 0e01 	subs.w	lr, lr, #1
 8005af4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005af8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8005afc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8005b00:	d1dc      	bne.n	8005abc <__ieee754_sqrt+0xb0>
 8005b02:	4323      	orrs	r3, r4
 8005b04:	d006      	beq.n	8005b14 <__ieee754_sqrt+0x108>
 8005b06:	1c54      	adds	r4, r2, #1
 8005b08:	bf0b      	itete	eq
 8005b0a:	4672      	moveq	r2, lr
 8005b0c:	3201      	addne	r2, #1
 8005b0e:	3001      	addeq	r0, #1
 8005b10:	f022 0201 	bicne.w	r2, r2, #1
 8005b14:	1043      	asrs	r3, r0, #1
 8005b16:	07c1      	lsls	r1, r0, #31
 8005b18:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005b1c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005b20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005b24:	bf48      	it	mi
 8005b26:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8005b30:	e782      	b.n	8005a38 <__ieee754_sqrt+0x2c>
 8005b32:	0ae3      	lsrs	r3, r4, #11
 8005b34:	3915      	subs	r1, #21
 8005b36:	0564      	lsls	r4, r4, #21
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0fa      	beq.n	8005b32 <__ieee754_sqrt+0x126>
 8005b3c:	02de      	lsls	r6, r3, #11
 8005b3e:	d50a      	bpl.n	8005b56 <__ieee754_sqrt+0x14a>
 8005b40:	f1c2 0020 	rsb	r0, r2, #32
 8005b44:	fa24 f000 	lsr.w	r0, r4, r0
 8005b48:	1e55      	subs	r5, r2, #1
 8005b4a:	4094      	lsls	r4, r2
 8005b4c:	4303      	orrs	r3, r0
 8005b4e:	1b4a      	subs	r2, r1, r5
 8005b50:	e78a      	b.n	8005a68 <__ieee754_sqrt+0x5c>
 8005b52:	4611      	mov	r1, r2
 8005b54:	e7f0      	b.n	8005b38 <__ieee754_sqrt+0x12c>
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	3201      	adds	r2, #1
 8005b5a:	e7ef      	b.n	8005b3c <__ieee754_sqrt+0x130>
 8005b5c:	4688      	mov	r8, r1
 8005b5e:	e7bd      	b.n	8005adc <__ieee754_sqrt+0xd0>
 8005b60:	7ff00000 	.word	0x7ff00000

08005b64 <_init>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr

08005b70 <_fini>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	bf00      	nop
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr
