
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a50  08002a50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a58  08002a58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002a6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002a6c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005348  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001373  00000000  00000000  0002537d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  000266f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f8  00000000  00000000  00026c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f003  00000000  00000000  00027188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000658c  00000000  00000000  0004618b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3c28  00000000  00000000  0004c717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010033f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001548  00000000  00000000  00100390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002a08 	.word	0x08002a08

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002a08 	.word	0x08002a08

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000532:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <MX_CAN1_Init+0xac>)
 8000536:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 4;
 8000538:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_CAN1_Init+0xa8>)
 800053a:	2204      	movs	r2, #4
 800053c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_CAN1_Init+0xa8>)
 800054c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000550:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000554:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000558:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_CAN1_Init+0xa8>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8000560:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000562:	2201      	movs	r2, #1
 8000564:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000568:	2201      	movs	r2, #1
 800056a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_CAN1_Init+0xa8>)
 800056e:	2200      	movs	r2, #0
 8000570:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_CAN1_Init+0xa8>)
 800057a:	2201      	movs	r2, #1
 800057c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800057e:	4815      	ldr	r0, [pc, #84]	; (80005d4 <MX_CAN1_Init+0xa8>)
 8000580:	f000 fbe6 	bl	8000d50 <HAL_CAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_CAN1_Init+0x62>
		Error_Handler();
 800058a:	f000 faa4 	bl	8000ad6 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000596:	2301      	movs	r3, #1
 8000598:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80005b2:	230e      	movs	r3, #14
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <MX_CAN1_Init+0xa8>)
 80005bc:	f000 fcc4 	bl	8000f48 <HAL_CAN_ConfigFilter>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_CAN1_Init+0x9e>
		Error_Handler();
 80005c6:	f000 fa86 	bl	8000ad6 <Error_Handler>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40006400 	.word	0x40006400

080005dc <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <MX_CAN2_Init+0xa8>)
 80005e4:	4a28      	ldr	r2, [pc, #160]	; (8000688 <MX_CAN2_Init+0xac>)
 80005e6:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 4;
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <MX_CAN2_Init+0xa8>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <MX_CAN2_Init+0xa8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <MX_CAN2_Init+0xa8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_CAN2_Init+0xa8>)
 80005fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000600:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_CAN2_Init+0xa8>)
 8000604:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000608:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_CAN2_Init+0xa8>)
 800060c:	2200      	movs	r2, #0
 800060e:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_CAN2_Init+0xa8>)
 8000612:	2201      	movs	r2, #1
 8000614:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = ENABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_CAN2_Init+0xa8>)
 8000618:	2201      	movs	r2, #1
 800061a:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_CAN2_Init+0xa8>)
 800061e:	2200      	movs	r2, #0
 8000620:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_CAN2_Init+0xa8>)
 8000624:	2200      	movs	r2, #0
 8000626:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_CAN2_Init+0xa8>)
 800062a:	2201      	movs	r2, #1
 800062c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 800062e:	4815      	ldr	r0, [pc, #84]	; (8000684 <MX_CAN2_Init+0xa8>)
 8000630:	f000 fb8e 	bl	8000d50 <HAL_CAN_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_CAN2_Init+0x62>
		Error_Handler();
 800063a:	f000 fa4c 	bl	8000ad6 <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 14;
 800063e:	230e      	movs	r3, #14
 8000640:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000646:	2301      	movs	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x000;
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800065e:	2301      	movs	r3, #1
 8000660:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000662:	230e      	movs	r3, #14
 8000664:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_CAN2_Init+0xa8>)
 800066c:	f000 fc6c 	bl	8000f48 <HAL_CAN_ConfigFilter>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_CAN2_Init+0x9e>
		Error_Handler();
 8000676:	f000 fa2e 	bl	8000ad6 <Error_Handler>
	}

}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000050 	.word	0x20000050
 8000688:	40006800 	.word	0x40006800

0800068c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a6d      	ldr	r2, [pc, #436]	; (800085c <HAL_CAN_MspInit+0x1d0>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d15b      	bne.n	8000764 <HAL_CAN_MspInit+0xd8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80006ac:	4b6c      	ldr	r3, [pc, #432]	; (8000860 <HAL_CAN_MspInit+0x1d4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a6b      	ldr	r2, [pc, #428]	; (8000860 <HAL_CAN_MspInit+0x1d4>)
 80006b4:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80006b6:	4b6a      	ldr	r3, [pc, #424]	; (8000860 <HAL_CAN_MspInit+0x1d4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d10b      	bne.n	80006d6 <HAL_CAN_MspInit+0x4a>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80006be:	4b69      	ldr	r3, [pc, #420]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a68      	ldr	r2, [pc, #416]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80006c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b66      	ldr	r3, [pc, #408]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b63      	ldr	r3, [pc, #396]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a62      	ldr	r2, [pc, #392]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b60      	ldr	r3, [pc, #384]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006f2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4859      	ldr	r0, [pc, #356]	; (8000868 <HAL_CAN_MspInit+0x1dc>)
 8000704:	f001 fad4 	bl	8001cb0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070e:	2302      	movs	r3, #2
 8000710:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4852      	ldr	r0, [pc, #328]	; (8000868 <HAL_CAN_MspInit+0x1dc>)
 800071e:	f001 fac7 	bl	8001cb0 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2013      	movs	r0, #19
 8000728:	f001 fa8b 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800072c:	2013      	movs	r0, #19
 800072e:	f001 faa4 	bl	8001c7a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2014      	movs	r0, #20
 8000738:	f001 fa83 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800073c:	2014      	movs	r0, #20
 800073e:	f001 fa9c 	bl	8001c7a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2015      	movs	r0, #21
 8000748:	f001 fa7b 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800074c:	2015      	movs	r0, #21
 800074e:	f001 fa94 	bl	8001c7a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2016      	movs	r0, #22
 8000758:	f001 fa73 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800075c:	2016      	movs	r0, #22
 800075e:	f001 fa8c 	bl	8001c7a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
	}
}
 8000762:	e077      	b.n	8000854 <HAL_CAN_MspInit+0x1c8>
	} else if (canHandle->Instance == CAN2) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a40      	ldr	r2, [pc, #256]	; (800086c <HAL_CAN_MspInit+0x1e0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d172      	bne.n	8000854 <HAL_CAN_MspInit+0x1c8>
		__HAL_RCC_CAN2_CLK_ENABLE();
 800076e:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a3c      	ldr	r2, [pc, #240]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 8000774:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <HAL_CAN_MspInit+0x1d4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <HAL_CAN_MspInit+0x1d4>)
 800078e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <HAL_CAN_MspInit+0x1d4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d10b      	bne.n	80007b0 <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000798:	4b32      	ldr	r3, [pc, #200]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	4a31      	ldr	r2, [pc, #196]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 800079e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a2:	61d3      	str	r3, [r2, #28]
 80007a4:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <HAL_CAN_MspInit+0x1d8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007c8:	2320      	movs	r3, #32
 80007ca:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4825      	ldr	r0, [pc, #148]	; (8000870 <HAL_CAN_MspInit+0x1e4>)
 80007dc:	f001 fa68 	bl	8001cb0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007e0:	2340      	movs	r3, #64	; 0x40
 80007e2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	481f      	ldr	r0, [pc, #124]	; (8000870 <HAL_CAN_MspInit+0x1e4>)
 80007f4:	f001 fa5c 	bl	8001cb0 <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_CAN2_ENABLE();
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <HAL_CAN_MspInit+0x1e8>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800080e:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_CAN_MspInit+0x1e8>)
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	6053      	str	r3, [r2, #4]
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	203f      	movs	r0, #63	; 0x3f
 800081a:	f001 fa12 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800081e:	203f      	movs	r0, #63	; 0x3f
 8000820:	f001 fa2b 	bl	8001c7a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2040      	movs	r0, #64	; 0x40
 800082a:	f001 fa0a 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800082e:	2040      	movs	r0, #64	; 0x40
 8000830:	f001 fa23 	bl	8001c7a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2041      	movs	r0, #65	; 0x41
 800083a:	f001 fa02 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800083e:	2041      	movs	r0, #65	; 0x41
 8000840:	f001 fa1b 	bl	8001c7a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2042      	movs	r0, #66	; 0x42
 800084a:	f001 f9fa 	bl	8001c42 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 800084e:	2042      	movs	r0, #66	; 0x42
 8000850:	f001 fa13 	bl	8001c7a <HAL_NVIC_EnableIRQ>
}
 8000854:	bf00      	nop
 8000856:	3730      	adds	r7, #48	; 0x30
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40006400 	.word	0x40006400
 8000860:	20000078 	.word	0x20000078
 8000864:	40021000 	.word	0x40021000
 8000868:	40010800 	.word	0x40010800
 800086c:	40006800 	.word	0x40006800
 8000870:	40010c00 	.word	0x40010c00
 8000874:	40010000 	.word	0x40010000

08000878 <main>:

void SystemClock_Config(void);
void CAN1_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN);

int main(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

	HAL_Init();
 800087c:	f000 fa06 	bl	8000c8c <HAL_Init>

	SystemClock_Config();
 8000880:	f000 f82e 	bl	80008e0 <SystemClock_Config>

	MX_CAN1_Init();
 8000884:	f7ff fe52 	bl	800052c <MX_CAN1_Init>
	MX_CAN2_Init();
 8000888:	f7ff fea8 	bl	80005dc <MX_CAN2_Init>

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800088c:	4812      	ldr	r0, [pc, #72]	; (80008d8 <main+0x60>)
 800088e:	f000 fc3b 	bl	8001108 <HAL_CAN_Start>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <main+0x24>
		Error_Handler();
 8000898:	f000 f91d 	bl	8000ad6 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 800089c:	f648 4102 	movw	r1, #35842	; 0x8c02
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <main+0x60>)
 80008a2:	f000 fe94 	bl	80015ce <HAL_CAN_ActivateNotification>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <main+0x38>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 80008ac:	f000 f913 	bl	8000ad6 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <main+0x64>)
 80008b2:	f000 fc29 	bl	8001108 <HAL_CAN_Start>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <main+0x48>
		Error_Handler();
 80008bc:	f000 f90b 	bl	8000ad6 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 80008c0:	f648 4110 	movw	r1, #35856	; 0x8c10
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <main+0x64>)
 80008c6:	f000 fe82 	bl	80015ce <HAL_CAN_ActivateNotification>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <main+0x5c>
			CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 80008d0:	f000 f901 	bl	8000ad6 <Error_Handler>
	}

	while (1) {
 80008d4:	e7fe      	b.n	80008d4 <main+0x5c>
 80008d6:	bf00      	nop
 80008d8:	20000028 	.word	0x20000028
 80008dc:	20000050 	.word	0x20000050

080008e0 <SystemClock_Config>:
	}
}

void SystemClock_Config(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	2238      	movs	r2, #56	; 0x38
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 f882 	bl	80029f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800090c:	2304      	movs	r3, #4
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000924:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000928:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800092e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fb3b 	bl	8001fb8 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x6c>
		Error_Handler();
 8000948:	f000 f8c5 	bl	8000ad6 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2101      	movs	r1, #1
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fe3d 	bl	80025e4 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x94>
		Error_Handler();
 8000970:	f000 f8b1 	bl	8000ad6 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <SystemClock_Config+0xa4>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	42420070 	.word	0x42420070

08000988 <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo0 can1 callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan1, RxDataCan1)
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000994:	2100      	movs	r1, #0
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fd08 	bl	80013ac <HAL_CAN_GetRxMessage>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d113      	bne.n	80009ca <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			== HAL_OK) {
		if (RxHeaderCan1.StdId == 0x350 && RxDataCan1[0] == 0xc7) {
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80009aa:	d106      	bne.n	80009ba <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2bc7      	cmp	r3, #199	; 0xc7
 80009b2:	d102      	bne.n	80009ba <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			RxDataCan1[0] = 0xc6;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80009b6:	22c6      	movs	r2, #198	; 0xc6
 80009b8:	701a      	strb	r2, [r3, #0]
		}

		CAN2_Transmit_manual(RxHeaderCan1.StdId, RxHeaderCan1.DLC, RxDataCan1);
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80009c0:	6911      	ldr	r1, [r2, #16]
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f84f 	bl	8000a68 <CAN2_Transmit_manual>
	}
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000e4 	.word	0x200000e4
 80009d8:	20000094 	.word	0x20000094

080009dc <HAL_CAN_RxFifo1MsgPendingCallback>:

// can fifo1 for can2 callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeaderCan2, RxDataCan2)
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 fcde 	bl	80013ac <HAL_CAN_GetRxMessage>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d107      	bne.n	8000a06 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
			== HAL_OK) {
		CAN1_Transmit_manual(RxHeaderCan2.StdId, RxHeaderCan2.DLC, RxDataCan2);
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80009fc:	6911      	ldr	r1, [r2, #16]
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f809 	bl	8000a18 <CAN1_Transmit_manual>
	}
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000ec 	.word	0x200000ec
 8000a14:	200000c8 	.word	0x200000c8

08000a18 <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 8000a24:	bf00      	nop
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <CAN1_Transmit_manual+0x44>)
 8000a28:	f000 fc8c 	bl	8001344 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f9      	beq.n	8000a26 <CAN1_Transmit_manual+0xe>

	}

	TxHeaderCan1.StdId = ID_CAN;
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <CAN1_Transmit_manual+0x48>)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6013      	str	r3, [r2, #0]
	TxHeaderCan1.DLC = DLC_CAN;
 8000a38:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <CAN1_Transmit_manual+0x48>)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	6113      	str	r3, [r2, #16]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeaderCan1, DATA_CAN, &TxMailboxCan1)
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <CAN1_Transmit_manual+0x4c>)
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	4907      	ldr	r1, [pc, #28]	; (8000a60 <CAN1_Transmit_manual+0x48>)
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <CAN1_Transmit_manual+0x44>)
 8000a46:	f000 fba3 	bl	8001190 <HAL_CAN_AddTxMessage>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <CAN1_Transmit_manual+0x3c>
			!= HAL_OK) {
		Error_Handler();
 8000a50:	f000 f841 	bl	8000ad6 <Error_Handler>
	}
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000028 	.word	0x20000028
 8000a60:	2000007c 	.word	0x2000007c
 8000a64:	200000f4 	.word	0x200000f4

08000a68 <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint32_t ID_CAN, uint32_t DLC_CAN, uint8_t *DATA_CAN) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) == 0) {
 8000a74:	bf00      	nop
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <CAN2_Transmit_manual+0x44>)
 8000a78:	f000 fc64 	bl	8001344 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f9      	beq.n	8000a76 <CAN2_Transmit_manual+0xe>

	}

	TxHeaderCan2.StdId = ID_CAN;
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <CAN2_Transmit_manual+0x48>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6013      	str	r3, [r2, #0]
	TxHeaderCan2.DLC = DLC_CAN;
 8000a88:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <CAN2_Transmit_manual+0x48>)
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	6113      	str	r3, [r2, #16]

	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeaderCan2, DATA_CAN, &TxMailboxCan2)
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <CAN2_Transmit_manual+0x4c>)
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <CAN2_Transmit_manual+0x48>)
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <CAN2_Transmit_manual+0x44>)
 8000a96:	f000 fb7b 	bl	8001190 <HAL_CAN_AddTxMessage>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <CAN2_Transmit_manual+0x3c>
			!= HAL_OK) {
		Error_Handler();
 8000aa0:	f000 f819 	bl	8000ad6 <Error_Handler>
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000050 	.word	0x20000050
 8000ab0:	200000b0 	.word	0x200000b0
 8000ab4:	200000f8 	.word	0x200000f8

08000ab8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_CAN_GetError(hcan);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 ffba 	bl	8001a3a <HAL_CAN_GetError>
 8000ac6:	60f8      	str	r0, [r7, #12]
	HAL_CAN_ResetError(hcan);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 ffc1 	bl	8001a50 <HAL_CAN_ResetError>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <Error_Handler>:

void Error_Handler(void) {
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ada:	b672      	cpsid	i
}
 8000adc:	bf00      	nop
	__disable_irq();

	while (1) {
 8000ade:	e7fe      	b.n	8000ade <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_MspInit+0x5c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_MspInit+0x5c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_MspInit+0x60>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_MspInit+0x60>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f8c5 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <CAN1_TX_IRQHandler+0x10>)
 8000b9a:	f000 fd3d 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000028 	.word	0x20000028

08000ba8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <CAN1_RX0_IRQHandler+0x10>)
 8000bae:	f000 fd33 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000028 	.word	0x20000028

08000bbc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <CAN1_RX1_IRQHandler+0x10>)
 8000bc2:	f000 fd29 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000028 	.word	0x20000028

08000bd0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <CAN1_SCE_IRQHandler+0x10>)
 8000bd6:	f000 fd1f 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000028 	.word	0x20000028

08000be4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupt.
  */
void CAN2_TX_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <CAN2_TX_IRQHandler+0x10>)
 8000bea:	f000 fd15 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000050 	.word	0x20000050

08000bf8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <CAN2_RX0_IRQHandler+0x10>)
 8000bfe:	f000 fd0b 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000050 	.word	0x20000050

08000c0c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <CAN2_RX1_IRQHandler+0x10>)
 8000c12:	f000 fd01 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000050 	.word	0x20000050

08000c20 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <CAN2_SCE_IRQHandler+0x10>)
 8000c26:	f000 fcf7 	bl	8001618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000050 	.word	0x20000050

08000c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480c      	ldr	r0, [pc, #48]	; (8000c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c42:	490d      	ldr	r1, [pc, #52]	; (8000c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c58:	4c0a      	ldr	r4, [pc, #40]	; (8000c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c66:	f7ff ffe5 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6a:	f001 fea1 	bl	80029b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6e:	f7ff fe03 	bl	8000878 <main>
  bx lr
 8000c72:	4770      	bx	lr
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c7c:	08002a60 	.word	0x08002a60
  ldr r2, =_sbss
 8000c80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c84:	20000100 	.word	0x20000100

08000c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 ffc5 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff ff1a 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 ffdd 	bl	8001c96 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf4:	f000 ffa5 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x1c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x20>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IncTick+0x20>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000008 	.word	0x20000008
 8000d38:	200000fc 	.word	0x200000fc

08000d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <HAL_GetTick+0x10>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	200000fc 	.word	0x200000fc

08000d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e0ed      	b.n	8000f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fc8c 	bl	800068c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d84:	f7ff ffda 	bl	8000d3c <HAL_GetTick>
 8000d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d8a:	e012      	b.n	8000db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d8c:	f7ff ffd6 	bl	8000d3c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b0a      	cmp	r3, #10
 8000d98:	d90b      	bls.n	8000db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2205      	movs	r2, #5
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e0c5      	b.n	8000f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0e5      	beq.n	8000d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0202 	bic.w	r2, r2, #2
 8000dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd0:	f7ff ffb4 	bl	8000d3c <HAL_GetTick>
 8000dd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dd6:	e012      	b.n	8000dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd8:	f7ff ffb0 	bl	8000d3c <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b0a      	cmp	r3, #10
 8000de4:	d90b      	bls.n	8000dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2205      	movs	r2, #5
 8000df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e09f      	b.n	8000f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1e5      	bne.n	8000dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d108      	bne.n	8000e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e007      	b.n	8000e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7e5b      	ldrb	r3, [r3, #25]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d108      	bne.n	8000e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7e9b      	ldrb	r3, [r3, #26]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d108      	bne.n	8000e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0220 	orr.w	r2, r2, #32
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	e007      	b.n	8000e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0220 	bic.w	r2, r2, #32
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7edb      	ldrb	r3, [r3, #27]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d108      	bne.n	8000ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0210 	bic.w	r2, r2, #16
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e007      	b.n	8000eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0210 	orr.w	r2, r2, #16
 8000eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7f1b      	ldrb	r3, [r3, #28]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d108      	bne.n	8000ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0208 	orr.w	r2, r2, #8
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	e007      	b.n	8000ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0208 	bic.w	r2, r2, #8
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7f5b      	ldrb	r3, [r3, #29]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d108      	bne.n	8000ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 0204 	orr.w	r2, r2, #4
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e007      	b.n	8000f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 0204 	bic.w	r2, r2, #4
 8000f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	ea42 0103 	orr.w	r1, r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	1e5a      	subs	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f60:	7cfb      	ldrb	r3, [r7, #19]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d003      	beq.n	8000f6e <HAL_CAN_ConfigFilter+0x26>
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	f040 80be 	bne.w	80010ea <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f6e:	4b65      	ldr	r3, [pc, #404]	; (8001104 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f78:	f043 0201 	orr.w	r2, r3, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2201      	movs	r2, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d123      	bne.n	8001018 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ff2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3248      	adds	r2, #72	; 0x48
 8000ff8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800100c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100e:	6979      	ldr	r1, [r7, #20]
 8001010:	3348      	adds	r3, #72	; 0x48
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d122      	bne.n	8001066 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001040:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3248      	adds	r2, #72	; 0x48
 8001046:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800105a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	3348      	adds	r3, #72	; 0x48
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001080:	e007      	b.n	8001092 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	431a      	orrs	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d109      	bne.n	80010ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	401a      	ands	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010ac:	e007      	b.n	80010be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d107      	bne.n	80010d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010dc:	f023 0201 	bic.w	r2, r3, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e006      	b.n	80010f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
  }
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40006400 	.word	0x40006400

08001108 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d12e      	bne.n	800117a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fe02 	bl	8000d3c <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800113a:	e012      	b.n	8001162 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800113c:	f7ff fdfe 	bl	8000d3c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d90b      	bls.n	8001162 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2205      	movs	r2, #5
 800115a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e012      	b.n	8001188 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e5      	bne.n	800113c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e006      	b.n	8001188 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
  }
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d003      	beq.n	80011bc <HAL_CAN_AddTxMessage+0x2c>
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	f040 80b8 	bne.w	800132c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10a      	bne.n	80011dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80a0 	beq.w	800131c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	0e1b      	lsrs	r3, r3, #24
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d907      	bls.n	80011fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e09e      	b.n	800133a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011fc:	2201      	movs	r2, #1
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	409a      	lsls	r2, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001218:	68f9      	ldr	r1, [r7, #12]
 800121a:	6809      	ldr	r1, [r1, #0]
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3318      	adds	r3, #24
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	440b      	add	r3, r1
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e00f      	b.n	800124a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001234:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800123e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3318      	adds	r3, #24
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	440b      	add	r3, r1
 8001248:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3318      	adds	r3, #24
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	440b      	add	r3, r1
 800125a:	3304      	adds	r3, #4
 800125c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	7d1b      	ldrb	r3, [r3, #20]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d111      	bne.n	800128a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3318      	adds	r3, #24
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	4413      	add	r3, r2
 8001272:	3304      	adds	r3, #4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	6811      	ldr	r1, [r2, #0]
 800127a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3318      	adds	r3, #24
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	440b      	add	r3, r1
 8001286:	3304      	adds	r3, #4
 8001288:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3307      	adds	r3, #7
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	061a      	lsls	r2, r3, #24
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3306      	adds	r3, #6
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	041b      	lsls	r3, r3, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3305      	adds	r3, #5
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	4313      	orrs	r3, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	3204      	adds	r2, #4
 80012aa:	7812      	ldrb	r2, [r2, #0]
 80012ac:	4610      	mov	r0, r2
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	6811      	ldr	r1, [r2, #0]
 80012b2:	ea43 0200 	orr.w	r2, r3, r0
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	440b      	add	r3, r1
 80012bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80012c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3303      	adds	r3, #3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	061a      	lsls	r2, r3, #24
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3302      	adds	r3, #2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	041b      	lsls	r3, r3, #16
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	4313      	orrs	r3, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	4610      	mov	r0, r2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	6811      	ldr	r1, [r2, #0]
 80012e8:	ea43 0200 	orr.w	r2, r3, r0
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	440b      	add	r3, r1
 80012f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3318      	adds	r3, #24
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	f043 0201 	orr.w	r2, r3, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3318      	adds	r3, #24
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	440b      	add	r3, r1
 8001316:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	e00e      	b.n	800133a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e006      	b.n	800133a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
  }
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d002      	beq.n	8001364 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800135e:	7afb      	ldrb	r3, [r7, #11]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d11d      	bne.n	80013a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d003      	beq.n	80013d0 <HAL_CAN_GetRxMessage+0x24>
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	f040 80f3 	bne.w	80015b6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10e      	bne.n	80013f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d116      	bne.n	8001412 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0e7      	b.n	80015c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d107      	bne.n	8001412 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0d8      	b.n	80015c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	331b      	adds	r3, #27
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0204 	and.w	r2, r3, #4
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	331b      	adds	r3, #27
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0d5b      	lsrs	r3, r3, #21
 8001440:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e00b      	b.n	8001462 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	331b      	adds	r3, #27
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	331b      	adds	r3, #27
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0202 	and.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	331b      	adds	r3, #27
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	3304      	adds	r3, #4
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 020f 	and.w	r2, r3, #15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	331b      	adds	r3, #27
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	3304      	adds	r3, #4
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	331b      	adds	r3, #27
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	4413      	add	r3, r2
 80014b4:	3304      	adds	r3, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	4413      	add	r3, r2
 80014e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0a1a      	lsrs	r2, r3, #8
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0c1a      	lsrs	r2, r3, #16
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3302      	adds	r3, #2
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0e1a      	lsrs	r2, r3, #24
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3303      	adds	r3, #3
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	3304      	adds	r3, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0a1a      	lsrs	r2, r3, #8
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	3305      	adds	r3, #5
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4413      	add	r3, r2
 8001560:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0c1a      	lsrs	r2, r3, #16
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3306      	adds	r3, #6
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0e1a      	lsrs	r2, r3, #24
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3307      	adds	r3, #7
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d108      	bne.n	80015a2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	e007      	b.n	80015b2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e006      	b.n	80015c4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
  }
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d002      	beq.n	80015ec <HAL_CAN_ActivateNotification+0x1e>
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d109      	bne.n	8001600 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6959      	ldr	r1, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e006      	b.n	800160e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
  }
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d07c      	beq.n	8001758 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d023      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f983 	bl	8001986 <HAL_CAN_TxMailbox0CompleteCallback>
 8001680:	e016      	b.n	80016b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
 8001694:	e00c      	b.n	80016b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
 80016a8:	e002      	b.n	80016b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f986 	bl	80019bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d024      	beq.n	8001704 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f962 	bl	8001998 <HAL_CAN_TxMailbox1CompleteCallback>
 80016d4:	e016      	b.n	8001704 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
 80016e8:	e00c      	b.n	8001704 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
 80016fc:	e002      	b.n	8001704 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f965 	bl	80019ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d024      	beq.n	8001758 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001716:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f941 	bl	80019aa <HAL_CAN_TxMailbox2CompleteCallback>
 8001728:	e016      	b.n	8001758 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	e00c      	b.n	8001758 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
 8001750:	e002      	b.n	8001758 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f944 	bl	80019e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001758:	6a3b      	ldr	r3, [r7, #32]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00c      	beq.n	800177c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001772:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2210      	movs	r2, #16
 800177a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2208      	movs	r2, #8
 8001796:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f92a 	bl	80019f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff f8e6 	bl	8000988 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00c      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2210      	movs	r2, #16
 80017de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00b      	beq.n	8001802 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d006      	beq.n	8001802 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f901 	bl	8001a04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff f8de 	bl	80009dc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00b      	beq.n	8001842 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2210      	movs	r2, #16
 800183a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f8ea 	bl	8001a16 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00b      	beq.n	8001864 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2208      	movs	r2, #8
 800185c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f8e2 	bl	8001a28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d07b      	beq.n	8001966 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d072      	beq.n	800195e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d043      	beq.n	800195e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d03e      	beq.n	800195e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018e6:	2b60      	cmp	r3, #96	; 0x60
 80018e8:	d02b      	beq.n	8001942 <HAL_CAN_IRQHandler+0x32a>
 80018ea:	2b60      	cmp	r3, #96	; 0x60
 80018ec:	d82e      	bhi.n	800194c <HAL_CAN_IRQHandler+0x334>
 80018ee:	2b50      	cmp	r3, #80	; 0x50
 80018f0:	d022      	beq.n	8001938 <HAL_CAN_IRQHandler+0x320>
 80018f2:	2b50      	cmp	r3, #80	; 0x50
 80018f4:	d82a      	bhi.n	800194c <HAL_CAN_IRQHandler+0x334>
 80018f6:	2b40      	cmp	r3, #64	; 0x40
 80018f8:	d019      	beq.n	800192e <HAL_CAN_IRQHandler+0x316>
 80018fa:	2b40      	cmp	r3, #64	; 0x40
 80018fc:	d826      	bhi.n	800194c <HAL_CAN_IRQHandler+0x334>
 80018fe:	2b30      	cmp	r3, #48	; 0x30
 8001900:	d010      	beq.n	8001924 <HAL_CAN_IRQHandler+0x30c>
 8001902:	2b30      	cmp	r3, #48	; 0x30
 8001904:	d822      	bhi.n	800194c <HAL_CAN_IRQHandler+0x334>
 8001906:	2b10      	cmp	r3, #16
 8001908:	d002      	beq.n	8001910 <HAL_CAN_IRQHandler+0x2f8>
 800190a:	2b20      	cmp	r3, #32
 800190c:	d005      	beq.n	800191a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800190e:	e01d      	b.n	800194c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001918:	e019      	b.n	800194e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001922:	e014      	b.n	800194e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192c:	e00f      	b.n	800194e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001936:	e00a      	b.n	800194e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001940:	e005      	b.n	800194e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800194a:	e000      	b.n	800194e <HAL_CAN_IRQHandler+0x336>
            break;
 800194c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800195c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2204      	movs	r2, #4
 8001964:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff f89d 	bl	8000ab8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d002      	beq.n	8001a70 <HAL_CAN_ResetError+0x20>
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d103      	bne.n	8001a78 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
 8001a76:	e007      	b.n	8001a88 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4906      	ldr	r1, [pc, #24]	; (8001b2c <__NVIC_EnableIRQ+0x34>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c0c:	f7ff ff90 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff2d 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff42 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff90 	bl	8001b84 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5f 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff35 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	e169      	b.n	8001f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8158 	bne.w	8001f92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a9a      	ldr	r2, [pc, #616]	; (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d05e      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cec:	4a98      	ldr	r2, [pc, #608]	; (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d875      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cf2:	4a98      	ldr	r2, [pc, #608]	; (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d058      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cf8:	4a96      	ldr	r2, [pc, #600]	; (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d86f      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cfe:	4a96      	ldr	r2, [pc, #600]	; (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d052      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d04:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d869      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d0a:	4a94      	ldr	r2, [pc, #592]	; (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d04c      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d10:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d863      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d16:	4a92      	ldr	r2, [pc, #584]	; (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d046      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d1c:	4a90      	ldr	r2, [pc, #576]	; (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d85d      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d82a      	bhi.n	8001d7c <HAL_GPIO_Init+0xcc>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d859      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <HAL_GPIO_Init+0x80>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001dab 	.word	0x08001dab
 8001d34:	08001d85 	.word	0x08001d85
 8001d38:	08001d97 	.word	0x08001d97
 8001d3c:	08001dd9 	.word	0x08001dd9
 8001d40:	08001ddf 	.word	0x08001ddf
 8001d44:	08001ddf 	.word	0x08001ddf
 8001d48:	08001ddf 	.word	0x08001ddf
 8001d4c:	08001ddf 	.word	0x08001ddf
 8001d50:	08001ddf 	.word	0x08001ddf
 8001d54:	08001ddf 	.word	0x08001ddf
 8001d58:	08001ddf 	.word	0x08001ddf
 8001d5c:	08001ddf 	.word	0x08001ddf
 8001d60:	08001ddf 	.word	0x08001ddf
 8001d64:	08001ddf 	.word	0x08001ddf
 8001d68:	08001ddf 	.word	0x08001ddf
 8001d6c:	08001ddf 	.word	0x08001ddf
 8001d70:	08001ddf 	.word	0x08001ddf
 8001d74:	08001d8d 	.word	0x08001d8d
 8001d78:	08001da1 	.word	0x08001da1
 8001d7c:	4a79      	ldr	r2, [pc, #484]	; (8001f64 <HAL_GPIO_Init+0x2b4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d82:	e02c      	b.n	8001dde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e029      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	3304      	adds	r3, #4
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e024      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e01f      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	330c      	adds	r3, #12
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e01a      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db2:	2304      	movs	r3, #4
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e013      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	611a      	str	r2, [r3, #16]
          break;
 8001dca:	e009      	b.n	8001de0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	615a      	str	r2, [r3, #20]
          break;
 8001dd6:	e003      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          break;
 8001dde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2bff      	cmp	r3, #255	; 0xff
 8001de4:	d801      	bhi.n	8001dea <HAL_GPIO_Init+0x13a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_Init+0x13e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2bff      	cmp	r3, #255	; 0xff
 8001df4:	d802      	bhi.n	8001dfc <HAL_GPIO_Init+0x14c>
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	e002      	b.n	8001e02 <HAL_GPIO_Init+0x152>
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	3b08      	subs	r3, #8
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	210f      	movs	r1, #15
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80b1 	beq.w	8001f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e48:	4a48      	ldr	r2, [pc, #288]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a40      	ldr	r2, [pc, #256]	; (8001f70 <HAL_GPIO_Init+0x2c0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <HAL_GPIO_Init+0x2c8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3d      	ldr	r2, [pc, #244]	; (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1e0>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eae:	492f      	ldr	r1, [pc, #188]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	492c      	ldr	r1, [pc, #176]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4928      	ldr	r1, [pc, #160]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4922      	ldr	r1, [pc, #136]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	491e      	ldr	r1, [pc, #120]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	4918      	ldr	r1, [pc, #96]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4914      	ldr	r1, [pc, #80]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d021      	beq.n	8001f84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	490e      	ldr	r1, [pc, #56]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
 8001f4c:	e021      	b.n	8001f92 <HAL_GPIO_Init+0x2e2>
 8001f4e:	bf00      	nop
 8001f50:	10320000 	.word	0x10320000
 8001f54:	10310000 	.word	0x10310000
 8001f58:	10220000 	.word	0x10220000
 8001f5c:	10210000 	.word	0x10210000
 8001f60:	10120000 	.word	0x10120000
 8001f64:	10110000 	.word	0x10110000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40010800 	.word	0x40010800
 8001f74:	40010c00 	.word	0x40010c00
 8001f78:	40011000 	.word	0x40011000
 8001f7c:	40011400 	.word	0x40011400
 8001f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4909      	ldr	r1, [pc, #36]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	3301      	adds	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f47f ae8e 	bne.w	8001cc4 <HAL_GPIO_Init+0x14>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	372c      	adds	r7, #44	; 0x2c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e304      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8087 	beq.w	80020e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd8:	4b92      	ldr	r3, [pc, #584]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d00c      	beq.n	8001ffe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe4:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d112      	bne.n	8002016 <HAL_RCC_OscConfig+0x5e>
 8001ff0:	4b8c      	ldr	r3, [pc, #560]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d10b      	bne.n	8002016 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffe:	4b89      	ldr	r3, [pc, #548]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d06c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x12c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d168      	bne.n	80020e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e2de      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x76>
 8002020:	4b80      	ldr	r3, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a7f      	ldr	r2, [pc, #508]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e02e      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7a      	ldr	r2, [pc, #488]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b78      	ldr	r3, [pc, #480]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a77      	ldr	r2, [pc, #476]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0xbc>
 800205a:	4b72      	ldr	r3, [pc, #456]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a71      	ldr	r2, [pc, #452]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6e      	ldr	r2, [pc, #440]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0xd4>
 8002074:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6a      	ldr	r2, [pc, #424]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b68      	ldr	r3, [pc, #416]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a67      	ldr	r2, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fe52 	bl	8000d3c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7fe fe4e 	bl	8000d3c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e292      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0xe4>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe fe3e 	bl	8000d3c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7fe fe3a 	bl	8000d3c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e27e      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x10c>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f2:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020fe:	4b49      	ldr	r3, [pc, #292]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b08      	cmp	r3, #8
 8002108:	d11c      	bne.n	8002144 <HAL_RCC_OscConfig+0x18c>
 800210a:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d116      	bne.n	8002144 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002116:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x176>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e252      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4939      	ldr	r1, [pc, #228]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	e03a      	b.n	80021ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214c:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_RCC_OscConfig+0x270>)
 800214e:	2201      	movs	r2, #1
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fdf3 	bl	8000d3c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7fe fdef 	bl	8000d3c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e233      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4927      	ldr	r1, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]
 800218c:	e015      	b.n	80021ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_RCC_OscConfig+0x270>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe fdd2 	bl	8000d3c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7fe fdce 	bl	8000d3c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e212      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d03a      	beq.n	800223c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d019      	beq.n	8002202 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_RCC_OscConfig+0x274>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7fe fdb2 	bl	8000d3c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021dc:	f7fe fdae 	bl	8000d3c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1f2      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f0      	beq.n	80021dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f000 fbba 	bl	8002974 <RCC_Delay>
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_RCC_OscConfig+0x274>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002208:	f7fe fd98 	bl	8000d3c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220e:	e00f      	b.n	8002230 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7fe fd94 	bl	8000d3c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d908      	bls.n	8002230 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1d8      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	42420000 	.word	0x42420000
 800222c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b9b      	ldr	r3, [pc, #620]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e9      	bne.n	8002210 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a6 	beq.w	8002396 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b94      	ldr	r3, [pc, #592]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b91      	ldr	r3, [pc, #580]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a90      	ldr	r2, [pc, #576]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b8e      	ldr	r3, [pc, #568]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	4b8b      	ldr	r3, [pc, #556]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	2b00      	cmp	r3, #0
 8002280:	d118      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002282:	4b88      	ldr	r3, [pc, #544]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a87      	ldr	r2, [pc, #540]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7fe fd55 	bl	8000d3c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002296:	f7fe fd51 	bl	8000d3c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e195      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	4b7e      	ldr	r3, [pc, #504]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x312>
 80022bc:	4b78      	ldr	r3, [pc, #480]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e02d      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x334>
 80022d2:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a72      	ldr	r2, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	6213      	str	r3, [r2, #32]
 80022de:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a6f      	ldr	r2, [pc, #444]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022e4:	f023 0304 	bic.w	r3, r3, #4
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	e01c      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d10c      	bne.n	800230e <HAL_RCC_OscConfig+0x356>
 80022f4:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a69      	ldr	r2, [pc, #420]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	4b67      	ldr	r3, [pc, #412]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a66      	ldr	r2, [pc, #408]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	e00b      	b.n	8002326 <HAL_RCC_OscConfig+0x36e>
 800230e:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a63      	ldr	r2, [pc, #396]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a60      	ldr	r2, [pc, #384]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d015      	beq.n	800235a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7fe fd05 	bl	8000d3c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fd01 	bl	8000d3c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	; 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e143      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ee      	beq.n	8002336 <HAL_RCC_OscConfig+0x37e>
 8002358:	e014      	b.n	8002384 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7fe fcef 	bl	8000d3c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fceb 	bl	8000d3c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e12d      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002378:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ee      	bne.n	8002362 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a44      	ldr	r2, [pc, #272]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 808c 	beq.w	80024b8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d10e      	bne.n	80023cc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80023ae:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e103      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d14e      	bne.n	8002472 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0ef      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCC_OscConfig+0x4f0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f7fe fc9f 	bl	8000d3c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002402:	f7fe fc9b 	bl	8000d3c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b64      	cmp	r3, #100	; 0x64
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0df      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002414:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002420:	4b1f      	ldr	r3, [pc, #124]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	491c      	ldr	r1, [pc, #112]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 800242e:	4313      	orrs	r3, r2
 8002430:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4918      	ldr	r1, [pc, #96]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	4313      	orrs	r3, r2
 8002442:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_RCC_OscConfig+0x4f0>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fc77 	bl	8000d3c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002452:	f7fe fc73 	bl	8000d3c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0b7      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x49a>
 8002470:	e022      	b.n	80024b8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_OscConfig+0x4e8>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_RCC_OscConfig+0x4f0>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fc5a 	bl	8000d3c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800248a:	e00f      	b.n	80024ac <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800248c:	f7fe fc56 	bl	8000d3c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d908      	bls.n	80024ac <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e09a      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000
 80024a8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80024ac:	4b4b      	ldr	r3, [pc, #300]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e9      	bne.n	800248c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8088 	beq.w	80025d2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c2:	4b46      	ldr	r3, [pc, #280]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d068      	beq.n	80025a0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d14d      	bne.n	8002572 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x628>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fc2e 	bl	8000d3c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fc2a 	bl	8000d3c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e06e      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	4b39      	ldr	r3, [pc, #228]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250a:	d10f      	bne.n	800252c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 800250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4931      	ldr	r1, [pc, #196]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 8002516:	4313      	orrs	r3, r2
 8002518:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f023 020f 	bic.w	r2, r3, #15
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	492d      	ldr	r1, [pc, #180]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 8002528:	4313      	orrs	r3, r2
 800252a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	430b      	orrs	r3, r1
 800253e:	4927      	ldr	r1, [pc, #156]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_RCC_OscConfig+0x628>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7fe fbf7 	bl	8000d3c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe fbf3 	bl	8000d3c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e037      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x59a>
 8002570:	e02f      	b.n	80025d2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x628>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fbe0 	bl	8000d3c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fbdc 	bl	8000d3c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e020      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x5c8>
 800259e:	e018      	b.n	80025d2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e013      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x624>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	42420060 	.word	0x42420060

080025e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d0      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d910      	bls.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4965      	ldr	r1, [pc, #404]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800264a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002662:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d040      	beq.n	8002704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d115      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d107      	bne.n	80026b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a2:	4b41      	ldr	r3, [pc, #260]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e073      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e06b      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c2:	4b39      	ldr	r3, [pc, #228]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f023 0203 	bic.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4936      	ldr	r1, [pc, #216]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fb32 	bl	8000d3c <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026dc:	f7fe fb2e 	bl	8000d3c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e053      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f2:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 020c 	and.w	r2, r3, #12
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	429a      	cmp	r2, r3
 8002702:	d1eb      	bne.n	80026dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d210      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4922      	ldr	r1, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1cc>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fa90 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08002a40 	.word	0x08002a40
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027bc:	b099      	sub	sp, #100	; 0x64
 80027be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027c2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80027c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c8:	c407      	stmia	r4!, {r0, r1, r2}
 80027ca:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027ce:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80027d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	657b      	str	r3, [r7, #84]	; 0x54
 80027dc:	2300      	movs	r3, #0
 80027de:	653b      	str	r3, [r7, #80]	; 0x50
 80027e0:	2300      	movs	r3, #0
 80027e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e4:	2300      	movs	r3, #0
 80027e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f0:	2300      	movs	r3, #0
 80027f2:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027f4:	4b5b      	ldr	r3, [pc, #364]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d002      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x52>
 8002804:	2b08      	cmp	r3, #8
 8002806:	d003      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0x58>
 8002808:	e09f      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800280a:	4b57      	ldr	r3, [pc, #348]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800280c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800280e:	e09f      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	3340      	adds	r3, #64	; 0x40
 800281a:	f107 0220 	add.w	r2, r7, #32
 800281e:	4413      	add	r3, r2
 8002820:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002824:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8084 	beq.w	800293a <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002832:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3340      	adds	r3, #64	; 0x40
 800283c:	f107 0220 	add.w	r2, r7, #32
 8002840:	4413      	add	r3, r2
 8002842:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002846:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d060      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3301      	adds	r3, #1
 8002860:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002862:	4b40      	ldr	r3, [pc, #256]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	3302      	adds	r3, #2
 800286e:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002872:	2200      	movs	r2, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	617a      	str	r2, [r7, #20]
 8002878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287a:	2200      	movs	r2, #0
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	61fa      	str	r2, [r7, #28]
 8002880:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002884:	4622      	mov	r2, r4
 8002886:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800288a:	4684      	mov	ip, r0
 800288c:	fb0c f202 	mul.w	r2, ip, r2
 8002890:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002894:	468c      	mov	ip, r1
 8002896:	4618      	mov	r0, r3
 8002898:	4621      	mov	r1, r4
 800289a:	4603      	mov	r3, r0
 800289c:	fb03 f30c 	mul.w	r3, r3, ip
 80028a0:	4413      	add	r3, r2
 80028a2:	4602      	mov	r2, r0
 80028a4:	69b9      	ldr	r1, [r7, #24]
 80028a6:	fba2 8901 	umull	r8, r9, r2, r1
 80028aa:	444b      	add	r3, r9
 80028ac:	4699      	mov	r9, r3
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80028b0:	fb03 f209 	mul.w	r2, r3, r9
 80028b4:	2300      	movs	r3, #0
 80028b6:	fb03 f308 	mul.w	r3, r3, r8
 80028ba:	4413      	add	r3, r2
 80028bc:	4a2a      	ldr	r2, [pc, #168]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80028be:	fba8 ab02 	umull	sl, fp, r8, r2
 80028c2:	445b      	add	r3, fp
 80028c4:	469b      	mov	fp, r3
 80028c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c8:	2200      	movs	r2, #0
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	60fa      	str	r2, [r7, #12]
 80028ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d0:	2200      	movs	r2, #0
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80028da:	4622      	mov	r2, r4
 80028dc:	e9d7 8900 	ldrd	r8, r9, [r7]
 80028e0:	4641      	mov	r1, r8
 80028e2:	fb01 f202 	mul.w	r2, r1, r2
 80028e6:	46cc      	mov	ip, r9
 80028e8:	4618      	mov	r0, r3
 80028ea:	4621      	mov	r1, r4
 80028ec:	4603      	mov	r3, r0
 80028ee:	fb03 f30c 	mul.w	r3, r3, ip
 80028f2:	4413      	add	r3, r2
 80028f4:	4602      	mov	r2, r0
 80028f6:	4641      	mov	r1, r8
 80028f8:	fba2 5601 	umull	r5, r6, r2, r1
 80028fc:	4433      	add	r3, r6
 80028fe:	461e      	mov	r6, r3
 8002900:	462a      	mov	r2, r5
 8002902:	4633      	mov	r3, r6
 8002904:	4650      	mov	r0, sl
 8002906:	4659      	mov	r1, fp
 8002908:	f7fd fc8c 	bl	8000224 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002914:	e007      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800291a:	fb03 f202 	mul.w	r2, r3, r2
 800291e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002926:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800292a:	461a      	mov	r2, r3
 800292c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292e:	4293      	cmp	r3, r2
 8002930:	d108      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002938:	e004      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <HAL_RCC_GetSysClockFreq+0x1b4>)
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8002944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002946:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8002948:	e002      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800294c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800294e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8002952:	4618      	mov	r0, r3
 8002954:	3764      	adds	r7, #100	; 0x64
 8002956:	46bd      	mov	sp, r7
 8002958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800295c:	08002a20 	.word	0x08002a20
 8002960:	08002a30 	.word	0x08002a30
 8002964:	40021000 	.word	0x40021000
 8002968:	017d7840 	.word	0x017d7840
 800296c:	003d0900 	.word	0x003d0900
 8002970:	007a1200 	.word	0x007a1200

08002974 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <RCC_Delay+0x34>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <RCC_Delay+0x38>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0a5b      	lsrs	r3, r3, #9
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002990:	bf00      	nop
  }
  while (Delay --);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e5a      	subs	r2, r3, #1
 8002996:	60fa      	str	r2, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f9      	bne.n	8002990 <RCC_Delay+0x1c>
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	20000000 	.word	0x20000000
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <__libc_init_array>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	2600      	movs	r6, #0
 80029b4:	4d0c      	ldr	r5, [pc, #48]	; (80029e8 <__libc_init_array+0x38>)
 80029b6:	4c0d      	ldr	r4, [pc, #52]	; (80029ec <__libc_init_array+0x3c>)
 80029b8:	1b64      	subs	r4, r4, r5
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	42a6      	cmp	r6, r4
 80029be:	d109      	bne.n	80029d4 <__libc_init_array+0x24>
 80029c0:	f000 f822 	bl	8002a08 <_init>
 80029c4:	2600      	movs	r6, #0
 80029c6:	4d0a      	ldr	r5, [pc, #40]	; (80029f0 <__libc_init_array+0x40>)
 80029c8:	4c0a      	ldr	r4, [pc, #40]	; (80029f4 <__libc_init_array+0x44>)
 80029ca:	1b64      	subs	r4, r4, r5
 80029cc:	10a4      	asrs	r4, r4, #2
 80029ce:	42a6      	cmp	r6, r4
 80029d0:	d105      	bne.n	80029de <__libc_init_array+0x2e>
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d8:	4798      	blx	r3
 80029da:	3601      	adds	r6, #1
 80029dc:	e7ee      	b.n	80029bc <__libc_init_array+0xc>
 80029de:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e2:	4798      	blx	r3
 80029e4:	3601      	adds	r6, #1
 80029e6:	e7f2      	b.n	80029ce <__libc_init_array+0x1e>
 80029e8:	08002a58 	.word	0x08002a58
 80029ec:	08002a58 	.word	0x08002a58
 80029f0:	08002a58 	.word	0x08002a58
 80029f4:	08002a5c 	.word	0x08002a5c

080029f8 <memset>:
 80029f8:	4603      	mov	r3, r0
 80029fa:	4402      	add	r2, r0
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d100      	bne.n	8002a02 <memset+0xa>
 8002a00:	4770      	bx	lr
 8002a02:	f803 1b01 	strb.w	r1, [r3], #1
 8002a06:	e7f9      	b.n	80029fc <memset+0x4>

08002a08 <_init>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr

08002a14 <_fini>:
 8002a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a16:	bf00      	nop
 8002a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1a:	bc08      	pop	{r3}
 8002a1c:	469e      	mov	lr, r3
 8002a1e:	4770      	bx	lr
