
CanRetranslatorWithGyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005974  08005974  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800597c  0800597c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000070  080059f4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080059f4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e152  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002775  00000000  00000000  0002e1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00031488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d94  00000000  00000000  00031ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7cd  00000000  00000000  00035c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b099c  00000000  00000000  00044401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4d9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  000f4df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08005874 	.word	0x08005874

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08005874 	.word	0x08005874

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000238:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800023c:	f000 b96e 	b.w	800051c <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	468e      	mov	lr, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	f040 8083 	bne.w	8000370 <__udivmoddi4+0x118>
 800026a:	428a      	cmp	r2, r1
 800026c:	4617      	mov	r7, r2
 800026e:	d947      	bls.n	8000300 <__udivmoddi4+0xa8>
 8000270:	fab2 f382 	clz	r3, r2
 8000274:	b14b      	cbz	r3, 800028a <__udivmoddi4+0x32>
 8000276:	f1c3 0120 	rsb	r1, r3, #32
 800027a:	fa05 fe03 	lsl.w	lr, r5, r3
 800027e:	fa20 f101 	lsr.w	r1, r0, r1
 8000282:	409f      	lsls	r7, r3
 8000284:	ea41 0e0e 	orr.w	lr, r1, lr
 8000288:	409c      	lsls	r4, r3
 800028a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028e:	fbbe fcf8 	udiv	ip, lr, r8
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb08 e21c 	mls	r2, r8, ip, lr
 800029a:	fb0c f009 	mul.w	r0, ip, r9
 800029e:	0c21      	lsrs	r1, r4, #16
 80002a0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a4:	4290      	cmp	r0, r2
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x66>
 80002a8:	18ba      	adds	r2, r7, r2
 80002aa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80002ae:	f080 8118 	bcs.w	80004e2 <__udivmoddi4+0x28a>
 80002b2:	4290      	cmp	r0, r2
 80002b4:	f240 8115 	bls.w	80004e2 <__udivmoddi4+0x28a>
 80002b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80002bc:	443a      	add	r2, r7
 80002be:	1a12      	subs	r2, r2, r0
 80002c0:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c4:	fb08 2210 	mls	r2, r8, r0, r2
 80002c8:	fb00 f109 	mul.w	r1, r0, r9
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	42a1      	cmp	r1, r4
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x92>
 80002d6:	193c      	adds	r4, r7, r4
 80002d8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002dc:	f080 8103 	bcs.w	80004e6 <__udivmoddi4+0x28e>
 80002e0:	42a1      	cmp	r1, r4
 80002e2:	f240 8100 	bls.w	80004e6 <__udivmoddi4+0x28e>
 80002e6:	3802      	subs	r0, #2
 80002e8:	443c      	add	r4, r7
 80002ea:	1a64      	subs	r4, r4, r1
 80002ec:	2100      	movs	r1, #0
 80002ee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa4>
 80002f4:	2200      	movs	r2, #0
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	e9c6 4200 	strd	r4, r2, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xac>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f382 	clz	r3, r2
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14f      	bne.n	80003ac <__udivmoddi4+0x154>
 800030c:	1a8d      	subs	r5, r1, r2
 800030e:	2101      	movs	r1, #1
 8000310:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000314:	fa1f f882 	uxth.w	r8, r2
 8000318:	fbb5 fcfe 	udiv	ip, r5, lr
 800031c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000320:	fb08 f00c 	mul.w	r0, r8, ip
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800032a:	42a8      	cmp	r0, r5
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0xe6>
 800032e:	197d      	adds	r5, r7, r5
 8000330:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0xe4>
 8000336:	42a8      	cmp	r0, r5
 8000338:	f200 80e9 	bhi.w	800050e <__udivmoddi4+0x2b6>
 800033c:	4694      	mov	ip, r2
 800033e:	1a2d      	subs	r5, r5, r0
 8000340:	fbb5 f0fe 	udiv	r0, r5, lr
 8000344:	fb0e 5510 	mls	r5, lr, r0, r5
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	b2a4      	uxth	r4, r4
 800034e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000352:	45a0      	cmp	r8, r4
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x10e>
 8000356:	193c      	adds	r4, r7, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x10c>
 800035e:	45a0      	cmp	r8, r4
 8000360:	f200 80d9 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 0408 	sub.w	r4, r4, r8
 800036a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036e:	e7c0      	b.n	80002f2 <__udivmoddi4+0x9a>
 8000370:	428b      	cmp	r3, r1
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x12e>
 8000374:	2e00      	cmp	r6, #0
 8000376:	f000 80b1 	beq.w	80004dc <__udivmoddi4+0x284>
 800037a:	2100      	movs	r1, #0
 800037c:	e9c6 0500 	strd	r0, r5, [r6]
 8000380:	4608      	mov	r0, r1
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d14b      	bne.n	8000426 <__udivmoddi4+0x1ce>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0x140>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 80b9 	bhi.w	800050a <__udivmoddi4+0x2b2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb65 0303 	sbc.w	r3, r5, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	469e      	mov	lr, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d0aa      	beq.n	80002fc <__udivmoddi4+0xa4>
 80003a6:	e9c6 4e00 	strd	r4, lr, [r6]
 80003aa:	e7a7      	b.n	80002fc <__udivmoddi4+0xa4>
 80003ac:	409f      	lsls	r7, r3
 80003ae:	f1c3 0220 	rsb	r2, r3, #32
 80003b2:	40d1      	lsrs	r1, r2
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fa1f f887 	uxth.w	r8, r7
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	fa24 f202 	lsr.w	r2, r4, r2
 80003c8:	409d      	lsls	r5, r3
 80003ca:	fb00 fc08 	mul.w	ip, r0, r8
 80003ce:	432a      	orrs	r2, r5
 80003d0:	0c15      	lsrs	r5, r2, #16
 80003d2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d6:	45ac      	cmp	ip, r5
 80003d8:	fa04 f403 	lsl.w	r4, r4, r3
 80003dc:	d909      	bls.n	80003f2 <__udivmoddi4+0x19a>
 80003de:	197d      	adds	r5, r7, r5
 80003e0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003e4:	f080 808f 	bcs.w	8000506 <__udivmoddi4+0x2ae>
 80003e8:	45ac      	cmp	ip, r5
 80003ea:	f240 808c 	bls.w	8000506 <__udivmoddi4+0x2ae>
 80003ee:	3802      	subs	r0, #2
 80003f0:	443d      	add	r5, r7
 80003f2:	eba5 050c 	sub.w	r5, r5, ip
 80003f6:	fbb5 f1fe 	udiv	r1, r5, lr
 80003fa:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fe:	fb01 f908 	mul.w	r9, r1, r8
 8000402:	b295      	uxth	r5, r2
 8000404:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000408:	45a9      	cmp	r9, r5
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x1c4>
 800040c:	197d      	adds	r5, r7, r5
 800040e:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 8000412:	d274      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 8000414:	45a9      	cmp	r9, r5
 8000416:	d972      	bls.n	80004fe <__udivmoddi4+0x2a6>
 8000418:	3902      	subs	r1, #2
 800041a:	443d      	add	r5, r7
 800041c:	eba5 0509 	sub.w	r5, r5, r9
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e778      	b.n	8000318 <__udivmoddi4+0xc0>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	408b      	lsls	r3, r1
 800042c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000430:	ea4c 0c03 	orr.w	ip, ip, r3
 8000434:	fa25 f407 	lsr.w	r4, r5, r7
 8000438:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800043c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000440:	fa1f f88c 	uxth.w	r8, ip
 8000444:	fb0e 4419 	mls	r4, lr, r9, r4
 8000448:	fa20 f307 	lsr.w	r3, r0, r7
 800044c:	fb09 fa08 	mul.w	sl, r9, r8
 8000450:	408d      	lsls	r5, r1
 8000452:	431d      	orrs	r5, r3
 8000454:	0c2b      	lsrs	r3, r5, #16
 8000456:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800045a:	45a2      	cmp	sl, r4
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 f301 	lsl.w	r3, r0, r1
 8000464:	d909      	bls.n	800047a <__udivmoddi4+0x222>
 8000466:	eb1c 0404 	adds.w	r4, ip, r4
 800046a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046e:	d248      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 8000470:	45a2      	cmp	sl, r4
 8000472:	d946      	bls.n	8000502 <__udivmoddi4+0x2aa>
 8000474:	f1a9 0902 	sub.w	r9, r9, #2
 8000478:	4464      	add	r4, ip
 800047a:	eba4 040a 	sub.w	r4, r4, sl
 800047e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000482:	fb0e 4410 	mls	r4, lr, r0, r4
 8000486:	fb00 fa08 	mul.w	sl, r0, r8
 800048a:	b2ad      	uxth	r5, r5
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	45a2      	cmp	sl, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x24e>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800049c:	d22d      	bcs.n	80004fa <__udivmoddi4+0x2a2>
 800049e:	45a2      	cmp	sl, r4
 80004a0:	d92b      	bls.n	80004fa <__udivmoddi4+0x2a2>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	eba4 040a 	sub.w	r4, r4, sl
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d319      	bcc.n	80004ee <__udivmoddi4+0x296>
 80004ba:	d016      	beq.n	80004ea <__udivmoddi4+0x292>
 80004bc:	b15e      	cbz	r6, 80004d6 <__udivmoddi4+0x27e>
 80004be:	ebb3 020e 	subs.w	r2, r3, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	fa22 f301 	lsr.w	r3, r2, r1
 80004ce:	431f      	orrs	r7, r3
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	e9c6 7400 	strd	r7, r4, [r6]
 80004d6:	2100      	movs	r1, #0
 80004d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004dc:	4631      	mov	r1, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e70c      	b.n	80002fc <__udivmoddi4+0xa4>
 80004e2:	468c      	mov	ip, r1
 80004e4:	e6eb      	b.n	80002be <__udivmoddi4+0x66>
 80004e6:	4610      	mov	r0, r2
 80004e8:	e6ff      	b.n	80002ea <__udivmoddi4+0x92>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2e6      	bcs.n	80004bc <__udivmoddi4+0x264>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 050c 	sbc.w	r5, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e0      	b.n	80004bc <__udivmoddi4+0x264>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d3      	b.n	80004a6 <__udivmoddi4+0x24e>
 80004fe:	4611      	mov	r1, r2
 8000500:	e78c      	b.n	800041c <__udivmoddi4+0x1c4>
 8000502:	4681      	mov	r9, r0
 8000504:	e7b9      	b.n	800047a <__udivmoddi4+0x222>
 8000506:	4608      	mov	r0, r1
 8000508:	e773      	b.n	80003f2 <__udivmoddi4+0x19a>
 800050a:	4608      	mov	r0, r1
 800050c:	e749      	b.n	80003a2 <__udivmoddi4+0x14a>
 800050e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000512:	443d      	add	r5, r7
 8000514:	e713      	b.n	800033e <__udivmoddi4+0xe6>
 8000516:	3802      	subs	r0, #2
 8000518:	443c      	add	r4, r7
 800051a:	e724      	b.n	8000366 <__udivmoddi4+0x10e>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	; 0x28
 8000524:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000526:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000528:	4a28      	ldr	r2, [pc, #160]	; (80005cc <MX_CAN1_Init+0xac>)
 800052a:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 1;
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800052e:	2201      	movs	r2, #1
 8000530:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000540:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000544:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000548:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800054c:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000550:	2200      	movs	r2, #0
 8000552:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8000554:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000556:	2201      	movs	r2, #1
 8000558:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800055c:	2200      	movs	r2, #0
 800055e:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000562:	2200      	movs	r2, #0
 8000564:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000568:	2200      	movs	r2, #0
 800056a:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0xa8>)
 800056e:	2201      	movs	r2, #1
 8000570:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000572:	4815      	ldr	r0, [pc, #84]	; (80005c8 <MX_CAN1_Init+0xa8>)
 8000574:	f001 f9ac 	bl	80018d0 <HAL_CAN_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_CAN1_Init+0x62>
		Error_Handler();
 800057e:	f000 ff9b 	bl	80014b8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800058a:	2301      	movs	r3, #1
 800058c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80005a6:	230e      	movs	r3, #14
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_CAN1_Init+0xa8>)
 80005b0:	f001 fa8a 	bl	8001ac8 <HAL_CAN_ConfigFilter>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_CAN1_Init+0x9e>
		Error_Handler();
 80005ba:	f000 ff7d 	bl	80014b8 <Error_Handler>
	}
}
 80005be:	bf00      	nop
 80005c0:	3728      	adds	r7, #40	; 0x28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000e0 	.word	0x200000e0
 80005cc:	40006400 	.word	0x40006400

080005d0 <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
	hcan2.Instance = CAN2;
 80005d6:	4b28      	ldr	r3, [pc, #160]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <MX_CAN2_Init+0xac>)
 80005da:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 5;
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005de:	2205      	movs	r2, #5
 80005e0:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005e2:	4b25      	ldr	r3, [pc, #148]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005f0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80005f4:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_CAN2_Init+0xa8>)
 80005f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005fc:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000600:	2200      	movs	r2, #0
 8000602:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = ENABLE;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000606:	2201      	movs	r2, #1
 8000608:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_CAN2_Init+0xa8>)
 800060c:	2200      	movs	r2, #0
 800060e:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000612:	2200      	movs	r2, #0
 8000614:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000618:	2200      	movs	r2, #0
 800061a:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = ENABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_CAN2_Init+0xa8>)
 800061e:	2201      	movs	r2, #1
 8000620:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8000622:	4815      	ldr	r0, [pc, #84]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000624:	f001 f954 	bl	80018d0 <HAL_CAN_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_CAN2_Init+0x62>
		Error_Handler();
 800062e:	f000 ff43 	bl	80014b8 <Error_Handler>
	}
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 14;
 8000632:	230e      	movs	r3, #14
 8000634:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x000;
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x000;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x000;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x000;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800064e:	2301      	movs	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000652:	2301      	movs	r3, #1
 8000654:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000656:	230e      	movs	r3, #14
 8000658:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <MX_CAN2_Init+0xa8>)
 8000660:	f001 fa32 	bl	8001ac8 <HAL_CAN_ConfigFilter>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_CAN2_Init+0x9e>
		Error_Handler();
 800066a:	f000 ff25 	bl	80014b8 <Error_Handler>
	}

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000b8 	.word	0x200000b8
 800067c:	40006800 	.word	0x40006800

08000680 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b08c      	sub	sp, #48	; 0x30
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
	if (canHandle->Instance == CAN1) {
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a5d      	ldr	r2, [pc, #372]	; (8000810 <HAL_CAN_MspInit+0x190>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d15b      	bne.n	8000758 <HAL_CAN_MspInit+0xd8>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 80006a0:	4b5c      	ldr	r3, [pc, #368]	; (8000814 <HAL_CAN_MspInit+0x194>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a5b      	ldr	r2, [pc, #364]	; (8000814 <HAL_CAN_MspInit+0x194>)
 80006a8:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 80006aa:	4b5a      	ldr	r3, [pc, #360]	; (8000814 <HAL_CAN_MspInit+0x194>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d10b      	bne.n	80006ca <HAL_CAN_MspInit+0x4a>
			__HAL_RCC_CAN1_CLK_ENABLE();
 80006b2:	4b59      	ldr	r3, [pc, #356]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a58      	ldr	r2, [pc, #352]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80006b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b56      	ldr	r3, [pc, #344]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b53      	ldr	r3, [pc, #332]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a52      	ldr	r2, [pc, #328]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b50      	ldr	r3, [pc, #320]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006e6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4849      	ldr	r0, [pc, #292]	; (800081c <HAL_CAN_MspInit+0x19c>)
 80006f8:	f002 faae 	bl	8002c58 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000706:	2303      	movs	r3, #3
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4842      	ldr	r0, [pc, #264]	; (800081c <HAL_CAN_MspInit+0x19c>)
 8000712:	f002 faa1 	bl	8002c58 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2013      	movs	r0, #19
 800071c:	f002 f875 	bl	800280a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000720:	2013      	movs	r0, #19
 8000722:	f002 f88e 	bl	8002842 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2014      	movs	r0, #20
 800072c:	f002 f86d 	bl	800280a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000730:	2014      	movs	r0, #20
 8000732:	f002 f886 	bl	8002842 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2015      	movs	r0, #21
 800073c:	f002 f865 	bl	800280a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000740:	2015      	movs	r0, #21
 8000742:	f002 f87e 	bl	8002842 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2016      	movs	r0, #22
 800074c:	f002 f85d 	bl	800280a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000750:	2016      	movs	r0, #22
 8000752:	f002 f876 	bl	8002842 <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8000756:	e057      	b.n	8000808 <HAL_CAN_MspInit+0x188>
	} else if (canHandle->Instance == CAN2) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a30      	ldr	r2, [pc, #192]	; (8000820 <HAL_CAN_MspInit+0x1a0>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d152      	bne.n	8000808 <HAL_CAN_MspInit+0x188>
		__HAL_RCC_CAN2_CLK_ENABLE();
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <HAL_CAN_MspInit+0x198>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a2c      	ldr	r2, [pc, #176]	; (8000818 <HAL_CAN_MspInit+0x198>)
 8000768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <HAL_CAN_MspInit+0x198>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <HAL_CAN_MspInit+0x194>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	4a24      	ldr	r2, [pc, #144]	; (8000814 <HAL_CAN_MspInit+0x194>)
 8000782:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1) {
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <HAL_CAN_MspInit+0x194>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10b      	bne.n	80007a4 <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <HAL_CAN_MspInit+0x198>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <HAL_CAN_MspInit+0x198>)
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000796:	61d3      	str	r3, [r2, #28]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_CAN_MspInit+0x198>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80007aa:	f043 0308 	orr.w	r3, r3, #8
 80007ae:	6193      	str	r3, [r2, #24]
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_CAN_MspInit+0x198>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f003 0308 	and.w	r3, r3, #8
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007bc:	2320      	movs	r3, #32
 80007be:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <HAL_CAN_MspInit+0x1a4>)
 80007d0:	f002 fa42 	bl	8002c58 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	480f      	ldr	r0, [pc, #60]	; (8000824 <HAL_CAN_MspInit+0x1a4>)
 80007e8:	f002 fa36 	bl	8002c58 <HAL_GPIO_Init>
		__HAL_AFIO_REMAP_CAN2_ENABLE();
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_CAN_MspInit+0x1a8>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <HAL_CAN_MspInit+0x1a8>)
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	6053      	str	r3, [r2, #4]
}
 8000808:	bf00      	nop
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40006400 	.word	0x40006400
 8000814:	2000008c 	.word	0x2000008c
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800
 8000820:	40006800 	.word	0x40006800
 8000824:	40010c00 	.word	0x40010c00
 8000828:	40010000 	.word	0x40010000

0800082c <EEPROM_Init>:
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	f002 f891 	bl	8002958 <HAL_FLASH_Unlock>
 8000836:	4b5c      	ldr	r3, [pc, #368]	; (80009a8 <EEPROM_Init+0x17c>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	83fb      	strh	r3, [r7, #30]
 800083c:	4b5b      	ldr	r3, [pc, #364]	; (80009ac <EEPROM_Init+0x180>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	83bb      	strh	r3, [r7, #28]
 8000842:	2300      	movs	r3, #0
 8000844:	76fb      	strb	r3, [r7, #27]
 8000846:	8bfb      	ldrh	r3, [r7, #30]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00b      	beq.n	8000864 <EEPROM_Init+0x38>
 800084c:	8bfb      	ldrh	r3, [r7, #30]
 800084e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000852:	4293      	cmp	r3, r2
 8000854:	d006      	beq.n	8000864 <EEPROM_Init+0x38>
 8000856:	8bfb      	ldrh	r3, [r7, #30]
 8000858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085c:	4293      	cmp	r3, r2
 800085e:	d001      	beq.n	8000864 <EEPROM_Init+0x38>
 8000860:	2301      	movs	r3, #1
 8000862:	76fb      	strb	r3, [r7, #27]
 8000864:	8bbb      	ldrh	r3, [r7, #28]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00b      	beq.n	8000882 <EEPROM_Init+0x56>
 800086a:	8bbb      	ldrh	r3, [r7, #28]
 800086c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000870:	4293      	cmp	r3, r2
 8000872:	d006      	beq.n	8000882 <EEPROM_Init+0x56>
 8000874:	8bbb      	ldrh	r3, [r7, #28]
 8000876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087a:	4293      	cmp	r3, r2
 800087c:	d001      	beq.n	8000882 <EEPROM_Init+0x56>
 800087e:	2301      	movs	r3, #1
 8000880:	76fb      	strb	r3, [r7, #27]
 8000882:	8bfa      	ldrh	r2, [r7, #30]
 8000884:	8bbb      	ldrh	r3, [r7, #28]
 8000886:	429a      	cmp	r2, r3
 8000888:	d101      	bne.n	800088e <EEPROM_Init+0x62>
 800088a:	2301      	movs	r3, #1
 800088c:	76fb      	strb	r3, [r7, #27]
 800088e:	7efb      	ldrb	r3, [r7, #27]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d029      	beq.n	80008e8 <EEPROM_Init+0xbc>
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4b42      	ldr	r3, [pc, #264]	; (80009a8 <EEPROM_Init+0x17c>)
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	2302      	movs	r3, #2
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	1d3a      	adds	r2, r7, #4
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 f92b 	bl	8002b08 <HAL_FLASHEx_Erase>
 80008b2:	4603      	mov	r3, r0
 80008b4:	76bb      	strb	r3, [r7, #26]
 80008b6:	7ebb      	ldrb	r3, [r7, #26]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <EEPROM_Init+0x94>
 80008bc:	7ebb      	ldrb	r3, [r7, #26]
 80008be:	e06e      	b.n	800099e <EEPROM_Init+0x172>
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	f04f 0300 	mov.w	r3, #0
 80008c8:	4937      	ldr	r1, [pc, #220]	; (80009a8 <EEPROM_Init+0x17c>)
 80008ca:	2001      	movs	r0, #1
 80008cc:	f001 ffd4 	bl	8002878 <HAL_FLASH_Program>
 80008d0:	4603      	mov	r3, r0
 80008d2:	76bb      	strb	r3, [r7, #26]
 80008d4:	7ebb      	ldrb	r3, [r7, #26]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <EEPROM_Init+0xb2>
 80008da:	7ebb      	ldrb	r3, [r7, #26]
 80008dc:	e05f      	b.n	800099e <EEPROM_Init+0x172>
 80008de:	2300      	movs	r3, #0
 80008e0:	83fb      	strh	r3, [r7, #30]
 80008e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e6:	83bb      	strh	r3, [r7, #28]
 80008e8:	8bfb      	ldrh	r3, [r7, #30]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <EEPROM_Init+0xc8>
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <EEPROM_Init+0x184>)
 80008f0:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <EEPROM_Init+0x17c>)
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	8bbb      	ldrh	r3, [r7, #28]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <EEPROM_Init+0xd4>
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <EEPROM_Init+0x184>)
 80008fc:	4a2b      	ldr	r2, [pc, #172]	; (80009ac <EEPROM_Init+0x180>)
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	8bfb      	ldrh	r3, [r7, #30]
 8000902:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000906:	4293      	cmp	r3, r2
 8000908:	d102      	bne.n	8000910 <EEPROM_Init+0xe4>
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <EEPROM_Init+0x188>)
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <EEPROM_Init+0x17c>)
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	8bbb      	ldrh	r3, [r7, #28]
 8000912:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000916:	4293      	cmp	r3, r2
 8000918:	d102      	bne.n	8000920 <EEPROM_Init+0xf4>
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <EEPROM_Init+0x188>)
 800091c:	4a23      	ldr	r2, [pc, #140]	; (80009ac <EEPROM_Init+0x180>)
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	8bfb      	ldrh	r3, [r7, #30]
 8000922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000926:	4293      	cmp	r3, r2
 8000928:	d102      	bne.n	8000930 <EEPROM_Init+0x104>
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <EEPROM_Init+0x18c>)
 800092c:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <EEPROM_Init+0x17c>)
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	8bbb      	ldrh	r3, [r7, #28]
 8000932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000936:	4293      	cmp	r3, r2
 8000938:	d102      	bne.n	8000940 <EEPROM_Init+0x114>
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <EEPROM_Init+0x18c>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <EEPROM_Init+0x180>)
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <EEPROM_Init+0x184>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fa93 	bl	8000e70 <EEPROM_PageToIndex>
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <EEPROM_Init+0x188>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fa8e 	bl	8000e70 <EEPROM_PageToIndex>
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <EEPROM_Init+0x188>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d01f      	beq.n	800099c <EEPROM_Init+0x170>
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <EEPROM_Init+0x184>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10c      	bne.n	800097e <EEPROM_Init+0x152>
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <EEPROM_Init+0x188>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f9e4 	bl	8000d38 <EEPROM_SetPageStatus>
 8000970:	4603      	mov	r3, r0
 8000972:	76bb      	strb	r3, [r7, #26]
 8000974:	7ebb      	ldrb	r3, [r7, #26]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d010      	beq.n	800099c <EEPROM_Init+0x170>
 800097a:	7ebb      	ldrb	r3, [r7, #26]
 800097c:	e00f      	b.n	800099e <EEPROM_Init+0x172>
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <EEPROM_Init+0x184>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <EEPROM_Init+0x188>)
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f96d 	bl	8000c68 <EEPROM_PageTransfer>
 800098e:	4603      	mov	r3, r0
 8000990:	76bb      	strb	r3, [r7, #26]
 8000992:	7ebb      	ldrb	r3, [r7, #26]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <EEPROM_Init+0x170>
 8000998:	7ebb      	ldrb	r3, [r7, #26]
 800099a:	e000      	b.n	800099e <EEPROM_Init+0x172>
 800099c:	2300      	movs	r3, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	0800f000 	.word	0x0800f000
 80009ac:	0800f800 	.word	0x0800f800
 80009b0:	20000098 	.word	0x20000098
 80009b4:	2000009c 	.word	0x2000009c
 80009b8:	200000a0 	.word	0x200000a0

080009bc <EEPROM_ReadVariable>:
 80009bc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80009c0:	b085      	sub	sp, #20
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	6039      	str	r1, [r7, #0]
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d901      	bls.n	80009d4 <EEPROM_ReadVariable+0x18>
 80009d0:	2306      	movs	r3, #6
 80009d2:	e041      	b.n	8000a58 <EEPROM_ReadVariable+0x9c>
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <EEPROM_ReadVariable+0xa8>)
 80009d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009dc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80009e0:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <EEPROM_ReadVariable+0xac>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <EEPROM_ReadVariable+0x36>
 80009ee:	2305      	movs	r3, #5
 80009f0:	e032      	b.n	8000a58 <EEPROM_ReadVariable+0x9c>
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <EEPROM_ReadVariable+0xb0>)
 80009f6:	5cd3      	ldrb	r3, [r2, r3]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d011      	beq.n	8000a20 <EEPROM_ReadVariable+0x64>
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	dc28      	bgt.n	8000a52 <EEPROM_ReadVariable+0x96>
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d002      	beq.n	8000a0a <EEPROM_ReadVariable+0x4e>
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d006      	beq.n	8000a16 <EEPROM_ReadVariable+0x5a>
 8000a08:	e023      	b.n	8000a52 <EEPROM_ReadVariable+0x96>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	801a      	strh	r2, [r3, #0]
 8000a14:	e01f      	b.n	8000a56 <EEPROM_ReadVariable+0x9a>
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e01a      	b.n	8000a56 <EEPROM_ReadVariable+0x9a>
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f04f 0100 	mov.w	r1, #0
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4698      	mov	r8, r3
 8000a32:	f04f 0900 	mov.w	r9, #0
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	f04f 0300 	mov.w	r3, #0
 8000a3e:	4643      	mov	r3, r8
 8000a40:	2200      	movs	r2, #0
 8000a42:	ea40 0402 	orr.w	r4, r0, r2
 8000a46:	ea41 0503 	orr.w	r5, r1, r3
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	e9c3 4500 	strd	r4, r5, [r3]
 8000a50:	e001      	b.n	8000a56 <EEPROM_ReadVariable+0x9a>
 8000a52:	2305      	movs	r3, #5
 8000a54:	e000      	b.n	8000a58 <EEPROM_ReadVariable+0x9c>
 8000a56:	2300      	movs	r3, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000a62:	4770      	bx	lr
 8000a64:	20000094 	.word	0x20000094
 8000a68:	0800f000 	.word	0x0800f000
 8000a6c:	20000090 	.word	0x20000090

08000a70 <EEPROM_WriteVariable>:
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	4601      	mov	r1, r0
 8000a78:	e9c7 2300 	strd	r2, r3, [r7]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	81fb      	strh	r3, [r7, #14]
 8000a80:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <EEPROM_WriteVariable+0x1e0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
 8000a86:	4b73      	ldr	r3, [pc, #460]	; (8000c54 <EEPROM_WriteVariable+0x1e4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <EEPROM_WriteVariable+0x24>
 8000a8e:	4b71      	ldr	r3, [pc, #452]	; (8000c54 <EEPROM_WriteVariable+0x1e4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <EEPROM_WriteVariable+0x2e>
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	e0d3      	b.n	8000c46 <EEPROM_WriteVariable+0x1d6>
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000aaa:	2201      	movs	r2, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000ab8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <EEPROM_WriteVariable+0x56>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000ac6:	4b64      	ldr	r3, [pc, #400]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <EEPROM_WriteVariable+0x6e>
 8000ace:	4b62      	ldr	r3, [pc, #392]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d25d      	bcs.n	8000b9a <EEPROM_WriteVariable+0x12a>
 8000ade:	2302      	movs	r3, #2
 8000ae0:	843b      	strh	r3, [r7, #32]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	83fb      	strh	r3, [r7, #30]
 8000ae6:	e023      	b.n	8000b30 <EEPROM_WriteVariable+0xc0>
 8000ae8:	8bfa      	ldrh	r2, [r7, #30]
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d10b      	bne.n	8000b08 <EEPROM_WriteVariable+0x98>
 8000af0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000af4:	2201      	movs	r2, #1
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	8c3b      	ldrh	r3, [r7, #32]
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	3302      	adds	r3, #2
 8000b04:	843b      	strh	r3, [r7, #32]
 8000b06:	e010      	b.n	8000b2a <EEPROM_WriteVariable+0xba>
 8000b08:	8bfb      	ldrh	r3, [r7, #30]
 8000b0a:	4a54      	ldr	r2, [pc, #336]	; (8000c5c <EEPROM_WriteVariable+0x1ec>)
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <EEPROM_WriteVariable+0xba>
 8000b12:	8bfb      	ldrh	r3, [r7, #30]
 8000b14:	4a51      	ldr	r2, [pc, #324]	; (8000c5c <EEPROM_WriteVariable+0x1ec>)
 8000b16:	5cd3      	ldrb	r3, [r2, r3]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	8c3b      	ldrh	r3, [r7, #32]
 8000b22:	4413      	add	r3, r2
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3302      	adds	r3, #2
 8000b28:	843b      	strh	r3, [r7, #32]
 8000b2a:	8bfb      	ldrh	r3, [r7, #30]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	83fb      	strh	r3, [r7, #30]
 8000b30:	8bfb      	ldrh	r3, [r7, #30]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d9d8      	bls.n	8000ae8 <EEPROM_WriteVariable+0x78>
 8000b36:	8c3b      	ldrh	r3, [r7, #32]
 8000b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b3c:	d901      	bls.n	8000b42 <EEPROM_WriteVariable+0xd2>
 8000b3e:	2307      	movs	r3, #7
 8000b40:	e081      	b.n	8000c46 <EEPROM_WriteVariable+0x1d6>
 8000b42:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <EEPROM_WriteVariable+0x1f0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f64e 61ee 	movw	r1, #61166	; 0xeeee
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f8f4 	bl	8000d38 <EEPROM_SetPageStatus>
 8000b50:	4603      	mov	r3, r0
 8000b52:	75fb      	strb	r3, [r7, #23]
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <EEPROM_WriteVariable+0xee>
 8000b5a:	7dfb      	ldrb	r3, [r7, #23]
 8000b5c:	e073      	b.n	8000c46 <EEPROM_WriteVariable+0x1d6>
 8000b5e:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <EEPROM_WriteVariable+0x1e4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3302      	adds	r3, #2
 8000b64:	4a3c      	ldr	r2, [pc, #240]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	89f9      	ldrh	r1, [r7, #14]
 8000b6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b74:	4608      	mov	r0, r1
 8000b76:	f7ff ff7b 	bl	8000a70 <EEPROM_WriteVariable>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <EEPROM_WriteVariable+0x118>
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	e05e      	b.n	8000c46 <EEPROM_WriteVariable+0x1d6>
 8000b88:	f000 f86e 	bl	8000c68 <EEPROM_PageTransfer>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	75fb      	strb	r3, [r7, #23]
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d055      	beq.n	8000c42 <EEPROM_WriteVariable+0x1d2>
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	e055      	b.n	8000c46 <EEPROM_WriteVariable+0x1d6>
 8000b9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d00f      	beq.n	8000bc2 <EEPROM_WriteVariable+0x152>
 8000ba2:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1c99      	adds	r1, r3, #2
 8000bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bb0:	f001 fe62 	bl	8002878 <HAL_FLASH_Program>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	75fb      	strb	r3, [r7, #23]
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <EEPROM_WriteVariable+0x152>
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	e041      	b.n	8000c46 <EEPROM_WriteVariable+0x1d6>
 8000bc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	039b      	lsls	r3, r3, #14
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	89fb      	ldrh	r3, [r7, #14]
 8000bce:	4413      	add	r3, r2
 8000bd0:	82bb      	strh	r3, [r7, #20]
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000bd4:	6819      	ldr	r1, [r3, #0]
 8000bd6:	8aba      	ldrh	r2, [r7, #20]
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f001 fe4b 	bl	8002878 <HAL_FLASH_Program>
 8000be2:	4603      	mov	r3, r0
 8000be4:	75fb      	strb	r3, [r7, #23]
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <EEPROM_WriteVariable+0x180>
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	e02a      	b.n	8000c46 <EEPROM_WriteVariable+0x1d6>
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	89fa      	ldrh	r2, [r7, #14]
 8000bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	b299      	uxth	r1, r3
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <EEPROM_WriteVariable+0x1f4>)
 8000c02:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	4914      	ldr	r1, [pc, #80]	; (8000c5c <EEPROM_WriteVariable+0x1ec>)
 8000c0a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000c0e:	54ca      	strb	r2, [r1, r3]
 8000c10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d104      	bne.n	8000c22 <EEPROM_WriteVariable+0x1b2>
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <EEPROM_WriteVariable+0x1f4>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d804      	bhi.n	8000c44 <EEPROM_WriteVariable+0x1d4>
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <EEPROM_WriteVariable+0x1e8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e000      	b.n	8000c44 <EEPROM_WriteVariable+0x1d4>
 8000c42:	bf00      	nop
 8000c44:	2300      	movs	r3, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000098 	.word	0x20000098
 8000c54:	2000009c 	.word	0x2000009c
 8000c58:	200000a4 	.word	0x200000a4
 8000c5c:	20000090 	.word	0x20000090
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	20000094 	.word	0x20000094

08000c68 <EEPROM_PageTransfer>:
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <EEPROM_PageTransfer+0xc0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c78:	81bb      	strh	r3, [r7, #12]
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <EEPROM_PageTransfer+0xc0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000c84:	817b      	strh	r3, [r7, #10]
 8000c86:	2300      	movs	r3, #0
 8000c88:	81fb      	strh	r3, [r7, #14]
 8000c8a:	e02a      	b.n	8000ce2 <EEPROM_PageTransfer+0x7a>
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	4a27      	ldr	r2, [pc, #156]	; (8000d2c <EEPROM_PageTransfer+0xc4>)
 8000c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c94:	89ba      	ldrh	r2, [r7, #12]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d220      	bcs.n	8000cdc <EEPROM_PageTransfer+0x74>
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <EEPROM_PageTransfer+0xc4>)
 8000c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ca2:	897a      	ldrh	r2, [r7, #10]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d919      	bls.n	8000cdc <EEPROM_PageTransfer+0x74>
 8000ca8:	463a      	mov	r2, r7
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe84 	bl	80009bc <EEPROM_ReadVariable>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d110      	bne.n	8000cdc <EEPROM_PageTransfer+0x74>
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <EEPROM_PageTransfer+0xc8>)
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	89f9      	ldrh	r1, [r7, #14]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	f7ff fed1 	bl	8000a70 <EEPROM_WriteVariable>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	727b      	strb	r3, [r7, #9]
 8000cd2:	7a7b      	ldrb	r3, [r7, #9]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <EEPROM_PageTransfer+0x74>
 8000cd8:	7a7b      	ldrb	r3, [r7, #9]
 8000cda:	e021      	b.n	8000d20 <EEPROM_PageTransfer+0xb8>
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	81fb      	strh	r3, [r7, #14]
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d9d1      	bls.n	8000c8c <EEPROM_PageTransfer+0x24>
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <EEPROM_PageTransfer+0xc0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f821 	bl	8000d38 <EEPROM_SetPageStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	727b      	strb	r3, [r7, #9]
 8000cfa:	7a7b      	ldrb	r3, [r7, #9]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <EEPROM_PageTransfer+0x9c>
 8000d00:	7a7b      	ldrb	r3, [r7, #9]
 8000d02:	e00d      	b.n	8000d20 <EEPROM_PageTransfer+0xb8>
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <EEPROM_PageTransfer+0xcc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f814 	bl	8000d38 <EEPROM_SetPageStatus>
 8000d10:	4603      	mov	r3, r0
 8000d12:	727b      	strb	r3, [r7, #9]
 8000d14:	7a7b      	ldrb	r3, [r7, #9]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <EEPROM_PageTransfer+0xb6>
 8000d1a:	7a7b      	ldrb	r3, [r7, #9]
 8000d1c:	e000      	b.n	8000d20 <EEPROM_PageTransfer+0xb8>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000098 	.word	0x20000098
 8000d2c:	20000094 	.word	0x20000094
 8000d30:	20000090 	.word	0x20000090
 8000d34:	2000009c 	.word	0x2000009c

08000d38 <EEPROM_SetPageStatus>:
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d13f      	bne.n	8000dce <EEPROM_SetPageStatus+0x96>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d56:	847b      	strh	r3, [r7, #34]	; 0x22
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8000d60:	843b      	strh	r3, [r7, #32]
 8000d62:	2300      	movs	r3, #0
 8000d64:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d66:	e015      	b.n	8000d94 <EEPROM_SetPageStatus+0x5c>
 8000d68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d6a:	4a3d      	ldr	r2, [pc, #244]	; (8000e60 <EEPROM_SetPageStatus+0x128>)
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d20b      	bcs.n	8000d8e <EEPROM_SetPageStatus+0x56>
 8000d76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d78:	4a39      	ldr	r2, [pc, #228]	; (8000e60 <EEPROM_SetPageStatus+0x128>)
 8000d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d7e:	8c3a      	ldrh	r2, [r7, #32]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d904      	bls.n	8000d8e <EEPROM_SetPageStatus+0x56>
 8000d84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d86:	4a36      	ldr	r2, [pc, #216]	; (8000e60 <EEPROM_SetPageStatus+0x128>)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d90:	3301      	adds	r3, #1
 8000d92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d9e6      	bls.n	8000d68 <EEPROM_SetPageStatus+0x30>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	2301      	movs	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	f107 020c 	add.w	r2, r7, #12
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fea7 	bl	8002b08 <HAL_FLASHEx_Erase>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d013      	beq.n	8000df0 <EEPROM_SetPageStatus+0xb8>
 8000dc8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000dcc:	e043      	b.n	8000e56 <EEPROM_SetPageStatus+0x11e>
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f001 fd4e 	bl	8002878 <HAL_FLASH_Program>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000de2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <EEPROM_SetPageStatus+0xb8>
 8000dea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000dee:	e032      	b.n	8000e56 <EEPROM_SetPageStatus+0x11e>
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <EEPROM_SetPageStatus+0x12c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d103      	bne.n	8000e02 <EEPROM_SetPageStatus+0xca>
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <EEPROM_SetPageStatus+0x12c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e010      	b.n	8000e24 <EEPROM_SetPageStatus+0xec>
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <EEPROM_SetPageStatus+0x130>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d103      	bne.n	8000e14 <EEPROM_SetPageStatus+0xdc>
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <EEPROM_SetPageStatus+0x130>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <EEPROM_SetPageStatus+0xec>
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <EEPROM_SetPageStatus+0x134>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d102      	bne.n	8000e24 <EEPROM_SetPageStatus+0xec>
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <EEPROM_SetPageStatus+0x134>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d103      	bne.n	8000e32 <EEPROM_SetPageStatus+0xfa>
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <EEPROM_SetPageStatus+0x12c>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e010      	b.n	8000e54 <EEPROM_SetPageStatus+0x11c>
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d103      	bne.n	8000e44 <EEPROM_SetPageStatus+0x10c>
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <EEPROM_SetPageStatus+0x130>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e007      	b.n	8000e54 <EEPROM_SetPageStatus+0x11c>
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d102      	bne.n	8000e54 <EEPROM_SetPageStatus+0x11c>
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <EEPROM_SetPageStatus+0x134>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	2300      	movs	r3, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000094 	.word	0x20000094
 8000e64:	20000098 	.word	0x20000098
 8000e68:	2000009c 	.word	0x2000009c
 8000e6c:	200000a0 	.word	0x200000a0

08000e70 <EEPROM_PageToIndex>:
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <EEPROM_PageToIndex+0x12>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e070      	b.n	8000f64 <EEPROM_PageToIndex+0xf4>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3302      	adds	r3, #2
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e059      	b.n	8000f46 <EEPROM_PageToIndex+0xd6>
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	81fb      	strh	r3, [r7, #14]
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d121      	bne.n	8000ee6 <EEPROM_PageToIndex+0x76>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	77fb      	strb	r3, [r7, #31]
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	75fb      	strb	r3, [r7, #23]
 8000eaa:	e013      	b.n	8000ed4 <EEPROM_PageToIndex+0x64>
 8000eac:	7dfa      	ldrb	r2, [r7, #23]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d911      	bls.n	8000edc <EEPROM_PageToIndex+0x6c>
 8000eb8:	7dfa      	ldrb	r2, [r7, #23]
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d001      	beq.n	8000ece <EEPROM_PageToIndex+0x5e>
 8000eca:	7dfb      	ldrb	r3, [r7, #23]
 8000ecc:	77fb      	strb	r3, [r7, #31]
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	75fb      	strb	r3, [r7, #23]
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d9e8      	bls.n	8000eac <EEPROM_PageToIndex+0x3c>
 8000eda:	e000      	b.n	8000ede <EEPROM_PageToIndex+0x6e>
 8000edc:	bf00      	nop
 8000ede:	7ffb      	ldrb	r3, [r7, #31]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d12b      	bne.n	8000f3c <EEPROM_PageToIndex+0xcc>
 8000ee4:	e033      	b.n	8000f4e <EEPROM_PageToIndex+0xde>
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	0b9b      	lsrs	r3, r3, #14
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	737b      	strb	r3, [r7, #13]
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000ef4:	817b      	strh	r3, [r7, #10]
 8000ef6:	897b      	ldrh	r3, [r7, #10]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d815      	bhi.n	8000f28 <EEPROM_PageToIndex+0xb8>
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	897a      	ldrh	r2, [r7, #10]
 8000f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f06:	3302      	adds	r3, #2
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <EEPROM_PageToIndex+0x100>)
 8000f0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000f10:	897b      	ldrh	r3, [r7, #10]
 8000f12:	4918      	ldr	r1, [pc, #96]	; (8000f74 <EEPROM_PageToIndex+0x104>)
 8000f14:	7b7a      	ldrb	r2, [r7, #13]
 8000f16:	54ca      	strb	r2, [r1, r3]
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d104      	bne.n	8000f28 <EEPROM_PageToIndex+0xb8>
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <EEPROM_PageToIndex+0x100>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	77fb      	strb	r3, [r7, #31]
 8000f32:	7b7b      	ldrb	r3, [r7, #13]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <EEPROM_PageToIndex+0xcc>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	77fb      	strb	r3, [r7, #31]
 8000f3c:	7ffa      	ldrb	r2, [r7, #31]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	4413      	add	r3, r2
 8000f42:	3302      	adds	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3a1      	bcc.n	8000e92 <EEPROM_PageToIndex+0x22>
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <EEPROM_PageToIndex+0x108>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d302      	bcc.n	8000f62 <EEPROM_PageToIndex+0xf2>
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <EEPROM_PageToIndex+0x108>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	3724      	adds	r7, #36	; 0x24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000094 	.word	0x20000094
 8000f74:	20000090 	.word	0x20000090
 8000f78:	200000a4 	.word	0x200000a4

08000f7c <MX_GPIO_Init>:
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000f96:	f043 0320 	orr.w	r3, r3, #32
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_GPIO_Init+0x80>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	4619      	mov	r1, r3
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <MX_GPIO_Init+0x84>)
 8000fee:	f001 fe33 	bl	8002c58 <HAL_GPIO_Init>
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010800 	.word	0x40010800

08001004 <MX_I2C1_Init>:
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C1_Init+0x50>)
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <MX_I2C1_Init+0x54>)
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C1_Init+0x50>)
 8001010:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_I2C1_Init+0x58>)
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_I2C1_Init+0x50>)
 8001022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_I2C1_Init+0x50>)
 8001042:	f001 ff8d 	bl	8002f60 <HAL_I2C_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x4c>
 800104c:	f000 fa34 	bl	80014b8 <Error_Handler>
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000108 	.word	0x20000108
 8001058:	40005400 	.word	0x40005400
 800105c:	00061a80 	.word	0x00061a80

08001060 <HAL_I2C_MspInit>:
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <HAL_I2C_MspInit+0x90>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d132      	bne.n	80010e6 <HAL_I2C_MspInit+0x86>
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_I2C_MspInit+0x94>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_I2C_MspInit+0x94>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_I2C_MspInit+0x94>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	f44f 7340 	mov.w	r3, #768	; 0x300
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	2312      	movs	r3, #18
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	2303      	movs	r3, #3
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4812      	ldr	r0, [pc, #72]	; (80010f8 <HAL_I2C_MspInit+0x98>)
 80010ae:	f001 fdd3 	bl	8002c58 <HAL_GPIO_Init>
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_I2C_MspInit+0x9c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	4a0c      	ldr	r2, [pc, #48]	; (80010fc <HAL_I2C_MspInit+0x9c>)
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	6053      	str	r3, [r2, #4]
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_I2C_MspInit+0x94>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <HAL_I2C_MspInit+0x94>)
 80010d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d8:	61d3      	str	r3, [r2, #28]
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_I2C_MspInit+0x94>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	; 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40005400 	.word	0x40005400
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40010000 	.word	0x40010000

08001100 <flashMemoryInit>:
extern double readXFromFlash();
extern double readYFromFlash();
double readFlash(uint16_t address);
void writeFlash(uint32_t address, double data);

void flashMemoryInit() {
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af02      	add	r7, sp, #8
	//initialize EEPROM
	EEPROM_Init();
 8001106:	f7ff fb91 	bl	800082c <EEPROM_Init>

	//set default value if variable not assigned
	EEPROM_Value value;
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	81fb      	strh	r3, [r7, #14]
 800110e:	e02b      	b.n	8001168 <flashMemoryInit+0x68>
		if (EEPROM_ReadVariable(i, &value) == EEPROM_NOT_ASSIGNED) {
 8001110:	463a      	mov	r2, r7
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fc50 	bl	80009bc <EEPROM_ReadVariable>
 800111c:	4603      	mov	r3, r0
 800111e:	2b05      	cmp	r3, #5
 8001120:	d11c      	bne.n	800115c <flashMemoryInit+0x5c>
			isCorrectionAssign = false;
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <flashMemoryInit+0x80>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]

			switch (i) {
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <flashMemoryInit+0x34>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d00a      	beq.n	8001148 <flashMemoryInit+0x48>
 8001132:	e016      	b.n	8001162 <flashMemoryInit+0x62>
			case 0:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001134:	a310      	add	r3, pc, #64	; (adr r3, 8001178 <flashMemoryInit+0x78>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	89f9      	ldrh	r1, [r7, #14]
 800113c:	2003      	movs	r0, #3
 800113e:	9000      	str	r0, [sp, #0]
 8001140:	4608      	mov	r0, r1
 8001142:	f7ff fc95 	bl	8000a70 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 8001146:	e00c      	b.n	8001162 <flashMemoryInit+0x62>
			case 1:
				EEPROM_WriteVariable(i, (EEPROM_Value) (double) 0.00001,
 8001148:	a30b      	add	r3, pc, #44	; (adr r3, 8001178 <flashMemoryInit+0x78>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	89f9      	ldrh	r1, [r7, #14]
 8001150:	2003      	movs	r0, #3
 8001152:	9000      	str	r0, [sp, #0]
 8001154:	4608      	mov	r0, r1
 8001156:	f7ff fc8b 	bl	8000a70 <EEPROM_WriteVariable>
						EEPROM_SIZE64);
				break;
 800115a:	e002      	b.n	8001162 <flashMemoryInit+0x62>
			}
		} else {
			isCorrectionAssign = true;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <flashMemoryInit+0x80>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < EEPROM_VARIABLE_COUNT ; i++) {
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	3301      	adds	r3, #1
 8001166:	81fb      	strh	r3, [r7, #14]
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d9d0      	bls.n	8001110 <flashMemoryInit+0x10>
		}
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	88e368f1 	.word	0x88e368f1
 800117c:	3ee4f8b5 	.word	0x3ee4f8b5
 8001180:	200000a8 	.word	0x200000a8

08001184 <main>:
void SystemClock_Config(void);
void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN);
void sendGyroData(int x, int y);

int main(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

	HAL_Init();
 8001188:	f000 fb40 	bl	800180c <HAL_Init>

	SystemClock_Config();
 800118c:	f000 f83c 	bl	8001208 <SystemClock_Config>

	MX_GPIO_Init();
 8001190:	f7ff fef4 	bl	8000f7c <MX_GPIO_Init>
	MX_CAN1_Init();
 8001194:	f7ff f9c4 	bl	8000520 <MX_CAN1_Init>
	MX_CAN2_Init();
 8001198:	f7ff fa1a 	bl	80005d0 <MX_CAN2_Init>
	MX_I2C1_Init();
 800119c:	f7ff ff32 	bl	8001004 <MX_I2C1_Init>
	flashMemoryInit();
 80011a0:	f7ff ffae 	bl	8001100 <flashMemoryInit>

	//MPU initialize
	while (MPU6050_Init(&hi2c1) == 1) {
 80011a4:	bf00      	nop
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <main+0x78>)
 80011a8:	f000 f98b 	bl	80014c2 <MPU6050_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d0f9      	beq.n	80011a6 <main+0x22>

	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80011b2:	4813      	ldr	r0, [pc, #76]	; (8001200 <main+0x7c>)
 80011b4:	f000 fd68 	bl	8001c88 <HAL_CAN_Start>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <main+0x3e>
		Error_Handler();
 80011be:	f000 f97b 	bl	80014b8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 80011c2:	f648 4102 	movw	r1, #35842	; 0x8c02
 80011c6:	480e      	ldr	r0, [pc, #56]	; (8001200 <main+0x7c>)
 80011c8:	f000 ffe4 	bl	8002194 <HAL_CAN_ActivateNotification>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <main+0x52>
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 80011d2:	f000 f971 	bl	80014b8 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <main+0x80>)
 80011d8:	f000 fd56 	bl	8001c88 <HAL_CAN_Start>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <main+0x62>
		Error_Handler();
 80011e2:	f000 f969 	bl	80014b8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2,
 80011e6:	f648 4110 	movw	r1, #35856	; 0x8c10
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <main+0x80>)
 80011ec:	f000 ffd2 	bl	8002194 <HAL_CAN_ActivateNotification>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <main+0x76>
			CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
					| CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
		Error_Handler();
 80011f6:	f000 f95f 	bl	80014b8 <Error_Handler>
	}

//	//loop
	while (1) {
 80011fa:	e7fe      	b.n	80011fa <main+0x76>
 80011fc:	20000108 	.word	0x20000108
 8001200:	200000e0 	.word	0x200000e0
 8001204:	200000b8 	.word	0x200000b8

08001208 <SystemClock_Config>:
//
//		HAL_Delay(200);
	}
}

void SystemClock_Config(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b094      	sub	sp, #80	; 0x50
 800120c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	2238      	movs	r2, #56	; 0x38
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fbc4 	bl	80049a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122a:	2301      	movs	r3, #1
 800122c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001232:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fe8d 	bl	8003f60 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x48>
		Error_Handler();
 800124c:	f000 f934 	bl	80014b8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001254:	2301      	movs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f003 f98f 	bl	800458c <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x70>
		Error_Handler();
 8001274:	f000 f920 	bl	80014b8 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <SystemClock_Config+0x80>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	; 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	42420070 	.word	0x42420070

0800128c <HAL_CAN_RxFifo0MsgPendingCallback>:

// can fifo0 can1 callback
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan1, RxDataCan1)) {
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001298:	2100      	movs	r1, #0
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fe69 	bl	8001f72 <HAL_CAN_GetRxMessage>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		if (RxHeaderCan1.StdId == 0x350 && RxDataCan1[0] == 0xc7) {
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 80012ae:	d106      	bne.n	80012be <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2bc7      	cmp	r3, #199	; 0xc7
 80012b6:	d102      	bne.n	80012be <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			RxDataCan1[0] = 0xc6;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80012ba:	22c6      	movs	r2, #198	; 0xc6
 80012bc:	701a      	strb	r2, [r3, #0]
		}

		CAN2_Transmit_manual(RxHeaderCan1.StdId, RxHeaderCan1.DLC, RxDataCan1);
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80012c6:	6912      	ldr	r2, [r2, #16]
 80012c8:	b2d1      	uxtb	r1, r2
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f885 	bl	80013dc <CAN2_Transmit_manual>
	}
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000240 	.word	0x20000240
 80012e0:	200001bc 	.word	0x200001bc

080012e4 <HAL_CAN_RxFifo1MsgPendingCallback>:

// can fifo1 for can2 callback
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeaderCan2, RxDataCan2)
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fe3d 	bl	8001f72 <HAL_CAN_GetRxMessage>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
			== HAL_OK) {
		CAN1_Transmit_manual(RxHeaderCan2.StdId, RxHeaderCan2.DLC, RxDataCan2);
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001306:	6912      	ldr	r2, [r2, #16]
 8001308:	b2d1      	uxtb	r1, r2
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f809 	bl	8001324 <CAN1_Transmit_manual>
	}
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000230 	.word	0x20000230
 8001320:	200001fc 	.word	0x200001fc

08001324 <CAN1_Transmit_manual>:

void CAN1_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	603a      	str	r2, [r7, #0]
 800132e:	80fb      	strh	r3, [r7, #6]
 8001330:	460b      	mov	r3, r1
 8001332:	717b      	strb	r3, [r7, #5]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0) {
 8001334:	bf00      	nop
 8001336:	4824      	ldr	r0, [pc, #144]	; (80013c8 <CAN1_Transmit_manual+0xa4>)
 8001338:	f000 fdc4 	bl	8001ec4 <HAL_CAN_GetTxMailboxesFreeLevel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f9      	beq.n	8001336 <CAN1_Transmit_manual+0x12>

	}

	TxHeaderCan1.StdId = ID_CAN;
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <CAN1_Transmit_manual+0xa8>)
 8001346:	6013      	str	r3, [r2, #0]
	TxHeaderCan1.DLC = DLC_CAN;
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	4a20      	ldr	r2, [pc, #128]	; (80013cc <CAN1_Transmit_manual+0xa8>)
 800134c:	6113      	str	r3, [r2, #16]
	TxDataCan1[0] = DATA_CAN[0];
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 8001354:	701a      	strb	r2, [r3, #0]
	TxDataCan1[1] = DATA_CAN[1];
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	785a      	ldrb	r2, [r3, #1]
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 800135c:	705a      	strb	r2, [r3, #1]
	TxDataCan1[2] = DATA_CAN[2];
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	789a      	ldrb	r2, [r3, #2]
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 8001364:	709a      	strb	r2, [r3, #2]
	TxDataCan1[3] = DATA_CAN[3];
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	78da      	ldrb	r2, [r3, #3]
 800136a:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 800136c:	70da      	strb	r2, [r3, #3]
	TxDataCan1[4] = DATA_CAN[4];
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	791a      	ldrb	r2, [r3, #4]
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 8001374:	711a      	strb	r2, [r3, #4]
	TxDataCan1[5] = DATA_CAN[5];
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	795a      	ldrb	r2, [r3, #5]
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 800137c:	715a      	strb	r2, [r3, #5]
	TxDataCan1[6] = DATA_CAN[6];
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	799a      	ldrb	r2, [r3, #6]
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 8001384:	719a      	strb	r2, [r3, #6]
	TxDataCan1[7] = DATA_CAN[7];
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	79da      	ldrb	r2, [r3, #7]
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 800138c:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeaderCan1, TxDataCan1, &TxMailboxCan1)
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <CAN1_Transmit_manual+0xb0>)
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <CAN1_Transmit_manual+0xac>)
 8001392:	490e      	ldr	r1, [pc, #56]	; (80013cc <CAN1_Transmit_manual+0xa8>)
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <CAN1_Transmit_manual+0xa4>)
 8001396:	f000 fcbb 	bl	8001d10 <HAL_CAN_AddTxMessage>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <CAN1_Transmit_manual+0x88>
			!= HAL_OK) {
		Error_Handler();
 80013a0:	f000 f88a 	bl	80014b8 <Error_Handler>
	}

	//wait while message will sent
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailboxCan1)) {
 80013a4:	e002      	b.n	80013ac <CAN1_Transmit_manual+0x88>
		printf("pending can1");
 80013a6:	480c      	ldr	r0, [pc, #48]	; (80013d8 <CAN1_Transmit_manual+0xb4>)
 80013a8:	f003 fb04 	bl	80049b4 <iprintf>
	while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailboxCan1)) {
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <CAN1_Transmit_manual+0xb0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <CAN1_Transmit_manual+0xa4>)
 80013b4:	f000 fdba 	bl	8001f2c <HAL_CAN_IsTxMessagePending>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f3      	bne.n	80013a6 <CAN1_Transmit_manual+0x82>
	}
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000e0 	.word	0x200000e0
 80013cc:	200001dc 	.word	0x200001dc
 80013d0:	20000238 	.word	0x20000238
 80013d4:	200001b8 	.word	0x200001b8
 80013d8:	0800588c 	.word	0x0800588c

080013dc <CAN2_Transmit_manual>:
void CAN2_Transmit_manual(uint16_t ID_CAN, uint8_t DLC_CAN, uint8_t *DATA_CAN) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	603a      	str	r2, [r7, #0]
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	460b      	mov	r3, r1
 80013ea:	717b      	strb	r3, [r7, #5]
	//wait while mailbox will be free
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) == 0) {
 80013ec:	bf00      	nop
 80013ee:	4823      	ldr	r0, [pc, #140]	; (800147c <CAN2_Transmit_manual+0xa0>)
 80013f0:	f000 fd68 	bl	8001ec4 <HAL_CAN_GetTxMailboxesFreeLevel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f9      	beq.n	80013ee <CAN2_Transmit_manual+0x12>

	}

	TxHeaderCan2.StdId = ID_CAN;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <CAN2_Transmit_manual+0xa4>)
 80013fe:	6013      	str	r3, [r2, #0]
	TxHeaderCan2.DLC = DLC_CAN;
 8001400:	797b      	ldrb	r3, [r7, #5]
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <CAN2_Transmit_manual+0xa4>)
 8001404:	6113      	str	r3, [r2, #16]
	TxDataCan2[0] = DATA_CAN[0];
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 800140c:	701a      	strb	r2, [r3, #0]
	TxDataCan2[1] = DATA_CAN[1];
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	785a      	ldrb	r2, [r3, #1]
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 8001414:	705a      	strb	r2, [r3, #1]
	TxDataCan2[2] = DATA_CAN[2];
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	789a      	ldrb	r2, [r3, #2]
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 800141c:	709a      	strb	r2, [r3, #2]
	TxDataCan2[3] = DATA_CAN[3];
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	78da      	ldrb	r2, [r3, #3]
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 8001424:	70da      	strb	r2, [r3, #3]
	TxDataCan2[4] = DATA_CAN[4];
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	791a      	ldrb	r2, [r3, #4]
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 800142c:	711a      	strb	r2, [r3, #4]
	TxDataCan2[5] = DATA_CAN[5];
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	795a      	ldrb	r2, [r3, #5]
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 8001434:	715a      	strb	r2, [r3, #5]
	TxDataCan2[6] = DATA_CAN[6];
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	799a      	ldrb	r2, [r3, #6]
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 800143c:	719a      	strb	r2, [r3, #6]
	TxDataCan2[7] = DATA_CAN[7];
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	79da      	ldrb	r2, [r3, #7]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 8001444:	71da      	strb	r2, [r3, #7]
	if (HAL_CAN_AddTxMessage(&hcan2, &TxHeaderCan2, TxDataCan2, &TxMailboxCan2)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <CAN2_Transmit_manual+0xac>)
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <CAN2_Transmit_manual+0xa8>)
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <CAN2_Transmit_manual+0xa4>)
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <CAN2_Transmit_manual+0xa0>)
 800144e:	f000 fc5f 	bl	8001d10 <HAL_CAN_AddTxMessage>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <CAN2_Transmit_manual+0x80>
			!= HAL_OK) {
		Error_Handler();
 8001458:	f000 f82e 	bl	80014b8 <Error_Handler>
	}

	//wait while message will sent
	while (HAL_CAN_IsTxMessagePending(&hcan2, TxMailboxCan2)) {
 800145c:	bf00      	nop
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <CAN2_Transmit_manual+0xac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <CAN2_Transmit_manual+0xa0>)
 8001466:	f000 fd61 	bl	8001f2c <HAL_CAN_IsTxMessagePending>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f6      	bne.n	800145e <CAN2_Transmit_manual+0x82>
	}
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000b8 	.word	0x200000b8
 8001480:	20000218 	.word	0x20000218
 8001484:	200001f4 	.word	0x200001f4
 8001488:	200001d8 	.word	0x200001d8

0800148c <HAL_CAN_ErrorCallback>:
	TxDataCan1[7] = 0x00;

	CAN1_Transmit_manual(0x685, 8, TxDataCan1);
}

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_CAN_GetError(hcan);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f001 f8b2 	bl	8002600 <HAL_CAN_GetError>
 800149c:	60f8      	str	r0, [r7, #12]
	printf("error");
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_CAN_ErrorCallback+0x28>)
 80014a0:	f003 fa88 	bl	80049b4 <iprintf>

	HAL_CAN_ResetError(&hcan);
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 f8b5 	bl	8002616 <HAL_CAN_ResetError>
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	0800589c 	.word	0x0800589c

080014b8 <Error_Handler>:

void Error_Handler(void) {
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
	__disable_irq();

	while (1) {
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>

080014c2 <MPU6050_Init>:
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b088      	sub	sp, #32
 80014c6:	af04      	add	r7, sp, #16
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	2364      	movs	r3, #100	; 0x64
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2301      	movs	r3, #1
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f107 030f 	add.w	r3, r7, #15
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	2275      	movs	r2, #117	; 0x75
 80014dc:	21d0      	movs	r1, #208	; 0xd0
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f001 ff7c 	bl	80033dc <HAL_I2C_Mem_Read>
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b68      	cmp	r3, #104	; 0x68
 80014e8:	d13d      	bne.n	8001566 <MPU6050_Init+0xa4>
 80014ea:	2300      	movs	r3, #0
 80014ec:	73bb      	strb	r3, [r7, #14]
 80014ee:	2364      	movs	r3, #100	; 0x64
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	2301      	movs	r3, #1
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	f107 030e 	add.w	r3, r7, #14
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2301      	movs	r3, #1
 80014fe:	226b      	movs	r2, #107	; 0x6b
 8001500:	21d0      	movs	r1, #208	; 0xd0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f001 fe70 	bl	80031e8 <HAL_I2C_Mem_Write>
 8001508:	2307      	movs	r3, #7
 800150a:	73bb      	strb	r3, [r7, #14]
 800150c:	2364      	movs	r3, #100	; 0x64
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2301      	movs	r3, #1
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	f107 030e 	add.w	r3, r7, #14
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	2219      	movs	r2, #25
 800151e:	21d0      	movs	r1, #208	; 0xd0
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f001 fe61 	bl	80031e8 <HAL_I2C_Mem_Write>
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]
 800152a:	2364      	movs	r3, #100	; 0x64
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	2301      	movs	r3, #1
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	f107 030e 	add.w	r3, r7, #14
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	2301      	movs	r3, #1
 800153a:	221c      	movs	r2, #28
 800153c:	21d0      	movs	r1, #208	; 0xd0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f001 fe52 	bl	80031e8 <HAL_I2C_Mem_Write>
 8001544:	2300      	movs	r3, #0
 8001546:	73bb      	strb	r3, [r7, #14]
 8001548:	2364      	movs	r3, #100	; 0x64
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	f107 030e 	add.w	r3, r7, #14
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2301      	movs	r3, #1
 8001558:	221b      	movs	r2, #27
 800155a:	21d0      	movs	r1, #208	; 0xd0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f001 fe43 	bl	80031e8 <HAL_I2C_Mem_Write>
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <MPU6050_Init+0xa6>
 8001566:	2301      	movs	r3, #1
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_MspInit>:
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_MspInit+0x5c>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <HAL_MspInit+0x5c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6193      	str	r3, [r2, #24]
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_MspInit+0x5c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x5c>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <HAL_MspInit+0x5c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_MspInit+0x5c>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_MspInit+0x60>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_MspInit+0x60>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6053      	str	r3, [r2, #4]
 80015c2:	bf00      	nop
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010000 	.word	0x40010000

080015d4 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800161a:	f000 f93d 	bl	8001898 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <CAN1_TX_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles CAN1 TX interrupt.
 */
void CAN1_TX_IRQHandler(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_TX_IRQn 0 */

	/* USER CODE END CAN1_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <CAN1_TX_IRQHandler+0x10>)
 800162a:	f000 fdd8 	bl	80021de <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_TX_IRQn 1 */

	/* USER CODE END CAN1_TX_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200000e0 	.word	0x200000e0

08001638 <CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles CAN1 RX0 interrupt.
 */
void CAN1_RX0_IRQHandler(void) {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */

	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <CAN1_RX0_IRQHandler+0x10>)
 800163e:	f000 fdce 	bl	80021de <HAL_CAN_IRQHandler>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000e0 	.word	0x200000e0

0800164c <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN1 RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */

	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <CAN1_RX1_IRQHandler+0x10>)
 8001652:	f000 fdc4 	bl	80021de <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX1_IRQn 1 */

	/* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000e0 	.word	0x200000e0

08001660 <CAN1_SCE_IRQHandler>:

/**
 * @brief This function handles CAN1 SCE interrupt.
 */
void CAN1_SCE_IRQHandler(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_SCE_IRQn 0 */

	/* USER CODE END CAN1_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <CAN1_SCE_IRQHandler+0x10>)
 8001666:	f000 fdba 	bl	80021de <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_SCE_IRQn 1 */

	/* USER CODE END CAN1_SCE_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200000e0 	.word	0x200000e0

08001674 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001686:	f3af 8000 	nop.w
 800168a:	4601      	mov	r1, r0
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	b2ca      	uxtb	r2, r1
 8001694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf0      	blt.n	8001686 <_read+0x12>
	}

return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e009      	b.n	80016d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf1      	blt.n	80016c0 <_write+0x12>
	}
	return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_close>:

int _close(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return -1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170c:	605a      	str	r2, [r3, #4]
	return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr

0800171a <_isatty>:

int _isatty(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return 1;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
	return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
	...

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f003 f8ea 	bl	8004950 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20010000 	.word	0x20010000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	200000ac 	.word	0x200000ac
 80017b0:	20000280 	.word	0x20000280

080017b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c2:	490d      	ldr	r1, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d8:	4c0a      	ldr	r4, [pc, #40]	; (8001804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e6:	f7ff ffe5 	bl	80017b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80017ea:	f003 f8b7 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ee:	f7ff fcc9 	bl	8001184 <main>
  bx lr
 80017f2:	4770      	bx	lr
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017fc:	08005984 	.word	0x08005984
  ldr r2, =_sbss
 8001800:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001804:	20000280 	.word	0x20000280

08001808 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_Init+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_Init+0x28>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 ffe9 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fea2 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f001 f801 	bl	800285e <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001874:	f000 ffc9 	bl	800280a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	; (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000000 	.word	0x20000000
 8001890:	20000008 	.word	0x20000008
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x1c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x20>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_IncTick+0x20>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000248 	.word	0x20000248

080018bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000248 	.word	0x20000248

080018d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0ed      	b.n	8001abe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe fec6 	bl	8000680 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0201 	orr.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001904:	f7ff ffda 	bl	80018bc <HAL_GetTick>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800190a:	e012      	b.n	8001932 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800190c:	f7ff ffd6 	bl	80018bc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d90b      	bls.n	8001932 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2205      	movs	r2, #5
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0c5      	b.n	8001abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0e5      	beq.n	800190c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0202 	bic.w	r2, r2, #2
 800194e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001950:	f7ff ffb4 	bl	80018bc <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001956:	e012      	b.n	800197e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001958:	f7ff ffb0 	bl	80018bc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b0a      	cmp	r3, #10
 8001964:	d90b      	bls.n	800197e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2205      	movs	r2, #5
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e09f      	b.n	8001abe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1e5      	bne.n	8001958 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e1b      	ldrb	r3, [r3, #24]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e007      	b.n	80019b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e5b      	ldrb	r3, [r3, #25]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e007      	b.n	80019e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7e9b      	ldrb	r3, [r3, #26]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0220 	orr.w	r2, r2, #32
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e007      	b.n	8001a0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0220 	bic.w	r2, r2, #32
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7edb      	ldrb	r3, [r3, #27]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0210 	bic.w	r2, r2, #16
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e007      	b.n	8001a34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0210 	orr.w	r2, r2, #16
 8001a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7f1b      	ldrb	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0208 	orr.w	r2, r2, #8
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e007      	b.n	8001a5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0208 	bic.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7f5b      	ldrb	r3, [r3, #29]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e007      	b.n	8001a88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	ea42 0103 	orr.w	r1, r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b087      	sub	sp, #28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ade:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae0:	7cfb      	ldrb	r3, [r7, #19]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d003      	beq.n	8001aee <HAL_CAN_ConfigFilter+0x26>
 8001ae6:	7cfb      	ldrb	r3, [r7, #19]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	f040 80be 	bne.w	8001c6a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <HAL_CAN_ConfigFilter+0x1bc>)
 8001af0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2201      	movs	r2, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	401a      	ands	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d123      	bne.n	8001b98 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3248      	adds	r2, #72	; 0x48
 8001b78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b8e:	6979      	ldr	r1, [r7, #20]
 8001b90:	3348      	adds	r3, #72	; 0x48
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d122      	bne.n	8001be6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001bc0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3248      	adds	r2, #72	; 0x48
 8001bc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bdc:	6979      	ldr	r1, [r7, #20]
 8001bde:	3348      	adds	r3, #72	; 0x48
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c00:	e007      	b.n	8001c12 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	401a      	ands	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001c2c:	e007      	b.n	8001c3e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c5c:	f023 0201 	bic.w	r2, r3, #1
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e006      	b.n	8001c78 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40006400 	.word	0x40006400

08001c88 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d12e      	bne.n	8001cfa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff fe02 	bl	80018bc <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cba:	e012      	b.n	8001ce2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cbc:	f7ff fdfe 	bl	80018bc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	d90b      	bls.n	8001ce2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e012      	b.n	8001d08 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e5      	bne.n	8001cbc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e006      	b.n	8001d08 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
  }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_AddTxMessage+0x2c>
 8001d34:	7ffb      	ldrb	r3, [r7, #31]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	f040 80b8 	bne.w	8001eac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80a0 	beq.w	8001e9c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	0e1b      	lsrs	r3, r3, #24
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d907      	bls.n	8001d7c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e09e      	b.n	8001eba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	409a      	lsls	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10d      	bne.n	8001daa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	6809      	ldr	r1, [r1, #0]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3318      	adds	r3, #24
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	440b      	add	r3, r1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e00f      	b.n	8001dca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001dbe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	440b      	add	r3, r1
 8001dc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	440b      	add	r3, r1
 8001dda:	3304      	adds	r3, #4
 8001ddc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	7d1b      	ldrb	r3, [r3, #20]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d111      	bne.n	8001e0a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3318      	adds	r3, #24
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	6811      	ldr	r1, [r2, #0]
 8001dfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3318      	adds	r3, #24
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	440b      	add	r3, r1
 8001e06:	3304      	adds	r3, #4
 8001e08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3307      	adds	r3, #7
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	061a      	lsls	r2, r3, #24
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3306      	adds	r3, #6
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3305      	adds	r3, #5
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	4313      	orrs	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	3204      	adds	r2, #4
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	6811      	ldr	r1, [r2, #0]
 8001e32:	ea43 0200 	orr.w	r2, r3, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001e40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3303      	adds	r3, #3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	061a      	lsls	r2, r3, #24
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3301      	adds	r3, #1
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	4610      	mov	r0, r2
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	6811      	ldr	r1, [r2, #0]
 8001e68:	ea43 0200 	orr.w	r2, r3, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3318      	adds	r3, #24
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	6811      	ldr	r1, [r2, #0]
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3318      	adds	r3, #24
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	440b      	add	r3, r1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e00e      	b.n	8001eba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e006      	b.n	8001eba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed8:	7afb      	ldrb	r3, [r7, #11]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d002      	beq.n	8001ee4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d11d      	bne.n	8001f20 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f40:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f42:	7afb      	ldrb	r3, [r7, #11]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d002      	beq.n	8001f4e <HAL_CAN_IsTxMessagePending+0x22>
 8001f48:	7afb      	ldrb	r3, [r7, #11]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d10b      	bne.n	8001f66 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	069b      	lsls	r3, r3, #26
 8001f58:	401a      	ands	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	069b      	lsls	r3, r3, #26
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d001      	beq.n	8001f66 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001f62:	2301      	movs	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f72:	b480      	push	{r7}
 8001f74:	b087      	sub	sp, #28
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d003      	beq.n	8001f96 <HAL_CAN_GetRxMessage+0x24>
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	f040 80f3 	bne.w	800217c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10e      	bne.n	8001fba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0e7      	b.n	800218a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d8      	b.n	800218a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	331b      	adds	r3, #27
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4413      	add	r3, r2
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0204 	and.w	r2, r3, #4
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	331b      	adds	r3, #27
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	4413      	add	r3, r2
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e00b      	b.n	8002028 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	331b      	adds	r3, #27
 8002018:	011b      	lsls	r3, r3, #4
 800201a:	4413      	add	r3, r2
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0202 	and.w	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	331b      	adds	r3, #27
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	4413      	add	r3, r2
 800204a:	3304      	adds	r3, #4
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	331b      	adds	r3, #27
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b2da      	uxtb	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	331b      	adds	r3, #27
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	3304      	adds	r3, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0c1b      	lsrs	r3, r3, #16
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4413      	add	r3, r2
 8002090:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0a1a      	lsrs	r2, r3, #8
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4413      	add	r3, r2
 80020c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0c1a      	lsrs	r2, r3, #16
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	3302      	adds	r3, #2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	4413      	add	r3, r2
 80020da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0e1a      	lsrs	r2, r3, #24
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3303      	adds	r3, #3
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	3304      	adds	r3, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4413      	add	r3, r2
 800210c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0a1a      	lsrs	r2, r3, #8
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	3305      	adds	r3, #5
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	4413      	add	r3, r2
 8002126:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0c1a      	lsrs	r2, r3, #16
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3306      	adds	r3, #6
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0e1a      	lsrs	r2, r3, #24
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3307      	adds	r3, #7
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d108      	bne.n	8002168 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	e007      	b.n	8002178 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e006      	b.n	800218a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d002      	beq.n	80021b2 <HAL_CAN_ActivateNotification+0x1e>
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d109      	bne.n	80021c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6959      	ldr	r1, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e006      	b.n	80021d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
  }
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08a      	sub	sp, #40	; 0x28
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d07c      	beq.n	800231e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d023      	beq.n	8002276 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2201      	movs	r2, #1
 8002234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f983 	bl	800254c <HAL_CAN_TxMailbox0CompleteCallback>
 8002246:	e016      	b.n	8002276 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	e00c      	b.n	8002276 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	e002      	b.n	8002276 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f986 	bl	8002582 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d024      	beq.n	80022ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f962 	bl	800255e <HAL_CAN_TxMailbox1CompleteCallback>
 800229a:	e016      	b.n	80022ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e00c      	b.n	80022ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	e002      	b.n	80022ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f965 	bl	8002594 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d024      	beq.n	800231e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f941 	bl	8002570 <HAL_CAN_TxMailbox2CompleteCallback>
 80022ee:	e016      	b.n	800231e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	e00c      	b.n	800231e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e002      	b.n	800231e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f944 	bl	80025a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002338:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2210      	movs	r2, #16
 8002340:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00b      	beq.n	8002364 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2208      	movs	r2, #8
 800235c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f92a 	bl	80025b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7fe ff85 	bl	800128c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00c      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2210      	movs	r2, #16
 80023a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d006      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2208      	movs	r2, #8
 80023c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f901 	bl	80025ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7fe ff7f 	bl	80012e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00b      	beq.n	8002408 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2210      	movs	r2, #16
 8002400:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8ea 	bl	80025dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2208      	movs	r2, #8
 8002422:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f8e2 	bl	80025ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d07b      	beq.n	800252c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d072      	beq.n	8002524 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002498:	2b00      	cmp	r3, #0
 800249a:	d043      	beq.n	8002524 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d03e      	beq.n	8002524 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024ac:	2b60      	cmp	r3, #96	; 0x60
 80024ae:	d02b      	beq.n	8002508 <HAL_CAN_IRQHandler+0x32a>
 80024b0:	2b60      	cmp	r3, #96	; 0x60
 80024b2:	d82e      	bhi.n	8002512 <HAL_CAN_IRQHandler+0x334>
 80024b4:	2b50      	cmp	r3, #80	; 0x50
 80024b6:	d022      	beq.n	80024fe <HAL_CAN_IRQHandler+0x320>
 80024b8:	2b50      	cmp	r3, #80	; 0x50
 80024ba:	d82a      	bhi.n	8002512 <HAL_CAN_IRQHandler+0x334>
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d019      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x316>
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	d826      	bhi.n	8002512 <HAL_CAN_IRQHandler+0x334>
 80024c4:	2b30      	cmp	r3, #48	; 0x30
 80024c6:	d010      	beq.n	80024ea <HAL_CAN_IRQHandler+0x30c>
 80024c8:	2b30      	cmp	r3, #48	; 0x30
 80024ca:	d822      	bhi.n	8002512 <HAL_CAN_IRQHandler+0x334>
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d002      	beq.n	80024d6 <HAL_CAN_IRQHandler+0x2f8>
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d005      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024d4:	e01d      	b.n	8002512 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f043 0308 	orr.w	r3, r3, #8
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024de:	e019      	b.n	8002514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f043 0310 	orr.w	r3, r3, #16
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024e8:	e014      	b.n	8002514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024f2:	e00f      	b.n	8002514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80024fc:	e00a      	b.n	8002514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002506:	e005      	b.n	8002514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002510:	e000      	b.n	8002514 <HAL_CAN_IRQHandler+0x336>
            break;
 8002512:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002522:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2204      	movs	r2, #4
 800252a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe ffa4 	bl	800148c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr

080025ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002628:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800262a:	7bbb      	ldrb	r3, [r7, #14]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d002      	beq.n	8002636 <HAL_CAN_ResetError+0x20>
 8002630:	7bbb      	ldrb	r3, [r7, #14]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24
 800263c:	e007      	b.n	800264e <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
	...

0800265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db0b      	blt.n	80026ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4906      	ldr	r1, [pc, #24]	; (80026f4 <__NVIC_EnableIRQ+0x34>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100

080026f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	6039      	str	r1, [r7, #0]
 8002702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	2b00      	cmp	r3, #0
 800270a:	db0a      	blt.n	8002722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	b2da      	uxtb	r2, r3
 8002710:	490c      	ldr	r1, [pc, #48]	; (8002744 <__NVIC_SetPriority+0x4c>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	0112      	lsls	r2, r2, #4
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	440b      	add	r3, r1
 800271c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002720:	e00a      	b.n	8002738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4908      	ldr	r1, [pc, #32]	; (8002748 <__NVIC_SetPriority+0x50>)
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	3b04      	subs	r3, #4
 8002730:	0112      	lsls	r2, r2, #4
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	440b      	add	r3, r1
 8002736:	761a      	strb	r2, [r3, #24]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e100 	.word	0xe000e100
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f1c3 0307 	rsb	r3, r3, #7
 8002766:	2b04      	cmp	r3, #4
 8002768:	bf28      	it	cs
 800276a:	2304      	movcs	r3, #4
 800276c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3304      	adds	r3, #4
 8002772:	2b06      	cmp	r3, #6
 8002774:	d902      	bls.n	800277c <NVIC_EncodePriority+0x30>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3b03      	subs	r3, #3
 800277a:	e000      	b.n	800277e <NVIC_EncodePriority+0x32>
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43da      	mvns	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	401a      	ands	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43d9      	mvns	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	4313      	orrs	r3, r2
         );
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d4:	f7ff ff90 	bl	80026f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff2d 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff42 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff90 	bl	800274c <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5f 	bl	80026f8 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff35 	bl	80026c0 <__NVIC_EnableIRQ>
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffa2 	bl	80027b0 <SysTick_Config>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_FLASH_Program+0xd8>)
 8002894:	7e1b      	ldrb	r3, [r3, #24]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_FLASH_Program+0x26>
 800289a:	2302      	movs	r3, #2
 800289c:	e054      	b.n	8002948 <HAL_FLASH_Program+0xd0>
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_FLASH_Program+0xd8>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a8:	f000 f898 	bl	80029dc <FLASH_WaitForLastOperation>
 80028ac:	4603      	mov	r3, r0
 80028ae:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d144      	bne.n	8002940 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80028bc:	2301      	movs	r3, #1
 80028be:	757b      	strb	r3, [r7, #21]
 80028c0:	e007      	b.n	80028d2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d102      	bne.n	80028ce <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80028c8:	2302      	movs	r3, #2
 80028ca:	757b      	strb	r3, [r7, #21]
 80028cc:	e001      	b.n	80028d2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80028ce:	2304      	movs	r3, #4
 80028d0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	75bb      	strb	r3, [r7, #22]
 80028d6:	e02d      	b.n	8002934 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80028d8:	7dbb      	ldrb	r3, [r7, #22]
 80028da:	005a      	lsls	r2, r3, #1
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	eb02 0c03 	add.w	ip, r2, r3
 80028e2:	7dbb      	ldrb	r3, [r7, #22]
 80028e4:	0119      	lsls	r1, r3, #4
 80028e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ea:	f1c1 0620 	rsb	r6, r1, #32
 80028ee:	f1a1 0020 	sub.w	r0, r1, #32
 80028f2:	fa22 f401 	lsr.w	r4, r2, r1
 80028f6:	fa03 f606 	lsl.w	r6, r3, r6
 80028fa:	4334      	orrs	r4, r6
 80028fc:	fa23 f000 	lsr.w	r0, r3, r0
 8002900:	4304      	orrs	r4, r0
 8002902:	fa23 f501 	lsr.w	r5, r3, r1
 8002906:	b2a3      	uxth	r3, r4
 8002908:	4619      	mov	r1, r3
 800290a:	4660      	mov	r0, ip
 800290c:	f000 f84a 	bl	80029a4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002910:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002914:	f000 f862 	bl	80029dc <FLASH_WaitForLastOperation>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_FLASH_Program+0xdc>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_FLASH_Program+0xdc>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800292e:	7dbb      	ldrb	r3, [r7, #22]
 8002930:	3301      	adds	r3, #1
 8002932:	75bb      	strb	r3, [r7, #22]
 8002934:	7dba      	ldrb	r2, [r7, #22]
 8002936:	7d7b      	ldrb	r3, [r7, #21]
 8002938:	429a      	cmp	r2, r3
 800293a:	d3cd      	bcc.n	80028d8 <HAL_FLASH_Program+0x60>
 800293c:	e000      	b.n	8002940 <HAL_FLASH_Program+0xc8>
      {
        break;
 800293e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_FLASH_Program+0xd8>)
 8002942:	2200      	movs	r2, #0
 8002944:	761a      	strb	r2, [r3, #24]

  return status;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
}
 8002948:	4618      	mov	r0, r3
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002950:	20000250 	.word	0x20000250
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_FLASH_Unlock+0x40>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_FLASH_Unlock+0x40>)
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <HAL_FLASH_Unlock+0x44>)
 8002972:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_FLASH_Unlock+0x40>)
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_FLASH_Unlock+0x48>)
 8002978:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_FLASH_Unlock+0x40>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800298a:	79fb      	ldrb	r3, [r7, #7]
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40022000 	.word	0x40022000
 800299c:	45670123 	.word	0x45670123
 80029a0:	cdef89ab 	.word	0xcdef89ab

080029a4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <FLASH_Program_HalfWord+0x30>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <FLASH_Program_HalfWord+0x34>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <FLASH_Program_HalfWord+0x34>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	887a      	ldrh	r2, [r7, #2]
 80029c6:	801a      	strh	r2, [r3, #0]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000250 	.word	0x20000250
 80029d8:	40022000 	.word	0x40022000

080029dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7fe ff6a 	bl	80018bc <HAL_GetTick>
 80029e8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80029ea:	e010      	b.n	8002a0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f2:	d00c      	beq.n	8002a0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <FLASH_WaitForLastOperation+0x2e>
 80029fa:	f7fe ff5f 	bl	80018bc <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d201      	bcs.n	8002a0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e025      	b.n	8002a5a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <FLASH_WaitForLastOperation+0x88>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e8      	bne.n	80029ec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <FLASH_WaitForLastOperation+0x88>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a26:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <FLASH_WaitForLastOperation+0x88>)
 8002a28:	2220      	movs	r2, #32
 8002a2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <FLASH_WaitForLastOperation+0x88>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <FLASH_WaitForLastOperation+0x88>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <FLASH_WaitForLastOperation+0x88>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a50:	f000 f80a 	bl	8002a68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40022000 	.word	0x40022000

08002a68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <FLASH_SetErrorCode+0x9c>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <FLASH_SetErrorCode+0x9c>)
 8002a88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f043 0310 	orr.w	r3, r3, #16
 8002a90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <FLASH_SetErrorCode+0x9c>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	4a17      	ldr	r2, [pc, #92]	; (8002b04 <FLASH_SetErrorCode+0x9c>)
 8002aa8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <FLASH_SetErrorCode+0x9c>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <FLASH_SetErrorCode+0x9c>)
 8002ac8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f240 1201 	movw	r2, #257	; 0x101
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d106      	bne.n	8002aee <FLASH_SetErrorCode+0x86>
 8002ae0:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4a06      	ldr	r2, [pc, #24]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	61d3      	str	r3, [r2, #28]
}  
 8002aec:	e002      	b.n	8002af4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <FLASH_SetErrorCode+0x98>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60d3      	str	r3, [r2, #12]
}  
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000
 8002b04:	20000250 	.word	0x20000250

08002b08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	; (8002bd8 <HAL_FLASHEx_Erase+0xd0>)
 8002b1c:	7e1b      	ldrb	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_FLASHEx_Erase+0x1e>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e053      	b.n	8002bce <HAL_FLASHEx_Erase+0xc6>
 8002b26:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_FLASHEx_Erase+0xd0>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d116      	bne.n	8002b62 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b38:	f7ff ff50 	bl	80029dc <FLASH_WaitForLastOperation>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d141      	bne.n	8002bc6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f000 f84c 	bl	8002be0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b4c:	f7ff ff46 	bl	80029dc <FLASH_WaitForLastOperation>
 8002b50:	4603      	mov	r3, r0
 8002b52:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_FLASHEx_Erase+0xd4>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_FLASHEx_Erase+0xd4>)
 8002b5a:	f023 0304 	bic.w	r3, r3, #4
 8002b5e:	6113      	str	r3, [r2, #16]
 8002b60:	e031      	b.n	8002bc6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b66:	f7ff ff39 	bl	80029dc <FLASH_WaitForLastOperation>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d12a      	bne.n	8002bc6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b76:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	e019      	b.n	8002bb4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002b80:	68b8      	ldr	r0, [r7, #8]
 8002b82:	f000 f849 	bl	8002c18 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b8a:	f7ff ff27 	bl	80029dc <FLASH_WaitForLastOperation>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_FLASHEx_Erase+0xd4>)
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_FLASHEx_Erase+0xd4>)
 8002b98:	f023 0302 	bic.w	r3, r3, #2
 8002b9c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	601a      	str	r2, [r3, #0]
            break;
 8002baa:	e00c      	b.n	8002bc6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	02da      	lsls	r2, r3, #11
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3dc      	bcc.n	8002b80 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <HAL_FLASHEx_Erase+0xd0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	761a      	strb	r2, [r3, #24]

  return status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000250 	.word	0x20000250
 8002bdc:	40022000 	.word	0x40022000

08002be0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <FLASH_MassErase+0x30>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <FLASH_MassErase+0x34>)
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <FLASH_MassErase+0x34>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <FLASH_MassErase+0x34>)
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <FLASH_MassErase+0x34>)
 8002c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c04:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	20000250 	.word	0x20000250
 8002c14:	40022000 	.word	0x40022000

08002c18 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <FLASH_PageErase+0x38>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <FLASH_PageErase+0x3c>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <FLASH_PageErase+0x3c>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c32:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <FLASH_PageErase+0x3c>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <FLASH_PageErase+0x3c>)
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <FLASH_PageErase+0x3c>)
 8002c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c42:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000250 	.word	0x20000250
 8002c54:	40022000 	.word	0x40022000

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6a:	e169      	b.n	8002f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8158 	bne.w	8002f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a9a      	ldr	r2, [pc, #616]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d05e      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002c94:	4a98      	ldr	r2, [pc, #608]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d875      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002c9a:	4a98      	ldr	r2, [pc, #608]	; (8002efc <HAL_GPIO_Init+0x2a4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d058      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a96      	ldr	r2, [pc, #600]	; (8002efc <HAL_GPIO_Init+0x2a4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d86f      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a96      	ldr	r2, [pc, #600]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d052      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cac:	4a94      	ldr	r2, [pc, #592]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d869      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a94      	ldr	r2, [pc, #592]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04c      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a92      	ldr	r2, [pc, #584]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d863      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a92      	ldr	r2, [pc, #584]	; (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d046      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a90      	ldr	r2, [pc, #576]	; (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d85d      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d82a      	bhi.n	8002d24 <HAL_GPIO_Init+0xcc>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d859      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <HAL_GPIO_Init+0x80>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d53 	.word	0x08002d53
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d3f 	.word	0x08002d3f
 8002ce4:	08002d81 	.word	0x08002d81
 8002ce8:	08002d87 	.word	0x08002d87
 8002cec:	08002d87 	.word	0x08002d87
 8002cf0:	08002d87 	.word	0x08002d87
 8002cf4:	08002d87 	.word	0x08002d87
 8002cf8:	08002d87 	.word	0x08002d87
 8002cfc:	08002d87 	.word	0x08002d87
 8002d00:	08002d87 	.word	0x08002d87
 8002d04:	08002d87 	.word	0x08002d87
 8002d08:	08002d87 	.word	0x08002d87
 8002d0c:	08002d87 	.word	0x08002d87
 8002d10:	08002d87 	.word	0x08002d87
 8002d14:	08002d87 	.word	0x08002d87
 8002d18:	08002d87 	.word	0x08002d87
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	4a79      	ldr	r2, [pc, #484]	; (8002f0c <HAL_GPIO_Init+0x2b4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d2a:	e02c      	b.n	8002d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
          break;
 8002d32:	e029      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	e024      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3308      	adds	r3, #8
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e01f      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e01a      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e013      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	611a      	str	r2, [r3, #16]
          break;
 8002d72:	e009      	b.n	8002d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	615a      	str	r2, [r3, #20]
          break;
 8002d7e:	e003      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          break;
 8002d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d801      	bhi.n	8002d92 <HAL_GPIO_Init+0x13a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_Init+0x13e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	; 0xff
 8002d9c:	d802      	bhi.n	8002da4 <HAL_GPIO_Init+0x14c>
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x152>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3b08      	subs	r3, #8
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	210f      	movs	r1, #15
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80b1 	beq.w	8002f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df0:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <HAL_GPIO_Init+0x2c0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_GPIO_Init+0x1ec>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_GPIO_Init+0x2c4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00d      	beq.n	8002e40 <HAL_GPIO_Init+0x1e8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <HAL_GPIO_Init+0x1e4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <HAL_GPIO_Init+0x2cc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_GPIO_Init+0x1e0>
 8002e34:	2303      	movs	r3, #3
 8002e36:	e006      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e004      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e44:	2300      	movs	r3, #0
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	f002 0203 	and.w	r2, r2, #3
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	4093      	lsls	r3, r2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e56:	492f      	ldr	r1, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	492c      	ldr	r1, [pc, #176]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4928      	ldr	r1, [pc, #160]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4922      	ldr	r1, [pc, #136]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	491e      	ldr	r1, [pc, #120]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4918      	ldr	r1, [pc, #96]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4914      	ldr	r1, [pc, #80]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d021      	beq.n	8002f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
 8002ef4:	e021      	b.n	8002f3a <HAL_GPIO_Init+0x2e2>
 8002ef6:	bf00      	nop
 8002ef8:	10320000 	.word	0x10320000
 8002efc:	10310000 	.word	0x10310000
 8002f00:	10220000 	.word	0x10220000
 8002f04:	10210000 	.word	0x10210000
 8002f08:	10120000 	.word	0x10120000
 8002f0c:	10110000 	.word	0x10110000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010800 	.word	0x40010800
 8002f1c:	40010c00 	.word	0x40010c00
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40011400 	.word	0x40011400
 8002f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4909      	ldr	r1, [pc, #36]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f47f ae8e 	bne.w	8002c6c <HAL_GPIO_Init+0x14>
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	372c      	adds	r7, #44	; 0x2c
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e12b      	b.n	80031ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe f86a 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f001 fc92 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a81      	ldr	r2, [pc, #516]	; (80031d4 <HAL_I2C_Init+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d807      	bhi.n	8002fe4 <HAL_I2C_Init+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a80      	ldr	r2, [pc, #512]	; (80031d8 <HAL_I2C_Init+0x278>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e006      	b.n	8002ff2 <HAL_I2C_Init+0x92>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a7d      	ldr	r2, [pc, #500]	; (80031dc <HAL_I2C_Init+0x27c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	bf94      	ite	ls
 8002fec:	2301      	movls	r3, #1
 8002fee:	2300      	movhi	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0e7      	b.n	80031ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a78      	ldr	r2, [pc, #480]	; (80031e0 <HAL_I2C_Init+0x280>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <HAL_I2C_Init+0x274>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d802      	bhi.n	8003034 <HAL_I2C_Init+0xd4>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3301      	adds	r3, #1
 8003032:	e009      	b.n	8003048 <HAL_I2C_Init+0xe8>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	4a69      	ldr	r2, [pc, #420]	; (80031e4 <HAL_I2C_Init+0x284>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	3301      	adds	r3, #1
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800305a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	495c      	ldr	r1, [pc, #368]	; (80031d4 <HAL_I2C_Init+0x274>)
 8003064:	428b      	cmp	r3, r1
 8003066:	d819      	bhi.n	800309c <HAL_I2C_Init+0x13c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e59      	subs	r1, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fbb1 f3f3 	udiv	r3, r1, r3
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	f640 73fc 	movw	r3, #4092	; 0xffc
 800307c:	400b      	ands	r3, r1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_I2C_Init+0x138>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	e051      	b.n	800313c <HAL_I2C_Init+0x1dc>
 8003098:	2304      	movs	r3, #4
 800309a:	e04f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <HAL_I2C_Init+0x168>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e012      	b.n	80030ee <HAL_I2C_Init+0x18e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x196>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e022      	b.n	800313c <HAL_I2C_Init+0x1dc>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <HAL_I2C_Init+0x1bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e58      	subs	r0, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	440b      	add	r3, r1
 800310c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311a:	e00f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6809      	ldr	r1, [r1, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800316a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6911      	ldr	r1, [r2, #16]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	000186a0 	.word	0x000186a0
 80031d8:	001e847f 	.word	0x001e847f
 80031dc:	003d08ff 	.word	0x003d08ff
 80031e0:	431bde83 	.word	0x431bde83
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003202:	f7fe fb5b 	bl	80018bc <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b20      	cmp	r3, #32
 8003212:	f040 80d9 	bne.w	80033c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2319      	movs	r3, #25
 800321c:	2201      	movs	r2, #1
 800321e:	496d      	ldr	r1, [pc, #436]	; (80033d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fcc1 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
 800322e:	e0cc      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_I2C_Mem_Write+0x56>
 800323a:	2302      	movs	r3, #2
 800323c:	e0c5      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d007      	beq.n	8003264 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003272:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2221      	movs	r2, #33	; 0x21
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	; 0x40
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <HAL_I2C_Mem_Write+0x1f0>)
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032a6:	88f8      	ldrh	r0, [r7, #6]
 80032a8:	893a      	ldrh	r2, [r7, #8]
 80032aa:	8979      	ldrh	r1, [r7, #10]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	4603      	mov	r3, r0
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 faf8 	bl	80038ac <I2C_RequestMemoryWrite>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d052      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e081      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fd42 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06b      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d11b      	bne.n	8003368 <HAL_I2C_Mem_Write+0x180>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1aa      	bne.n	80032c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fd2e 	bl	8003dd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2b04      	cmp	r3, #4
 8003386:	d107      	bne.n	8003398 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e016      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	00100002 	.word	0x00100002
 80033d8:	ffff0000 	.word	0xffff0000

080033dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	; 0x30
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	4608      	mov	r0, r1
 80033e6:	4611      	mov	r1, r2
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	817b      	strh	r3, [r7, #10]
 80033ee:	460b      	mov	r3, r1
 80033f0:	813b      	strh	r3, [r7, #8]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033fa:	f7fe fa5f 	bl	80018bc <HAL_GetTick>
 80033fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	f040 8244 	bne.w	8003896 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2319      	movs	r3, #25
 8003414:	2201      	movs	r2, #1
 8003416:	4982      	ldr	r1, [pc, #520]	; (8003620 <HAL_I2C_Mem_Read+0x244>)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fbc5 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
 8003426:	e237      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Mem_Read+0x5a>
 8003432:	2302      	movs	r3, #2
 8003434:	e230      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d007      	beq.n	800345c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a62      	ldr	r2, [pc, #392]	; (8003624 <HAL_I2C_Mem_Read+0x248>)
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800349e:	88f8      	ldrh	r0, [r7, #6]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	8979      	ldrh	r1, [r7, #10]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4603      	mov	r3, r0
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fa92 	bl	80039d8 <I2C_RequestMemoryRead>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1ec      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d113      	bne.n	80034ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e1c0      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d11e      	bne.n	8003534 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003504:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003506:	b672      	cpsid	i
}
 8003508:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003530:	b662      	cpsie	i
}
 8003532:	e035      	b.n	80035a0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	2b02      	cmp	r3, #2
 800353a:	d11e      	bne.n	800357a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800354c:	b672      	cpsid	i
}
 800354e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003574:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003576:	b662      	cpsie	i
}
 8003578:	e012      	b.n	80035a0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035a0:	e166      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	f200 811f 	bhi.w	80037ea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d123      	bne.n	80035fc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fc4d 	bl	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e167      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035fa:	e139      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b02      	cmp	r3, #2
 8003602:	d152      	bne.n	80036aa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2200      	movs	r2, #0
 800360c:	4906      	ldr	r1, [pc, #24]	; (8003628 <HAL_I2C_Mem_Read+0x24c>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 faca 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e13c      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
 800361e:	bf00      	nop
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000
 8003628:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800362c:	b672      	cpsid	i
}
 800362e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003672:	b662      	cpsie	i
}
 8003674:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036a8:	e0e2      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2200      	movs	r2, #0
 80036b2:	497b      	ldr	r1, [pc, #492]	; (80038a0 <HAL_I2C_Mem_Read+0x4c4>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fa77 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0e9      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036d4:	b672      	cpsid	i
}
 80036d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800370a:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_I2C_Mem_Read+0x4c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	4a65      	ldr	r2, [pc, #404]	; (80038a8 <HAL_I2C_Mem_Read+0x4cc>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0a1a      	lsrs	r2, r3, #8
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00da      	lsls	r2, r3, #3
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	3b01      	subs	r3, #1
 8003728:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d118      	bne.n	8003762 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003752:	b662      	cpsie	i
}
 8003754:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e09a      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d1d9      	bne.n	8003724 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037b2:	b662      	cpsie	i
}
 80037b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037e8:	e042      	b.n	8003870 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fb32 	bl	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e04c      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d118      	bne.n	8003870 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f ae94 	bne.w	80035a2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3728      	adds	r7, #40	; 0x28
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	00010004 	.word	0x00010004
 80038a4:	20000000 	.word	0x20000000
 80038a8:	14f8b589 	.word	0x14f8b589

080038ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	4608      	mov	r0, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	461a      	mov	r2, r3
 80038ba:	4603      	mov	r3, r0
 80038bc:	817b      	strh	r3, [r7, #10]
 80038be:	460b      	mov	r3, r1
 80038c0:	813b      	strh	r3, [r7, #8]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	2200      	movs	r2, #0
 80038de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f960 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00d      	beq.n	800390a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d103      	bne.n	8003906 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e05f      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	492d      	ldr	r1, [pc, #180]	; (80039d4 <I2C_RequestMemoryWrite+0x128>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f998 	bl	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e04c      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	6a39      	ldr	r1, [r7, #32]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa02 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b04      	cmp	r3, #4
 800395c:	d107      	bne.n	800396e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e02b      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003978:	893b      	ldrh	r3, [r7, #8]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e021      	b.n	80039c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003984:	893b      	ldrh	r3, [r7, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	b29b      	uxth	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003994:	6a39      	ldr	r1, [r7, #32]
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f9dc 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d107      	bne.n	80039ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e005      	b.n	80039ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039be:	893b      	ldrh	r3, [r7, #8]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	00010002 	.word	0x00010002

080039d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	4608      	mov	r0, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	817b      	strh	r3, [r7, #10]
 80039ea:	460b      	mov	r3, r1
 80039ec:	813b      	strh	r3, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8c2 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a38:	d103      	bne.n	8003a42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0aa      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	6a3a      	ldr	r2, [r7, #32]
 8003a5a:	4952      	ldr	r1, [pc, #328]	; (8003ba4 <I2C_RequestMemoryRead+0x1cc>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8fa 	bl	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e097      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	6a39      	ldr	r1, [r7, #32]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f964 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d107      	bne.n	8003aaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e076      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab4:	893b      	ldrh	r3, [r7, #8]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	e021      	b.n	8003b04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	6a39      	ldr	r1, [r7, #32]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f93e 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d107      	bne.n	8003af6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e050      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003afa:	893b      	ldrh	r3, [r7, #8]
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	6a39      	ldr	r1, [r7, #32]
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f923 	bl	8003d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d107      	bne.n	8003b2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e035      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f82b 	bl	8003ba8 <I2C_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d103      	bne.n	8003b70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e013      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	6a3a      	ldr	r2, [r7, #32]
 8003b88:	4906      	ldr	r1, [pc, #24]	; (8003ba4 <I2C_RequestMemoryRead+0x1cc>)
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f863 	bl	8003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	00010002 	.word	0x00010002

08003ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb8:	e025      	b.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc0:	d021      	beq.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fd fe7b 	bl	80018bc <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d116      	bne.n	8003c06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e023      	b.n	8003c4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10d      	bne.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf0c      	ite	eq
 8003c22:	2301      	moveq	r3, #1
 8003c24:	2300      	movne	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	e00c      	b.n	8003c46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d0b6      	beq.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c64:	e051      	b.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c74:	d123      	bne.n	8003cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e046      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc4:	d021      	beq.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fd fdf9 	bl	80018bc <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e020      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d10c      	bne.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e00b      	b.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	43da      	mvns	r2, r3
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d18d      	bne.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d60:	e02d      	b.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f8ce 	bl	8003f04 <I2C_IsAcknowledgeFailed>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e02d      	b.n	8003dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d78:	d021      	beq.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fd fd9f 	bl	80018bc <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d116      	bne.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0220 	orr.w	r2, r3, #32
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e007      	b.n	8003dce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b80      	cmp	r3, #128	; 0x80
 8003dca:	d1ca      	bne.n	8003d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003de2:	e02d      	b.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f88d 	bl	8003f04 <I2C_IsAcknowledgeFailed>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e02d      	b.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfa:	d021      	beq.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfc:	f7fd fd5e 	bl	80018bc <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d302      	bcc.n	8003e12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e007      	b.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d1ca      	bne.n	8003de4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e64:	e042      	b.n	8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d119      	bne.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e029      	b.n	8003efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fd fd08 	bl	80018bc <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d116      	bne.n	8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d1b5      	bne.n	8003e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1a:	d11b      	bne.n	8003f54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f043 0204 	orr.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e304      	b.n	800457c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8087 	beq.w	800408e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f80:	4b92      	ldr	r3, [pc, #584]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d00c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f8c:	4b8f      	ldr	r3, [pc, #572]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d112      	bne.n	8003fbe <HAL_RCC_OscConfig+0x5e>
 8003f98:	4b8c      	ldr	r3, [pc, #560]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d10b      	bne.n	8003fbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa6:	4b89      	ldr	r3, [pc, #548]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d06c      	beq.n	800408c <HAL_RCC_OscConfig+0x12c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d168      	bne.n	800408c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e2de      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x76>
 8003fc8:	4b80      	ldr	r3, [pc, #512]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7f      	ldr	r2, [pc, #508]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e02e      	b.n	8004034 <HAL_RCC_OscConfig+0xd4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x98>
 8003fde:	4b7b      	ldr	r3, [pc, #492]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7a      	ldr	r2, [pc, #488]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b78      	ldr	r3, [pc, #480]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a77      	ldr	r2, [pc, #476]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e01d      	b.n	8004034 <HAL_RCC_OscConfig+0xd4>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004000:	d10c      	bne.n	800401c <HAL_RCC_OscConfig+0xbc>
 8004002:	4b72      	ldr	r3, [pc, #456]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a71      	ldr	r2, [pc, #452]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	4b6f      	ldr	r3, [pc, #444]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a6e      	ldr	r2, [pc, #440]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e00b      	b.n	8004034 <HAL_RCC_OscConfig+0xd4>
 800401c:	4b6b      	ldr	r3, [pc, #428]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a6a      	ldr	r2, [pc, #424]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a67      	ldr	r2, [pc, #412]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004032:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fd fc3e 	bl	80018bc <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd fc3a 	bl	80018bc <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e292      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b5d      	ldr	r3, [pc, #372]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0xe4>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004064:	f7fd fc2a 	bl	80018bc <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fd fc26 	bl	80018bc <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e27e      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407e:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x10c>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d063      	beq.n	8004162 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800409a:	4b4c      	ldr	r3, [pc, #304]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 030c 	and.w	r3, r3, #12
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040a6:	4b49      	ldr	r3, [pc, #292]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x18c>
 80040b2:	4b46      	ldr	r3, [pc, #280]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b43      	ldr	r3, [pc, #268]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x176>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e252      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4939      	ldr	r1, [pc, #228]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fd fbdf 	bl	80018bc <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fd fbdb 	bl	80018bc <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e233      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4927      	ldr	r1, [pc, #156]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
 8004134:	e015      	b.n	8004162 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b26      	ldr	r3, [pc, #152]	; (80041d0 <HAL_RCC_OscConfig+0x270>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fd fbbe 	bl	80018bc <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004144:	f7fd fbba 	bl	80018bc <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e212      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d03a      	beq.n	80041e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d019      	beq.n	80041aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_RCC_OscConfig+0x274>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fd fb9e 	bl	80018bc <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fb9a 	bl	80018bc <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1f2      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <HAL_RCC_OscConfig+0x26c>)
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041a2:	2001      	movs	r0, #1
 80041a4:	f000 fbb6 	bl	8004914 <RCC_Delay>
 80041a8:	e01c      	b.n	80041e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_RCC_OscConfig+0x274>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b0:	f7fd fb84 	bl	80018bc <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b6:	e00f      	b.n	80041d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b8:	f7fd fb80 	bl	80018bc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d908      	bls.n	80041d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1d8      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	42420000 	.word	0x42420000
 80041d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	4b9b      	ldr	r3, [pc, #620]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e9      	bne.n	80041b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80a6 	beq.w	800433e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f6:	4b94      	ldr	r3, [pc, #592]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10d      	bne.n	800421e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	4b91      	ldr	r3, [pc, #580]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4a90      	ldr	r2, [pc, #576]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420c:	61d3      	str	r3, [r2, #28]
 800420e:	4b8e      	ldr	r3, [pc, #568]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421a:	2301      	movs	r3, #1
 800421c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421e:	4b8b      	ldr	r3, [pc, #556]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d118      	bne.n	800425c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422a:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a87      	ldr	r2, [pc, #540]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004236:	f7fd fb41 	bl	80018bc <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423e:	f7fd fb3d 	bl	80018bc <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b64      	cmp	r3, #100	; 0x64
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e195      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <HAL_RCC_OscConfig+0x4ec>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x312>
 8004264:	4b78      	ldr	r3, [pc, #480]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4a77      	ldr	r2, [pc, #476]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	e02d      	b.n	80042ce <HAL_RCC_OscConfig+0x36e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x334>
 800427a:	4b73      	ldr	r3, [pc, #460]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4a72      	ldr	r2, [pc, #456]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6213      	str	r3, [r2, #32]
 8004286:	4b70      	ldr	r3, [pc, #448]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4a6f      	ldr	r2, [pc, #444]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6213      	str	r3, [r2, #32]
 8004292:	e01c      	b.n	80042ce <HAL_RCC_OscConfig+0x36e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b05      	cmp	r3, #5
 800429a:	d10c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x356>
 800429c:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4a69      	ldr	r2, [pc, #420]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042a2:	f043 0304 	orr.w	r3, r3, #4
 80042a6:	6213      	str	r3, [r2, #32]
 80042a8:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4a66      	ldr	r2, [pc, #408]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6213      	str	r3, [r2, #32]
 80042b4:	e00b      	b.n	80042ce <HAL_RCC_OscConfig+0x36e>
 80042b6:	4b64      	ldr	r3, [pc, #400]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a63      	ldr	r2, [pc, #396]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	6213      	str	r3, [r2, #32]
 80042c2:	4b61      	ldr	r3, [pc, #388]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	4a60      	ldr	r2, [pc, #384]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d015      	beq.n	8004302 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d6:	f7fd faf1 	bl	80018bc <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd faed 	bl	80018bc <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e143      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f4:	4b54      	ldr	r3, [pc, #336]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ee      	beq.n	80042de <HAL_RCC_OscConfig+0x37e>
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fd fadb 	bl	80018bc <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fad7 	bl	80018bc <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e12d      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004320:	4b49      	ldr	r3, [pc, #292]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ee      	bne.n	800430a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d105      	bne.n	800433e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004332:	4b45      	ldr	r3, [pc, #276]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	4a44      	ldr	r2, [pc, #272]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 808c 	beq.w	8004460 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004348:	4b3f      	ldr	r3, [pc, #252]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d10e      	bne.n	8004374 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004356:	4b3c      	ldr	r3, [pc, #240]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800435e:	2b08      	cmp	r3, #8
 8004360:	d108      	bne.n	8004374 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004362:	4b39      	ldr	r3, [pc, #228]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436e:	d101      	bne.n	8004374 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e103      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	2b02      	cmp	r3, #2
 800437a:	d14e      	bne.n	800441a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d009      	beq.n	800439c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8004388:	4b2f      	ldr	r3, [pc, #188]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0ef      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800439c:	4b2c      	ldr	r3, [pc, #176]	; (8004450 <HAL_RCC_OscConfig+0x4f0>)
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a2:	f7fd fa8b 	bl	80018bc <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043aa:	f7fd fa87 	bl	80018bc <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b64      	cmp	r3, #100	; 0x64
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e0df      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80043c8:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	491c      	ldr	r1, [pc, #112]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80043da:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4918      	ldr	r1, [pc, #96]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_RCC_OscConfig+0x4f0>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fd fa63 	bl	80018bc <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043fa:	f7fd fa5f 	bl	80018bc <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0b7      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x49a>
 8004418:	e022      	b.n	8004460 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <HAL_RCC_OscConfig+0x4e8>)
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_RCC_OscConfig+0x4f0>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7fd fa46 	bl	80018bc <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004432:	e00f      	b.n	8004454 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004434:	f7fd fa42 	bl	80018bc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	; 0x64
 8004440:	d908      	bls.n	8004454 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e09a      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000
 800444c:	40007000 	.word	0x40007000
 8004450:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004454:	4b4b      	ldr	r3, [pc, #300]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e9      	bne.n	8004434 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8088 	beq.w	800457a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446a:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b08      	cmp	r3, #8
 8004474:	d068      	beq.n	8004548 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d14d      	bne.n	800451a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447e:	4b42      	ldr	r3, [pc, #264]	; (8004588 <HAL_RCC_OscConfig+0x628>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd fa1a 	bl	80018bc <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fd fa16 	bl	80018bc <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e06e      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800449e:	4b39      	ldr	r3, [pc, #228]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d10f      	bne.n	80044d4 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80044b4:	4b33      	ldr	r3, [pc, #204]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4931      	ldr	r1, [pc, #196]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044c2:	4b30      	ldr	r3, [pc, #192]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f023 020f 	bic.w	r2, r3, #15
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	492d      	ldr	r1, [pc, #180]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	430b      	orrs	r3, r1
 80044e6:	4927      	ldr	r1, [pc, #156]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ec:	4b26      	ldr	r3, [pc, #152]	; (8004588 <HAL_RCC_OscConfig+0x628>)
 80044ee:	2201      	movs	r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f2:	f7fd f9e3 	bl	80018bc <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fd f9df 	bl	80018bc <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e037      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x59a>
 8004518:	e02f      	b.n	800457a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x628>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004520:	f7fd f9cc 	bl	80018bc <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004528:	f7fd f9c8 	bl	80018bc <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e020      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x5c8>
 8004546:	e018      	b.n	800457a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e013      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	429a      	cmp	r2, r3
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	42420060 	.word	0x42420060

0800458c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0d0      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a0:	4b6a      	ldr	r3, [pc, #424]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d910      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b67      	ldr	r3, [pc, #412]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4965      	ldr	r1, [pc, #404]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b8      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800460a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	494d      	ldr	r1, [pc, #308]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d040      	beq.n	80046ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d115      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e07f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d107      	bne.n	800465a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	4b41      	ldr	r3, [pc, #260]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e073      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e06b      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f023 0203 	bic.w	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4936      	ldr	r1, [pc, #216]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800467c:	f7fd f91e 	bl	80018bc <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004682:	e00a      	b.n	800469a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004684:	f7fd f91a 	bl	80018bc <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e053      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 020c 	and.w	r2, r3, #12
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1eb      	bne.n	8004684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d210      	bcs.n	80046dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 0207 	bic.w	r2, r3, #7
 80046c2:	4922      	ldr	r1, [pc, #136]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e032      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4916      	ldr	r1, [pc, #88]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	490e      	ldr	r1, [pc, #56]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800471a:	f000 f821 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	490a      	ldr	r1, [pc, #40]	; (8004754 <HAL_RCC_ClockConfig+0x1c8>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	4a09      	ldr	r2, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1cc>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_ClockConfig+0x1d0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd f87c 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40022000 	.word	0x40022000
 8004750:	40021000 	.word	0x40021000
 8004754:	080058c4 	.word	0x080058c4
 8004758:	20000000 	.word	0x20000000
 800475c:	20000004 	.word	0x20000004

08004760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004762:	b091      	sub	sp, #68	; 0x44
 8004764:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004766:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004768:	f107 0414 	add.w	r4, r7, #20
 800476c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800476e:	c407      	stmia	r4!, {r0, r1, r2}
 8004770:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8004772:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004774:	1d3c      	adds	r4, r7, #4
 8004776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
 8004780:	2300      	movs	r3, #0
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
 8004784:	2300      	movs	r3, #0
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004788:	2300      	movs	r3, #0
 800478a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
 8004794:	2300      	movs	r3, #0
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004798:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800479e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d002      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x4e>
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d003      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x54>
 80047ac:	e080      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_GetSysClockFreq+0x16c>)
 80047b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b2:	e080      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b6:	0c9b      	lsrs	r3, r3, #18
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80047c0:	4413      	add	r3, r2
 80047c2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80047c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d066      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80047d2:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80047de:	4413      	add	r3, r2
 80047e0:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80047e6:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d044      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80047f2:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	3301      	adds	r3, #1
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	3302      	adds	r3, #2
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	4618      	mov	r0, r3
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	461a      	mov	r2, r3
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	fb02 f501 	mul.w	r5, r2, r1
 8004822:	fb00 f403 	mul.w	r4, r0, r3
 8004826:	442c      	add	r4, r5
 8004828:	fba0 2302 	umull	r2, r3, r0, r2
 800482c:	18e1      	adds	r1, r4, r3
 800482e:	460b      	mov	r3, r1
 8004830:	4926      	ldr	r1, [pc, #152]	; (80048cc <HAL_RCC_GetSysClockFreq+0x16c>)
 8004832:	fb01 f003 	mul.w	r0, r1, r3
 8004836:	2100      	movs	r1, #0
 8004838:	fb01 f102 	mul.w	r1, r1, r2
 800483c:	4401      	add	r1, r0
 800483e:	4823      	ldr	r0, [pc, #140]	; (80048cc <HAL_RCC_GetSysClockFreq+0x16c>)
 8004840:	fba2 4500 	umull	r4, r5, r2, r0
 8004844:	194b      	adds	r3, r1, r5
 8004846:	461d      	mov	r5, r3
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	4618      	mov	r0, r3
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	461a      	mov	r2, r3
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	fb02 fc01 	mul.w	ip, r2, r1
 800485c:	fb00 f603 	mul.w	r6, r0, r3
 8004860:	4466      	add	r6, ip
 8004862:	fba0 2302 	umull	r2, r3, r0, r2
 8004866:	18f1      	adds	r1, r6, r3
 8004868:	460b      	mov	r3, r1
 800486a:	4620      	mov	r0, r4
 800486c:	4629      	mov	r1, r5
 800486e:	f7fb fcdb 	bl	8000228 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4613      	mov	r3, r2
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487a:	e007      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	4a13      	ldr	r2, [pc, #76]	; (80048cc <HAL_RCC_GetSysClockFreq+0x16c>)
 8004880:	fb02 f203 	mul.w	r2, r2, r3
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	fbb2 f3f3 	udiv	r3, r2, r3
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800488c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004890:	461a      	mov	r2, r3
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8004898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489e:	e004      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x170>)
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80048aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x174>)
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3744      	adds	r7, #68	; 0x44
 80048bc:	46bd      	mov	sp, r7
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c0:	080058a4 	.word	0x080058a4
 80048c4:	080058b4 	.word	0x080058b4
 80048c8:	40021000 	.word	0x40021000
 80048cc:	017d7840 	.word	0x017d7840
 80048d0:	003d0900 	.word	0x003d0900
 80048d4:	007a1200 	.word	0x007a1200

080048d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	20000000 	.word	0x20000000

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f0:	f7ff fff2 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40021000 	.word	0x40021000
 8004910:	080058d4 	.word	0x080058d4

08004914 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <RCC_Delay+0x34>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a0a      	ldr	r2, [pc, #40]	; (800494c <RCC_Delay+0x38>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0a5b      	lsrs	r3, r3, #9
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004930:	bf00      	nop
  }
  while (Delay --);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1e5a      	subs	r2, r3, #1
 8004936:	60fa      	str	r2, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f9      	bne.n	8004930 <RCC_Delay+0x1c>
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	20000000 	.word	0x20000000
 800494c:	10624dd3 	.word	0x10624dd3

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2600      	movs	r6, #0
 8004960:	4d0c      	ldr	r5, [pc, #48]	; (8004994 <__libc_init_array+0x38>)
 8004962:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	f000 ff82 	bl	8005874 <_init>
 8004970:	2600      	movs	r6, #0
 8004972:	4d0a      	ldr	r5, [pc, #40]	; (800499c <__libc_init_array+0x40>)
 8004974:	4c0a      	ldr	r4, [pc, #40]	; (80049a0 <__libc_init_array+0x44>)
 8004976:	1b64      	subs	r4, r4, r5
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	0800597c 	.word	0x0800597c
 8004998:	0800597c 	.word	0x0800597c
 800499c:	0800597c 	.word	0x0800597c
 80049a0:	08005980 	.word	0x08005980

080049a4 <memset>:
 80049a4:	4603      	mov	r3, r0
 80049a6:	4402      	add	r2, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <iprintf>:
 80049b4:	b40f      	push	{r0, r1, r2, r3}
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <iprintf+0x2c>)
 80049b8:	b513      	push	{r0, r1, r4, lr}
 80049ba:	681c      	ldr	r4, [r3, #0]
 80049bc:	b124      	cbz	r4, 80049c8 <iprintf+0x14>
 80049be:	69a3      	ldr	r3, [r4, #24]
 80049c0:	b913      	cbnz	r3, 80049c8 <iprintf+0x14>
 80049c2:	4620      	mov	r0, r4
 80049c4:	f000 f866 	bl	8004a94 <__sinit>
 80049c8:	ab05      	add	r3, sp, #20
 80049ca:	4620      	mov	r0, r4
 80049cc:	9a04      	ldr	r2, [sp, #16]
 80049ce:	68a1      	ldr	r1, [r4, #8]
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	f000 f981 	bl	8004cd8 <_vfiprintf_r>
 80049d6:	b002      	add	sp, #8
 80049d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049dc:	b004      	add	sp, #16
 80049de:	4770      	bx	lr
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <std>:
 80049e4:	2300      	movs	r3, #0
 80049e6:	b510      	push	{r4, lr}
 80049e8:	4604      	mov	r4, r0
 80049ea:	e9c0 3300 	strd	r3, r3, [r0]
 80049ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049f2:	6083      	str	r3, [r0, #8]
 80049f4:	8181      	strh	r1, [r0, #12]
 80049f6:	6643      	str	r3, [r0, #100]	; 0x64
 80049f8:	81c2      	strh	r2, [r0, #14]
 80049fa:	6183      	str	r3, [r0, #24]
 80049fc:	4619      	mov	r1, r3
 80049fe:	2208      	movs	r2, #8
 8004a00:	305c      	adds	r0, #92	; 0x5c
 8004a02:	f7ff ffcf 	bl	80049a4 <memset>
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <std+0x38>)
 8004a08:	6224      	str	r4, [r4, #32]
 8004a0a:	6263      	str	r3, [r4, #36]	; 0x24
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <std+0x3c>)
 8004a0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <std+0x40>)
 8004a12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <std+0x44>)
 8004a16:	6323      	str	r3, [r4, #48]	; 0x30
 8004a18:	bd10      	pop	{r4, pc}
 8004a1a:	bf00      	nop
 8004a1c:	08005285 	.word	0x08005285
 8004a20:	080052a7 	.word	0x080052a7
 8004a24:	080052df 	.word	0x080052df
 8004a28:	08005303 	.word	0x08005303

08004a2c <_cleanup_r>:
 8004a2c:	4901      	ldr	r1, [pc, #4]	; (8004a34 <_cleanup_r+0x8>)
 8004a2e:	f000 b8af 	b.w	8004b90 <_fwalk_reent>
 8004a32:	bf00      	nop
 8004a34:	080055dd 	.word	0x080055dd

08004a38 <__sfmoreglue>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	2568      	movs	r5, #104	; 0x68
 8004a3c:	1e4a      	subs	r2, r1, #1
 8004a3e:	4355      	muls	r5, r2
 8004a40:	460e      	mov	r6, r1
 8004a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a46:	f000 f8c5 	bl	8004bd4 <_malloc_r>
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	b140      	cbz	r0, 8004a60 <__sfmoreglue+0x28>
 8004a4e:	2100      	movs	r1, #0
 8004a50:	e9c0 1600 	strd	r1, r6, [r0]
 8004a54:	300c      	adds	r0, #12
 8004a56:	60a0      	str	r0, [r4, #8]
 8004a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a5c:	f7ff ffa2 	bl	80049a4 <memset>
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd70      	pop	{r4, r5, r6, pc}

08004a64 <__sfp_lock_acquire>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__sfp_lock_acquire+0x8>)
 8004a66:	f000 b8b3 	b.w	8004bd0 <__retarget_lock_acquire_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	20000278 	.word	0x20000278

08004a70 <__sfp_lock_release>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__sfp_lock_release+0x8>)
 8004a72:	f000 b8ae 	b.w	8004bd2 <__retarget_lock_release_recursive>
 8004a76:	bf00      	nop
 8004a78:	20000278 	.word	0x20000278

08004a7c <__sinit_lock_acquire>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sinit_lock_acquire+0x8>)
 8004a7e:	f000 b8a7 	b.w	8004bd0 <__retarget_lock_acquire_recursive>
 8004a82:	bf00      	nop
 8004a84:	20000273 	.word	0x20000273

08004a88 <__sinit_lock_release>:
 8004a88:	4801      	ldr	r0, [pc, #4]	; (8004a90 <__sinit_lock_release+0x8>)
 8004a8a:	f000 b8a2 	b.w	8004bd2 <__retarget_lock_release_recursive>
 8004a8e:	bf00      	nop
 8004a90:	20000273 	.word	0x20000273

08004a94 <__sinit>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4604      	mov	r4, r0
 8004a98:	f7ff fff0 	bl	8004a7c <__sinit_lock_acquire>
 8004a9c:	69a3      	ldr	r3, [r4, #24]
 8004a9e:	b11b      	cbz	r3, 8004aa8 <__sinit+0x14>
 8004aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa4:	f7ff bff0 	b.w	8004a88 <__sinit_lock_release>
 8004aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004aac:	6523      	str	r3, [r4, #80]	; 0x50
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <__sinit+0x68>)
 8004ab0:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <__sinit+0x6c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ab6:	42a3      	cmp	r3, r4
 8004ab8:	bf08      	it	eq
 8004aba:	2301      	moveq	r3, #1
 8004abc:	4620      	mov	r0, r4
 8004abe:	bf08      	it	eq
 8004ac0:	61a3      	streq	r3, [r4, #24]
 8004ac2:	f000 f81f 	bl	8004b04 <__sfp>
 8004ac6:	6060      	str	r0, [r4, #4]
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 f81b 	bl	8004b04 <__sfp>
 8004ace:	60a0      	str	r0, [r4, #8]
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 f817 	bl	8004b04 <__sfp>
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2104      	movs	r1, #4
 8004ada:	60e0      	str	r0, [r4, #12]
 8004adc:	6860      	ldr	r0, [r4, #4]
 8004ade:	f7ff ff81 	bl	80049e4 <std>
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	2109      	movs	r1, #9
 8004ae6:	68a0      	ldr	r0, [r4, #8]
 8004ae8:	f7ff ff7c 	bl	80049e4 <std>
 8004aec:	2202      	movs	r2, #2
 8004aee:	2112      	movs	r1, #18
 8004af0:	68e0      	ldr	r0, [r4, #12]
 8004af2:	f7ff ff77 	bl	80049e4 <std>
 8004af6:	2301      	movs	r3, #1
 8004af8:	61a3      	str	r3, [r4, #24]
 8004afa:	e7d1      	b.n	8004aa0 <__sinit+0xc>
 8004afc:	080058dc 	.word	0x080058dc
 8004b00:	08004a2d 	.word	0x08004a2d

08004b04 <__sfp>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	4607      	mov	r7, r0
 8004b08:	f7ff ffac 	bl	8004a64 <__sfp_lock_acquire>
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	; (8004b88 <__sfp+0x84>)
 8004b0e:	681e      	ldr	r6, [r3, #0]
 8004b10:	69b3      	ldr	r3, [r6, #24]
 8004b12:	b913      	cbnz	r3, 8004b1a <__sfp+0x16>
 8004b14:	4630      	mov	r0, r6
 8004b16:	f7ff ffbd 	bl	8004a94 <__sinit>
 8004b1a:	3648      	adds	r6, #72	; 0x48
 8004b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	d503      	bpl.n	8004b2c <__sfp+0x28>
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	b30b      	cbz	r3, 8004b6c <__sfp+0x68>
 8004b28:	6836      	ldr	r6, [r6, #0]
 8004b2a:	e7f7      	b.n	8004b1c <__sfp+0x18>
 8004b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b30:	b9d5      	cbnz	r5, 8004b68 <__sfp+0x64>
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <__sfp+0x88>)
 8004b34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b38:	60e3      	str	r3, [r4, #12]
 8004b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b3c:	f000 f847 	bl	8004bce <__retarget_lock_init_recursive>
 8004b40:	f7ff ff96 	bl	8004a70 <__sfp_lock_release>
 8004b44:	2208      	movs	r2, #8
 8004b46:	4629      	mov	r1, r5
 8004b48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b50:	6025      	str	r5, [r4, #0]
 8004b52:	61a5      	str	r5, [r4, #24]
 8004b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b58:	f7ff ff24 	bl	80049a4 <memset>
 8004b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b64:	4620      	mov	r0, r4
 8004b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b68:	3468      	adds	r4, #104	; 0x68
 8004b6a:	e7d9      	b.n	8004b20 <__sfp+0x1c>
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f7ff ff62 	bl	8004a38 <__sfmoreglue>
 8004b74:	4604      	mov	r4, r0
 8004b76:	6030      	str	r0, [r6, #0]
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1d5      	bne.n	8004b28 <__sfp+0x24>
 8004b7c:	f7ff ff78 	bl	8004a70 <__sfp_lock_release>
 8004b80:	230c      	movs	r3, #12
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	e7ee      	b.n	8004b64 <__sfp+0x60>
 8004b86:	bf00      	nop
 8004b88:	080058dc 	.word	0x080058dc
 8004b8c:	ffff0001 	.word	0xffff0001

08004b90 <_fwalk_reent>:
 8004b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b94:	4606      	mov	r6, r0
 8004b96:	4688      	mov	r8, r1
 8004b98:	2700      	movs	r7, #0
 8004b9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8004ba6:	d505      	bpl.n	8004bb4 <_fwalk_reent+0x24>
 8004ba8:	6824      	ldr	r4, [r4, #0]
 8004baa:	2c00      	cmp	r4, #0
 8004bac:	d1f7      	bne.n	8004b9e <_fwalk_reent+0xe>
 8004bae:	4638      	mov	r0, r7
 8004bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb4:	89ab      	ldrh	r3, [r5, #12]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d907      	bls.n	8004bca <_fwalk_reent+0x3a>
 8004bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	d003      	beq.n	8004bca <_fwalk_reent+0x3a>
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	47c0      	blx	r8
 8004bc8:	4307      	orrs	r7, r0
 8004bca:	3568      	adds	r5, #104	; 0x68
 8004bcc:	e7e9      	b.n	8004ba2 <_fwalk_reent+0x12>

08004bce <__retarget_lock_init_recursive>:
 8004bce:	4770      	bx	lr

08004bd0 <__retarget_lock_acquire_recursive>:
 8004bd0:	4770      	bx	lr

08004bd2 <__retarget_lock_release_recursive>:
 8004bd2:	4770      	bx	lr

08004bd4 <_malloc_r>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	1ccd      	adds	r5, r1, #3
 8004bd8:	f025 0503 	bic.w	r5, r5, #3
 8004bdc:	3508      	adds	r5, #8
 8004bde:	2d0c      	cmp	r5, #12
 8004be0:	bf38      	it	cc
 8004be2:	250c      	movcc	r5, #12
 8004be4:	2d00      	cmp	r5, #0
 8004be6:	4606      	mov	r6, r0
 8004be8:	db01      	blt.n	8004bee <_malloc_r+0x1a>
 8004bea:	42a9      	cmp	r1, r5
 8004bec:	d903      	bls.n	8004bf6 <_malloc_r+0x22>
 8004bee:	230c      	movs	r3, #12
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf6:	f000 fdb1 	bl	800575c <__malloc_lock>
 8004bfa:	4921      	ldr	r1, [pc, #132]	; (8004c80 <_malloc_r+0xac>)
 8004bfc:	680a      	ldr	r2, [r1, #0]
 8004bfe:	4614      	mov	r4, r2
 8004c00:	b99c      	cbnz	r4, 8004c2a <_malloc_r+0x56>
 8004c02:	4f20      	ldr	r7, [pc, #128]	; (8004c84 <_malloc_r+0xb0>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	b923      	cbnz	r3, 8004c12 <_malloc_r+0x3e>
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 fb2a 	bl	8005264 <_sbrk_r>
 8004c10:	6038      	str	r0, [r7, #0]
 8004c12:	4629      	mov	r1, r5
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 fb25 	bl	8005264 <_sbrk_r>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d123      	bne.n	8004c66 <_malloc_r+0x92>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	4630      	mov	r0, r6
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	f000 fda0 	bl	8005768 <__malloc_unlock>
 8004c28:	e7e3      	b.n	8004bf2 <_malloc_r+0x1e>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	1b5b      	subs	r3, r3, r5
 8004c2e:	d417      	bmi.n	8004c60 <_malloc_r+0x8c>
 8004c30:	2b0b      	cmp	r3, #11
 8004c32:	d903      	bls.n	8004c3c <_malloc_r+0x68>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	441c      	add	r4, r3
 8004c38:	6025      	str	r5, [r4, #0]
 8004c3a:	e004      	b.n	8004c46 <_malloc_r+0x72>
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	42a2      	cmp	r2, r4
 8004c40:	bf0c      	ite	eq
 8004c42:	600b      	streq	r3, [r1, #0]
 8004c44:	6053      	strne	r3, [r2, #4]
 8004c46:	4630      	mov	r0, r6
 8004c48:	f000 fd8e 	bl	8005768 <__malloc_unlock>
 8004c4c:	f104 000b 	add.w	r0, r4, #11
 8004c50:	1d23      	adds	r3, r4, #4
 8004c52:	f020 0007 	bic.w	r0, r0, #7
 8004c56:	1ac2      	subs	r2, r0, r3
 8004c58:	d0cc      	beq.n	8004bf4 <_malloc_r+0x20>
 8004c5a:	1a1b      	subs	r3, r3, r0
 8004c5c:	50a3      	str	r3, [r4, r2]
 8004c5e:	e7c9      	b.n	8004bf4 <_malloc_r+0x20>
 8004c60:	4622      	mov	r2, r4
 8004c62:	6864      	ldr	r4, [r4, #4]
 8004c64:	e7cc      	b.n	8004c00 <_malloc_r+0x2c>
 8004c66:	1cc4      	adds	r4, r0, #3
 8004c68:	f024 0403 	bic.w	r4, r4, #3
 8004c6c:	42a0      	cmp	r0, r4
 8004c6e:	d0e3      	beq.n	8004c38 <_malloc_r+0x64>
 8004c70:	1a21      	subs	r1, r4, r0
 8004c72:	4630      	mov	r0, r6
 8004c74:	f000 faf6 	bl	8005264 <_sbrk_r>
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d1dd      	bne.n	8004c38 <_malloc_r+0x64>
 8004c7c:	e7cf      	b.n	8004c1e <_malloc_r+0x4a>
 8004c7e:	bf00      	nop
 8004c80:	200000b0 	.word	0x200000b0
 8004c84:	200000b4 	.word	0x200000b4

08004c88 <__sfputc_r>:
 8004c88:	6893      	ldr	r3, [r2, #8]
 8004c8a:	b410      	push	{r4}
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	6093      	str	r3, [r2, #8]
 8004c92:	da07      	bge.n	8004ca4 <__sfputc_r+0x1c>
 8004c94:	6994      	ldr	r4, [r2, #24]
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	db01      	blt.n	8004c9e <__sfputc_r+0x16>
 8004c9a:	290a      	cmp	r1, #10
 8004c9c:	d102      	bne.n	8004ca4 <__sfputc_r+0x1c>
 8004c9e:	bc10      	pop	{r4}
 8004ca0:	f000 bb34 	b.w	800530c <__swbuf_r>
 8004ca4:	6813      	ldr	r3, [r2, #0]
 8004ca6:	1c58      	adds	r0, r3, #1
 8004ca8:	6010      	str	r0, [r2, #0]
 8004caa:	7019      	strb	r1, [r3, #0]
 8004cac:	4608      	mov	r0, r1
 8004cae:	bc10      	pop	{r4}
 8004cb0:	4770      	bx	lr

08004cb2 <__sfputs_r>:
 8004cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	460f      	mov	r7, r1
 8004cb8:	4614      	mov	r4, r2
 8004cba:	18d5      	adds	r5, r2, r3
 8004cbc:	42ac      	cmp	r4, r5
 8004cbe:	d101      	bne.n	8004cc4 <__sfputs_r+0x12>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e007      	b.n	8004cd4 <__sfputs_r+0x22>
 8004cc4:	463a      	mov	r2, r7
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ccc:	f7ff ffdc 	bl	8004c88 <__sfputc_r>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d1f3      	bne.n	8004cbc <__sfputs_r+0xa>
 8004cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cd8 <_vfiprintf_r>:
 8004cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	460d      	mov	r5, r1
 8004cde:	4614      	mov	r4, r2
 8004ce0:	4698      	mov	r8, r3
 8004ce2:	4606      	mov	r6, r0
 8004ce4:	b09d      	sub	sp, #116	; 0x74
 8004ce6:	b118      	cbz	r0, 8004cf0 <_vfiprintf_r+0x18>
 8004ce8:	6983      	ldr	r3, [r0, #24]
 8004cea:	b90b      	cbnz	r3, 8004cf0 <_vfiprintf_r+0x18>
 8004cec:	f7ff fed2 	bl	8004a94 <__sinit>
 8004cf0:	4b89      	ldr	r3, [pc, #548]	; (8004f18 <_vfiprintf_r+0x240>)
 8004cf2:	429d      	cmp	r5, r3
 8004cf4:	d11b      	bne.n	8004d2e <_vfiprintf_r+0x56>
 8004cf6:	6875      	ldr	r5, [r6, #4]
 8004cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cfa:	07d9      	lsls	r1, r3, #31
 8004cfc:	d405      	bmi.n	8004d0a <_vfiprintf_r+0x32>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	059a      	lsls	r2, r3, #22
 8004d02:	d402      	bmi.n	8004d0a <_vfiprintf_r+0x32>
 8004d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d06:	f7ff ff63 	bl	8004bd0 <__retarget_lock_acquire_recursive>
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	071b      	lsls	r3, r3, #28
 8004d0e:	d501      	bpl.n	8004d14 <_vfiprintf_r+0x3c>
 8004d10:	692b      	ldr	r3, [r5, #16]
 8004d12:	b9eb      	cbnz	r3, 8004d50 <_vfiprintf_r+0x78>
 8004d14:	4629      	mov	r1, r5
 8004d16:	4630      	mov	r0, r6
 8004d18:	f000 fb5c 	bl	80053d4 <__swsetup_r>
 8004d1c:	b1c0      	cbz	r0, 8004d50 <_vfiprintf_r+0x78>
 8004d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d20:	07dc      	lsls	r4, r3, #31
 8004d22:	d50e      	bpl.n	8004d42 <_vfiprintf_r+0x6a>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d28:	b01d      	add	sp, #116	; 0x74
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2e:	4b7b      	ldr	r3, [pc, #492]	; (8004f1c <_vfiprintf_r+0x244>)
 8004d30:	429d      	cmp	r5, r3
 8004d32:	d101      	bne.n	8004d38 <_vfiprintf_r+0x60>
 8004d34:	68b5      	ldr	r5, [r6, #8]
 8004d36:	e7df      	b.n	8004cf8 <_vfiprintf_r+0x20>
 8004d38:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <_vfiprintf_r+0x248>)
 8004d3a:	429d      	cmp	r5, r3
 8004d3c:	bf08      	it	eq
 8004d3e:	68f5      	ldreq	r5, [r6, #12]
 8004d40:	e7da      	b.n	8004cf8 <_vfiprintf_r+0x20>
 8004d42:	89ab      	ldrh	r3, [r5, #12]
 8004d44:	0598      	lsls	r0, r3, #22
 8004d46:	d4ed      	bmi.n	8004d24 <_vfiprintf_r+0x4c>
 8004d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d4a:	f7ff ff42 	bl	8004bd2 <__retarget_lock_release_recursive>
 8004d4e:	e7e9      	b.n	8004d24 <_vfiprintf_r+0x4c>
 8004d50:	2300      	movs	r3, #0
 8004d52:	9309      	str	r3, [sp, #36]	; 0x24
 8004d54:	2320      	movs	r3, #32
 8004d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d5a:	2330      	movs	r3, #48	; 0x30
 8004d5c:	f04f 0901 	mov.w	r9, #1
 8004d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d64:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004f24 <_vfiprintf_r+0x24c>
 8004d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	469a      	mov	sl, r3
 8004d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d74:	b10a      	cbz	r2, 8004d7a <_vfiprintf_r+0xa2>
 8004d76:	2a25      	cmp	r2, #37	; 0x25
 8004d78:	d1f9      	bne.n	8004d6e <_vfiprintf_r+0x96>
 8004d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8004d7e:	d00b      	beq.n	8004d98 <_vfiprintf_r+0xc0>
 8004d80:	465b      	mov	r3, fp
 8004d82:	4622      	mov	r2, r4
 8004d84:	4629      	mov	r1, r5
 8004d86:	4630      	mov	r0, r6
 8004d88:	f7ff ff93 	bl	8004cb2 <__sfputs_r>
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	f000 80aa 	beq.w	8004ee6 <_vfiprintf_r+0x20e>
 8004d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d94:	445a      	add	r2, fp
 8004d96:	9209      	str	r2, [sp, #36]	; 0x24
 8004d98:	f89a 3000 	ldrb.w	r3, [sl]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a2 	beq.w	8004ee6 <_vfiprintf_r+0x20e>
 8004da2:	2300      	movs	r3, #0
 8004da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dac:	f10a 0a01 	add.w	sl, sl, #1
 8004db0:	9304      	str	r3, [sp, #16]
 8004db2:	9307      	str	r3, [sp, #28]
 8004db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004db8:	931a      	str	r3, [sp, #104]	; 0x68
 8004dba:	4654      	mov	r4, sl
 8004dbc:	2205      	movs	r2, #5
 8004dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc2:	4858      	ldr	r0, [pc, #352]	; (8004f24 <_vfiprintf_r+0x24c>)
 8004dc4:	f000 fcbc 	bl	8005740 <memchr>
 8004dc8:	9a04      	ldr	r2, [sp, #16]
 8004dca:	b9d8      	cbnz	r0, 8004e04 <_vfiprintf_r+0x12c>
 8004dcc:	06d1      	lsls	r1, r2, #27
 8004dce:	bf44      	itt	mi
 8004dd0:	2320      	movmi	r3, #32
 8004dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dd6:	0713      	lsls	r3, r2, #28
 8004dd8:	bf44      	itt	mi
 8004dda:	232b      	movmi	r3, #43	; 0x2b
 8004ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004de0:	f89a 3000 	ldrb.w	r3, [sl]
 8004de4:	2b2a      	cmp	r3, #42	; 0x2a
 8004de6:	d015      	beq.n	8004e14 <_vfiprintf_r+0x13c>
 8004de8:	4654      	mov	r4, sl
 8004dea:	2000      	movs	r0, #0
 8004dec:	f04f 0c0a 	mov.w	ip, #10
 8004df0:	9a07      	ldr	r2, [sp, #28]
 8004df2:	4621      	mov	r1, r4
 8004df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004df8:	3b30      	subs	r3, #48	; 0x30
 8004dfa:	2b09      	cmp	r3, #9
 8004dfc:	d94e      	bls.n	8004e9c <_vfiprintf_r+0x1c4>
 8004dfe:	b1b0      	cbz	r0, 8004e2e <_vfiprintf_r+0x156>
 8004e00:	9207      	str	r2, [sp, #28]
 8004e02:	e014      	b.n	8004e2e <_vfiprintf_r+0x156>
 8004e04:	eba0 0308 	sub.w	r3, r0, r8
 8004e08:	fa09 f303 	lsl.w	r3, r9, r3
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	46a2      	mov	sl, r4
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	e7d2      	b.n	8004dba <_vfiprintf_r+0xe2>
 8004e14:	9b03      	ldr	r3, [sp, #12]
 8004e16:	1d19      	adds	r1, r3, #4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	9103      	str	r1, [sp, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bfbb      	ittet	lt
 8004e20:	425b      	neglt	r3, r3
 8004e22:	f042 0202 	orrlt.w	r2, r2, #2
 8004e26:	9307      	strge	r3, [sp, #28]
 8004e28:	9307      	strlt	r3, [sp, #28]
 8004e2a:	bfb8      	it	lt
 8004e2c:	9204      	strlt	r2, [sp, #16]
 8004e2e:	7823      	ldrb	r3, [r4, #0]
 8004e30:	2b2e      	cmp	r3, #46	; 0x2e
 8004e32:	d10c      	bne.n	8004e4e <_vfiprintf_r+0x176>
 8004e34:	7863      	ldrb	r3, [r4, #1]
 8004e36:	2b2a      	cmp	r3, #42	; 0x2a
 8004e38:	d135      	bne.n	8004ea6 <_vfiprintf_r+0x1ce>
 8004e3a:	9b03      	ldr	r3, [sp, #12]
 8004e3c:	3402      	adds	r4, #2
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	9203      	str	r2, [sp, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bfb8      	it	lt
 8004e48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e4c:	9305      	str	r3, [sp, #20]
 8004e4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f34 <_vfiprintf_r+0x25c>
 8004e52:	2203      	movs	r2, #3
 8004e54:	4650      	mov	r0, sl
 8004e56:	7821      	ldrb	r1, [r4, #0]
 8004e58:	f000 fc72 	bl	8005740 <memchr>
 8004e5c:	b140      	cbz	r0, 8004e70 <_vfiprintf_r+0x198>
 8004e5e:	2340      	movs	r3, #64	; 0x40
 8004e60:	eba0 000a 	sub.w	r0, r0, sl
 8004e64:	fa03 f000 	lsl.w	r0, r3, r0
 8004e68:	9b04      	ldr	r3, [sp, #16]
 8004e6a:	3401      	adds	r4, #1
 8004e6c:	4303      	orrs	r3, r0
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e74:	2206      	movs	r2, #6
 8004e76:	482c      	ldr	r0, [pc, #176]	; (8004f28 <_vfiprintf_r+0x250>)
 8004e78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e7c:	f000 fc60 	bl	8005740 <memchr>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d03f      	beq.n	8004f04 <_vfiprintf_r+0x22c>
 8004e84:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <_vfiprintf_r+0x254>)
 8004e86:	bb1b      	cbnz	r3, 8004ed0 <_vfiprintf_r+0x1f8>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	3307      	adds	r3, #7
 8004e8c:	f023 0307 	bic.w	r3, r3, #7
 8004e90:	3308      	adds	r3, #8
 8004e92:	9303      	str	r3, [sp, #12]
 8004e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e96:	443b      	add	r3, r7
 8004e98:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9a:	e767      	b.n	8004d6c <_vfiprintf_r+0x94>
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ea4:	e7a5      	b.n	8004df2 <_vfiprintf_r+0x11a>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f04f 0c0a 	mov.w	ip, #10
 8004eac:	4619      	mov	r1, r3
 8004eae:	3401      	adds	r4, #1
 8004eb0:	9305      	str	r3, [sp, #20]
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eb8:	3a30      	subs	r2, #48	; 0x30
 8004eba:	2a09      	cmp	r2, #9
 8004ebc:	d903      	bls.n	8004ec6 <_vfiprintf_r+0x1ee>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0c5      	beq.n	8004e4e <_vfiprintf_r+0x176>
 8004ec2:	9105      	str	r1, [sp, #20]
 8004ec4:	e7c3      	b.n	8004e4e <_vfiprintf_r+0x176>
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	2301      	movs	r3, #1
 8004eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ece:	e7f0      	b.n	8004eb2 <_vfiprintf_r+0x1da>
 8004ed0:	ab03      	add	r3, sp, #12
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	462a      	mov	r2, r5
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <_vfiprintf_r+0x258>)
 8004eda:	a904      	add	r1, sp, #16
 8004edc:	f3af 8000 	nop.w
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	1c78      	adds	r0, r7, #1
 8004ee4:	d1d6      	bne.n	8004e94 <_vfiprintf_r+0x1bc>
 8004ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ee8:	07d9      	lsls	r1, r3, #31
 8004eea:	d405      	bmi.n	8004ef8 <_vfiprintf_r+0x220>
 8004eec:	89ab      	ldrh	r3, [r5, #12]
 8004eee:	059a      	lsls	r2, r3, #22
 8004ef0:	d402      	bmi.n	8004ef8 <_vfiprintf_r+0x220>
 8004ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef4:	f7ff fe6d 	bl	8004bd2 <__retarget_lock_release_recursive>
 8004ef8:	89ab      	ldrh	r3, [r5, #12]
 8004efa:	065b      	lsls	r3, r3, #25
 8004efc:	f53f af12 	bmi.w	8004d24 <_vfiprintf_r+0x4c>
 8004f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f02:	e711      	b.n	8004d28 <_vfiprintf_r+0x50>
 8004f04:	ab03      	add	r3, sp, #12
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	462a      	mov	r2, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <_vfiprintf_r+0x258>)
 8004f0e:	a904      	add	r1, sp, #16
 8004f10:	f000 f882 	bl	8005018 <_printf_i>
 8004f14:	e7e4      	b.n	8004ee0 <_vfiprintf_r+0x208>
 8004f16:	bf00      	nop
 8004f18:	08005900 	.word	0x08005900
 8004f1c:	08005920 	.word	0x08005920
 8004f20:	080058e0 	.word	0x080058e0
 8004f24:	08005940 	.word	0x08005940
 8004f28:	0800594a 	.word	0x0800594a
 8004f2c:	00000000 	.word	0x00000000
 8004f30:	08004cb3 	.word	0x08004cb3
 8004f34:	08005946 	.word	0x08005946

08004f38 <_printf_common>:
 8004f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f3c:	4616      	mov	r6, r2
 8004f3e:	4699      	mov	r9, r3
 8004f40:	688a      	ldr	r2, [r1, #8]
 8004f42:	690b      	ldr	r3, [r1, #16]
 8004f44:	4607      	mov	r7, r0
 8004f46:	4293      	cmp	r3, r2
 8004f48:	bfb8      	it	lt
 8004f4a:	4613      	movlt	r3, r2
 8004f4c:	6033      	str	r3, [r6, #0]
 8004f4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f52:	460c      	mov	r4, r1
 8004f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f58:	b10a      	cbz	r2, 8004f5e <_printf_common+0x26>
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	6033      	str	r3, [r6, #0]
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	0699      	lsls	r1, r3, #26
 8004f62:	bf42      	ittt	mi
 8004f64:	6833      	ldrmi	r3, [r6, #0]
 8004f66:	3302      	addmi	r3, #2
 8004f68:	6033      	strmi	r3, [r6, #0]
 8004f6a:	6825      	ldr	r5, [r4, #0]
 8004f6c:	f015 0506 	ands.w	r5, r5, #6
 8004f70:	d106      	bne.n	8004f80 <_printf_common+0x48>
 8004f72:	f104 0a19 	add.w	sl, r4, #25
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	6832      	ldr	r2, [r6, #0]
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	42ab      	cmp	r3, r5
 8004f7e:	dc28      	bgt.n	8004fd2 <_printf_common+0x9a>
 8004f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f84:	1e13      	subs	r3, r2, #0
 8004f86:	6822      	ldr	r2, [r4, #0]
 8004f88:	bf18      	it	ne
 8004f8a:	2301      	movne	r3, #1
 8004f8c:	0692      	lsls	r2, r2, #26
 8004f8e:	d42d      	bmi.n	8004fec <_printf_common+0xb4>
 8004f90:	4649      	mov	r1, r9
 8004f92:	4638      	mov	r0, r7
 8004f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f98:	47c0      	blx	r8
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d020      	beq.n	8004fe0 <_printf_common+0xa8>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	68e5      	ldr	r5, [r4, #12]
 8004fa2:	f003 0306 	and.w	r3, r3, #6
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	bf18      	it	ne
 8004faa:	2500      	movne	r5, #0
 8004fac:	6832      	ldr	r2, [r6, #0]
 8004fae:	f04f 0600 	mov.w	r6, #0
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	bf08      	it	eq
 8004fb6:	1aad      	subeq	r5, r5, r2
 8004fb8:	6922      	ldr	r2, [r4, #16]
 8004fba:	bf08      	it	eq
 8004fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	bfc4      	itt	gt
 8004fc4:	1a9b      	subgt	r3, r3, r2
 8004fc6:	18ed      	addgt	r5, r5, r3
 8004fc8:	341a      	adds	r4, #26
 8004fca:	42b5      	cmp	r5, r6
 8004fcc:	d11a      	bne.n	8005004 <_printf_common+0xcc>
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e008      	b.n	8004fe4 <_printf_common+0xac>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c0      	blx	r8
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d103      	bne.n	8004fe8 <_printf_common+0xb0>
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7c4      	b.n	8004f76 <_printf_common+0x3e>
 8004fec:	2030      	movs	r0, #48	; 0x30
 8004fee:	18e1      	adds	r1, r4, r3
 8004ff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ffa:	4422      	add	r2, r4
 8004ffc:	3302      	adds	r3, #2
 8004ffe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005002:	e7c5      	b.n	8004f90 <_printf_common+0x58>
 8005004:	2301      	movs	r3, #1
 8005006:	4622      	mov	r2, r4
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d0e6      	beq.n	8004fe0 <_printf_common+0xa8>
 8005012:	3601      	adds	r6, #1
 8005014:	e7d9      	b.n	8004fca <_printf_common+0x92>
	...

08005018 <_printf_i>:
 8005018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800501c:	460c      	mov	r4, r1
 800501e:	7e27      	ldrb	r7, [r4, #24]
 8005020:	4691      	mov	r9, r2
 8005022:	2f78      	cmp	r7, #120	; 0x78
 8005024:	4680      	mov	r8, r0
 8005026:	469a      	mov	sl, r3
 8005028:	990c      	ldr	r1, [sp, #48]	; 0x30
 800502a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800502e:	d807      	bhi.n	8005040 <_printf_i+0x28>
 8005030:	2f62      	cmp	r7, #98	; 0x62
 8005032:	d80a      	bhi.n	800504a <_printf_i+0x32>
 8005034:	2f00      	cmp	r7, #0
 8005036:	f000 80d9 	beq.w	80051ec <_printf_i+0x1d4>
 800503a:	2f58      	cmp	r7, #88	; 0x58
 800503c:	f000 80a4 	beq.w	8005188 <_printf_i+0x170>
 8005040:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005048:	e03a      	b.n	80050c0 <_printf_i+0xa8>
 800504a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800504e:	2b15      	cmp	r3, #21
 8005050:	d8f6      	bhi.n	8005040 <_printf_i+0x28>
 8005052:	a001      	add	r0, pc, #4	; (adr r0, 8005058 <_printf_i+0x40>)
 8005054:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005058:	080050b1 	.word	0x080050b1
 800505c:	080050c5 	.word	0x080050c5
 8005060:	08005041 	.word	0x08005041
 8005064:	08005041 	.word	0x08005041
 8005068:	08005041 	.word	0x08005041
 800506c:	08005041 	.word	0x08005041
 8005070:	080050c5 	.word	0x080050c5
 8005074:	08005041 	.word	0x08005041
 8005078:	08005041 	.word	0x08005041
 800507c:	08005041 	.word	0x08005041
 8005080:	08005041 	.word	0x08005041
 8005084:	080051d3 	.word	0x080051d3
 8005088:	080050f5 	.word	0x080050f5
 800508c:	080051b5 	.word	0x080051b5
 8005090:	08005041 	.word	0x08005041
 8005094:	08005041 	.word	0x08005041
 8005098:	080051f5 	.word	0x080051f5
 800509c:	08005041 	.word	0x08005041
 80050a0:	080050f5 	.word	0x080050f5
 80050a4:	08005041 	.word	0x08005041
 80050a8:	08005041 	.word	0x08005041
 80050ac:	080051bd 	.word	0x080051bd
 80050b0:	680b      	ldr	r3, [r1, #0]
 80050b2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	600a      	str	r2, [r1, #0]
 80050bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0a4      	b.n	800520e <_printf_i+0x1f6>
 80050c4:	6825      	ldr	r5, [r4, #0]
 80050c6:	6808      	ldr	r0, [r1, #0]
 80050c8:	062e      	lsls	r6, r5, #24
 80050ca:	f100 0304 	add.w	r3, r0, #4
 80050ce:	d50a      	bpl.n	80050e6 <_printf_i+0xce>
 80050d0:	6805      	ldr	r5, [r0, #0]
 80050d2:	600b      	str	r3, [r1, #0]
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	da03      	bge.n	80050e0 <_printf_i+0xc8>
 80050d8:	232d      	movs	r3, #45	; 0x2d
 80050da:	426d      	negs	r5, r5
 80050dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e0:	230a      	movs	r3, #10
 80050e2:	485e      	ldr	r0, [pc, #376]	; (800525c <_printf_i+0x244>)
 80050e4:	e019      	b.n	800511a <_printf_i+0x102>
 80050e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050ea:	6805      	ldr	r5, [r0, #0]
 80050ec:	600b      	str	r3, [r1, #0]
 80050ee:	bf18      	it	ne
 80050f0:	b22d      	sxthne	r5, r5
 80050f2:	e7ef      	b.n	80050d4 <_printf_i+0xbc>
 80050f4:	680b      	ldr	r3, [r1, #0]
 80050f6:	6825      	ldr	r5, [r4, #0]
 80050f8:	1d18      	adds	r0, r3, #4
 80050fa:	6008      	str	r0, [r1, #0]
 80050fc:	0628      	lsls	r0, r5, #24
 80050fe:	d501      	bpl.n	8005104 <_printf_i+0xec>
 8005100:	681d      	ldr	r5, [r3, #0]
 8005102:	e002      	b.n	800510a <_printf_i+0xf2>
 8005104:	0669      	lsls	r1, r5, #25
 8005106:	d5fb      	bpl.n	8005100 <_printf_i+0xe8>
 8005108:	881d      	ldrh	r5, [r3, #0]
 800510a:	2f6f      	cmp	r7, #111	; 0x6f
 800510c:	bf0c      	ite	eq
 800510e:	2308      	moveq	r3, #8
 8005110:	230a      	movne	r3, #10
 8005112:	4852      	ldr	r0, [pc, #328]	; (800525c <_printf_i+0x244>)
 8005114:	2100      	movs	r1, #0
 8005116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800511a:	6866      	ldr	r6, [r4, #4]
 800511c:	2e00      	cmp	r6, #0
 800511e:	bfa8      	it	ge
 8005120:	6821      	ldrge	r1, [r4, #0]
 8005122:	60a6      	str	r6, [r4, #8]
 8005124:	bfa4      	itt	ge
 8005126:	f021 0104 	bicge.w	r1, r1, #4
 800512a:	6021      	strge	r1, [r4, #0]
 800512c:	b90d      	cbnz	r5, 8005132 <_printf_i+0x11a>
 800512e:	2e00      	cmp	r6, #0
 8005130:	d04d      	beq.n	80051ce <_printf_i+0x1b6>
 8005132:	4616      	mov	r6, r2
 8005134:	fbb5 f1f3 	udiv	r1, r5, r3
 8005138:	fb03 5711 	mls	r7, r3, r1, r5
 800513c:	5dc7      	ldrb	r7, [r0, r7]
 800513e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005142:	462f      	mov	r7, r5
 8005144:	42bb      	cmp	r3, r7
 8005146:	460d      	mov	r5, r1
 8005148:	d9f4      	bls.n	8005134 <_printf_i+0x11c>
 800514a:	2b08      	cmp	r3, #8
 800514c:	d10b      	bne.n	8005166 <_printf_i+0x14e>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	07df      	lsls	r7, r3, #31
 8005152:	d508      	bpl.n	8005166 <_printf_i+0x14e>
 8005154:	6923      	ldr	r3, [r4, #16]
 8005156:	6861      	ldr	r1, [r4, #4]
 8005158:	4299      	cmp	r1, r3
 800515a:	bfde      	ittt	le
 800515c:	2330      	movle	r3, #48	; 0x30
 800515e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005162:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005166:	1b92      	subs	r2, r2, r6
 8005168:	6122      	str	r2, [r4, #16]
 800516a:	464b      	mov	r3, r9
 800516c:	4621      	mov	r1, r4
 800516e:	4640      	mov	r0, r8
 8005170:	f8cd a000 	str.w	sl, [sp]
 8005174:	aa03      	add	r2, sp, #12
 8005176:	f7ff fedf 	bl	8004f38 <_printf_common>
 800517a:	3001      	adds	r0, #1
 800517c:	d14c      	bne.n	8005218 <_printf_i+0x200>
 800517e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005182:	b004      	add	sp, #16
 8005184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005188:	4834      	ldr	r0, [pc, #208]	; (800525c <_printf_i+0x244>)
 800518a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800518e:	680e      	ldr	r6, [r1, #0]
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	f856 5b04 	ldr.w	r5, [r6], #4
 8005196:	061f      	lsls	r7, r3, #24
 8005198:	600e      	str	r6, [r1, #0]
 800519a:	d514      	bpl.n	80051c6 <_printf_i+0x1ae>
 800519c:	07d9      	lsls	r1, r3, #31
 800519e:	bf44      	itt	mi
 80051a0:	f043 0320 	orrmi.w	r3, r3, #32
 80051a4:	6023      	strmi	r3, [r4, #0]
 80051a6:	b91d      	cbnz	r5, 80051b0 <_printf_i+0x198>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	f023 0320 	bic.w	r3, r3, #32
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	2310      	movs	r3, #16
 80051b2:	e7af      	b.n	8005114 <_printf_i+0xfc>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f043 0320 	orr.w	r3, r3, #32
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	2378      	movs	r3, #120	; 0x78
 80051be:	4828      	ldr	r0, [pc, #160]	; (8005260 <_printf_i+0x248>)
 80051c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051c4:	e7e3      	b.n	800518e <_printf_i+0x176>
 80051c6:	065e      	lsls	r6, r3, #25
 80051c8:	bf48      	it	mi
 80051ca:	b2ad      	uxthmi	r5, r5
 80051cc:	e7e6      	b.n	800519c <_printf_i+0x184>
 80051ce:	4616      	mov	r6, r2
 80051d0:	e7bb      	b.n	800514a <_printf_i+0x132>
 80051d2:	680b      	ldr	r3, [r1, #0]
 80051d4:	6826      	ldr	r6, [r4, #0]
 80051d6:	1d1d      	adds	r5, r3, #4
 80051d8:	6960      	ldr	r0, [r4, #20]
 80051da:	600d      	str	r5, [r1, #0]
 80051dc:	0635      	lsls	r5, r6, #24
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	d501      	bpl.n	80051e6 <_printf_i+0x1ce>
 80051e2:	6018      	str	r0, [r3, #0]
 80051e4:	e002      	b.n	80051ec <_printf_i+0x1d4>
 80051e6:	0671      	lsls	r1, r6, #25
 80051e8:	d5fb      	bpl.n	80051e2 <_printf_i+0x1ca>
 80051ea:	8018      	strh	r0, [r3, #0]
 80051ec:	2300      	movs	r3, #0
 80051ee:	4616      	mov	r6, r2
 80051f0:	6123      	str	r3, [r4, #16]
 80051f2:	e7ba      	b.n	800516a <_printf_i+0x152>
 80051f4:	680b      	ldr	r3, [r1, #0]
 80051f6:	1d1a      	adds	r2, r3, #4
 80051f8:	600a      	str	r2, [r1, #0]
 80051fa:	681e      	ldr	r6, [r3, #0]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4630      	mov	r0, r6
 8005200:	6862      	ldr	r2, [r4, #4]
 8005202:	f000 fa9d 	bl	8005740 <memchr>
 8005206:	b108      	cbz	r0, 800520c <_printf_i+0x1f4>
 8005208:	1b80      	subs	r0, r0, r6
 800520a:	6060      	str	r0, [r4, #4]
 800520c:	6863      	ldr	r3, [r4, #4]
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	2300      	movs	r3, #0
 8005212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005216:	e7a8      	b.n	800516a <_printf_i+0x152>
 8005218:	4632      	mov	r2, r6
 800521a:	4649      	mov	r1, r9
 800521c:	4640      	mov	r0, r8
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	47d0      	blx	sl
 8005222:	3001      	adds	r0, #1
 8005224:	d0ab      	beq.n	800517e <_printf_i+0x166>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	079b      	lsls	r3, r3, #30
 800522a:	d413      	bmi.n	8005254 <_printf_i+0x23c>
 800522c:	68e0      	ldr	r0, [r4, #12]
 800522e:	9b03      	ldr	r3, [sp, #12]
 8005230:	4298      	cmp	r0, r3
 8005232:	bfb8      	it	lt
 8005234:	4618      	movlt	r0, r3
 8005236:	e7a4      	b.n	8005182 <_printf_i+0x16a>
 8005238:	2301      	movs	r3, #1
 800523a:	4632      	mov	r2, r6
 800523c:	4649      	mov	r1, r9
 800523e:	4640      	mov	r0, r8
 8005240:	47d0      	blx	sl
 8005242:	3001      	adds	r0, #1
 8005244:	d09b      	beq.n	800517e <_printf_i+0x166>
 8005246:	3501      	adds	r5, #1
 8005248:	68e3      	ldr	r3, [r4, #12]
 800524a:	9903      	ldr	r1, [sp, #12]
 800524c:	1a5b      	subs	r3, r3, r1
 800524e:	42ab      	cmp	r3, r5
 8005250:	dcf2      	bgt.n	8005238 <_printf_i+0x220>
 8005252:	e7eb      	b.n	800522c <_printf_i+0x214>
 8005254:	2500      	movs	r5, #0
 8005256:	f104 0619 	add.w	r6, r4, #25
 800525a:	e7f5      	b.n	8005248 <_printf_i+0x230>
 800525c:	08005951 	.word	0x08005951
 8005260:	08005962 	.word	0x08005962

08005264 <_sbrk_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	2300      	movs	r3, #0
 8005268:	4d05      	ldr	r5, [pc, #20]	; (8005280 <_sbrk_r+0x1c>)
 800526a:	4604      	mov	r4, r0
 800526c:	4608      	mov	r0, r1
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	f7fc fa6a 	bl	8001748 <_sbrk>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_sbrk_r+0x1a>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_sbrk_r+0x1a>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	2000027c 	.word	0x2000027c

08005284 <__sread>:
 8005284:	b510      	push	{r4, lr}
 8005286:	460c      	mov	r4, r1
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	f000 fabe 	bl	800580c <_read_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	bfab      	itete	ge
 8005294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005296:	89a3      	ldrhlt	r3, [r4, #12]
 8005298:	181b      	addge	r3, r3, r0
 800529a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800529e:	bfac      	ite	ge
 80052a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052a2:	81a3      	strhlt	r3, [r4, #12]
 80052a4:	bd10      	pop	{r4, pc}

080052a6 <__swrite>:
 80052a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	461f      	mov	r7, r3
 80052ac:	898b      	ldrh	r3, [r1, #12]
 80052ae:	4605      	mov	r5, r0
 80052b0:	05db      	lsls	r3, r3, #23
 80052b2:	460c      	mov	r4, r1
 80052b4:	4616      	mov	r6, r2
 80052b6:	d505      	bpl.n	80052c4 <__swrite+0x1e>
 80052b8:	2302      	movs	r3, #2
 80052ba:	2200      	movs	r2, #0
 80052bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c0:	f000 f9c8 	bl	8005654 <_lseek_r>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	4632      	mov	r2, r6
 80052c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	4628      	mov	r0, r5
 80052d0:	463b      	mov	r3, r7
 80052d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	f000 b869 	b.w	80053b0 <_write_r>

080052de <__sseek>:
 80052de:	b510      	push	{r4, lr}
 80052e0:	460c      	mov	r4, r1
 80052e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e6:	f000 f9b5 	bl	8005654 <_lseek_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	bf15      	itete	ne
 80052f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052fa:	81a3      	strheq	r3, [r4, #12]
 80052fc:	bf18      	it	ne
 80052fe:	81a3      	strhne	r3, [r4, #12]
 8005300:	bd10      	pop	{r4, pc}

08005302 <__sclose>:
 8005302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005306:	f000 b8d3 	b.w	80054b0 <_close_r>
	...

0800530c <__swbuf_r>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	460e      	mov	r6, r1
 8005310:	4614      	mov	r4, r2
 8005312:	4605      	mov	r5, r0
 8005314:	b118      	cbz	r0, 800531e <__swbuf_r+0x12>
 8005316:	6983      	ldr	r3, [r0, #24]
 8005318:	b90b      	cbnz	r3, 800531e <__swbuf_r+0x12>
 800531a:	f7ff fbbb 	bl	8004a94 <__sinit>
 800531e:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <__swbuf_r+0x98>)
 8005320:	429c      	cmp	r4, r3
 8005322:	d12b      	bne.n	800537c <__swbuf_r+0x70>
 8005324:	686c      	ldr	r4, [r5, #4]
 8005326:	69a3      	ldr	r3, [r4, #24]
 8005328:	60a3      	str	r3, [r4, #8]
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	071a      	lsls	r2, r3, #28
 800532e:	d52f      	bpl.n	8005390 <__swbuf_r+0x84>
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	b36b      	cbz	r3, 8005390 <__swbuf_r+0x84>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	b2f6      	uxtb	r6, r6
 800533a:	1ac0      	subs	r0, r0, r3
 800533c:	6963      	ldr	r3, [r4, #20]
 800533e:	4637      	mov	r7, r6
 8005340:	4283      	cmp	r3, r0
 8005342:	dc04      	bgt.n	800534e <__swbuf_r+0x42>
 8005344:	4621      	mov	r1, r4
 8005346:	4628      	mov	r0, r5
 8005348:	f000 f948 	bl	80055dc <_fflush_r>
 800534c:	bb30      	cbnz	r0, 800539c <__swbuf_r+0x90>
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	3001      	adds	r0, #1
 8005352:	3b01      	subs	r3, #1
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	6022      	str	r2, [r4, #0]
 800535c:	701e      	strb	r6, [r3, #0]
 800535e:	6963      	ldr	r3, [r4, #20]
 8005360:	4283      	cmp	r3, r0
 8005362:	d004      	beq.n	800536e <__swbuf_r+0x62>
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	07db      	lsls	r3, r3, #31
 8005368:	d506      	bpl.n	8005378 <__swbuf_r+0x6c>
 800536a:	2e0a      	cmp	r6, #10
 800536c:	d104      	bne.n	8005378 <__swbuf_r+0x6c>
 800536e:	4621      	mov	r1, r4
 8005370:	4628      	mov	r0, r5
 8005372:	f000 f933 	bl	80055dc <_fflush_r>
 8005376:	b988      	cbnz	r0, 800539c <__swbuf_r+0x90>
 8005378:	4638      	mov	r0, r7
 800537a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <__swbuf_r+0x9c>)
 800537e:	429c      	cmp	r4, r3
 8005380:	d101      	bne.n	8005386 <__swbuf_r+0x7a>
 8005382:	68ac      	ldr	r4, [r5, #8]
 8005384:	e7cf      	b.n	8005326 <__swbuf_r+0x1a>
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <__swbuf_r+0xa0>)
 8005388:	429c      	cmp	r4, r3
 800538a:	bf08      	it	eq
 800538c:	68ec      	ldreq	r4, [r5, #12]
 800538e:	e7ca      	b.n	8005326 <__swbuf_r+0x1a>
 8005390:	4621      	mov	r1, r4
 8005392:	4628      	mov	r0, r5
 8005394:	f000 f81e 	bl	80053d4 <__swsetup_r>
 8005398:	2800      	cmp	r0, #0
 800539a:	d0cb      	beq.n	8005334 <__swbuf_r+0x28>
 800539c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80053a0:	e7ea      	b.n	8005378 <__swbuf_r+0x6c>
 80053a2:	bf00      	nop
 80053a4:	08005900 	.word	0x08005900
 80053a8:	08005920 	.word	0x08005920
 80053ac:	080058e0 	.word	0x080058e0

080053b0 <_write_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	4611      	mov	r1, r2
 80053b8:	2200      	movs	r2, #0
 80053ba:	4d05      	ldr	r5, [pc, #20]	; (80053d0 <_write_r+0x20>)
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f7fc f975 	bl	80016ae <_write>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_write_r+0x1e>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_write_r+0x1e>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	2000027c 	.word	0x2000027c

080053d4 <__swsetup_r>:
 80053d4:	4b32      	ldr	r3, [pc, #200]	; (80054a0 <__swsetup_r+0xcc>)
 80053d6:	b570      	push	{r4, r5, r6, lr}
 80053d8:	681d      	ldr	r5, [r3, #0]
 80053da:	4606      	mov	r6, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	b125      	cbz	r5, 80053ea <__swsetup_r+0x16>
 80053e0:	69ab      	ldr	r3, [r5, #24]
 80053e2:	b913      	cbnz	r3, 80053ea <__swsetup_r+0x16>
 80053e4:	4628      	mov	r0, r5
 80053e6:	f7ff fb55 	bl	8004a94 <__sinit>
 80053ea:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <__swsetup_r+0xd0>)
 80053ec:	429c      	cmp	r4, r3
 80053ee:	d10f      	bne.n	8005410 <__swsetup_r+0x3c>
 80053f0:	686c      	ldr	r4, [r5, #4]
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f8:	0719      	lsls	r1, r3, #28
 80053fa:	d42c      	bmi.n	8005456 <__swsetup_r+0x82>
 80053fc:	06dd      	lsls	r5, r3, #27
 80053fe:	d411      	bmi.n	8005424 <__swsetup_r+0x50>
 8005400:	2309      	movs	r3, #9
 8005402:	6033      	str	r3, [r6, #0]
 8005404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	e03e      	b.n	800548e <__swsetup_r+0xba>
 8005410:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <__swsetup_r+0xd4>)
 8005412:	429c      	cmp	r4, r3
 8005414:	d101      	bne.n	800541a <__swsetup_r+0x46>
 8005416:	68ac      	ldr	r4, [r5, #8]
 8005418:	e7eb      	b.n	80053f2 <__swsetup_r+0x1e>
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <__swsetup_r+0xd8>)
 800541c:	429c      	cmp	r4, r3
 800541e:	bf08      	it	eq
 8005420:	68ec      	ldreq	r4, [r5, #12]
 8005422:	e7e6      	b.n	80053f2 <__swsetup_r+0x1e>
 8005424:	0758      	lsls	r0, r3, #29
 8005426:	d512      	bpl.n	800544e <__swsetup_r+0x7a>
 8005428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800542a:	b141      	cbz	r1, 800543e <__swsetup_r+0x6a>
 800542c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005430:	4299      	cmp	r1, r3
 8005432:	d002      	beq.n	800543a <__swsetup_r+0x66>
 8005434:	4630      	mov	r0, r6
 8005436:	f000 f99d 	bl	8005774 <_free_r>
 800543a:	2300      	movs	r3, #0
 800543c:	6363      	str	r3, [r4, #52]	; 0x34
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	2300      	movs	r3, #0
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	81a3      	strh	r3, [r4, #12]
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	b94b      	cbnz	r3, 800546e <__swsetup_r+0x9a>
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d003      	beq.n	800546e <__swsetup_r+0x9a>
 8005466:	4621      	mov	r1, r4
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f929 	bl	80056c0 <__smakebuf_r>
 800546e:	89a0      	ldrh	r0, [r4, #12]
 8005470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005474:	f010 0301 	ands.w	r3, r0, #1
 8005478:	d00a      	beq.n	8005490 <__swsetup_r+0xbc>
 800547a:	2300      	movs	r3, #0
 800547c:	60a3      	str	r3, [r4, #8]
 800547e:	6963      	ldr	r3, [r4, #20]
 8005480:	425b      	negs	r3, r3
 8005482:	61a3      	str	r3, [r4, #24]
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	b943      	cbnz	r3, 800549a <__swsetup_r+0xc6>
 8005488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800548c:	d1ba      	bne.n	8005404 <__swsetup_r+0x30>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	0781      	lsls	r1, r0, #30
 8005492:	bf58      	it	pl
 8005494:	6963      	ldrpl	r3, [r4, #20]
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	e7f4      	b.n	8005484 <__swsetup_r+0xb0>
 800549a:	2000      	movs	r0, #0
 800549c:	e7f7      	b.n	800548e <__swsetup_r+0xba>
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	08005900 	.word	0x08005900
 80054a8:	08005920 	.word	0x08005920
 80054ac:	080058e0 	.word	0x080058e0

080054b0 <_close_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	2300      	movs	r3, #0
 80054b4:	4d05      	ldr	r5, [pc, #20]	; (80054cc <_close_r+0x1c>)
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fc f913 	bl	80016e6 <_close>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_close_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_close_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	2000027c 	.word	0x2000027c

080054d0 <__sflush_r>:
 80054d0:	898a      	ldrh	r2, [r1, #12]
 80054d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d6:	4605      	mov	r5, r0
 80054d8:	0710      	lsls	r0, r2, #28
 80054da:	460c      	mov	r4, r1
 80054dc:	d458      	bmi.n	8005590 <__sflush_r+0xc0>
 80054de:	684b      	ldr	r3, [r1, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc05      	bgt.n	80054f0 <__sflush_r+0x20>
 80054e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dc02      	bgt.n	80054f0 <__sflush_r+0x20>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d0f9      	beq.n	80054ea <__sflush_r+0x1a>
 80054f6:	2300      	movs	r3, #0
 80054f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054fc:	682f      	ldr	r7, [r5, #0]
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	d032      	beq.n	8005568 <__sflush_r+0x98>
 8005502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	075a      	lsls	r2, r3, #29
 8005508:	d505      	bpl.n	8005516 <__sflush_r+0x46>
 800550a:	6863      	ldr	r3, [r4, #4]
 800550c:	1ac0      	subs	r0, r0, r3
 800550e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005510:	b10b      	cbz	r3, 8005516 <__sflush_r+0x46>
 8005512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005514:	1ac0      	subs	r0, r0, r3
 8005516:	2300      	movs	r3, #0
 8005518:	4602      	mov	r2, r0
 800551a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800551c:	4628      	mov	r0, r5
 800551e:	6a21      	ldr	r1, [r4, #32]
 8005520:	47b0      	blx	r6
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	d106      	bne.n	8005536 <__sflush_r+0x66>
 8005528:	6829      	ldr	r1, [r5, #0]
 800552a:	291d      	cmp	r1, #29
 800552c:	d82c      	bhi.n	8005588 <__sflush_r+0xb8>
 800552e:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <__sflush_r+0x108>)
 8005530:	40ca      	lsrs	r2, r1
 8005532:	07d6      	lsls	r6, r2, #31
 8005534:	d528      	bpl.n	8005588 <__sflush_r+0xb8>
 8005536:	2200      	movs	r2, #0
 8005538:	6062      	str	r2, [r4, #4]
 800553a:	6922      	ldr	r2, [r4, #16]
 800553c:	04d9      	lsls	r1, r3, #19
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	d504      	bpl.n	800554c <__sflush_r+0x7c>
 8005542:	1c42      	adds	r2, r0, #1
 8005544:	d101      	bne.n	800554a <__sflush_r+0x7a>
 8005546:	682b      	ldr	r3, [r5, #0]
 8005548:	b903      	cbnz	r3, 800554c <__sflush_r+0x7c>
 800554a:	6560      	str	r0, [r4, #84]	; 0x54
 800554c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800554e:	602f      	str	r7, [r5, #0]
 8005550:	2900      	cmp	r1, #0
 8005552:	d0ca      	beq.n	80054ea <__sflush_r+0x1a>
 8005554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005558:	4299      	cmp	r1, r3
 800555a:	d002      	beq.n	8005562 <__sflush_r+0x92>
 800555c:	4628      	mov	r0, r5
 800555e:	f000 f909 	bl	8005774 <_free_r>
 8005562:	2000      	movs	r0, #0
 8005564:	6360      	str	r0, [r4, #52]	; 0x34
 8005566:	e7c1      	b.n	80054ec <__sflush_r+0x1c>
 8005568:	6a21      	ldr	r1, [r4, #32]
 800556a:	2301      	movs	r3, #1
 800556c:	4628      	mov	r0, r5
 800556e:	47b0      	blx	r6
 8005570:	1c41      	adds	r1, r0, #1
 8005572:	d1c7      	bne.n	8005504 <__sflush_r+0x34>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0c4      	beq.n	8005504 <__sflush_r+0x34>
 800557a:	2b1d      	cmp	r3, #29
 800557c:	d001      	beq.n	8005582 <__sflush_r+0xb2>
 800557e:	2b16      	cmp	r3, #22
 8005580:	d101      	bne.n	8005586 <__sflush_r+0xb6>
 8005582:	602f      	str	r7, [r5, #0]
 8005584:	e7b1      	b.n	80054ea <__sflush_r+0x1a>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	e7ad      	b.n	80054ec <__sflush_r+0x1c>
 8005590:	690f      	ldr	r7, [r1, #16]
 8005592:	2f00      	cmp	r7, #0
 8005594:	d0a9      	beq.n	80054ea <__sflush_r+0x1a>
 8005596:	0793      	lsls	r3, r2, #30
 8005598:	bf18      	it	ne
 800559a:	2300      	movne	r3, #0
 800559c:	680e      	ldr	r6, [r1, #0]
 800559e:	bf08      	it	eq
 80055a0:	694b      	ldreq	r3, [r1, #20]
 80055a2:	eba6 0807 	sub.w	r8, r6, r7
 80055a6:	600f      	str	r7, [r1, #0]
 80055a8:	608b      	str	r3, [r1, #8]
 80055aa:	f1b8 0f00 	cmp.w	r8, #0
 80055ae:	dd9c      	ble.n	80054ea <__sflush_r+0x1a>
 80055b0:	4643      	mov	r3, r8
 80055b2:	463a      	mov	r2, r7
 80055b4:	4628      	mov	r0, r5
 80055b6:	6a21      	ldr	r1, [r4, #32]
 80055b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055ba:	47b0      	blx	r6
 80055bc:	2800      	cmp	r0, #0
 80055be:	dc06      	bgt.n	80055ce <__sflush_r+0xfe>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	e78e      	b.n	80054ec <__sflush_r+0x1c>
 80055ce:	4407      	add	r7, r0
 80055d0:	eba8 0800 	sub.w	r8, r8, r0
 80055d4:	e7e9      	b.n	80055aa <__sflush_r+0xda>
 80055d6:	bf00      	nop
 80055d8:	20400001 	.word	0x20400001

080055dc <_fflush_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b913      	cbnz	r3, 80055ec <_fflush_r+0x10>
 80055e6:	2500      	movs	r5, #0
 80055e8:	4628      	mov	r0, r5
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	b118      	cbz	r0, 80055f6 <_fflush_r+0x1a>
 80055ee:	6983      	ldr	r3, [r0, #24]
 80055f0:	b90b      	cbnz	r3, 80055f6 <_fflush_r+0x1a>
 80055f2:	f7ff fa4f 	bl	8004a94 <__sinit>
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <_fflush_r+0x6c>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	d11b      	bne.n	8005634 <_fflush_r+0x58>
 80055fc:	686c      	ldr	r4, [r5, #4]
 80055fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <_fflush_r+0xa>
 8005606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005608:	07d0      	lsls	r0, r2, #31
 800560a:	d404      	bmi.n	8005616 <_fflush_r+0x3a>
 800560c:	0599      	lsls	r1, r3, #22
 800560e:	d402      	bmi.n	8005616 <_fflush_r+0x3a>
 8005610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005612:	f7ff fadd 	bl	8004bd0 <__retarget_lock_acquire_recursive>
 8005616:	4628      	mov	r0, r5
 8005618:	4621      	mov	r1, r4
 800561a:	f7ff ff59 	bl	80054d0 <__sflush_r>
 800561e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005620:	4605      	mov	r5, r0
 8005622:	07da      	lsls	r2, r3, #31
 8005624:	d4e0      	bmi.n	80055e8 <_fflush_r+0xc>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	059b      	lsls	r3, r3, #22
 800562a:	d4dd      	bmi.n	80055e8 <_fflush_r+0xc>
 800562c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800562e:	f7ff fad0 	bl	8004bd2 <__retarget_lock_release_recursive>
 8005632:	e7d9      	b.n	80055e8 <_fflush_r+0xc>
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <_fflush_r+0x70>)
 8005636:	429c      	cmp	r4, r3
 8005638:	d101      	bne.n	800563e <_fflush_r+0x62>
 800563a:	68ac      	ldr	r4, [r5, #8]
 800563c:	e7df      	b.n	80055fe <_fflush_r+0x22>
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <_fflush_r+0x74>)
 8005640:	429c      	cmp	r4, r3
 8005642:	bf08      	it	eq
 8005644:	68ec      	ldreq	r4, [r5, #12]
 8005646:	e7da      	b.n	80055fe <_fflush_r+0x22>
 8005648:	08005900 	.word	0x08005900
 800564c:	08005920 	.word	0x08005920
 8005650:	080058e0 	.word	0x080058e0

08005654 <_lseek_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	2200      	movs	r2, #0
 800565e:	4d05      	ldr	r5, [pc, #20]	; (8005674 <_lseek_r+0x20>)
 8005660:	602a      	str	r2, [r5, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	f7fc f863 	bl	800172e <_lseek>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_lseek_r+0x1e>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_lseek_r+0x1e>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	2000027c 	.word	0x2000027c

08005678 <__swhatbuf_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	4614      	mov	r4, r2
 8005682:	2900      	cmp	r1, #0
 8005684:	461d      	mov	r5, r3
 8005686:	b096      	sub	sp, #88	; 0x58
 8005688:	da07      	bge.n	800569a <__swhatbuf_r+0x22>
 800568a:	2300      	movs	r3, #0
 800568c:	602b      	str	r3, [r5, #0]
 800568e:	89b3      	ldrh	r3, [r6, #12]
 8005690:	061a      	lsls	r2, r3, #24
 8005692:	d410      	bmi.n	80056b6 <__swhatbuf_r+0x3e>
 8005694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005698:	e00e      	b.n	80056b8 <__swhatbuf_r+0x40>
 800569a:	466a      	mov	r2, sp
 800569c:	f000 f8c8 	bl	8005830 <_fstat_r>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	dbf2      	blt.n	800568a <__swhatbuf_r+0x12>
 80056a4:	9a01      	ldr	r2, [sp, #4]
 80056a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056ae:	425a      	negs	r2, r3
 80056b0:	415a      	adcs	r2, r3
 80056b2:	602a      	str	r2, [r5, #0]
 80056b4:	e7ee      	b.n	8005694 <__swhatbuf_r+0x1c>
 80056b6:	2340      	movs	r3, #64	; 0x40
 80056b8:	2000      	movs	r0, #0
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	b016      	add	sp, #88	; 0x58
 80056be:	bd70      	pop	{r4, r5, r6, pc}

080056c0 <__smakebuf_r>:
 80056c0:	898b      	ldrh	r3, [r1, #12]
 80056c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056c4:	079d      	lsls	r5, r3, #30
 80056c6:	4606      	mov	r6, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	d507      	bpl.n	80056dc <__smakebuf_r+0x1c>
 80056cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	6123      	str	r3, [r4, #16]
 80056d4:	2301      	movs	r3, #1
 80056d6:	6163      	str	r3, [r4, #20]
 80056d8:	b002      	add	sp, #8
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	466a      	mov	r2, sp
 80056de:	ab01      	add	r3, sp, #4
 80056e0:	f7ff ffca 	bl	8005678 <__swhatbuf_r>
 80056e4:	9900      	ldr	r1, [sp, #0]
 80056e6:	4605      	mov	r5, r0
 80056e8:	4630      	mov	r0, r6
 80056ea:	f7ff fa73 	bl	8004bd4 <_malloc_r>
 80056ee:	b948      	cbnz	r0, 8005704 <__smakebuf_r+0x44>
 80056f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f4:	059a      	lsls	r2, r3, #22
 80056f6:	d4ef      	bmi.n	80056d8 <__smakebuf_r+0x18>
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	f043 0302 	orr.w	r3, r3, #2
 8005700:	81a3      	strh	r3, [r4, #12]
 8005702:	e7e3      	b.n	80056cc <__smakebuf_r+0xc>
 8005704:	4b0d      	ldr	r3, [pc, #52]	; (800573c <__smakebuf_r+0x7c>)
 8005706:	62b3      	str	r3, [r6, #40]	; 0x28
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	6020      	str	r0, [r4, #0]
 800570c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005710:	81a3      	strh	r3, [r4, #12]
 8005712:	9b00      	ldr	r3, [sp, #0]
 8005714:	6120      	str	r0, [r4, #16]
 8005716:	6163      	str	r3, [r4, #20]
 8005718:	9b01      	ldr	r3, [sp, #4]
 800571a:	b15b      	cbz	r3, 8005734 <__smakebuf_r+0x74>
 800571c:	4630      	mov	r0, r6
 800571e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005722:	f000 f897 	bl	8005854 <_isatty_r>
 8005726:	b128      	cbz	r0, 8005734 <__smakebuf_r+0x74>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	89a0      	ldrh	r0, [r4, #12]
 8005736:	4305      	orrs	r5, r0
 8005738:	81a5      	strh	r5, [r4, #12]
 800573a:	e7cd      	b.n	80056d8 <__smakebuf_r+0x18>
 800573c:	08004a2d 	.word	0x08004a2d

08005740 <memchr>:
 8005740:	4603      	mov	r3, r0
 8005742:	b510      	push	{r4, lr}
 8005744:	b2c9      	uxtb	r1, r1
 8005746:	4402      	add	r2, r0
 8005748:	4293      	cmp	r3, r2
 800574a:	4618      	mov	r0, r3
 800574c:	d101      	bne.n	8005752 <memchr+0x12>
 800574e:	2000      	movs	r0, #0
 8005750:	e003      	b.n	800575a <memchr+0x1a>
 8005752:	7804      	ldrb	r4, [r0, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	428c      	cmp	r4, r1
 8005758:	d1f6      	bne.n	8005748 <memchr+0x8>
 800575a:	bd10      	pop	{r4, pc}

0800575c <__malloc_lock>:
 800575c:	4801      	ldr	r0, [pc, #4]	; (8005764 <__malloc_lock+0x8>)
 800575e:	f7ff ba37 	b.w	8004bd0 <__retarget_lock_acquire_recursive>
 8005762:	bf00      	nop
 8005764:	20000274 	.word	0x20000274

08005768 <__malloc_unlock>:
 8005768:	4801      	ldr	r0, [pc, #4]	; (8005770 <__malloc_unlock+0x8>)
 800576a:	f7ff ba32 	b.w	8004bd2 <__retarget_lock_release_recursive>
 800576e:	bf00      	nop
 8005770:	20000274 	.word	0x20000274

08005774 <_free_r>:
 8005774:	b538      	push	{r3, r4, r5, lr}
 8005776:	4605      	mov	r5, r0
 8005778:	2900      	cmp	r1, #0
 800577a:	d043      	beq.n	8005804 <_free_r+0x90>
 800577c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005780:	1f0c      	subs	r4, r1, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	bfb8      	it	lt
 8005786:	18e4      	addlt	r4, r4, r3
 8005788:	f7ff ffe8 	bl	800575c <__malloc_lock>
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <_free_r+0x94>)
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	4610      	mov	r0, r2
 8005792:	b933      	cbnz	r3, 80057a2 <_free_r+0x2e>
 8005794:	6063      	str	r3, [r4, #4]
 8005796:	6014      	str	r4, [r2, #0]
 8005798:	4628      	mov	r0, r5
 800579a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800579e:	f7ff bfe3 	b.w	8005768 <__malloc_unlock>
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	d90a      	bls.n	80057bc <_free_r+0x48>
 80057a6:	6821      	ldr	r1, [r4, #0]
 80057a8:	1862      	adds	r2, r4, r1
 80057aa:	4293      	cmp	r3, r2
 80057ac:	bf01      	itttt	eq
 80057ae:	681a      	ldreq	r2, [r3, #0]
 80057b0:	685b      	ldreq	r3, [r3, #4]
 80057b2:	1852      	addeq	r2, r2, r1
 80057b4:	6022      	streq	r2, [r4, #0]
 80057b6:	6063      	str	r3, [r4, #4]
 80057b8:	6004      	str	r4, [r0, #0]
 80057ba:	e7ed      	b.n	8005798 <_free_r+0x24>
 80057bc:	461a      	mov	r2, r3
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	b10b      	cbz	r3, 80057c6 <_free_r+0x52>
 80057c2:	42a3      	cmp	r3, r4
 80057c4:	d9fa      	bls.n	80057bc <_free_r+0x48>
 80057c6:	6811      	ldr	r1, [r2, #0]
 80057c8:	1850      	adds	r0, r2, r1
 80057ca:	42a0      	cmp	r0, r4
 80057cc:	d10b      	bne.n	80057e6 <_free_r+0x72>
 80057ce:	6820      	ldr	r0, [r4, #0]
 80057d0:	4401      	add	r1, r0
 80057d2:	1850      	adds	r0, r2, r1
 80057d4:	4283      	cmp	r3, r0
 80057d6:	6011      	str	r1, [r2, #0]
 80057d8:	d1de      	bne.n	8005798 <_free_r+0x24>
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4401      	add	r1, r0
 80057e0:	6011      	str	r1, [r2, #0]
 80057e2:	6053      	str	r3, [r2, #4]
 80057e4:	e7d8      	b.n	8005798 <_free_r+0x24>
 80057e6:	d902      	bls.n	80057ee <_free_r+0x7a>
 80057e8:	230c      	movs	r3, #12
 80057ea:	602b      	str	r3, [r5, #0]
 80057ec:	e7d4      	b.n	8005798 <_free_r+0x24>
 80057ee:	6820      	ldr	r0, [r4, #0]
 80057f0:	1821      	adds	r1, r4, r0
 80057f2:	428b      	cmp	r3, r1
 80057f4:	bf01      	itttt	eq
 80057f6:	6819      	ldreq	r1, [r3, #0]
 80057f8:	685b      	ldreq	r3, [r3, #4]
 80057fa:	1809      	addeq	r1, r1, r0
 80057fc:	6021      	streq	r1, [r4, #0]
 80057fe:	6063      	str	r3, [r4, #4]
 8005800:	6054      	str	r4, [r2, #4]
 8005802:	e7c9      	b.n	8005798 <_free_r+0x24>
 8005804:	bd38      	pop	{r3, r4, r5, pc}
 8005806:	bf00      	nop
 8005808:	200000b0 	.word	0x200000b0

0800580c <_read_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	4611      	mov	r1, r2
 8005814:	2200      	movs	r2, #0
 8005816:	4d05      	ldr	r5, [pc, #20]	; (800582c <_read_r+0x20>)
 8005818:	602a      	str	r2, [r5, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	f7fb ff2a 	bl	8001674 <_read>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_read_r+0x1e>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_read_r+0x1e>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	2000027c 	.word	0x2000027c

08005830 <_fstat_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	2300      	movs	r3, #0
 8005834:	4d06      	ldr	r5, [pc, #24]	; (8005850 <_fstat_r+0x20>)
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	4611      	mov	r1, r2
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f7fb ff5d 	bl	80016fc <_fstat>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	d102      	bne.n	800584c <_fstat_r+0x1c>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	b103      	cbz	r3, 800584c <_fstat_r+0x1c>
 800584a:	6023      	str	r3, [r4, #0]
 800584c:	bd38      	pop	{r3, r4, r5, pc}
 800584e:	bf00      	nop
 8005850:	2000027c 	.word	0x2000027c

08005854 <_isatty_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	2300      	movs	r3, #0
 8005858:	4d05      	ldr	r5, [pc, #20]	; (8005870 <_isatty_r+0x1c>)
 800585a:	4604      	mov	r4, r0
 800585c:	4608      	mov	r0, r1
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	f7fb ff5b 	bl	800171a <_isatty>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_isatty_r+0x1a>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_isatty_r+0x1a>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	2000027c 	.word	0x2000027c

08005874 <_init>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	bf00      	nop
 8005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587a:	bc08      	pop	{r3}
 800587c:	469e      	mov	lr, r3
 800587e:	4770      	bx	lr

08005880 <_fini>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr
